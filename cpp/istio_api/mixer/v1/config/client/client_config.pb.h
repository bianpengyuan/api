// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mixer/v1/config/client/client_config.proto

#ifndef PROTOBUF_INCLUDED_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto
#define PROTOBUF_INCLUDED_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
#include <google/protobuf/duration.pb.h>
#include "mixer/v1/attributes.pb.h"
#include "mixer/v1/config/client/api_spec.pb.h"
#include "mixer/v1/config/client/quota.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto 

namespace protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto
namespace istio {
namespace mixer {
namespace v1 {
namespace config {
namespace client {
class HttpClientConfig;
class HttpClientConfigDefaultTypeInternal;
extern HttpClientConfigDefaultTypeInternal _HttpClientConfig_default_instance_;
class HttpClientConfig_ServiceConfigsEntry_DoNotUse;
class HttpClientConfig_ServiceConfigsEntry_DoNotUseDefaultTypeInternal;
extern HttpClientConfig_ServiceConfigsEntry_DoNotUseDefaultTypeInternal _HttpClientConfig_ServiceConfigsEntry_DoNotUse_default_instance_;
class NetworkFailPolicy;
class NetworkFailPolicyDefaultTypeInternal;
extern NetworkFailPolicyDefaultTypeInternal _NetworkFailPolicy_default_instance_;
class ServiceConfig;
class ServiceConfigDefaultTypeInternal;
extern ServiceConfigDefaultTypeInternal _ServiceConfig_default_instance_;
class TcpClientConfig;
class TcpClientConfigDefaultTypeInternal;
extern TcpClientConfigDefaultTypeInternal _TcpClientConfig_default_instance_;
class TransportConfig;
class TransportConfigDefaultTypeInternal;
extern TransportConfigDefaultTypeInternal _TransportConfig_default_instance_;
}  // namespace client
}  // namespace config
}  // namespace v1
}  // namespace mixer
}  // namespace istio
namespace google {
namespace protobuf {
template<> ::istio::mixer::v1::config::client::HttpClientConfig* Arena::CreateMaybeMessage<::istio::mixer::v1::config::client::HttpClientConfig>(Arena*);
template<> ::istio::mixer::v1::config::client::HttpClientConfig_ServiceConfigsEntry_DoNotUse* Arena::CreateMaybeMessage<::istio::mixer::v1::config::client::HttpClientConfig_ServiceConfigsEntry_DoNotUse>(Arena*);
template<> ::istio::mixer::v1::config::client::NetworkFailPolicy* Arena::CreateMaybeMessage<::istio::mixer::v1::config::client::NetworkFailPolicy>(Arena*);
template<> ::istio::mixer::v1::config::client::ServiceConfig* Arena::CreateMaybeMessage<::istio::mixer::v1::config::client::ServiceConfig>(Arena*);
template<> ::istio::mixer::v1::config::client::TcpClientConfig* Arena::CreateMaybeMessage<::istio::mixer::v1::config::client::TcpClientConfig>(Arena*);
template<> ::istio::mixer::v1::config::client::TransportConfig* Arena::CreateMaybeMessage<::istio::mixer::v1::config::client::TransportConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace istio {
namespace mixer {
namespace v1 {
namespace config {
namespace client {

enum NetworkFailPolicy_FailPolicy {
  NetworkFailPolicy_FailPolicy_FAIL_OPEN = 0,
  NetworkFailPolicy_FailPolicy_FAIL_CLOSE = 1,
  NetworkFailPolicy_FailPolicy_NetworkFailPolicy_FailPolicy_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NetworkFailPolicy_FailPolicy_NetworkFailPolicy_FailPolicy_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NetworkFailPolicy_FailPolicy_IsValid(int value);
const NetworkFailPolicy_FailPolicy NetworkFailPolicy_FailPolicy_FailPolicy_MIN = NetworkFailPolicy_FailPolicy_FAIL_OPEN;
const NetworkFailPolicy_FailPolicy NetworkFailPolicy_FailPolicy_FailPolicy_MAX = NetworkFailPolicy_FailPolicy_FAIL_CLOSE;
const int NetworkFailPolicy_FailPolicy_FailPolicy_ARRAYSIZE = NetworkFailPolicy_FailPolicy_FailPolicy_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetworkFailPolicy_FailPolicy_descriptor();
inline const ::std::string& NetworkFailPolicy_FailPolicy_Name(NetworkFailPolicy_FailPolicy value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetworkFailPolicy_FailPolicy_descriptor(), value);
}
inline bool NetworkFailPolicy_FailPolicy_Parse(
    const ::std::string& name, NetworkFailPolicy_FailPolicy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetworkFailPolicy_FailPolicy>(
    NetworkFailPolicy_FailPolicy_descriptor(), name, value);
}
// ===================================================================

class NetworkFailPolicy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.config.client.NetworkFailPolicy) */ {
 public:
  NetworkFailPolicy();
  virtual ~NetworkFailPolicy();

  NetworkFailPolicy(const NetworkFailPolicy& from);

  inline NetworkFailPolicy& operator=(const NetworkFailPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetworkFailPolicy(NetworkFailPolicy&& from) noexcept
    : NetworkFailPolicy() {
    *this = ::std::move(from);
  }

  inline NetworkFailPolicy& operator=(NetworkFailPolicy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkFailPolicy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkFailPolicy* internal_default_instance() {
    return reinterpret_cast<const NetworkFailPolicy*>(
               &_NetworkFailPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NetworkFailPolicy* other);
  friend void swap(NetworkFailPolicy& a, NetworkFailPolicy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkFailPolicy* New() const final {
    return CreateMaybeMessage<NetworkFailPolicy>(NULL);
  }

  NetworkFailPolicy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NetworkFailPolicy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NetworkFailPolicy& from);
  void MergeFrom(const NetworkFailPolicy& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkFailPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NetworkFailPolicy_FailPolicy FailPolicy;
  static const FailPolicy FAIL_OPEN =
    NetworkFailPolicy_FailPolicy_FAIL_OPEN;
  static const FailPolicy FAIL_CLOSE =
    NetworkFailPolicy_FailPolicy_FAIL_CLOSE;
  static inline bool FailPolicy_IsValid(int value) {
    return NetworkFailPolicy_FailPolicy_IsValid(value);
  }
  static const FailPolicy FailPolicy_MIN =
    NetworkFailPolicy_FailPolicy_FailPolicy_MIN;
  static const FailPolicy FailPolicy_MAX =
    NetworkFailPolicy_FailPolicy_FailPolicy_MAX;
  static const int FailPolicy_ARRAYSIZE =
    NetworkFailPolicy_FailPolicy_FailPolicy_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FailPolicy_descriptor() {
    return NetworkFailPolicy_FailPolicy_descriptor();
  }
  static inline const ::std::string& FailPolicy_Name(FailPolicy value) {
    return NetworkFailPolicy_FailPolicy_Name(value);
  }
  static inline bool FailPolicy_Parse(const ::std::string& name,
      FailPolicy* value) {
    return NetworkFailPolicy_FailPolicy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.protobuf.Duration base_retry_wait = 3;
  bool has_base_retry_wait() const;
  void clear_base_retry_wait();
  static const int kBaseRetryWaitFieldNumber = 3;
  private:
  const ::google::protobuf::Duration& _internal_base_retry_wait() const;
  public:
  const ::google::protobuf::Duration& base_retry_wait() const;
  ::google::protobuf::Duration* release_base_retry_wait();
  ::google::protobuf::Duration* mutable_base_retry_wait();
  void set_allocated_base_retry_wait(::google::protobuf::Duration* base_retry_wait);

  // .google.protobuf.Duration max_retry_wait = 4;
  bool has_max_retry_wait() const;
  void clear_max_retry_wait();
  static const int kMaxRetryWaitFieldNumber = 4;
  private:
  const ::google::protobuf::Duration& _internal_max_retry_wait() const;
  public:
  const ::google::protobuf::Duration& max_retry_wait() const;
  ::google::protobuf::Duration* release_max_retry_wait();
  ::google::protobuf::Duration* mutable_max_retry_wait();
  void set_allocated_max_retry_wait(::google::protobuf::Duration* max_retry_wait);

  // .istio.mixer.v1.config.client.NetworkFailPolicy.FailPolicy policy = 1;
  void clear_policy();
  static const int kPolicyFieldNumber = 1;
  ::istio::mixer::v1::config::client::NetworkFailPolicy_FailPolicy policy() const;
  void set_policy(::istio::mixer::v1::config::client::NetworkFailPolicy_FailPolicy value);

  // uint32 max_retry = 2;
  void clear_max_retry();
  static const int kMaxRetryFieldNumber = 2;
  ::google::protobuf::uint32 max_retry() const;
  void set_max_retry(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.config.client.NetworkFailPolicy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Duration* base_retry_wait_;
  ::google::protobuf::Duration* max_retry_wait_;
  int policy_;
  ::google::protobuf::uint32 max_retry_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.config.client.ServiceConfig) */ {
 public:
  ServiceConfig();
  virtual ~ServiceConfig();

  ServiceConfig(const ServiceConfig& from);

  inline ServiceConfig& operator=(const ServiceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceConfig(ServiceConfig&& from) noexcept
    : ServiceConfig() {
    *this = ::std::move(from);
  }

  inline ServiceConfig& operator=(ServiceConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceConfig* internal_default_instance() {
    return reinterpret_cast<const ServiceConfig*>(
               &_ServiceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ServiceConfig* other);
  friend void swap(ServiceConfig& a, ServiceConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceConfig* New() const final {
    return CreateMaybeMessage<ServiceConfig>(NULL);
  }

  ServiceConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServiceConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServiceConfig& from);
  void MergeFrom(const ServiceConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .istio.mixer.v1.config.client.HTTPAPISpec http_api_spec = 4;
  int http_api_spec_size() const;
  void clear_http_api_spec();
  static const int kHttpApiSpecFieldNumber = 4;
  ::istio::mixer::v1::config::client::HTTPAPISpec* mutable_http_api_spec(int index);
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::HTTPAPISpec >*
      mutable_http_api_spec();
  const ::istio::mixer::v1::config::client::HTTPAPISpec& http_api_spec(int index) const;
  ::istio::mixer::v1::config::client::HTTPAPISpec* add_http_api_spec();
  const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::HTTPAPISpec >&
      http_api_spec() const;

  // repeated .istio.mixer.v1.config.client.QuotaSpec quota_spec = 5;
  int quota_spec_size() const;
  void clear_quota_spec();
  static const int kQuotaSpecFieldNumber = 5;
  ::istio::mixer::v1::config::client::QuotaSpec* mutable_quota_spec(int index);
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::QuotaSpec >*
      mutable_quota_spec();
  const ::istio::mixer::v1::config::client::QuotaSpec& quota_spec(int index) const;
  ::istio::mixer::v1::config::client::QuotaSpec* add_quota_spec();
  const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::QuotaSpec >&
      quota_spec() const;

  // .istio.mixer.v1.Attributes mixer_attributes = 3;
  bool has_mixer_attributes() const;
  void clear_mixer_attributes();
  static const int kMixerAttributesFieldNumber = 3;
  private:
  const ::istio::mixer::v1::Attributes& _internal_mixer_attributes() const;
  public:
  const ::istio::mixer::v1::Attributes& mixer_attributes() const;
  ::istio::mixer::v1::Attributes* release_mixer_attributes();
  ::istio::mixer::v1::Attributes* mutable_mixer_attributes();
  void set_allocated_mixer_attributes(::istio::mixer::v1::Attributes* mixer_attributes);

  // .istio.mixer.v1.config.client.NetworkFailPolicy network_fail_policy = 7;
  bool has_network_fail_policy() const;
  void clear_network_fail_policy();
  static const int kNetworkFailPolicyFieldNumber = 7;
  private:
  const ::istio::mixer::v1::config::client::NetworkFailPolicy& _internal_network_fail_policy() const;
  public:
  const ::istio::mixer::v1::config::client::NetworkFailPolicy& network_fail_policy() const;
  ::istio::mixer::v1::config::client::NetworkFailPolicy* release_network_fail_policy();
  ::istio::mixer::v1::config::client::NetworkFailPolicy* mutable_network_fail_policy();
  void set_allocated_network_fail_policy(::istio::mixer::v1::config::client::NetworkFailPolicy* network_fail_policy);

  // .istio.mixer.v1.Attributes forward_attributes = 8;
  bool has_forward_attributes() const;
  void clear_forward_attributes();
  static const int kForwardAttributesFieldNumber = 8;
  private:
  const ::istio::mixer::v1::Attributes& _internal_forward_attributes() const;
  public:
  const ::istio::mixer::v1::Attributes& forward_attributes() const;
  ::istio::mixer::v1::Attributes* release_forward_attributes();
  ::istio::mixer::v1::Attributes* mutable_forward_attributes();
  void set_allocated_forward_attributes(::istio::mixer::v1::Attributes* forward_attributes);

  // bool disable_check_calls = 1;
  void clear_disable_check_calls();
  static const int kDisableCheckCallsFieldNumber = 1;
  bool disable_check_calls() const;
  void set_disable_check_calls(bool value);

  // bool disable_report_calls = 2;
  void clear_disable_report_calls();
  static const int kDisableReportCallsFieldNumber = 2;
  bool disable_report_calls() const;
  void set_disable_report_calls(bool value);

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.config.client.ServiceConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::HTTPAPISpec > http_api_spec_;
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::QuotaSpec > quota_spec_;
  ::istio::mixer::v1::Attributes* mixer_attributes_;
  ::istio::mixer::v1::config::client::NetworkFailPolicy* network_fail_policy_;
  ::istio::mixer::v1::Attributes* forward_attributes_;
  bool disable_check_calls_;
  bool disable_report_calls_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransportConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.config.client.TransportConfig) */ {
 public:
  TransportConfig();
  virtual ~TransportConfig();

  TransportConfig(const TransportConfig& from);

  inline TransportConfig& operator=(const TransportConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransportConfig(TransportConfig&& from) noexcept
    : TransportConfig() {
    *this = ::std::move(from);
  }

  inline TransportConfig& operator=(TransportConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransportConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransportConfig* internal_default_instance() {
    return reinterpret_cast<const TransportConfig*>(
               &_TransportConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TransportConfig* other);
  friend void swap(TransportConfig& a, TransportConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransportConfig* New() const final {
    return CreateMaybeMessage<TransportConfig>(NULL);
  }

  TransportConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransportConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransportConfig& from);
  void MergeFrom(const TransportConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string check_cluster = 6;
  void clear_check_cluster();
  static const int kCheckClusterFieldNumber = 6;
  const ::std::string& check_cluster() const;
  void set_check_cluster(const ::std::string& value);
  #if LANG_CXX11
  void set_check_cluster(::std::string&& value);
  #endif
  void set_check_cluster(const char* value);
  void set_check_cluster(const char* value, size_t size);
  ::std::string* mutable_check_cluster();
  ::std::string* release_check_cluster();
  void set_allocated_check_cluster(::std::string* check_cluster);

  // string report_cluster = 7;
  void clear_report_cluster();
  static const int kReportClusterFieldNumber = 7;
  const ::std::string& report_cluster() const;
  void set_report_cluster(const ::std::string& value);
  #if LANG_CXX11
  void set_report_cluster(::std::string&& value);
  #endif
  void set_report_cluster(const char* value);
  void set_report_cluster(const char* value, size_t size);
  ::std::string* mutable_report_cluster();
  ::std::string* release_report_cluster();
  void set_allocated_report_cluster(::std::string* report_cluster);

  // .istio.mixer.v1.config.client.NetworkFailPolicy network_fail_policy = 4;
  bool has_network_fail_policy() const;
  void clear_network_fail_policy();
  static const int kNetworkFailPolicyFieldNumber = 4;
  private:
  const ::istio::mixer::v1::config::client::NetworkFailPolicy& _internal_network_fail_policy() const;
  public:
  const ::istio::mixer::v1::config::client::NetworkFailPolicy& network_fail_policy() const;
  ::istio::mixer::v1::config::client::NetworkFailPolicy* release_network_fail_policy();
  ::istio::mixer::v1::config::client::NetworkFailPolicy* mutable_network_fail_policy();
  void set_allocated_network_fail_policy(::istio::mixer::v1::config::client::NetworkFailPolicy* network_fail_policy);

  // .google.protobuf.Duration stats_update_interval = 5;
  bool has_stats_update_interval() const;
  void clear_stats_update_interval();
  static const int kStatsUpdateIntervalFieldNumber = 5;
  private:
  const ::google::protobuf::Duration& _internal_stats_update_interval() const;
  public:
  const ::google::protobuf::Duration& stats_update_interval() const;
  ::google::protobuf::Duration* release_stats_update_interval();
  ::google::protobuf::Duration* mutable_stats_update_interval();
  void set_allocated_stats_update_interval(::google::protobuf::Duration* stats_update_interval);

  // .istio.mixer.v1.Attributes attributes_for_mixer_proxy = 8;
  bool has_attributes_for_mixer_proxy() const;
  void clear_attributes_for_mixer_proxy();
  static const int kAttributesForMixerProxyFieldNumber = 8;
  private:
  const ::istio::mixer::v1::Attributes& _internal_attributes_for_mixer_proxy() const;
  public:
  const ::istio::mixer::v1::Attributes& attributes_for_mixer_proxy() const;
  ::istio::mixer::v1::Attributes* release_attributes_for_mixer_proxy();
  ::istio::mixer::v1::Attributes* mutable_attributes_for_mixer_proxy();
  void set_allocated_attributes_for_mixer_proxy(::istio::mixer::v1::Attributes* attributes_for_mixer_proxy);

  // bool disable_check_cache = 1;
  void clear_disable_check_cache();
  static const int kDisableCheckCacheFieldNumber = 1;
  bool disable_check_cache() const;
  void set_disable_check_cache(bool value);

  // bool disable_quota_cache = 2;
  void clear_disable_quota_cache();
  static const int kDisableQuotaCacheFieldNumber = 2;
  bool disable_quota_cache() const;
  void set_disable_quota_cache(bool value);

  // bool disable_report_batch = 3;
  void clear_disable_report_batch();
  static const int kDisableReportBatchFieldNumber = 3;
  bool disable_report_batch() const;
  void set_disable_report_batch(bool value);

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.config.client.TransportConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr check_cluster_;
  ::google::protobuf::internal::ArenaStringPtr report_cluster_;
  ::istio::mixer::v1::config::client::NetworkFailPolicy* network_fail_policy_;
  ::google::protobuf::Duration* stats_update_interval_;
  ::istio::mixer::v1::Attributes* attributes_for_mixer_proxy_;
  bool disable_check_cache_;
  bool disable_quota_cache_;
  bool disable_report_batch_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HttpClientConfig_ServiceConfigsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<HttpClientConfig_ServiceConfigsEntry_DoNotUse, 
    ::std::string, ::istio::mixer::v1::config::client::ServiceConfig,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<HttpClientConfig_ServiceConfigsEntry_DoNotUse, 
    ::std::string, ::istio::mixer::v1::config::client::ServiceConfig,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  HttpClientConfig_ServiceConfigsEntry_DoNotUse();
  HttpClientConfig_ServiceConfigsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const HttpClientConfig_ServiceConfigsEntry_DoNotUse& other);
  static const HttpClientConfig_ServiceConfigsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HttpClientConfig_ServiceConfigsEntry_DoNotUse*>(&_HttpClientConfig_ServiceConfigsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class HttpClientConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.config.client.HttpClientConfig) */ {
 public:
  HttpClientConfig();
  virtual ~HttpClientConfig();

  HttpClientConfig(const HttpClientConfig& from);

  inline HttpClientConfig& operator=(const HttpClientConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HttpClientConfig(HttpClientConfig&& from) noexcept
    : HttpClientConfig() {
    *this = ::std::move(from);
  }

  inline HttpClientConfig& operator=(HttpClientConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpClientConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HttpClientConfig* internal_default_instance() {
    return reinterpret_cast<const HttpClientConfig*>(
               &_HttpClientConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(HttpClientConfig* other);
  friend void swap(HttpClientConfig& a, HttpClientConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HttpClientConfig* New() const final {
    return CreateMaybeMessage<HttpClientConfig>(NULL);
  }

  HttpClientConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HttpClientConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HttpClientConfig& from);
  void MergeFrom(const HttpClientConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpClientConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .istio.mixer.v1.config.client.ServiceConfig> service_configs = 2;
  int service_configs_size() const;
  void clear_service_configs();
  static const int kServiceConfigsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::istio::mixer::v1::config::client::ServiceConfig >&
      service_configs() const;
  ::google::protobuf::Map< ::std::string, ::istio::mixer::v1::config::client::ServiceConfig >*
      mutable_service_configs();

  // string default_destination_service = 3;
  void clear_default_destination_service();
  static const int kDefaultDestinationServiceFieldNumber = 3;
  const ::std::string& default_destination_service() const;
  void set_default_destination_service(const ::std::string& value);
  #if LANG_CXX11
  void set_default_destination_service(::std::string&& value);
  #endif
  void set_default_destination_service(const char* value);
  void set_default_destination_service(const char* value, size_t size);
  ::std::string* mutable_default_destination_service();
  ::std::string* release_default_destination_service();
  void set_allocated_default_destination_service(::std::string* default_destination_service);

  // .istio.mixer.v1.config.client.TransportConfig transport = 1;
  bool has_transport() const;
  void clear_transport();
  static const int kTransportFieldNumber = 1;
  private:
  const ::istio::mixer::v1::config::client::TransportConfig& _internal_transport() const;
  public:
  const ::istio::mixer::v1::config::client::TransportConfig& transport() const;
  ::istio::mixer::v1::config::client::TransportConfig* release_transport();
  ::istio::mixer::v1::config::client::TransportConfig* mutable_transport();
  void set_allocated_transport(::istio::mixer::v1::config::client::TransportConfig* transport);

  // .istio.mixer.v1.Attributes mixer_attributes = 4;
  bool has_mixer_attributes() const;
  void clear_mixer_attributes();
  static const int kMixerAttributesFieldNumber = 4;
  private:
  const ::istio::mixer::v1::Attributes& _internal_mixer_attributes() const;
  public:
  const ::istio::mixer::v1::Attributes& mixer_attributes() const;
  ::istio::mixer::v1::Attributes* release_mixer_attributes();
  ::istio::mixer::v1::Attributes* mutable_mixer_attributes();
  void set_allocated_mixer_attributes(::istio::mixer::v1::Attributes* mixer_attributes);

  // .istio.mixer.v1.Attributes forward_attributes = 5;
  bool has_forward_attributes() const;
  void clear_forward_attributes();
  static const int kForwardAttributesFieldNumber = 5;
  private:
  const ::istio::mixer::v1::Attributes& _internal_forward_attributes() const;
  public:
  const ::istio::mixer::v1::Attributes& forward_attributes() const;
  ::istio::mixer::v1::Attributes* release_forward_attributes();
  ::istio::mixer::v1::Attributes* mutable_forward_attributes();
  void set_allocated_forward_attributes(::istio::mixer::v1::Attributes* forward_attributes);

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.config.client.HttpClientConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      HttpClientConfig_ServiceConfigsEntry_DoNotUse,
      ::std::string, ::istio::mixer::v1::config::client::ServiceConfig,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > service_configs_;
  ::google::protobuf::internal::ArenaStringPtr default_destination_service_;
  ::istio::mixer::v1::config::client::TransportConfig* transport_;
  ::istio::mixer::v1::Attributes* mixer_attributes_;
  ::istio::mixer::v1::Attributes* forward_attributes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TcpClientConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.config.client.TcpClientConfig) */ {
 public:
  TcpClientConfig();
  virtual ~TcpClientConfig();

  TcpClientConfig(const TcpClientConfig& from);

  inline TcpClientConfig& operator=(const TcpClientConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TcpClientConfig(TcpClientConfig&& from) noexcept
    : TcpClientConfig() {
    *this = ::std::move(from);
  }

  inline TcpClientConfig& operator=(TcpClientConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TcpClientConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TcpClientConfig* internal_default_instance() {
    return reinterpret_cast<const TcpClientConfig*>(
               &_TcpClientConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TcpClientConfig* other);
  friend void swap(TcpClientConfig& a, TcpClientConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TcpClientConfig* New() const final {
    return CreateMaybeMessage<TcpClientConfig>(NULL);
  }

  TcpClientConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TcpClientConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TcpClientConfig& from);
  void MergeFrom(const TcpClientConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TcpClientConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .istio.mixer.v1.config.client.TransportConfig transport = 1;
  bool has_transport() const;
  void clear_transport();
  static const int kTransportFieldNumber = 1;
  private:
  const ::istio::mixer::v1::config::client::TransportConfig& _internal_transport() const;
  public:
  const ::istio::mixer::v1::config::client::TransportConfig& transport() const;
  ::istio::mixer::v1::config::client::TransportConfig* release_transport();
  ::istio::mixer::v1::config::client::TransportConfig* mutable_transport();
  void set_allocated_transport(::istio::mixer::v1::config::client::TransportConfig* transport);

  // .istio.mixer.v1.Attributes mixer_attributes = 2;
  bool has_mixer_attributes() const;
  void clear_mixer_attributes();
  static const int kMixerAttributesFieldNumber = 2;
  private:
  const ::istio::mixer::v1::Attributes& _internal_mixer_attributes() const;
  public:
  const ::istio::mixer::v1::Attributes& mixer_attributes() const;
  ::istio::mixer::v1::Attributes* release_mixer_attributes();
  ::istio::mixer::v1::Attributes* mutable_mixer_attributes();
  void set_allocated_mixer_attributes(::istio::mixer::v1::Attributes* mixer_attributes);

  // .istio.mixer.v1.config.client.QuotaSpec connection_quota_spec = 5;
  bool has_connection_quota_spec() const;
  void clear_connection_quota_spec();
  static const int kConnectionQuotaSpecFieldNumber = 5;
  private:
  const ::istio::mixer::v1::config::client::QuotaSpec& _internal_connection_quota_spec() const;
  public:
  const ::istio::mixer::v1::config::client::QuotaSpec& connection_quota_spec() const;
  ::istio::mixer::v1::config::client::QuotaSpec* release_connection_quota_spec();
  ::istio::mixer::v1::config::client::QuotaSpec* mutable_connection_quota_spec();
  void set_allocated_connection_quota_spec(::istio::mixer::v1::config::client::QuotaSpec* connection_quota_spec);

  // .google.protobuf.Duration report_interval = 6;
  bool has_report_interval() const;
  void clear_report_interval();
  static const int kReportIntervalFieldNumber = 6;
  private:
  const ::google::protobuf::Duration& _internal_report_interval() const;
  public:
  const ::google::protobuf::Duration& report_interval() const;
  ::google::protobuf::Duration* release_report_interval();
  ::google::protobuf::Duration* mutable_report_interval();
  void set_allocated_report_interval(::google::protobuf::Duration* report_interval);

  // bool disable_check_calls = 3;
  void clear_disable_check_calls();
  static const int kDisableCheckCallsFieldNumber = 3;
  bool disable_check_calls() const;
  void set_disable_check_calls(bool value);

  // bool disable_report_calls = 4;
  void clear_disable_report_calls();
  static const int kDisableReportCallsFieldNumber = 4;
  bool disable_report_calls() const;
  void set_disable_report_calls(bool value);

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.config.client.TcpClientConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::istio::mixer::v1::config::client::TransportConfig* transport_;
  ::istio::mixer::v1::Attributes* mixer_attributes_;
  ::istio::mixer::v1::config::client::QuotaSpec* connection_quota_spec_;
  ::google::protobuf::Duration* report_interval_;
  bool disable_check_calls_;
  bool disable_report_calls_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetworkFailPolicy

// .istio.mixer.v1.config.client.NetworkFailPolicy.FailPolicy policy = 1;
inline void NetworkFailPolicy::clear_policy() {
  policy_ = 0;
}
inline ::istio::mixer::v1::config::client::NetworkFailPolicy_FailPolicy NetworkFailPolicy::policy() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.NetworkFailPolicy.policy)
  return static_cast< ::istio::mixer::v1::config::client::NetworkFailPolicy_FailPolicy >(policy_);
}
inline void NetworkFailPolicy::set_policy(::istio::mixer::v1::config::client::NetworkFailPolicy_FailPolicy value) {
  
  policy_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.NetworkFailPolicy.policy)
}

// uint32 max_retry = 2;
inline void NetworkFailPolicy::clear_max_retry() {
  max_retry_ = 0u;
}
inline ::google::protobuf::uint32 NetworkFailPolicy::max_retry() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.NetworkFailPolicy.max_retry)
  return max_retry_;
}
inline void NetworkFailPolicy::set_max_retry(::google::protobuf::uint32 value) {
  
  max_retry_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.NetworkFailPolicy.max_retry)
}

// .google.protobuf.Duration base_retry_wait = 3;
inline bool NetworkFailPolicy::has_base_retry_wait() const {
  return this != internal_default_instance() && base_retry_wait_ != NULL;
}
inline const ::google::protobuf::Duration& NetworkFailPolicy::_internal_base_retry_wait() const {
  return *base_retry_wait_;
}
inline const ::google::protobuf::Duration& NetworkFailPolicy::base_retry_wait() const {
  const ::google::protobuf::Duration* p = base_retry_wait_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.NetworkFailPolicy.base_retry_wait)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* NetworkFailPolicy::release_base_retry_wait() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.NetworkFailPolicy.base_retry_wait)
  
  ::google::protobuf::Duration* temp = base_retry_wait_;
  base_retry_wait_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* NetworkFailPolicy::mutable_base_retry_wait() {
  
  if (base_retry_wait_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    base_retry_wait_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.NetworkFailPolicy.base_retry_wait)
  return base_retry_wait_;
}
inline void NetworkFailPolicy::set_allocated_base_retry_wait(::google::protobuf::Duration* base_retry_wait) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(base_retry_wait_);
  }
  if (base_retry_wait) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(base_retry_wait)->GetArena();
    if (message_arena != submessage_arena) {
      base_retry_wait = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base_retry_wait, submessage_arena);
    }
    
  } else {
    
  }
  base_retry_wait_ = base_retry_wait;
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.NetworkFailPolicy.base_retry_wait)
}

// .google.protobuf.Duration max_retry_wait = 4;
inline bool NetworkFailPolicy::has_max_retry_wait() const {
  return this != internal_default_instance() && max_retry_wait_ != NULL;
}
inline const ::google::protobuf::Duration& NetworkFailPolicy::_internal_max_retry_wait() const {
  return *max_retry_wait_;
}
inline const ::google::protobuf::Duration& NetworkFailPolicy::max_retry_wait() const {
  const ::google::protobuf::Duration* p = max_retry_wait_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.NetworkFailPolicy.max_retry_wait)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* NetworkFailPolicy::release_max_retry_wait() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.NetworkFailPolicy.max_retry_wait)
  
  ::google::protobuf::Duration* temp = max_retry_wait_;
  max_retry_wait_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* NetworkFailPolicy::mutable_max_retry_wait() {
  
  if (max_retry_wait_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    max_retry_wait_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.NetworkFailPolicy.max_retry_wait)
  return max_retry_wait_;
}
inline void NetworkFailPolicy::set_allocated_max_retry_wait(::google::protobuf::Duration* max_retry_wait) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_retry_wait_);
  }
  if (max_retry_wait) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(max_retry_wait)->GetArena();
    if (message_arena != submessage_arena) {
      max_retry_wait = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_retry_wait, submessage_arena);
    }
    
  } else {
    
  }
  max_retry_wait_ = max_retry_wait;
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.NetworkFailPolicy.max_retry_wait)
}

// -------------------------------------------------------------------

// ServiceConfig

// bool disable_check_calls = 1;
inline void ServiceConfig::clear_disable_check_calls() {
  disable_check_calls_ = false;
}
inline bool ServiceConfig::disable_check_calls() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.ServiceConfig.disable_check_calls)
  return disable_check_calls_;
}
inline void ServiceConfig::set_disable_check_calls(bool value) {
  
  disable_check_calls_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.ServiceConfig.disable_check_calls)
}

// bool disable_report_calls = 2;
inline void ServiceConfig::clear_disable_report_calls() {
  disable_report_calls_ = false;
}
inline bool ServiceConfig::disable_report_calls() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.ServiceConfig.disable_report_calls)
  return disable_report_calls_;
}
inline void ServiceConfig::set_disable_report_calls(bool value) {
  
  disable_report_calls_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.ServiceConfig.disable_report_calls)
}

// .istio.mixer.v1.Attributes mixer_attributes = 3;
inline bool ServiceConfig::has_mixer_attributes() const {
  return this != internal_default_instance() && mixer_attributes_ != NULL;
}
inline const ::istio::mixer::v1::Attributes& ServiceConfig::_internal_mixer_attributes() const {
  return *mixer_attributes_;
}
inline const ::istio::mixer::v1::Attributes& ServiceConfig::mixer_attributes() const {
  const ::istio::mixer::v1::Attributes* p = mixer_attributes_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.ServiceConfig.mixer_attributes)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::mixer::v1::Attributes*>(
      &::istio::mixer::v1::_Attributes_default_instance_);
}
inline ::istio::mixer::v1::Attributes* ServiceConfig::release_mixer_attributes() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.ServiceConfig.mixer_attributes)
  
  ::istio::mixer::v1::Attributes* temp = mixer_attributes_;
  mixer_attributes_ = NULL;
  return temp;
}
inline ::istio::mixer::v1::Attributes* ServiceConfig::mutable_mixer_attributes() {
  
  if (mixer_attributes_ == NULL) {
    auto* p = CreateMaybeMessage<::istio::mixer::v1::Attributes>(GetArenaNoVirtual());
    mixer_attributes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.ServiceConfig.mixer_attributes)
  return mixer_attributes_;
}
inline void ServiceConfig::set_allocated_mixer_attributes(::istio::mixer::v1::Attributes* mixer_attributes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mixer_attributes_);
  }
  if (mixer_attributes) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(mixer_attributes)->GetArena();
    if (message_arena != submessage_arena) {
      mixer_attributes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mixer_attributes, submessage_arena);
    }
    
  } else {
    
  }
  mixer_attributes_ = mixer_attributes;
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.ServiceConfig.mixer_attributes)
}

// repeated .istio.mixer.v1.config.client.HTTPAPISpec http_api_spec = 4;
inline int ServiceConfig::http_api_spec_size() const {
  return http_api_spec_.size();
}
inline ::istio::mixer::v1::config::client::HTTPAPISpec* ServiceConfig::mutable_http_api_spec(int index) {
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.ServiceConfig.http_api_spec)
  return http_api_spec_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::HTTPAPISpec >*
ServiceConfig::mutable_http_api_spec() {
  // @@protoc_insertion_point(field_mutable_list:istio.mixer.v1.config.client.ServiceConfig.http_api_spec)
  return &http_api_spec_;
}
inline const ::istio::mixer::v1::config::client::HTTPAPISpec& ServiceConfig::http_api_spec(int index) const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.ServiceConfig.http_api_spec)
  return http_api_spec_.Get(index);
}
inline ::istio::mixer::v1::config::client::HTTPAPISpec* ServiceConfig::add_http_api_spec() {
  // @@protoc_insertion_point(field_add:istio.mixer.v1.config.client.ServiceConfig.http_api_spec)
  return http_api_spec_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::HTTPAPISpec >&
ServiceConfig::http_api_spec() const {
  // @@protoc_insertion_point(field_list:istio.mixer.v1.config.client.ServiceConfig.http_api_spec)
  return http_api_spec_;
}

// repeated .istio.mixer.v1.config.client.QuotaSpec quota_spec = 5;
inline int ServiceConfig::quota_spec_size() const {
  return quota_spec_.size();
}
inline ::istio::mixer::v1::config::client::QuotaSpec* ServiceConfig::mutable_quota_spec(int index) {
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.ServiceConfig.quota_spec)
  return quota_spec_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::QuotaSpec >*
ServiceConfig::mutable_quota_spec() {
  // @@protoc_insertion_point(field_mutable_list:istio.mixer.v1.config.client.ServiceConfig.quota_spec)
  return &quota_spec_;
}
inline const ::istio::mixer::v1::config::client::QuotaSpec& ServiceConfig::quota_spec(int index) const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.ServiceConfig.quota_spec)
  return quota_spec_.Get(index);
}
inline ::istio::mixer::v1::config::client::QuotaSpec* ServiceConfig::add_quota_spec() {
  // @@protoc_insertion_point(field_add:istio.mixer.v1.config.client.ServiceConfig.quota_spec)
  return quota_spec_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::config::client::QuotaSpec >&
ServiceConfig::quota_spec() const {
  // @@protoc_insertion_point(field_list:istio.mixer.v1.config.client.ServiceConfig.quota_spec)
  return quota_spec_;
}

// .istio.mixer.v1.config.client.NetworkFailPolicy network_fail_policy = 7;
inline bool ServiceConfig::has_network_fail_policy() const {
  return this != internal_default_instance() && network_fail_policy_ != NULL;
}
inline void ServiceConfig::clear_network_fail_policy() {
  if (GetArenaNoVirtual() == NULL && network_fail_policy_ != NULL) {
    delete network_fail_policy_;
  }
  network_fail_policy_ = NULL;
}
inline const ::istio::mixer::v1::config::client::NetworkFailPolicy& ServiceConfig::_internal_network_fail_policy() const {
  return *network_fail_policy_;
}
inline const ::istio::mixer::v1::config::client::NetworkFailPolicy& ServiceConfig::network_fail_policy() const {
  const ::istio::mixer::v1::config::client::NetworkFailPolicy* p = network_fail_policy_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.ServiceConfig.network_fail_policy)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::mixer::v1::config::client::NetworkFailPolicy*>(
      &::istio::mixer::v1::config::client::_NetworkFailPolicy_default_instance_);
}
inline ::istio::mixer::v1::config::client::NetworkFailPolicy* ServiceConfig::release_network_fail_policy() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.ServiceConfig.network_fail_policy)
  
  ::istio::mixer::v1::config::client::NetworkFailPolicy* temp = network_fail_policy_;
  network_fail_policy_ = NULL;
  return temp;
}
inline ::istio::mixer::v1::config::client::NetworkFailPolicy* ServiceConfig::mutable_network_fail_policy() {
  
  if (network_fail_policy_ == NULL) {
    auto* p = CreateMaybeMessage<::istio::mixer::v1::config::client::NetworkFailPolicy>(GetArenaNoVirtual());
    network_fail_policy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.ServiceConfig.network_fail_policy)
  return network_fail_policy_;
}
inline void ServiceConfig::set_allocated_network_fail_policy(::istio::mixer::v1::config::client::NetworkFailPolicy* network_fail_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete network_fail_policy_;
  }
  if (network_fail_policy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      network_fail_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, network_fail_policy, submessage_arena);
    }
    
  } else {
    
  }
  network_fail_policy_ = network_fail_policy;
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.ServiceConfig.network_fail_policy)
}

// .istio.mixer.v1.Attributes forward_attributes = 8;
inline bool ServiceConfig::has_forward_attributes() const {
  return this != internal_default_instance() && forward_attributes_ != NULL;
}
inline const ::istio::mixer::v1::Attributes& ServiceConfig::_internal_forward_attributes() const {
  return *forward_attributes_;
}
inline const ::istio::mixer::v1::Attributes& ServiceConfig::forward_attributes() const {
  const ::istio::mixer::v1::Attributes* p = forward_attributes_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.ServiceConfig.forward_attributes)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::mixer::v1::Attributes*>(
      &::istio::mixer::v1::_Attributes_default_instance_);
}
inline ::istio::mixer::v1::Attributes* ServiceConfig::release_forward_attributes() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.ServiceConfig.forward_attributes)
  
  ::istio::mixer::v1::Attributes* temp = forward_attributes_;
  forward_attributes_ = NULL;
  return temp;
}
inline ::istio::mixer::v1::Attributes* ServiceConfig::mutable_forward_attributes() {
  
  if (forward_attributes_ == NULL) {
    auto* p = CreateMaybeMessage<::istio::mixer::v1::Attributes>(GetArenaNoVirtual());
    forward_attributes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.ServiceConfig.forward_attributes)
  return forward_attributes_;
}
inline void ServiceConfig::set_allocated_forward_attributes(::istio::mixer::v1::Attributes* forward_attributes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(forward_attributes_);
  }
  if (forward_attributes) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(forward_attributes)->GetArena();
    if (message_arena != submessage_arena) {
      forward_attributes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, forward_attributes, submessage_arena);
    }
    
  } else {
    
  }
  forward_attributes_ = forward_attributes;
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.ServiceConfig.forward_attributes)
}

// -------------------------------------------------------------------

// TransportConfig

// bool disable_check_cache = 1;
inline void TransportConfig::clear_disable_check_cache() {
  disable_check_cache_ = false;
}
inline bool TransportConfig::disable_check_cache() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.TransportConfig.disable_check_cache)
  return disable_check_cache_;
}
inline void TransportConfig::set_disable_check_cache(bool value) {
  
  disable_check_cache_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.TransportConfig.disable_check_cache)
}

// bool disable_quota_cache = 2;
inline void TransportConfig::clear_disable_quota_cache() {
  disable_quota_cache_ = false;
}
inline bool TransportConfig::disable_quota_cache() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.TransportConfig.disable_quota_cache)
  return disable_quota_cache_;
}
inline void TransportConfig::set_disable_quota_cache(bool value) {
  
  disable_quota_cache_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.TransportConfig.disable_quota_cache)
}

// bool disable_report_batch = 3;
inline void TransportConfig::clear_disable_report_batch() {
  disable_report_batch_ = false;
}
inline bool TransportConfig::disable_report_batch() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.TransportConfig.disable_report_batch)
  return disable_report_batch_;
}
inline void TransportConfig::set_disable_report_batch(bool value) {
  
  disable_report_batch_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.TransportConfig.disable_report_batch)
}

// .istio.mixer.v1.config.client.NetworkFailPolicy network_fail_policy = 4;
inline bool TransportConfig::has_network_fail_policy() const {
  return this != internal_default_instance() && network_fail_policy_ != NULL;
}
inline void TransportConfig::clear_network_fail_policy() {
  if (GetArenaNoVirtual() == NULL && network_fail_policy_ != NULL) {
    delete network_fail_policy_;
  }
  network_fail_policy_ = NULL;
}
inline const ::istio::mixer::v1::config::client::NetworkFailPolicy& TransportConfig::_internal_network_fail_policy() const {
  return *network_fail_policy_;
}
inline const ::istio::mixer::v1::config::client::NetworkFailPolicy& TransportConfig::network_fail_policy() const {
  const ::istio::mixer::v1::config::client::NetworkFailPolicy* p = network_fail_policy_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.TransportConfig.network_fail_policy)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::mixer::v1::config::client::NetworkFailPolicy*>(
      &::istio::mixer::v1::config::client::_NetworkFailPolicy_default_instance_);
}
inline ::istio::mixer::v1::config::client::NetworkFailPolicy* TransportConfig::release_network_fail_policy() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.TransportConfig.network_fail_policy)
  
  ::istio::mixer::v1::config::client::NetworkFailPolicy* temp = network_fail_policy_;
  network_fail_policy_ = NULL;
  return temp;
}
inline ::istio::mixer::v1::config::client::NetworkFailPolicy* TransportConfig::mutable_network_fail_policy() {
  
  if (network_fail_policy_ == NULL) {
    auto* p = CreateMaybeMessage<::istio::mixer::v1::config::client::NetworkFailPolicy>(GetArenaNoVirtual());
    network_fail_policy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.TransportConfig.network_fail_policy)
  return network_fail_policy_;
}
inline void TransportConfig::set_allocated_network_fail_policy(::istio::mixer::v1::config::client::NetworkFailPolicy* network_fail_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete network_fail_policy_;
  }
  if (network_fail_policy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      network_fail_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, network_fail_policy, submessage_arena);
    }
    
  } else {
    
  }
  network_fail_policy_ = network_fail_policy;
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.TransportConfig.network_fail_policy)
}

// .google.protobuf.Duration stats_update_interval = 5;
inline bool TransportConfig::has_stats_update_interval() const {
  return this != internal_default_instance() && stats_update_interval_ != NULL;
}
inline const ::google::protobuf::Duration& TransportConfig::_internal_stats_update_interval() const {
  return *stats_update_interval_;
}
inline const ::google::protobuf::Duration& TransportConfig::stats_update_interval() const {
  const ::google::protobuf::Duration* p = stats_update_interval_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.TransportConfig.stats_update_interval)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* TransportConfig::release_stats_update_interval() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.TransportConfig.stats_update_interval)
  
  ::google::protobuf::Duration* temp = stats_update_interval_;
  stats_update_interval_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* TransportConfig::mutable_stats_update_interval() {
  
  if (stats_update_interval_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    stats_update_interval_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.TransportConfig.stats_update_interval)
  return stats_update_interval_;
}
inline void TransportConfig::set_allocated_stats_update_interval(::google::protobuf::Duration* stats_update_interval) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(stats_update_interval_);
  }
  if (stats_update_interval) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(stats_update_interval)->GetArena();
    if (message_arena != submessage_arena) {
      stats_update_interval = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stats_update_interval, submessage_arena);
    }
    
  } else {
    
  }
  stats_update_interval_ = stats_update_interval;
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.TransportConfig.stats_update_interval)
}

// string check_cluster = 6;
inline void TransportConfig::clear_check_cluster() {
  check_cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransportConfig::check_cluster() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.TransportConfig.check_cluster)
  return check_cluster_.GetNoArena();
}
inline void TransportConfig::set_check_cluster(const ::std::string& value) {
  
  check_cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.TransportConfig.check_cluster)
}
#if LANG_CXX11
inline void TransportConfig::set_check_cluster(::std::string&& value) {
  
  check_cluster_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.mixer.v1.config.client.TransportConfig.check_cluster)
}
#endif
inline void TransportConfig::set_check_cluster(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  check_cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.mixer.v1.config.client.TransportConfig.check_cluster)
}
inline void TransportConfig::set_check_cluster(const char* value, size_t size) {
  
  check_cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.mixer.v1.config.client.TransportConfig.check_cluster)
}
inline ::std::string* TransportConfig::mutable_check_cluster() {
  
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.TransportConfig.check_cluster)
  return check_cluster_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransportConfig::release_check_cluster() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.TransportConfig.check_cluster)
  
  return check_cluster_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransportConfig::set_allocated_check_cluster(::std::string* check_cluster) {
  if (check_cluster != NULL) {
    
  } else {
    
  }
  check_cluster_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), check_cluster);
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.TransportConfig.check_cluster)
}

// string report_cluster = 7;
inline void TransportConfig::clear_report_cluster() {
  report_cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransportConfig::report_cluster() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.TransportConfig.report_cluster)
  return report_cluster_.GetNoArena();
}
inline void TransportConfig::set_report_cluster(const ::std::string& value) {
  
  report_cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.TransportConfig.report_cluster)
}
#if LANG_CXX11
inline void TransportConfig::set_report_cluster(::std::string&& value) {
  
  report_cluster_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.mixer.v1.config.client.TransportConfig.report_cluster)
}
#endif
inline void TransportConfig::set_report_cluster(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  report_cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.mixer.v1.config.client.TransportConfig.report_cluster)
}
inline void TransportConfig::set_report_cluster(const char* value, size_t size) {
  
  report_cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.mixer.v1.config.client.TransportConfig.report_cluster)
}
inline ::std::string* TransportConfig::mutable_report_cluster() {
  
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.TransportConfig.report_cluster)
  return report_cluster_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransportConfig::release_report_cluster() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.TransportConfig.report_cluster)
  
  return report_cluster_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransportConfig::set_allocated_report_cluster(::std::string* report_cluster) {
  if (report_cluster != NULL) {
    
  } else {
    
  }
  report_cluster_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), report_cluster);
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.TransportConfig.report_cluster)
}

// .istio.mixer.v1.Attributes attributes_for_mixer_proxy = 8;
inline bool TransportConfig::has_attributes_for_mixer_proxy() const {
  return this != internal_default_instance() && attributes_for_mixer_proxy_ != NULL;
}
inline const ::istio::mixer::v1::Attributes& TransportConfig::_internal_attributes_for_mixer_proxy() const {
  return *attributes_for_mixer_proxy_;
}
inline const ::istio::mixer::v1::Attributes& TransportConfig::attributes_for_mixer_proxy() const {
  const ::istio::mixer::v1::Attributes* p = attributes_for_mixer_proxy_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.TransportConfig.attributes_for_mixer_proxy)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::mixer::v1::Attributes*>(
      &::istio::mixer::v1::_Attributes_default_instance_);
}
inline ::istio::mixer::v1::Attributes* TransportConfig::release_attributes_for_mixer_proxy() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.TransportConfig.attributes_for_mixer_proxy)
  
  ::istio::mixer::v1::Attributes* temp = attributes_for_mixer_proxy_;
  attributes_for_mixer_proxy_ = NULL;
  return temp;
}
inline ::istio::mixer::v1::Attributes* TransportConfig::mutable_attributes_for_mixer_proxy() {
  
  if (attributes_for_mixer_proxy_ == NULL) {
    auto* p = CreateMaybeMessage<::istio::mixer::v1::Attributes>(GetArenaNoVirtual());
    attributes_for_mixer_proxy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.TransportConfig.attributes_for_mixer_proxy)
  return attributes_for_mixer_proxy_;
}
inline void TransportConfig::set_allocated_attributes_for_mixer_proxy(::istio::mixer::v1::Attributes* attributes_for_mixer_proxy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(attributes_for_mixer_proxy_);
  }
  if (attributes_for_mixer_proxy) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(attributes_for_mixer_proxy)->GetArena();
    if (message_arena != submessage_arena) {
      attributes_for_mixer_proxy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attributes_for_mixer_proxy, submessage_arena);
    }
    
  } else {
    
  }
  attributes_for_mixer_proxy_ = attributes_for_mixer_proxy;
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.TransportConfig.attributes_for_mixer_proxy)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HttpClientConfig

// .istio.mixer.v1.config.client.TransportConfig transport = 1;
inline bool HttpClientConfig::has_transport() const {
  return this != internal_default_instance() && transport_ != NULL;
}
inline void HttpClientConfig::clear_transport() {
  if (GetArenaNoVirtual() == NULL && transport_ != NULL) {
    delete transport_;
  }
  transport_ = NULL;
}
inline const ::istio::mixer::v1::config::client::TransportConfig& HttpClientConfig::_internal_transport() const {
  return *transport_;
}
inline const ::istio::mixer::v1::config::client::TransportConfig& HttpClientConfig::transport() const {
  const ::istio::mixer::v1::config::client::TransportConfig* p = transport_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.HttpClientConfig.transport)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::mixer::v1::config::client::TransportConfig*>(
      &::istio::mixer::v1::config::client::_TransportConfig_default_instance_);
}
inline ::istio::mixer::v1::config::client::TransportConfig* HttpClientConfig::release_transport() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.HttpClientConfig.transport)
  
  ::istio::mixer::v1::config::client::TransportConfig* temp = transport_;
  transport_ = NULL;
  return temp;
}
inline ::istio::mixer::v1::config::client::TransportConfig* HttpClientConfig::mutable_transport() {
  
  if (transport_ == NULL) {
    auto* p = CreateMaybeMessage<::istio::mixer::v1::config::client::TransportConfig>(GetArenaNoVirtual());
    transport_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.HttpClientConfig.transport)
  return transport_;
}
inline void HttpClientConfig::set_allocated_transport(::istio::mixer::v1::config::client::TransportConfig* transport) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transport_;
  }
  if (transport) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transport = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transport, submessage_arena);
    }
    
  } else {
    
  }
  transport_ = transport;
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.HttpClientConfig.transport)
}

// map<string, .istio.mixer.v1.config.client.ServiceConfig> service_configs = 2;
inline int HttpClientConfig::service_configs_size() const {
  return service_configs_.size();
}
inline void HttpClientConfig::clear_service_configs() {
  service_configs_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::istio::mixer::v1::config::client::ServiceConfig >&
HttpClientConfig::service_configs() const {
  // @@protoc_insertion_point(field_map:istio.mixer.v1.config.client.HttpClientConfig.service_configs)
  return service_configs_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::istio::mixer::v1::config::client::ServiceConfig >*
HttpClientConfig::mutable_service_configs() {
  // @@protoc_insertion_point(field_mutable_map:istio.mixer.v1.config.client.HttpClientConfig.service_configs)
  return service_configs_.MutableMap();
}

// string default_destination_service = 3;
inline void HttpClientConfig::clear_default_destination_service() {
  default_destination_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HttpClientConfig::default_destination_service() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.HttpClientConfig.default_destination_service)
  return default_destination_service_.GetNoArena();
}
inline void HttpClientConfig::set_default_destination_service(const ::std::string& value) {
  
  default_destination_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.HttpClientConfig.default_destination_service)
}
#if LANG_CXX11
inline void HttpClientConfig::set_default_destination_service(::std::string&& value) {
  
  default_destination_service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.mixer.v1.config.client.HttpClientConfig.default_destination_service)
}
#endif
inline void HttpClientConfig::set_default_destination_service(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  default_destination_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.mixer.v1.config.client.HttpClientConfig.default_destination_service)
}
inline void HttpClientConfig::set_default_destination_service(const char* value, size_t size) {
  
  default_destination_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.mixer.v1.config.client.HttpClientConfig.default_destination_service)
}
inline ::std::string* HttpClientConfig::mutable_default_destination_service() {
  
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.HttpClientConfig.default_destination_service)
  return default_destination_service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpClientConfig::release_default_destination_service() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.HttpClientConfig.default_destination_service)
  
  return default_destination_service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpClientConfig::set_allocated_default_destination_service(::std::string* default_destination_service) {
  if (default_destination_service != NULL) {
    
  } else {
    
  }
  default_destination_service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_destination_service);
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.HttpClientConfig.default_destination_service)
}

// .istio.mixer.v1.Attributes mixer_attributes = 4;
inline bool HttpClientConfig::has_mixer_attributes() const {
  return this != internal_default_instance() && mixer_attributes_ != NULL;
}
inline const ::istio::mixer::v1::Attributes& HttpClientConfig::_internal_mixer_attributes() const {
  return *mixer_attributes_;
}
inline const ::istio::mixer::v1::Attributes& HttpClientConfig::mixer_attributes() const {
  const ::istio::mixer::v1::Attributes* p = mixer_attributes_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.HttpClientConfig.mixer_attributes)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::mixer::v1::Attributes*>(
      &::istio::mixer::v1::_Attributes_default_instance_);
}
inline ::istio::mixer::v1::Attributes* HttpClientConfig::release_mixer_attributes() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.HttpClientConfig.mixer_attributes)
  
  ::istio::mixer::v1::Attributes* temp = mixer_attributes_;
  mixer_attributes_ = NULL;
  return temp;
}
inline ::istio::mixer::v1::Attributes* HttpClientConfig::mutable_mixer_attributes() {
  
  if (mixer_attributes_ == NULL) {
    auto* p = CreateMaybeMessage<::istio::mixer::v1::Attributes>(GetArenaNoVirtual());
    mixer_attributes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.HttpClientConfig.mixer_attributes)
  return mixer_attributes_;
}
inline void HttpClientConfig::set_allocated_mixer_attributes(::istio::mixer::v1::Attributes* mixer_attributes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mixer_attributes_);
  }
  if (mixer_attributes) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(mixer_attributes)->GetArena();
    if (message_arena != submessage_arena) {
      mixer_attributes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mixer_attributes, submessage_arena);
    }
    
  } else {
    
  }
  mixer_attributes_ = mixer_attributes;
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.HttpClientConfig.mixer_attributes)
}

// .istio.mixer.v1.Attributes forward_attributes = 5;
inline bool HttpClientConfig::has_forward_attributes() const {
  return this != internal_default_instance() && forward_attributes_ != NULL;
}
inline const ::istio::mixer::v1::Attributes& HttpClientConfig::_internal_forward_attributes() const {
  return *forward_attributes_;
}
inline const ::istio::mixer::v1::Attributes& HttpClientConfig::forward_attributes() const {
  const ::istio::mixer::v1::Attributes* p = forward_attributes_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.HttpClientConfig.forward_attributes)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::mixer::v1::Attributes*>(
      &::istio::mixer::v1::_Attributes_default_instance_);
}
inline ::istio::mixer::v1::Attributes* HttpClientConfig::release_forward_attributes() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.HttpClientConfig.forward_attributes)
  
  ::istio::mixer::v1::Attributes* temp = forward_attributes_;
  forward_attributes_ = NULL;
  return temp;
}
inline ::istio::mixer::v1::Attributes* HttpClientConfig::mutable_forward_attributes() {
  
  if (forward_attributes_ == NULL) {
    auto* p = CreateMaybeMessage<::istio::mixer::v1::Attributes>(GetArenaNoVirtual());
    forward_attributes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.HttpClientConfig.forward_attributes)
  return forward_attributes_;
}
inline void HttpClientConfig::set_allocated_forward_attributes(::istio::mixer::v1::Attributes* forward_attributes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(forward_attributes_);
  }
  if (forward_attributes) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(forward_attributes)->GetArena();
    if (message_arena != submessage_arena) {
      forward_attributes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, forward_attributes, submessage_arena);
    }
    
  } else {
    
  }
  forward_attributes_ = forward_attributes;
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.HttpClientConfig.forward_attributes)
}

// -------------------------------------------------------------------

// TcpClientConfig

// .istio.mixer.v1.config.client.TransportConfig transport = 1;
inline bool TcpClientConfig::has_transport() const {
  return this != internal_default_instance() && transport_ != NULL;
}
inline void TcpClientConfig::clear_transport() {
  if (GetArenaNoVirtual() == NULL && transport_ != NULL) {
    delete transport_;
  }
  transport_ = NULL;
}
inline const ::istio::mixer::v1::config::client::TransportConfig& TcpClientConfig::_internal_transport() const {
  return *transport_;
}
inline const ::istio::mixer::v1::config::client::TransportConfig& TcpClientConfig::transport() const {
  const ::istio::mixer::v1::config::client::TransportConfig* p = transport_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.TcpClientConfig.transport)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::mixer::v1::config::client::TransportConfig*>(
      &::istio::mixer::v1::config::client::_TransportConfig_default_instance_);
}
inline ::istio::mixer::v1::config::client::TransportConfig* TcpClientConfig::release_transport() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.TcpClientConfig.transport)
  
  ::istio::mixer::v1::config::client::TransportConfig* temp = transport_;
  transport_ = NULL;
  return temp;
}
inline ::istio::mixer::v1::config::client::TransportConfig* TcpClientConfig::mutable_transport() {
  
  if (transport_ == NULL) {
    auto* p = CreateMaybeMessage<::istio::mixer::v1::config::client::TransportConfig>(GetArenaNoVirtual());
    transport_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.TcpClientConfig.transport)
  return transport_;
}
inline void TcpClientConfig::set_allocated_transport(::istio::mixer::v1::config::client::TransportConfig* transport) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transport_;
  }
  if (transport) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transport = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transport, submessage_arena);
    }
    
  } else {
    
  }
  transport_ = transport;
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.TcpClientConfig.transport)
}

// .istio.mixer.v1.Attributes mixer_attributes = 2;
inline bool TcpClientConfig::has_mixer_attributes() const {
  return this != internal_default_instance() && mixer_attributes_ != NULL;
}
inline const ::istio::mixer::v1::Attributes& TcpClientConfig::_internal_mixer_attributes() const {
  return *mixer_attributes_;
}
inline const ::istio::mixer::v1::Attributes& TcpClientConfig::mixer_attributes() const {
  const ::istio::mixer::v1::Attributes* p = mixer_attributes_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.TcpClientConfig.mixer_attributes)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::mixer::v1::Attributes*>(
      &::istio::mixer::v1::_Attributes_default_instance_);
}
inline ::istio::mixer::v1::Attributes* TcpClientConfig::release_mixer_attributes() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.TcpClientConfig.mixer_attributes)
  
  ::istio::mixer::v1::Attributes* temp = mixer_attributes_;
  mixer_attributes_ = NULL;
  return temp;
}
inline ::istio::mixer::v1::Attributes* TcpClientConfig::mutable_mixer_attributes() {
  
  if (mixer_attributes_ == NULL) {
    auto* p = CreateMaybeMessage<::istio::mixer::v1::Attributes>(GetArenaNoVirtual());
    mixer_attributes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.TcpClientConfig.mixer_attributes)
  return mixer_attributes_;
}
inline void TcpClientConfig::set_allocated_mixer_attributes(::istio::mixer::v1::Attributes* mixer_attributes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mixer_attributes_);
  }
  if (mixer_attributes) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(mixer_attributes)->GetArena();
    if (message_arena != submessage_arena) {
      mixer_attributes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mixer_attributes, submessage_arena);
    }
    
  } else {
    
  }
  mixer_attributes_ = mixer_attributes;
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.TcpClientConfig.mixer_attributes)
}

// bool disable_check_calls = 3;
inline void TcpClientConfig::clear_disable_check_calls() {
  disable_check_calls_ = false;
}
inline bool TcpClientConfig::disable_check_calls() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.TcpClientConfig.disable_check_calls)
  return disable_check_calls_;
}
inline void TcpClientConfig::set_disable_check_calls(bool value) {
  
  disable_check_calls_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.TcpClientConfig.disable_check_calls)
}

// bool disable_report_calls = 4;
inline void TcpClientConfig::clear_disable_report_calls() {
  disable_report_calls_ = false;
}
inline bool TcpClientConfig::disable_report_calls() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.TcpClientConfig.disable_report_calls)
  return disable_report_calls_;
}
inline void TcpClientConfig::set_disable_report_calls(bool value) {
  
  disable_report_calls_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.config.client.TcpClientConfig.disable_report_calls)
}

// .istio.mixer.v1.config.client.QuotaSpec connection_quota_spec = 5;
inline bool TcpClientConfig::has_connection_quota_spec() const {
  return this != internal_default_instance() && connection_quota_spec_ != NULL;
}
inline const ::istio::mixer::v1::config::client::QuotaSpec& TcpClientConfig::_internal_connection_quota_spec() const {
  return *connection_quota_spec_;
}
inline const ::istio::mixer::v1::config::client::QuotaSpec& TcpClientConfig::connection_quota_spec() const {
  const ::istio::mixer::v1::config::client::QuotaSpec* p = connection_quota_spec_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.TcpClientConfig.connection_quota_spec)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::mixer::v1::config::client::QuotaSpec*>(
      &::istio::mixer::v1::config::client::_QuotaSpec_default_instance_);
}
inline ::istio::mixer::v1::config::client::QuotaSpec* TcpClientConfig::release_connection_quota_spec() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.TcpClientConfig.connection_quota_spec)
  
  ::istio::mixer::v1::config::client::QuotaSpec* temp = connection_quota_spec_;
  connection_quota_spec_ = NULL;
  return temp;
}
inline ::istio::mixer::v1::config::client::QuotaSpec* TcpClientConfig::mutable_connection_quota_spec() {
  
  if (connection_quota_spec_ == NULL) {
    auto* p = CreateMaybeMessage<::istio::mixer::v1::config::client::QuotaSpec>(GetArenaNoVirtual());
    connection_quota_spec_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.TcpClientConfig.connection_quota_spec)
  return connection_quota_spec_;
}
inline void TcpClientConfig::set_allocated_connection_quota_spec(::istio::mixer::v1::config::client::QuotaSpec* connection_quota_spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(connection_quota_spec_);
  }
  if (connection_quota_spec) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      connection_quota_spec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, connection_quota_spec, submessage_arena);
    }
    
  } else {
    
  }
  connection_quota_spec_ = connection_quota_spec;
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.TcpClientConfig.connection_quota_spec)
}

// .google.protobuf.Duration report_interval = 6;
inline bool TcpClientConfig::has_report_interval() const {
  return this != internal_default_instance() && report_interval_ != NULL;
}
inline const ::google::protobuf::Duration& TcpClientConfig::_internal_report_interval() const {
  return *report_interval_;
}
inline const ::google::protobuf::Duration& TcpClientConfig::report_interval() const {
  const ::google::protobuf::Duration* p = report_interval_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.config.client.TcpClientConfig.report_interval)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* TcpClientConfig::release_report_interval() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.config.client.TcpClientConfig.report_interval)
  
  ::google::protobuf::Duration* temp = report_interval_;
  report_interval_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* TcpClientConfig::mutable_report_interval() {
  
  if (report_interval_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    report_interval_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.config.client.TcpClientConfig.report_interval)
  return report_interval_;
}
inline void TcpClientConfig::set_allocated_report_interval(::google::protobuf::Duration* report_interval) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(report_interval_);
  }
  if (report_interval) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(report_interval)->GetArena();
    if (message_arena != submessage_arena) {
      report_interval = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, report_interval, submessage_arena);
    }
    
  } else {
    
  }
  report_interval_ = report_interval;
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.config.client.TcpClientConfig.report_interval)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace client
}  // namespace config
}  // namespace v1
}  // namespace mixer
}  // namespace istio

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::istio::mixer::v1::config::client::NetworkFailPolicy_FailPolicy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::istio::mixer::v1::config::client::NetworkFailPolicy_FailPolicy>() {
  return ::istio::mixer::v1::config::client::NetworkFailPolicy_FailPolicy_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_mixer_2fv1_2fconfig_2fclient_2fclient_5fconfig_2eproto
