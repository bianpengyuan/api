// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mixer/v1/mixer.proto

#ifndef PROTOBUF_INCLUDED_mixer_2fv1_2fmixer_2eproto
#define PROTOBUF_INCLUDED_mixer_2fv1_2fmixer_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
#include <google/protobuf/duration.pb.h>
#include "google/rpc/status.pb.h"
#include "mixer/v1/attributes.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_mixer_2fv1_2fmixer_2eproto 

namespace protobuf_mixer_2fv1_2fmixer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_mixer_2fv1_2fmixer_2eproto
namespace istio {
namespace mixer {
namespace v1 {
class CheckRequest;
class CheckRequestDefaultTypeInternal;
extern CheckRequestDefaultTypeInternal _CheckRequest_default_instance_;
class CheckRequest_QuotaParams;
class CheckRequest_QuotaParamsDefaultTypeInternal;
extern CheckRequest_QuotaParamsDefaultTypeInternal _CheckRequest_QuotaParams_default_instance_;
class CheckRequest_QuotasEntry_DoNotUse;
class CheckRequest_QuotasEntry_DoNotUseDefaultTypeInternal;
extern CheckRequest_QuotasEntry_DoNotUseDefaultTypeInternal _CheckRequest_QuotasEntry_DoNotUse_default_instance_;
class CheckResponse;
class CheckResponseDefaultTypeInternal;
extern CheckResponseDefaultTypeInternal _CheckResponse_default_instance_;
class CheckResponse_PreconditionResult;
class CheckResponse_PreconditionResultDefaultTypeInternal;
extern CheckResponse_PreconditionResultDefaultTypeInternal _CheckResponse_PreconditionResult_default_instance_;
class CheckResponse_QuotaResult;
class CheckResponse_QuotaResultDefaultTypeInternal;
extern CheckResponse_QuotaResultDefaultTypeInternal _CheckResponse_QuotaResult_default_instance_;
class CheckResponse_QuotasEntry_DoNotUse;
class CheckResponse_QuotasEntry_DoNotUseDefaultTypeInternal;
extern CheckResponse_QuotasEntry_DoNotUseDefaultTypeInternal _CheckResponse_QuotasEntry_DoNotUse_default_instance_;
class HeaderOperation;
class HeaderOperationDefaultTypeInternal;
extern HeaderOperationDefaultTypeInternal _HeaderOperation_default_instance_;
class ReferencedAttributes;
class ReferencedAttributesDefaultTypeInternal;
extern ReferencedAttributesDefaultTypeInternal _ReferencedAttributes_default_instance_;
class ReferencedAttributes_AttributeMatch;
class ReferencedAttributes_AttributeMatchDefaultTypeInternal;
extern ReferencedAttributes_AttributeMatchDefaultTypeInternal _ReferencedAttributes_AttributeMatch_default_instance_;
class ReportRequest;
class ReportRequestDefaultTypeInternal;
extern ReportRequestDefaultTypeInternal _ReportRequest_default_instance_;
class ReportResponse;
class ReportResponseDefaultTypeInternal;
extern ReportResponseDefaultTypeInternal _ReportResponse_default_instance_;
class RouteDirective;
class RouteDirectiveDefaultTypeInternal;
extern RouteDirectiveDefaultTypeInternal _RouteDirective_default_instance_;
}  // namespace v1
}  // namespace mixer
}  // namespace istio
namespace google {
namespace protobuf {
template<> ::istio::mixer::v1::CheckRequest* Arena::CreateMaybeMessage<::istio::mixer::v1::CheckRequest>(Arena*);
template<> ::istio::mixer::v1::CheckRequest_QuotaParams* Arena::CreateMaybeMessage<::istio::mixer::v1::CheckRequest_QuotaParams>(Arena*);
template<> ::istio::mixer::v1::CheckRequest_QuotasEntry_DoNotUse* Arena::CreateMaybeMessage<::istio::mixer::v1::CheckRequest_QuotasEntry_DoNotUse>(Arena*);
template<> ::istio::mixer::v1::CheckResponse* Arena::CreateMaybeMessage<::istio::mixer::v1::CheckResponse>(Arena*);
template<> ::istio::mixer::v1::CheckResponse_PreconditionResult* Arena::CreateMaybeMessage<::istio::mixer::v1::CheckResponse_PreconditionResult>(Arena*);
template<> ::istio::mixer::v1::CheckResponse_QuotaResult* Arena::CreateMaybeMessage<::istio::mixer::v1::CheckResponse_QuotaResult>(Arena*);
template<> ::istio::mixer::v1::CheckResponse_QuotasEntry_DoNotUse* Arena::CreateMaybeMessage<::istio::mixer::v1::CheckResponse_QuotasEntry_DoNotUse>(Arena*);
template<> ::istio::mixer::v1::HeaderOperation* Arena::CreateMaybeMessage<::istio::mixer::v1::HeaderOperation>(Arena*);
template<> ::istio::mixer::v1::ReferencedAttributes* Arena::CreateMaybeMessage<::istio::mixer::v1::ReferencedAttributes>(Arena*);
template<> ::istio::mixer::v1::ReferencedAttributes_AttributeMatch* Arena::CreateMaybeMessage<::istio::mixer::v1::ReferencedAttributes_AttributeMatch>(Arena*);
template<> ::istio::mixer::v1::ReportRequest* Arena::CreateMaybeMessage<::istio::mixer::v1::ReportRequest>(Arena*);
template<> ::istio::mixer::v1::ReportResponse* Arena::CreateMaybeMessage<::istio::mixer::v1::ReportResponse>(Arena*);
template<> ::istio::mixer::v1::RouteDirective* Arena::CreateMaybeMessage<::istio::mixer::v1::RouteDirective>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace istio {
namespace mixer {
namespace v1 {

enum ReferencedAttributes_Condition {
  ReferencedAttributes_Condition_CONDITION_UNSPECIFIED = 0,
  ReferencedAttributes_Condition_ABSENCE = 1,
  ReferencedAttributes_Condition_EXACT = 2,
  ReferencedAttributes_Condition_REGEX = 3,
  ReferencedAttributes_Condition_ReferencedAttributes_Condition_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReferencedAttributes_Condition_ReferencedAttributes_Condition_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ReferencedAttributes_Condition_IsValid(int value);
const ReferencedAttributes_Condition ReferencedAttributes_Condition_Condition_MIN = ReferencedAttributes_Condition_CONDITION_UNSPECIFIED;
const ReferencedAttributes_Condition ReferencedAttributes_Condition_Condition_MAX = ReferencedAttributes_Condition_REGEX;
const int ReferencedAttributes_Condition_Condition_ARRAYSIZE = ReferencedAttributes_Condition_Condition_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReferencedAttributes_Condition_descriptor();
inline const ::std::string& ReferencedAttributes_Condition_Name(ReferencedAttributes_Condition value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReferencedAttributes_Condition_descriptor(), value);
}
inline bool ReferencedAttributes_Condition_Parse(
    const ::std::string& name, ReferencedAttributes_Condition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReferencedAttributes_Condition>(
    ReferencedAttributes_Condition_descriptor(), name, value);
}
enum HeaderOperation_Operation {
  HeaderOperation_Operation_REPLACE = 0,
  HeaderOperation_Operation_REMOVE = 1,
  HeaderOperation_Operation_APPEND = 2,
  HeaderOperation_Operation_HeaderOperation_Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HeaderOperation_Operation_HeaderOperation_Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HeaderOperation_Operation_IsValid(int value);
const HeaderOperation_Operation HeaderOperation_Operation_Operation_MIN = HeaderOperation_Operation_REPLACE;
const HeaderOperation_Operation HeaderOperation_Operation_Operation_MAX = HeaderOperation_Operation_APPEND;
const int HeaderOperation_Operation_Operation_ARRAYSIZE = HeaderOperation_Operation_Operation_MAX + 1;

const ::google::protobuf::EnumDescriptor* HeaderOperation_Operation_descriptor();
inline const ::std::string& HeaderOperation_Operation_Name(HeaderOperation_Operation value) {
  return ::google::protobuf::internal::NameOfEnum(
    HeaderOperation_Operation_descriptor(), value);
}
inline bool HeaderOperation_Operation_Parse(
    const ::std::string& name, HeaderOperation_Operation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HeaderOperation_Operation>(
    HeaderOperation_Operation_descriptor(), name, value);
}
enum ReportRequest_RepeatedAttributesSemantics {
  ReportRequest_RepeatedAttributesSemantics_DELTA_ENCODING = 0,
  ReportRequest_RepeatedAttributesSemantics_INDEPENDENT_ENCODING = 1,
  ReportRequest_RepeatedAttributesSemantics_ReportRequest_RepeatedAttributesSemantics_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReportRequest_RepeatedAttributesSemantics_ReportRequest_RepeatedAttributesSemantics_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ReportRequest_RepeatedAttributesSemantics_IsValid(int value);
const ReportRequest_RepeatedAttributesSemantics ReportRequest_RepeatedAttributesSemantics_RepeatedAttributesSemantics_MIN = ReportRequest_RepeatedAttributesSemantics_DELTA_ENCODING;
const ReportRequest_RepeatedAttributesSemantics ReportRequest_RepeatedAttributesSemantics_RepeatedAttributesSemantics_MAX = ReportRequest_RepeatedAttributesSemantics_INDEPENDENT_ENCODING;
const int ReportRequest_RepeatedAttributesSemantics_RepeatedAttributesSemantics_ARRAYSIZE = ReportRequest_RepeatedAttributesSemantics_RepeatedAttributesSemantics_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReportRequest_RepeatedAttributesSemantics_descriptor();
inline const ::std::string& ReportRequest_RepeatedAttributesSemantics_Name(ReportRequest_RepeatedAttributesSemantics value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReportRequest_RepeatedAttributesSemantics_descriptor(), value);
}
inline bool ReportRequest_RepeatedAttributesSemantics_Parse(
    const ::std::string& name, ReportRequest_RepeatedAttributesSemantics* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReportRequest_RepeatedAttributesSemantics>(
    ReportRequest_RepeatedAttributesSemantics_descriptor(), name, value);
}
// ===================================================================

class CheckRequest_QuotaParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.CheckRequest.QuotaParams) */ {
 public:
  CheckRequest_QuotaParams();
  virtual ~CheckRequest_QuotaParams();

  CheckRequest_QuotaParams(const CheckRequest_QuotaParams& from);

  inline CheckRequest_QuotaParams& operator=(const CheckRequest_QuotaParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckRequest_QuotaParams(CheckRequest_QuotaParams&& from) noexcept
    : CheckRequest_QuotaParams() {
    *this = ::std::move(from);
  }

  inline CheckRequest_QuotaParams& operator=(CheckRequest_QuotaParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckRequest_QuotaParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckRequest_QuotaParams* internal_default_instance() {
    return reinterpret_cast<const CheckRequest_QuotaParams*>(
               &_CheckRequest_QuotaParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(CheckRequest_QuotaParams* other);
  void Swap(CheckRequest_QuotaParams* other);
  friend void swap(CheckRequest_QuotaParams& a, CheckRequest_QuotaParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckRequest_QuotaParams* New() const final {
    return CreateMaybeMessage<CheckRequest_QuotaParams>(NULL);
  }

  CheckRequest_QuotaParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckRequest_QuotaParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckRequest_QuotaParams& from);
  void MergeFrom(const CheckRequest_QuotaParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckRequest_QuotaParams* other);
  protected:
  explicit CheckRequest_QuotaParams(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 amount = 1;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // bool best_effort = 2;
  void clear_best_effort();
  static const int kBestEffortFieldNumber = 2;
  bool best_effort() const;
  void set_best_effort(bool value);

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.CheckRequest.QuotaParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::int64 amount_;
  bool best_effort_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fmixer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckRequest_QuotasEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<CheckRequest_QuotasEntry_DoNotUse, 
    ::std::string, ::istio::mixer::v1::CheckRequest_QuotaParams,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<CheckRequest_QuotasEntry_DoNotUse, 
    ::std::string, ::istio::mixer::v1::CheckRequest_QuotaParams,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  CheckRequest_QuotasEntry_DoNotUse();
  CheckRequest_QuotasEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const CheckRequest_QuotasEntry_DoNotUse& other);
  static const CheckRequest_QuotasEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CheckRequest_QuotasEntry_DoNotUse*>(&_CheckRequest_QuotasEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class CheckRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.CheckRequest) */ {
 public:
  CheckRequest();
  virtual ~CheckRequest();

  CheckRequest(const CheckRequest& from);

  inline CheckRequest& operator=(const CheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckRequest(CheckRequest&& from) noexcept
    : CheckRequest() {
    *this = ::std::move(from);
  }

  inline CheckRequest& operator=(CheckRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckRequest* internal_default_instance() {
    return reinterpret_cast<const CheckRequest*>(
               &_CheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(CheckRequest* other);
  void Swap(CheckRequest* other);
  friend void swap(CheckRequest& a, CheckRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckRequest* New() const final {
    return CreateMaybeMessage<CheckRequest>(NULL);
  }

  CheckRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckRequest& from);
  void MergeFrom(const CheckRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckRequest* other);
  protected:
  explicit CheckRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CheckRequest_QuotaParams QuotaParams;

  // accessors -------------------------------------------------------

  // map<string, .istio.mixer.v1.CheckRequest.QuotaParams> quotas = 4 [(.gogoproto.nullable) = false];
  int quotas_size() const;
  void clear_quotas();
  static const int kQuotasFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::istio::mixer::v1::CheckRequest_QuotaParams >&
      quotas() const;
  ::google::protobuf::Map< ::std::string, ::istio::mixer::v1::CheckRequest_QuotaParams >*
      mutable_quotas();

  // string deduplication_id = 3;
  void clear_deduplication_id();
  static const int kDeduplicationIdFieldNumber = 3;
  const ::std::string& deduplication_id() const;
  void set_deduplication_id(const ::std::string& value);
  #if LANG_CXX11
  void set_deduplication_id(::std::string&& value);
  #endif
  void set_deduplication_id(const char* value);
  void set_deduplication_id(const char* value, size_t size);
  ::std::string* mutable_deduplication_id();
  ::std::string* release_deduplication_id();
  void set_allocated_deduplication_id(::std::string* deduplication_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_deduplication_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_deduplication_id(
      ::std::string* deduplication_id);

  // .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];
  bool has_attributes() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 1;
  private:
  const ::istio::mixer::v1::CompressedAttributes& _internal_attributes() const;
  public:
  const ::istio::mixer::v1::CompressedAttributes& attributes() const;
  ::istio::mixer::v1::CompressedAttributes* release_attributes();
  ::istio::mixer::v1::CompressedAttributes* mutable_attributes();
  void set_allocated_attributes(::istio::mixer::v1::CompressedAttributes* attributes);
  void unsafe_arena_set_allocated_attributes(
      ::istio::mixer::v1::CompressedAttributes* attributes);
  ::istio::mixer::v1::CompressedAttributes* unsafe_arena_release_attributes();

  // uint32 global_word_count = 2;
  void clear_global_word_count();
  static const int kGlobalWordCountFieldNumber = 2;
  ::google::protobuf::uint32 global_word_count() const;
  void set_global_word_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.CheckRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::MapField<
      CheckRequest_QuotasEntry_DoNotUse,
      ::std::string, ::istio::mixer::v1::CheckRequest_QuotaParams,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > quotas_;
  ::google::protobuf::internal::ArenaStringPtr deduplication_id_;
  ::istio::mixer::v1::CompressedAttributes* attributes_;
  ::google::protobuf::uint32 global_word_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fmixer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckResponse_PreconditionResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.CheckResponse.PreconditionResult) */ {
 public:
  CheckResponse_PreconditionResult();
  virtual ~CheckResponse_PreconditionResult();

  CheckResponse_PreconditionResult(const CheckResponse_PreconditionResult& from);

  inline CheckResponse_PreconditionResult& operator=(const CheckResponse_PreconditionResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckResponse_PreconditionResult(CheckResponse_PreconditionResult&& from) noexcept
    : CheckResponse_PreconditionResult() {
    *this = ::std::move(from);
  }

  inline CheckResponse_PreconditionResult& operator=(CheckResponse_PreconditionResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckResponse_PreconditionResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckResponse_PreconditionResult* internal_default_instance() {
    return reinterpret_cast<const CheckResponse_PreconditionResult*>(
               &_CheckResponse_PreconditionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(CheckResponse_PreconditionResult* other);
  void Swap(CheckResponse_PreconditionResult* other);
  friend void swap(CheckResponse_PreconditionResult& a, CheckResponse_PreconditionResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckResponse_PreconditionResult* New() const final {
    return CreateMaybeMessage<CheckResponse_PreconditionResult>(NULL);
  }

  CheckResponse_PreconditionResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckResponse_PreconditionResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckResponse_PreconditionResult& from);
  void MergeFrom(const CheckResponse_PreconditionResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckResponse_PreconditionResult* other);
  protected:
  explicit CheckResponse_PreconditionResult(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.rpc.Status status = 1 [(.gogoproto.nullable) = false];
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  private:
  const ::google::rpc::Status& _internal_status() const;
  public:
  const ::google::rpc::Status& status() const;
  ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);
  void unsafe_arena_set_allocated_status(
      ::google::rpc::Status* status);
  ::google::rpc::Status* unsafe_arena_release_status();

  // .google.protobuf.Duration valid_duration = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  bool has_valid_duration() const;
  void clear_valid_duration();
  static const int kValidDurationFieldNumber = 2;
  private:
  const ::google::protobuf::Duration& _internal_valid_duration() const;
  public:
  const ::google::protobuf::Duration& valid_duration() const;
  ::google::protobuf::Duration* release_valid_duration();
  ::google::protobuf::Duration* mutable_valid_duration();
  void set_allocated_valid_duration(::google::protobuf::Duration* valid_duration);
  void unsafe_arena_set_allocated_valid_duration(
      ::google::protobuf::Duration* valid_duration);
  ::google::protobuf::Duration* unsafe_arena_release_valid_duration();

  // .istio.mixer.v1.ReferencedAttributes referenced_attributes = 5;
  bool has_referenced_attributes() const;
  void clear_referenced_attributes();
  static const int kReferencedAttributesFieldNumber = 5;
  private:
  const ::istio::mixer::v1::ReferencedAttributes& _internal_referenced_attributes() const;
  public:
  const ::istio::mixer::v1::ReferencedAttributes& referenced_attributes() const;
  ::istio::mixer::v1::ReferencedAttributes* release_referenced_attributes();
  ::istio::mixer::v1::ReferencedAttributes* mutable_referenced_attributes();
  void set_allocated_referenced_attributes(::istio::mixer::v1::ReferencedAttributes* referenced_attributes);
  void unsafe_arena_set_allocated_referenced_attributes(
      ::istio::mixer::v1::ReferencedAttributes* referenced_attributes);
  ::istio::mixer::v1::ReferencedAttributes* unsafe_arena_release_referenced_attributes();

  // .istio.mixer.v1.RouteDirective route_directive = 6;
  bool has_route_directive() const;
  void clear_route_directive();
  static const int kRouteDirectiveFieldNumber = 6;
  private:
  const ::istio::mixer::v1::RouteDirective& _internal_route_directive() const;
  public:
  const ::istio::mixer::v1::RouteDirective& route_directive() const;
  ::istio::mixer::v1::RouteDirective* release_route_directive();
  ::istio::mixer::v1::RouteDirective* mutable_route_directive();
  void set_allocated_route_directive(::istio::mixer::v1::RouteDirective* route_directive);
  void unsafe_arena_set_allocated_route_directive(
      ::istio::mixer::v1::RouteDirective* route_directive);
  ::istio::mixer::v1::RouteDirective* unsafe_arena_release_route_directive();

  // int32 valid_use_count = 3;
  void clear_valid_use_count();
  static const int kValidUseCountFieldNumber = 3;
  ::google::protobuf::int32 valid_use_count() const;
  void set_valid_use_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.CheckResponse.PreconditionResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::rpc::Status* status_;
  ::google::protobuf::Duration* valid_duration_;
  ::istio::mixer::v1::ReferencedAttributes* referenced_attributes_;
  ::istio::mixer::v1::RouteDirective* route_directive_;
  ::google::protobuf::int32 valid_use_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fmixer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckResponse_QuotaResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.CheckResponse.QuotaResult) */ {
 public:
  CheckResponse_QuotaResult();
  virtual ~CheckResponse_QuotaResult();

  CheckResponse_QuotaResult(const CheckResponse_QuotaResult& from);

  inline CheckResponse_QuotaResult& operator=(const CheckResponse_QuotaResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckResponse_QuotaResult(CheckResponse_QuotaResult&& from) noexcept
    : CheckResponse_QuotaResult() {
    *this = ::std::move(from);
  }

  inline CheckResponse_QuotaResult& operator=(CheckResponse_QuotaResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckResponse_QuotaResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckResponse_QuotaResult* internal_default_instance() {
    return reinterpret_cast<const CheckResponse_QuotaResult*>(
               &_CheckResponse_QuotaResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(CheckResponse_QuotaResult* other);
  void Swap(CheckResponse_QuotaResult* other);
  friend void swap(CheckResponse_QuotaResult& a, CheckResponse_QuotaResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckResponse_QuotaResult* New() const final {
    return CreateMaybeMessage<CheckResponse_QuotaResult>(NULL);
  }

  CheckResponse_QuotaResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckResponse_QuotaResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckResponse_QuotaResult& from);
  void MergeFrom(const CheckResponse_QuotaResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckResponse_QuotaResult* other);
  protected:
  explicit CheckResponse_QuotaResult(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Duration valid_duration = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  bool has_valid_duration() const;
  void clear_valid_duration();
  static const int kValidDurationFieldNumber = 1;
  private:
  const ::google::protobuf::Duration& _internal_valid_duration() const;
  public:
  const ::google::protobuf::Duration& valid_duration() const;
  ::google::protobuf::Duration* release_valid_duration();
  ::google::protobuf::Duration* mutable_valid_duration();
  void set_allocated_valid_duration(::google::protobuf::Duration* valid_duration);
  void unsafe_arena_set_allocated_valid_duration(
      ::google::protobuf::Duration* valid_duration);
  ::google::protobuf::Duration* unsafe_arena_release_valid_duration();

  // .istio.mixer.v1.ReferencedAttributes referenced_attributes = 5 [(.gogoproto.nullable) = false];
  bool has_referenced_attributes() const;
  void clear_referenced_attributes();
  static const int kReferencedAttributesFieldNumber = 5;
  private:
  const ::istio::mixer::v1::ReferencedAttributes& _internal_referenced_attributes() const;
  public:
  const ::istio::mixer::v1::ReferencedAttributes& referenced_attributes() const;
  ::istio::mixer::v1::ReferencedAttributes* release_referenced_attributes();
  ::istio::mixer::v1::ReferencedAttributes* mutable_referenced_attributes();
  void set_allocated_referenced_attributes(::istio::mixer::v1::ReferencedAttributes* referenced_attributes);
  void unsafe_arena_set_allocated_referenced_attributes(
      ::istio::mixer::v1::ReferencedAttributes* referenced_attributes);
  ::istio::mixer::v1::ReferencedAttributes* unsafe_arena_release_referenced_attributes();

  // int64 granted_amount = 2;
  void clear_granted_amount();
  static const int kGrantedAmountFieldNumber = 2;
  ::google::protobuf::int64 granted_amount() const;
  void set_granted_amount(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.CheckResponse.QuotaResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::Duration* valid_duration_;
  ::istio::mixer::v1::ReferencedAttributes* referenced_attributes_;
  ::google::protobuf::int64 granted_amount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fmixer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckResponse_QuotasEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<CheckResponse_QuotasEntry_DoNotUse, 
    ::std::string, ::istio::mixer::v1::CheckResponse_QuotaResult,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<CheckResponse_QuotasEntry_DoNotUse, 
    ::std::string, ::istio::mixer::v1::CheckResponse_QuotaResult,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  CheckResponse_QuotasEntry_DoNotUse();
  CheckResponse_QuotasEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const CheckResponse_QuotasEntry_DoNotUse& other);
  static const CheckResponse_QuotasEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CheckResponse_QuotasEntry_DoNotUse*>(&_CheckResponse_QuotasEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class CheckResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.CheckResponse) */ {
 public:
  CheckResponse();
  virtual ~CheckResponse();

  CheckResponse(const CheckResponse& from);

  inline CheckResponse& operator=(const CheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckResponse(CheckResponse&& from) noexcept
    : CheckResponse() {
    *this = ::std::move(from);
  }

  inline CheckResponse& operator=(CheckResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckResponse* internal_default_instance() {
    return reinterpret_cast<const CheckResponse*>(
               &_CheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(CheckResponse* other);
  void Swap(CheckResponse* other);
  friend void swap(CheckResponse& a, CheckResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckResponse* New() const final {
    return CreateMaybeMessage<CheckResponse>(NULL);
  }

  CheckResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckResponse& from);
  void MergeFrom(const CheckResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckResponse* other);
  protected:
  explicit CheckResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CheckResponse_PreconditionResult PreconditionResult;
  typedef CheckResponse_QuotaResult QuotaResult;

  // accessors -------------------------------------------------------

  // map<string, .istio.mixer.v1.CheckResponse.QuotaResult> quotas = 3 [(.gogoproto.nullable) = false];
  int quotas_size() const;
  void clear_quotas();
  static const int kQuotasFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::istio::mixer::v1::CheckResponse_QuotaResult >&
      quotas() const;
  ::google::protobuf::Map< ::std::string, ::istio::mixer::v1::CheckResponse_QuotaResult >*
      mutable_quotas();

  // .istio.mixer.v1.CheckResponse.PreconditionResult precondition = 2 [(.gogoproto.nullable) = false];
  bool has_precondition() const;
  void clear_precondition();
  static const int kPreconditionFieldNumber = 2;
  private:
  const ::istio::mixer::v1::CheckResponse_PreconditionResult& _internal_precondition() const;
  public:
  const ::istio::mixer::v1::CheckResponse_PreconditionResult& precondition() const;
  ::istio::mixer::v1::CheckResponse_PreconditionResult* release_precondition();
  ::istio::mixer::v1::CheckResponse_PreconditionResult* mutable_precondition();
  void set_allocated_precondition(::istio::mixer::v1::CheckResponse_PreconditionResult* precondition);
  void unsafe_arena_set_allocated_precondition(
      ::istio::mixer::v1::CheckResponse_PreconditionResult* precondition);
  ::istio::mixer::v1::CheckResponse_PreconditionResult* unsafe_arena_release_precondition();

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.CheckResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::MapField<
      CheckResponse_QuotasEntry_DoNotUse,
      ::std::string, ::istio::mixer::v1::CheckResponse_QuotaResult,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > quotas_;
  ::istio::mixer::v1::CheckResponse_PreconditionResult* precondition_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fmixer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReferencedAttributes_AttributeMatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.ReferencedAttributes.AttributeMatch) */ {
 public:
  ReferencedAttributes_AttributeMatch();
  virtual ~ReferencedAttributes_AttributeMatch();

  ReferencedAttributes_AttributeMatch(const ReferencedAttributes_AttributeMatch& from);

  inline ReferencedAttributes_AttributeMatch& operator=(const ReferencedAttributes_AttributeMatch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReferencedAttributes_AttributeMatch(ReferencedAttributes_AttributeMatch&& from) noexcept
    : ReferencedAttributes_AttributeMatch() {
    *this = ::std::move(from);
  }

  inline ReferencedAttributes_AttributeMatch& operator=(ReferencedAttributes_AttributeMatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReferencedAttributes_AttributeMatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReferencedAttributes_AttributeMatch* internal_default_instance() {
    return reinterpret_cast<const ReferencedAttributes_AttributeMatch*>(
               &_ReferencedAttributes_AttributeMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(ReferencedAttributes_AttributeMatch* other);
  void Swap(ReferencedAttributes_AttributeMatch* other);
  friend void swap(ReferencedAttributes_AttributeMatch& a, ReferencedAttributes_AttributeMatch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReferencedAttributes_AttributeMatch* New() const final {
    return CreateMaybeMessage<ReferencedAttributes_AttributeMatch>(NULL);
  }

  ReferencedAttributes_AttributeMatch* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReferencedAttributes_AttributeMatch>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReferencedAttributes_AttributeMatch& from);
  void MergeFrom(const ReferencedAttributes_AttributeMatch& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferencedAttributes_AttributeMatch* other);
  protected:
  explicit ReferencedAttributes_AttributeMatch(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string regex = 3;
  void clear_regex();
  static const int kRegexFieldNumber = 3;
  const ::std::string& regex() const;
  void set_regex(const ::std::string& value);
  #if LANG_CXX11
  void set_regex(::std::string&& value);
  #endif
  void set_regex(const char* value);
  void set_regex(const char* value, size_t size);
  ::std::string* mutable_regex();
  ::std::string* release_regex();
  void set_allocated_regex(::std::string* regex);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_regex();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_regex(
      ::std::string* regex);

  // sint32 name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  ::google::protobuf::int32 name() const;
  void set_name(::google::protobuf::int32 value);

  // .istio.mixer.v1.ReferencedAttributes.Condition condition = 2;
  void clear_condition();
  static const int kConditionFieldNumber = 2;
  ::istio::mixer::v1::ReferencedAttributes_Condition condition() const;
  void set_condition(::istio::mixer::v1::ReferencedAttributes_Condition value);

  // sint32 map_key = 4;
  void clear_map_key();
  static const int kMapKeyFieldNumber = 4;
  ::google::protobuf::int32 map_key() const;
  void set_map_key(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.ReferencedAttributes.AttributeMatch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr regex_;
  ::google::protobuf::int32 name_;
  int condition_;
  ::google::protobuf::int32 map_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fmixer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReferencedAttributes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.ReferencedAttributes) */ {
 public:
  ReferencedAttributes();
  virtual ~ReferencedAttributes();

  ReferencedAttributes(const ReferencedAttributes& from);

  inline ReferencedAttributes& operator=(const ReferencedAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReferencedAttributes(ReferencedAttributes&& from) noexcept
    : ReferencedAttributes() {
    *this = ::std::move(from);
  }

  inline ReferencedAttributes& operator=(ReferencedAttributes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReferencedAttributes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReferencedAttributes* internal_default_instance() {
    return reinterpret_cast<const ReferencedAttributes*>(
               &_ReferencedAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(ReferencedAttributes* other);
  void Swap(ReferencedAttributes* other);
  friend void swap(ReferencedAttributes& a, ReferencedAttributes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReferencedAttributes* New() const final {
    return CreateMaybeMessage<ReferencedAttributes>(NULL);
  }

  ReferencedAttributes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReferencedAttributes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReferencedAttributes& from);
  void MergeFrom(const ReferencedAttributes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferencedAttributes* other);
  protected:
  explicit ReferencedAttributes(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReferencedAttributes_AttributeMatch AttributeMatch;

  typedef ReferencedAttributes_Condition Condition;
  static const Condition CONDITION_UNSPECIFIED =
    ReferencedAttributes_Condition_CONDITION_UNSPECIFIED;
  static const Condition ABSENCE =
    ReferencedAttributes_Condition_ABSENCE;
  static const Condition EXACT =
    ReferencedAttributes_Condition_EXACT;
  static const Condition REGEX =
    ReferencedAttributes_Condition_REGEX;
  static inline bool Condition_IsValid(int value) {
    return ReferencedAttributes_Condition_IsValid(value);
  }
  static const Condition Condition_MIN =
    ReferencedAttributes_Condition_Condition_MIN;
  static const Condition Condition_MAX =
    ReferencedAttributes_Condition_Condition_MAX;
  static const int Condition_ARRAYSIZE =
    ReferencedAttributes_Condition_Condition_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Condition_descriptor() {
    return ReferencedAttributes_Condition_descriptor();
  }
  static inline const ::std::string& Condition_Name(Condition value) {
    return ReferencedAttributes_Condition_Name(value);
  }
  static inline bool Condition_Parse(const ::std::string& name,
      Condition* value) {
    return ReferencedAttributes_Condition_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string words = 1;
  int words_size() const;
  void clear_words();
  static const int kWordsFieldNumber = 1;
  const ::std::string& words(int index) const;
  ::std::string* mutable_words(int index);
  void set_words(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_words(int index, ::std::string&& value);
  #endif
  void set_words(int index, const char* value);
  void set_words(int index, const char* value, size_t size);
  ::std::string* add_words();
  void add_words(const ::std::string& value);
  #if LANG_CXX11
  void add_words(::std::string&& value);
  #endif
  void add_words(const char* value);
  void add_words(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& words() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_words();

  // repeated .istio.mixer.v1.ReferencedAttributes.AttributeMatch attribute_matches = 2 [(.gogoproto.nullable) = false];
  int attribute_matches_size() const;
  void clear_attribute_matches();
  static const int kAttributeMatchesFieldNumber = 2;
  ::istio::mixer::v1::ReferencedAttributes_AttributeMatch* mutable_attribute_matches(int index);
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::ReferencedAttributes_AttributeMatch >*
      mutable_attribute_matches();
  const ::istio::mixer::v1::ReferencedAttributes_AttributeMatch& attribute_matches(int index) const;
  ::istio::mixer::v1::ReferencedAttributes_AttributeMatch* add_attribute_matches();
  const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::ReferencedAttributes_AttributeMatch >&
      attribute_matches() const;

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.ReferencedAttributes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> words_;
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::ReferencedAttributes_AttributeMatch > attribute_matches_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fmixer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HeaderOperation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.HeaderOperation) */ {
 public:
  HeaderOperation();
  virtual ~HeaderOperation();

  HeaderOperation(const HeaderOperation& from);

  inline HeaderOperation& operator=(const HeaderOperation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeaderOperation(HeaderOperation&& from) noexcept
    : HeaderOperation() {
    *this = ::std::move(from);
  }

  inline HeaderOperation& operator=(HeaderOperation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeaderOperation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeaderOperation* internal_default_instance() {
    return reinterpret_cast<const HeaderOperation*>(
               &_HeaderOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(HeaderOperation* other);
  void Swap(HeaderOperation* other);
  friend void swap(HeaderOperation& a, HeaderOperation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeaderOperation* New() const final {
    return CreateMaybeMessage<HeaderOperation>(NULL);
  }

  HeaderOperation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HeaderOperation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HeaderOperation& from);
  void MergeFrom(const HeaderOperation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeaderOperation* other);
  protected:
  explicit HeaderOperation(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HeaderOperation_Operation Operation;
  static const Operation REPLACE =
    HeaderOperation_Operation_REPLACE;
  static const Operation REMOVE =
    HeaderOperation_Operation_REMOVE;
  static const Operation APPEND =
    HeaderOperation_Operation_APPEND;
  static inline bool Operation_IsValid(int value) {
    return HeaderOperation_Operation_IsValid(value);
  }
  static const Operation Operation_MIN =
    HeaderOperation_Operation_Operation_MIN;
  static const Operation Operation_MAX =
    HeaderOperation_Operation_Operation_MAX;
  static const int Operation_ARRAYSIZE =
    HeaderOperation_Operation_Operation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Operation_descriptor() {
    return HeaderOperation_Operation_descriptor();
  }
  static inline const ::std::string& Operation_Name(Operation value) {
    return HeaderOperation_Operation_Name(value);
  }
  static inline bool Operation_Parse(const ::std::string& name,
      Operation* value) {
    return HeaderOperation_Operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_value();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      ::std::string* value);

  // .istio.mixer.v1.HeaderOperation.Operation operation = 3;
  void clear_operation();
  static const int kOperationFieldNumber = 3;
  ::istio::mixer::v1::HeaderOperation_Operation operation() const;
  void set_operation(::istio::mixer::v1::HeaderOperation_Operation value);

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.HeaderOperation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  int operation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fmixer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RouteDirective : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.RouteDirective) */ {
 public:
  RouteDirective();
  virtual ~RouteDirective();

  RouteDirective(const RouteDirective& from);

  inline RouteDirective& operator=(const RouteDirective& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RouteDirective(RouteDirective&& from) noexcept
    : RouteDirective() {
    *this = ::std::move(from);
  }

  inline RouteDirective& operator=(RouteDirective&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RouteDirective& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteDirective* internal_default_instance() {
    return reinterpret_cast<const RouteDirective*>(
               &_RouteDirective_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void UnsafeArenaSwap(RouteDirective* other);
  void Swap(RouteDirective* other);
  friend void swap(RouteDirective& a, RouteDirective& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RouteDirective* New() const final {
    return CreateMaybeMessage<RouteDirective>(NULL);
  }

  RouteDirective* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RouteDirective>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RouteDirective& from);
  void MergeFrom(const RouteDirective& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteDirective* other);
  protected:
  explicit RouteDirective(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .istio.mixer.v1.HeaderOperation request_header_operations = 1 [(.gogoproto.nullable) = false];
  int request_header_operations_size() const;
  void clear_request_header_operations();
  static const int kRequestHeaderOperationsFieldNumber = 1;
  ::istio::mixer::v1::HeaderOperation* mutable_request_header_operations(int index);
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::HeaderOperation >*
      mutable_request_header_operations();
  const ::istio::mixer::v1::HeaderOperation& request_header_operations(int index) const;
  ::istio::mixer::v1::HeaderOperation* add_request_header_operations();
  const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::HeaderOperation >&
      request_header_operations() const;

  // repeated .istio.mixer.v1.HeaderOperation response_header_operations = 2 [(.gogoproto.nullable) = false];
  int response_header_operations_size() const;
  void clear_response_header_operations();
  static const int kResponseHeaderOperationsFieldNumber = 2;
  ::istio::mixer::v1::HeaderOperation* mutable_response_header_operations(int index);
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::HeaderOperation >*
      mutable_response_header_operations();
  const ::istio::mixer::v1::HeaderOperation& response_header_operations(int index) const;
  ::istio::mixer::v1::HeaderOperation* add_response_header_operations();
  const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::HeaderOperation >&
      response_header_operations() const;

  // string direct_response_body = 4;
  void clear_direct_response_body();
  static const int kDirectResponseBodyFieldNumber = 4;
  const ::std::string& direct_response_body() const;
  void set_direct_response_body(const ::std::string& value);
  #if LANG_CXX11
  void set_direct_response_body(::std::string&& value);
  #endif
  void set_direct_response_body(const char* value);
  void set_direct_response_body(const char* value, size_t size);
  ::std::string* mutable_direct_response_body();
  ::std::string* release_direct_response_body();
  void set_allocated_direct_response_body(::std::string* direct_response_body);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_direct_response_body();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_direct_response_body(
      ::std::string* direct_response_body);

  // uint32 direct_response_code = 3;
  void clear_direct_response_code();
  static const int kDirectResponseCodeFieldNumber = 3;
  ::google::protobuf::uint32 direct_response_code() const;
  void set_direct_response_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.RouteDirective)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::HeaderOperation > request_header_operations_;
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::HeaderOperation > response_header_operations_;
  ::google::protobuf::internal::ArenaStringPtr direct_response_body_;
  ::google::protobuf::uint32 direct_response_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fmixer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReportRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.ReportRequest) */ {
 public:
  ReportRequest();
  virtual ~ReportRequest();

  ReportRequest(const ReportRequest& from);

  inline ReportRequest& operator=(const ReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportRequest(ReportRequest&& from) noexcept
    : ReportRequest() {
    *this = ::std::move(from);
  }

  inline ReportRequest& operator=(ReportRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportRequest* internal_default_instance() {
    return reinterpret_cast<const ReportRequest*>(
               &_ReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void UnsafeArenaSwap(ReportRequest* other);
  void Swap(ReportRequest* other);
  friend void swap(ReportRequest& a, ReportRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportRequest* New() const final {
    return CreateMaybeMessage<ReportRequest>(NULL);
  }

  ReportRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportRequest& from);
  void MergeFrom(const ReportRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportRequest* other);
  protected:
  explicit ReportRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReportRequest_RepeatedAttributesSemantics RepeatedAttributesSemantics;
  static const RepeatedAttributesSemantics DELTA_ENCODING =
    ReportRequest_RepeatedAttributesSemantics_DELTA_ENCODING;
  static const RepeatedAttributesSemantics INDEPENDENT_ENCODING =
    ReportRequest_RepeatedAttributesSemantics_INDEPENDENT_ENCODING;
  static inline bool RepeatedAttributesSemantics_IsValid(int value) {
    return ReportRequest_RepeatedAttributesSemantics_IsValid(value);
  }
  static const RepeatedAttributesSemantics RepeatedAttributesSemantics_MIN =
    ReportRequest_RepeatedAttributesSemantics_RepeatedAttributesSemantics_MIN;
  static const RepeatedAttributesSemantics RepeatedAttributesSemantics_MAX =
    ReportRequest_RepeatedAttributesSemantics_RepeatedAttributesSemantics_MAX;
  static const int RepeatedAttributesSemantics_ARRAYSIZE =
    ReportRequest_RepeatedAttributesSemantics_RepeatedAttributesSemantics_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RepeatedAttributesSemantics_descriptor() {
    return ReportRequest_RepeatedAttributesSemantics_descriptor();
  }
  static inline const ::std::string& RepeatedAttributesSemantics_Name(RepeatedAttributesSemantics value) {
    return ReportRequest_RepeatedAttributesSemantics_Name(value);
  }
  static inline bool RepeatedAttributesSemantics_Parse(const ::std::string& name,
      RepeatedAttributesSemantics* value) {
    return ReportRequest_RepeatedAttributesSemantics_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 1;
  ::istio::mixer::v1::CompressedAttributes* mutable_attributes(int index);
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::CompressedAttributes >*
      mutable_attributes();
  const ::istio::mixer::v1::CompressedAttributes& attributes(int index) const;
  ::istio::mixer::v1::CompressedAttributes* add_attributes();
  const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::CompressedAttributes >&
      attributes() const;

  // repeated string default_words = 2;
  int default_words_size() const;
  void clear_default_words();
  static const int kDefaultWordsFieldNumber = 2;
  const ::std::string& default_words(int index) const;
  ::std::string* mutable_default_words(int index);
  void set_default_words(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_default_words(int index, ::std::string&& value);
  #endif
  void set_default_words(int index, const char* value);
  void set_default_words(int index, const char* value, size_t size);
  ::std::string* add_default_words();
  void add_default_words(const ::std::string& value);
  #if LANG_CXX11
  void add_default_words(::std::string&& value);
  #endif
  void add_default_words(const char* value);
  void add_default_words(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& default_words() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_default_words();

  // uint32 global_word_count = 3;
  void clear_global_word_count();
  static const int kGlobalWordCountFieldNumber = 3;
  ::google::protobuf::uint32 global_word_count() const;
  void set_global_word_count(::google::protobuf::uint32 value);

  // .istio.mixer.v1.ReportRequest.RepeatedAttributesSemantics repeated_attributes_semantics = 4;
  void clear_repeated_attributes_semantics();
  static const int kRepeatedAttributesSemanticsFieldNumber = 4;
  ::istio::mixer::v1::ReportRequest_RepeatedAttributesSemantics repeated_attributes_semantics() const;
  void set_repeated_attributes_semantics(::istio::mixer::v1::ReportRequest_RepeatedAttributesSemantics value);

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.ReportRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::CompressedAttributes > attributes_;
  ::google::protobuf::RepeatedPtrField< ::std::string> default_words_;
  ::google::protobuf::uint32 global_word_count_;
  int repeated_attributes_semantics_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fmixer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReportResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.ReportResponse) */ {
 public:
  ReportResponse();
  virtual ~ReportResponse();

  ReportResponse(const ReportResponse& from);

  inline ReportResponse& operator=(const ReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportResponse(ReportResponse&& from) noexcept
    : ReportResponse() {
    *this = ::std::move(from);
  }

  inline ReportResponse& operator=(ReportResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportResponse* internal_default_instance() {
    return reinterpret_cast<const ReportResponse*>(
               &_ReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void UnsafeArenaSwap(ReportResponse* other);
  void Swap(ReportResponse* other);
  friend void swap(ReportResponse& a, ReportResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportResponse* New() const final {
    return CreateMaybeMessage<ReportResponse>(NULL);
  }

  ReportResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportResponse& from);
  void MergeFrom(const ReportResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportResponse* other);
  protected:
  explicit ReportResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.ReportResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mixer_2fv1_2fmixer_2eproto::TableStruct;
};
// ===================================================================

class Mixer_Stub;

class Mixer : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Mixer() {};
 public:
  virtual ~Mixer();

  typedef Mixer_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Check(::google::protobuf::RpcController* controller,
                       const ::istio::mixer::v1::CheckRequest* request,
                       ::istio::mixer::v1::CheckResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Report(::google::protobuf::RpcController* controller,
                       const ::istio::mixer::v1::ReportRequest* request,
                       ::istio::mixer::v1::ReportResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Mixer);
};

class Mixer_Stub : public Mixer {
 public:
  Mixer_Stub(::google::protobuf::RpcChannel* channel);
  Mixer_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~Mixer_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements Mixer ------------------------------------------

  void Check(::google::protobuf::RpcController* controller,
                       const ::istio::mixer::v1::CheckRequest* request,
                       ::istio::mixer::v1::CheckResponse* response,
                       ::google::protobuf::Closure* done);
  void Report(::google::protobuf::RpcController* controller,
                       const ::istio::mixer::v1::ReportRequest* request,
                       ::istio::mixer::v1::ReportResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Mixer_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CheckRequest_QuotaParams

// int64 amount = 1;
inline void CheckRequest_QuotaParams::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CheckRequest_QuotaParams::amount() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.CheckRequest.QuotaParams.amount)
  return amount_;
}
inline void CheckRequest_QuotaParams::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.CheckRequest.QuotaParams.amount)
}

// bool best_effort = 2;
inline void CheckRequest_QuotaParams::clear_best_effort() {
  best_effort_ = false;
}
inline bool CheckRequest_QuotaParams::best_effort() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.CheckRequest.QuotaParams.best_effort)
  return best_effort_;
}
inline void CheckRequest_QuotaParams::set_best_effort(bool value) {
  
  best_effort_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.CheckRequest.QuotaParams.best_effort)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CheckRequest

// .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];
inline bool CheckRequest::has_attributes() const {
  return this != internal_default_instance() && attributes_ != NULL;
}
inline const ::istio::mixer::v1::CompressedAttributes& CheckRequest::_internal_attributes() const {
  return *attributes_;
}
inline const ::istio::mixer::v1::CompressedAttributes& CheckRequest::attributes() const {
  const ::istio::mixer::v1::CompressedAttributes* p = attributes_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.CheckRequest.attributes)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::mixer::v1::CompressedAttributes*>(
      &::istio::mixer::v1::_CompressedAttributes_default_instance_);
}
inline ::istio::mixer::v1::CompressedAttributes* CheckRequest::release_attributes() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.CheckRequest.attributes)
  
  ::istio::mixer::v1::CompressedAttributes* temp = attributes_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  attributes_ = NULL;
  return temp;
}
inline ::istio::mixer::v1::CompressedAttributes* CheckRequest::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:istio.mixer.v1.CheckRequest.attributes)
  
  ::istio::mixer::v1::CompressedAttributes* temp = attributes_;
  attributes_ = NULL;
  return temp;
}
inline ::istio::mixer::v1::CompressedAttributes* CheckRequest::mutable_attributes() {
  
  if (attributes_ == NULL) {
    auto* p = CreateMaybeMessage<::istio::mixer::v1::CompressedAttributes>(GetArenaNoVirtual());
    attributes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.CheckRequest.attributes)
  return attributes_;
}
inline void CheckRequest::set_allocated_attributes(::istio::mixer::v1::CompressedAttributes* attributes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(attributes_);
  }
  if (attributes) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(attributes)->GetArena();
    if (message_arena != submessage_arena) {
      attributes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.CheckRequest.attributes)
}

// uint32 global_word_count = 2;
inline void CheckRequest::clear_global_word_count() {
  global_word_count_ = 0u;
}
inline ::google::protobuf::uint32 CheckRequest::global_word_count() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.CheckRequest.global_word_count)
  return global_word_count_;
}
inline void CheckRequest::set_global_word_count(::google::protobuf::uint32 value) {
  
  global_word_count_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.CheckRequest.global_word_count)
}

// string deduplication_id = 3;
inline void CheckRequest::clear_deduplication_id() {
  deduplication_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CheckRequest::deduplication_id() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.CheckRequest.deduplication_id)
  return deduplication_id_.Get();
}
inline void CheckRequest::set_deduplication_id(const ::std::string& value) {
  
  deduplication_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:istio.mixer.v1.CheckRequest.deduplication_id)
}
#if LANG_CXX11
inline void CheckRequest::set_deduplication_id(::std::string&& value) {
  
  deduplication_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:istio.mixer.v1.CheckRequest.deduplication_id)
}
#endif
inline void CheckRequest::set_deduplication_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deduplication_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:istio.mixer.v1.CheckRequest.deduplication_id)
}
inline void CheckRequest::set_deduplication_id(const char* value,
    size_t size) {
  
  deduplication_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:istio.mixer.v1.CheckRequest.deduplication_id)
}
inline ::std::string* CheckRequest::mutable_deduplication_id() {
  
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.CheckRequest.deduplication_id)
  return deduplication_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckRequest::release_deduplication_id() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.CheckRequest.deduplication_id)
  
  return deduplication_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CheckRequest::set_allocated_deduplication_id(::std::string* deduplication_id) {
  if (deduplication_id != NULL) {
    
  } else {
    
  }
  deduplication_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deduplication_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.CheckRequest.deduplication_id)
}
inline ::std::string* CheckRequest::unsafe_arena_release_deduplication_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:istio.mixer.v1.CheckRequest.deduplication_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return deduplication_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CheckRequest::unsafe_arena_set_allocated_deduplication_id(
    ::std::string* deduplication_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (deduplication_id != NULL) {
    
  } else {
    
  }
  deduplication_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      deduplication_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:istio.mixer.v1.CheckRequest.deduplication_id)
}

// map<string, .istio.mixer.v1.CheckRequest.QuotaParams> quotas = 4 [(.gogoproto.nullable) = false];
inline int CheckRequest::quotas_size() const {
  return quotas_.size();
}
inline void CheckRequest::clear_quotas() {
  quotas_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::istio::mixer::v1::CheckRequest_QuotaParams >&
CheckRequest::quotas() const {
  // @@protoc_insertion_point(field_map:istio.mixer.v1.CheckRequest.quotas)
  return quotas_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::istio::mixer::v1::CheckRequest_QuotaParams >*
CheckRequest::mutable_quotas() {
  // @@protoc_insertion_point(field_mutable_map:istio.mixer.v1.CheckRequest.quotas)
  return quotas_.MutableMap();
}

// -------------------------------------------------------------------

// CheckResponse_PreconditionResult

// .google.rpc.Status status = 1 [(.gogoproto.nullable) = false];
inline bool CheckResponse_PreconditionResult::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline const ::google::rpc::Status& CheckResponse_PreconditionResult::_internal_status() const {
  return *status_;
}
inline const ::google::rpc::Status& CheckResponse_PreconditionResult::status() const {
  const ::google::rpc::Status* p = status_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.CheckResponse.PreconditionResult.status)
  return p != NULL ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline ::google::rpc::Status* CheckResponse_PreconditionResult::release_status() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.CheckResponse.PreconditionResult.status)
  
  ::google::rpc::Status* temp = status_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  status_ = NULL;
  return temp;
}
inline ::google::rpc::Status* CheckResponse_PreconditionResult::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:istio.mixer.v1.CheckResponse.PreconditionResult.status)
  
  ::google::rpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::google::rpc::Status* CheckResponse_PreconditionResult::mutable_status() {
  
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.CheckResponse.PreconditionResult.status)
  return status_;
}
inline void CheckResponse_PreconditionResult::set_allocated_status(::google::rpc::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.CheckResponse.PreconditionResult.status)
}

// .google.protobuf.Duration valid_duration = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
inline bool CheckResponse_PreconditionResult::has_valid_duration() const {
  return this != internal_default_instance() && valid_duration_ != NULL;
}
inline const ::google::protobuf::Duration& CheckResponse_PreconditionResult::_internal_valid_duration() const {
  return *valid_duration_;
}
inline const ::google::protobuf::Duration& CheckResponse_PreconditionResult::valid_duration() const {
  const ::google::protobuf::Duration* p = valid_duration_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.CheckResponse.PreconditionResult.valid_duration)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* CheckResponse_PreconditionResult::release_valid_duration() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.CheckResponse.PreconditionResult.valid_duration)
  
  ::google::protobuf::Duration* temp = valid_duration_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  valid_duration_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* CheckResponse_PreconditionResult::unsafe_arena_release_valid_duration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:istio.mixer.v1.CheckResponse.PreconditionResult.valid_duration)
  
  ::google::protobuf::Duration* temp = valid_duration_;
  valid_duration_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* CheckResponse_PreconditionResult::mutable_valid_duration() {
  
  if (valid_duration_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    valid_duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.CheckResponse.PreconditionResult.valid_duration)
  return valid_duration_;
}
inline void CheckResponse_PreconditionResult::set_allocated_valid_duration(::google::protobuf::Duration* valid_duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(valid_duration_);
  }
  if (valid_duration) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(valid_duration)->GetArena();
    if (message_arena != submessage_arena) {
      valid_duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, valid_duration, submessage_arena);
    }
    
  } else {
    
  }
  valid_duration_ = valid_duration;
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.CheckResponse.PreconditionResult.valid_duration)
}

// int32 valid_use_count = 3;
inline void CheckResponse_PreconditionResult::clear_valid_use_count() {
  valid_use_count_ = 0;
}
inline ::google::protobuf::int32 CheckResponse_PreconditionResult::valid_use_count() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.CheckResponse.PreconditionResult.valid_use_count)
  return valid_use_count_;
}
inline void CheckResponse_PreconditionResult::set_valid_use_count(::google::protobuf::int32 value) {
  
  valid_use_count_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.CheckResponse.PreconditionResult.valid_use_count)
}

// .istio.mixer.v1.ReferencedAttributes referenced_attributes = 5;
inline bool CheckResponse_PreconditionResult::has_referenced_attributes() const {
  return this != internal_default_instance() && referenced_attributes_ != NULL;
}
inline void CheckResponse_PreconditionResult::clear_referenced_attributes() {
  if (GetArenaNoVirtual() == NULL && referenced_attributes_ != NULL) {
    delete referenced_attributes_;
  }
  referenced_attributes_ = NULL;
}
inline const ::istio::mixer::v1::ReferencedAttributes& CheckResponse_PreconditionResult::_internal_referenced_attributes() const {
  return *referenced_attributes_;
}
inline const ::istio::mixer::v1::ReferencedAttributes& CheckResponse_PreconditionResult::referenced_attributes() const {
  const ::istio::mixer::v1::ReferencedAttributes* p = referenced_attributes_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.CheckResponse.PreconditionResult.referenced_attributes)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::mixer::v1::ReferencedAttributes*>(
      &::istio::mixer::v1::_ReferencedAttributes_default_instance_);
}
inline ::istio::mixer::v1::ReferencedAttributes* CheckResponse_PreconditionResult::release_referenced_attributes() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.CheckResponse.PreconditionResult.referenced_attributes)
  
  ::istio::mixer::v1::ReferencedAttributes* temp = referenced_attributes_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  referenced_attributes_ = NULL;
  return temp;
}
inline ::istio::mixer::v1::ReferencedAttributes* CheckResponse_PreconditionResult::unsafe_arena_release_referenced_attributes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:istio.mixer.v1.CheckResponse.PreconditionResult.referenced_attributes)
  
  ::istio::mixer::v1::ReferencedAttributes* temp = referenced_attributes_;
  referenced_attributes_ = NULL;
  return temp;
}
inline ::istio::mixer::v1::ReferencedAttributes* CheckResponse_PreconditionResult::mutable_referenced_attributes() {
  
  if (referenced_attributes_ == NULL) {
    auto* p = CreateMaybeMessage<::istio::mixer::v1::ReferencedAttributes>(GetArenaNoVirtual());
    referenced_attributes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.CheckResponse.PreconditionResult.referenced_attributes)
  return referenced_attributes_;
}
inline void CheckResponse_PreconditionResult::set_allocated_referenced_attributes(::istio::mixer::v1::ReferencedAttributes* referenced_attributes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete referenced_attributes_;
  }
  if (referenced_attributes) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(referenced_attributes);
    if (message_arena != submessage_arena) {
      referenced_attributes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, referenced_attributes, submessage_arena);
    }
    
  } else {
    
  }
  referenced_attributes_ = referenced_attributes;
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.CheckResponse.PreconditionResult.referenced_attributes)
}

// .istio.mixer.v1.RouteDirective route_directive = 6;
inline bool CheckResponse_PreconditionResult::has_route_directive() const {
  return this != internal_default_instance() && route_directive_ != NULL;
}
inline void CheckResponse_PreconditionResult::clear_route_directive() {
  if (GetArenaNoVirtual() == NULL && route_directive_ != NULL) {
    delete route_directive_;
  }
  route_directive_ = NULL;
}
inline const ::istio::mixer::v1::RouteDirective& CheckResponse_PreconditionResult::_internal_route_directive() const {
  return *route_directive_;
}
inline const ::istio::mixer::v1::RouteDirective& CheckResponse_PreconditionResult::route_directive() const {
  const ::istio::mixer::v1::RouteDirective* p = route_directive_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.CheckResponse.PreconditionResult.route_directive)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::mixer::v1::RouteDirective*>(
      &::istio::mixer::v1::_RouteDirective_default_instance_);
}
inline ::istio::mixer::v1::RouteDirective* CheckResponse_PreconditionResult::release_route_directive() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.CheckResponse.PreconditionResult.route_directive)
  
  ::istio::mixer::v1::RouteDirective* temp = route_directive_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  route_directive_ = NULL;
  return temp;
}
inline ::istio::mixer::v1::RouteDirective* CheckResponse_PreconditionResult::unsafe_arena_release_route_directive() {
  // @@protoc_insertion_point(field_unsafe_arena_release:istio.mixer.v1.CheckResponse.PreconditionResult.route_directive)
  
  ::istio::mixer::v1::RouteDirective* temp = route_directive_;
  route_directive_ = NULL;
  return temp;
}
inline ::istio::mixer::v1::RouteDirective* CheckResponse_PreconditionResult::mutable_route_directive() {
  
  if (route_directive_ == NULL) {
    auto* p = CreateMaybeMessage<::istio::mixer::v1::RouteDirective>(GetArenaNoVirtual());
    route_directive_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.CheckResponse.PreconditionResult.route_directive)
  return route_directive_;
}
inline void CheckResponse_PreconditionResult::set_allocated_route_directive(::istio::mixer::v1::RouteDirective* route_directive) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete route_directive_;
  }
  if (route_directive) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(route_directive);
    if (message_arena != submessage_arena) {
      route_directive = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, route_directive, submessage_arena);
    }
    
  } else {
    
  }
  route_directive_ = route_directive;
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.CheckResponse.PreconditionResult.route_directive)
}

// -------------------------------------------------------------------

// CheckResponse_QuotaResult

// .google.protobuf.Duration valid_duration = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
inline bool CheckResponse_QuotaResult::has_valid_duration() const {
  return this != internal_default_instance() && valid_duration_ != NULL;
}
inline const ::google::protobuf::Duration& CheckResponse_QuotaResult::_internal_valid_duration() const {
  return *valid_duration_;
}
inline const ::google::protobuf::Duration& CheckResponse_QuotaResult::valid_duration() const {
  const ::google::protobuf::Duration* p = valid_duration_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.CheckResponse.QuotaResult.valid_duration)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* CheckResponse_QuotaResult::release_valid_duration() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.CheckResponse.QuotaResult.valid_duration)
  
  ::google::protobuf::Duration* temp = valid_duration_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  valid_duration_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* CheckResponse_QuotaResult::unsafe_arena_release_valid_duration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:istio.mixer.v1.CheckResponse.QuotaResult.valid_duration)
  
  ::google::protobuf::Duration* temp = valid_duration_;
  valid_duration_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* CheckResponse_QuotaResult::mutable_valid_duration() {
  
  if (valid_duration_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    valid_duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.CheckResponse.QuotaResult.valid_duration)
  return valid_duration_;
}
inline void CheckResponse_QuotaResult::set_allocated_valid_duration(::google::protobuf::Duration* valid_duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(valid_duration_);
  }
  if (valid_duration) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(valid_duration)->GetArena();
    if (message_arena != submessage_arena) {
      valid_duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, valid_duration, submessage_arena);
    }
    
  } else {
    
  }
  valid_duration_ = valid_duration;
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.CheckResponse.QuotaResult.valid_duration)
}

// int64 granted_amount = 2;
inline void CheckResponse_QuotaResult::clear_granted_amount() {
  granted_amount_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CheckResponse_QuotaResult::granted_amount() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.CheckResponse.QuotaResult.granted_amount)
  return granted_amount_;
}
inline void CheckResponse_QuotaResult::set_granted_amount(::google::protobuf::int64 value) {
  
  granted_amount_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.CheckResponse.QuotaResult.granted_amount)
}

// .istio.mixer.v1.ReferencedAttributes referenced_attributes = 5 [(.gogoproto.nullable) = false];
inline bool CheckResponse_QuotaResult::has_referenced_attributes() const {
  return this != internal_default_instance() && referenced_attributes_ != NULL;
}
inline void CheckResponse_QuotaResult::clear_referenced_attributes() {
  if (GetArenaNoVirtual() == NULL && referenced_attributes_ != NULL) {
    delete referenced_attributes_;
  }
  referenced_attributes_ = NULL;
}
inline const ::istio::mixer::v1::ReferencedAttributes& CheckResponse_QuotaResult::_internal_referenced_attributes() const {
  return *referenced_attributes_;
}
inline const ::istio::mixer::v1::ReferencedAttributes& CheckResponse_QuotaResult::referenced_attributes() const {
  const ::istio::mixer::v1::ReferencedAttributes* p = referenced_attributes_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.CheckResponse.QuotaResult.referenced_attributes)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::mixer::v1::ReferencedAttributes*>(
      &::istio::mixer::v1::_ReferencedAttributes_default_instance_);
}
inline ::istio::mixer::v1::ReferencedAttributes* CheckResponse_QuotaResult::release_referenced_attributes() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.CheckResponse.QuotaResult.referenced_attributes)
  
  ::istio::mixer::v1::ReferencedAttributes* temp = referenced_attributes_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  referenced_attributes_ = NULL;
  return temp;
}
inline ::istio::mixer::v1::ReferencedAttributes* CheckResponse_QuotaResult::unsafe_arena_release_referenced_attributes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:istio.mixer.v1.CheckResponse.QuotaResult.referenced_attributes)
  
  ::istio::mixer::v1::ReferencedAttributes* temp = referenced_attributes_;
  referenced_attributes_ = NULL;
  return temp;
}
inline ::istio::mixer::v1::ReferencedAttributes* CheckResponse_QuotaResult::mutable_referenced_attributes() {
  
  if (referenced_attributes_ == NULL) {
    auto* p = CreateMaybeMessage<::istio::mixer::v1::ReferencedAttributes>(GetArenaNoVirtual());
    referenced_attributes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.CheckResponse.QuotaResult.referenced_attributes)
  return referenced_attributes_;
}
inline void CheckResponse_QuotaResult::set_allocated_referenced_attributes(::istio::mixer::v1::ReferencedAttributes* referenced_attributes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete referenced_attributes_;
  }
  if (referenced_attributes) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(referenced_attributes);
    if (message_arena != submessage_arena) {
      referenced_attributes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, referenced_attributes, submessage_arena);
    }
    
  } else {
    
  }
  referenced_attributes_ = referenced_attributes;
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.CheckResponse.QuotaResult.referenced_attributes)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CheckResponse

// .istio.mixer.v1.CheckResponse.PreconditionResult precondition = 2 [(.gogoproto.nullable) = false];
inline bool CheckResponse::has_precondition() const {
  return this != internal_default_instance() && precondition_ != NULL;
}
inline void CheckResponse::clear_precondition() {
  if (GetArenaNoVirtual() == NULL && precondition_ != NULL) {
    delete precondition_;
  }
  precondition_ = NULL;
}
inline const ::istio::mixer::v1::CheckResponse_PreconditionResult& CheckResponse::_internal_precondition() const {
  return *precondition_;
}
inline const ::istio::mixer::v1::CheckResponse_PreconditionResult& CheckResponse::precondition() const {
  const ::istio::mixer::v1::CheckResponse_PreconditionResult* p = precondition_;
  // @@protoc_insertion_point(field_get:istio.mixer.v1.CheckResponse.precondition)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::mixer::v1::CheckResponse_PreconditionResult*>(
      &::istio::mixer::v1::_CheckResponse_PreconditionResult_default_instance_);
}
inline ::istio::mixer::v1::CheckResponse_PreconditionResult* CheckResponse::release_precondition() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.CheckResponse.precondition)
  
  ::istio::mixer::v1::CheckResponse_PreconditionResult* temp = precondition_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  precondition_ = NULL;
  return temp;
}
inline ::istio::mixer::v1::CheckResponse_PreconditionResult* CheckResponse::unsafe_arena_release_precondition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:istio.mixer.v1.CheckResponse.precondition)
  
  ::istio::mixer::v1::CheckResponse_PreconditionResult* temp = precondition_;
  precondition_ = NULL;
  return temp;
}
inline ::istio::mixer::v1::CheckResponse_PreconditionResult* CheckResponse::mutable_precondition() {
  
  if (precondition_ == NULL) {
    auto* p = CreateMaybeMessage<::istio::mixer::v1::CheckResponse_PreconditionResult>(GetArenaNoVirtual());
    precondition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.CheckResponse.precondition)
  return precondition_;
}
inline void CheckResponse::set_allocated_precondition(::istio::mixer::v1::CheckResponse_PreconditionResult* precondition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete precondition_;
  }
  if (precondition) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(precondition);
    if (message_arena != submessage_arena) {
      precondition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, precondition, submessage_arena);
    }
    
  } else {
    
  }
  precondition_ = precondition;
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.CheckResponse.precondition)
}

// map<string, .istio.mixer.v1.CheckResponse.QuotaResult> quotas = 3 [(.gogoproto.nullable) = false];
inline int CheckResponse::quotas_size() const {
  return quotas_.size();
}
inline void CheckResponse::clear_quotas() {
  quotas_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::istio::mixer::v1::CheckResponse_QuotaResult >&
CheckResponse::quotas() const {
  // @@protoc_insertion_point(field_map:istio.mixer.v1.CheckResponse.quotas)
  return quotas_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::istio::mixer::v1::CheckResponse_QuotaResult >*
CheckResponse::mutable_quotas() {
  // @@protoc_insertion_point(field_mutable_map:istio.mixer.v1.CheckResponse.quotas)
  return quotas_.MutableMap();
}

// -------------------------------------------------------------------

// ReferencedAttributes_AttributeMatch

// sint32 name = 1;
inline void ReferencedAttributes_AttributeMatch::clear_name() {
  name_ = 0;
}
inline ::google::protobuf::int32 ReferencedAttributes_AttributeMatch::name() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.ReferencedAttributes.AttributeMatch.name)
  return name_;
}
inline void ReferencedAttributes_AttributeMatch::set_name(::google::protobuf::int32 value) {
  
  name_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.ReferencedAttributes.AttributeMatch.name)
}

// .istio.mixer.v1.ReferencedAttributes.Condition condition = 2;
inline void ReferencedAttributes_AttributeMatch::clear_condition() {
  condition_ = 0;
}
inline ::istio::mixer::v1::ReferencedAttributes_Condition ReferencedAttributes_AttributeMatch::condition() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.ReferencedAttributes.AttributeMatch.condition)
  return static_cast< ::istio::mixer::v1::ReferencedAttributes_Condition >(condition_);
}
inline void ReferencedAttributes_AttributeMatch::set_condition(::istio::mixer::v1::ReferencedAttributes_Condition value) {
  
  condition_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.ReferencedAttributes.AttributeMatch.condition)
}

// string regex = 3;
inline void ReferencedAttributes_AttributeMatch::clear_regex() {
  regex_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ReferencedAttributes_AttributeMatch::regex() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.ReferencedAttributes.AttributeMatch.regex)
  return regex_.Get();
}
inline void ReferencedAttributes_AttributeMatch::set_regex(const ::std::string& value) {
  
  regex_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:istio.mixer.v1.ReferencedAttributes.AttributeMatch.regex)
}
#if LANG_CXX11
inline void ReferencedAttributes_AttributeMatch::set_regex(::std::string&& value) {
  
  regex_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:istio.mixer.v1.ReferencedAttributes.AttributeMatch.regex)
}
#endif
inline void ReferencedAttributes_AttributeMatch::set_regex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  regex_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:istio.mixer.v1.ReferencedAttributes.AttributeMatch.regex)
}
inline void ReferencedAttributes_AttributeMatch::set_regex(const char* value,
    size_t size) {
  
  regex_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:istio.mixer.v1.ReferencedAttributes.AttributeMatch.regex)
}
inline ::std::string* ReferencedAttributes_AttributeMatch::mutable_regex() {
  
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.ReferencedAttributes.AttributeMatch.regex)
  return regex_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ReferencedAttributes_AttributeMatch::release_regex() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.ReferencedAttributes.AttributeMatch.regex)
  
  return regex_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ReferencedAttributes_AttributeMatch::set_allocated_regex(::std::string* regex) {
  if (regex != NULL) {
    
  } else {
    
  }
  regex_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regex,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.ReferencedAttributes.AttributeMatch.regex)
}
inline ::std::string* ReferencedAttributes_AttributeMatch::unsafe_arena_release_regex() {
  // @@protoc_insertion_point(field_unsafe_arena_release:istio.mixer.v1.ReferencedAttributes.AttributeMatch.regex)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return regex_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ReferencedAttributes_AttributeMatch::unsafe_arena_set_allocated_regex(
    ::std::string* regex) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (regex != NULL) {
    
  } else {
    
  }
  regex_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      regex, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:istio.mixer.v1.ReferencedAttributes.AttributeMatch.regex)
}

// sint32 map_key = 4;
inline void ReferencedAttributes_AttributeMatch::clear_map_key() {
  map_key_ = 0;
}
inline ::google::protobuf::int32 ReferencedAttributes_AttributeMatch::map_key() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.ReferencedAttributes.AttributeMatch.map_key)
  return map_key_;
}
inline void ReferencedAttributes_AttributeMatch::set_map_key(::google::protobuf::int32 value) {
  
  map_key_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.ReferencedAttributes.AttributeMatch.map_key)
}

// -------------------------------------------------------------------

// ReferencedAttributes

// repeated string words = 1;
inline int ReferencedAttributes::words_size() const {
  return words_.size();
}
inline void ReferencedAttributes::clear_words() {
  words_.Clear();
}
inline const ::std::string& ReferencedAttributes::words(int index) const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.ReferencedAttributes.words)
  return words_.Get(index);
}
inline ::std::string* ReferencedAttributes::mutable_words(int index) {
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.ReferencedAttributes.words)
  return words_.Mutable(index);
}
inline void ReferencedAttributes::set_words(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.mixer.v1.ReferencedAttributes.words)
  words_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ReferencedAttributes::set_words(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.mixer.v1.ReferencedAttributes.words)
  words_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ReferencedAttributes::set_words(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  words_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.mixer.v1.ReferencedAttributes.words)
}
inline void ReferencedAttributes::set_words(int index, const char* value, size_t size) {
  words_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.mixer.v1.ReferencedAttributes.words)
}
inline ::std::string* ReferencedAttributes::add_words() {
  // @@protoc_insertion_point(field_add_mutable:istio.mixer.v1.ReferencedAttributes.words)
  return words_.Add();
}
inline void ReferencedAttributes::add_words(const ::std::string& value) {
  words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.mixer.v1.ReferencedAttributes.words)
}
#if LANG_CXX11
inline void ReferencedAttributes::add_words(::std::string&& value) {
  words_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.mixer.v1.ReferencedAttributes.words)
}
#endif
inline void ReferencedAttributes::add_words(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.mixer.v1.ReferencedAttributes.words)
}
inline void ReferencedAttributes::add_words(const char* value, size_t size) {
  words_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.mixer.v1.ReferencedAttributes.words)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReferencedAttributes::words() const {
  // @@protoc_insertion_point(field_list:istio.mixer.v1.ReferencedAttributes.words)
  return words_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReferencedAttributes::mutable_words() {
  // @@protoc_insertion_point(field_mutable_list:istio.mixer.v1.ReferencedAttributes.words)
  return &words_;
}

// repeated .istio.mixer.v1.ReferencedAttributes.AttributeMatch attribute_matches = 2 [(.gogoproto.nullable) = false];
inline int ReferencedAttributes::attribute_matches_size() const {
  return attribute_matches_.size();
}
inline void ReferencedAttributes::clear_attribute_matches() {
  attribute_matches_.Clear();
}
inline ::istio::mixer::v1::ReferencedAttributes_AttributeMatch* ReferencedAttributes::mutable_attribute_matches(int index) {
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.ReferencedAttributes.attribute_matches)
  return attribute_matches_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::ReferencedAttributes_AttributeMatch >*
ReferencedAttributes::mutable_attribute_matches() {
  // @@protoc_insertion_point(field_mutable_list:istio.mixer.v1.ReferencedAttributes.attribute_matches)
  return &attribute_matches_;
}
inline const ::istio::mixer::v1::ReferencedAttributes_AttributeMatch& ReferencedAttributes::attribute_matches(int index) const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.ReferencedAttributes.attribute_matches)
  return attribute_matches_.Get(index);
}
inline ::istio::mixer::v1::ReferencedAttributes_AttributeMatch* ReferencedAttributes::add_attribute_matches() {
  // @@protoc_insertion_point(field_add:istio.mixer.v1.ReferencedAttributes.attribute_matches)
  return attribute_matches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::ReferencedAttributes_AttributeMatch >&
ReferencedAttributes::attribute_matches() const {
  // @@protoc_insertion_point(field_list:istio.mixer.v1.ReferencedAttributes.attribute_matches)
  return attribute_matches_;
}

// -------------------------------------------------------------------

// HeaderOperation

// string name = 1;
inline void HeaderOperation::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& HeaderOperation::name() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.HeaderOperation.name)
  return name_.Get();
}
inline void HeaderOperation::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:istio.mixer.v1.HeaderOperation.name)
}
#if LANG_CXX11
inline void HeaderOperation::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:istio.mixer.v1.HeaderOperation.name)
}
#endif
inline void HeaderOperation::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:istio.mixer.v1.HeaderOperation.name)
}
inline void HeaderOperation::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:istio.mixer.v1.HeaderOperation.name)
}
inline ::std::string* HeaderOperation::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.HeaderOperation.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* HeaderOperation::release_name() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.HeaderOperation.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void HeaderOperation::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.HeaderOperation.name)
}
inline ::std::string* HeaderOperation::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:istio.mixer.v1.HeaderOperation.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void HeaderOperation::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:istio.mixer.v1.HeaderOperation.name)
}

// string value = 2;
inline void HeaderOperation::clear_value() {
  value_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& HeaderOperation::value() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.HeaderOperation.value)
  return value_.Get();
}
inline void HeaderOperation::set_value(const ::std::string& value) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:istio.mixer.v1.HeaderOperation.value)
}
#if LANG_CXX11
inline void HeaderOperation::set_value(::std::string&& value) {
  
  value_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:istio.mixer.v1.HeaderOperation.value)
}
#endif
inline void HeaderOperation::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:istio.mixer.v1.HeaderOperation.value)
}
inline void HeaderOperation::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:istio.mixer.v1.HeaderOperation.value)
}
inline ::std::string* HeaderOperation::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.HeaderOperation.value)
  return value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* HeaderOperation::release_value() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.HeaderOperation.value)
  
  return value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void HeaderOperation::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.HeaderOperation.value)
}
inline ::std::string* HeaderOperation::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:istio.mixer.v1.HeaderOperation.value)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return value_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void HeaderOperation::unsafe_arena_set_allocated_value(
    ::std::string* value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (value != NULL) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:istio.mixer.v1.HeaderOperation.value)
}

// .istio.mixer.v1.HeaderOperation.Operation operation = 3;
inline void HeaderOperation::clear_operation() {
  operation_ = 0;
}
inline ::istio::mixer::v1::HeaderOperation_Operation HeaderOperation::operation() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.HeaderOperation.operation)
  return static_cast< ::istio::mixer::v1::HeaderOperation_Operation >(operation_);
}
inline void HeaderOperation::set_operation(::istio::mixer::v1::HeaderOperation_Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.HeaderOperation.operation)
}

// -------------------------------------------------------------------

// RouteDirective

// repeated .istio.mixer.v1.HeaderOperation request_header_operations = 1 [(.gogoproto.nullable) = false];
inline int RouteDirective::request_header_operations_size() const {
  return request_header_operations_.size();
}
inline void RouteDirective::clear_request_header_operations() {
  request_header_operations_.Clear();
}
inline ::istio::mixer::v1::HeaderOperation* RouteDirective::mutable_request_header_operations(int index) {
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.RouteDirective.request_header_operations)
  return request_header_operations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::HeaderOperation >*
RouteDirective::mutable_request_header_operations() {
  // @@protoc_insertion_point(field_mutable_list:istio.mixer.v1.RouteDirective.request_header_operations)
  return &request_header_operations_;
}
inline const ::istio::mixer::v1::HeaderOperation& RouteDirective::request_header_operations(int index) const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.RouteDirective.request_header_operations)
  return request_header_operations_.Get(index);
}
inline ::istio::mixer::v1::HeaderOperation* RouteDirective::add_request_header_operations() {
  // @@protoc_insertion_point(field_add:istio.mixer.v1.RouteDirective.request_header_operations)
  return request_header_operations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::HeaderOperation >&
RouteDirective::request_header_operations() const {
  // @@protoc_insertion_point(field_list:istio.mixer.v1.RouteDirective.request_header_operations)
  return request_header_operations_;
}

// repeated .istio.mixer.v1.HeaderOperation response_header_operations = 2 [(.gogoproto.nullable) = false];
inline int RouteDirective::response_header_operations_size() const {
  return response_header_operations_.size();
}
inline void RouteDirective::clear_response_header_operations() {
  response_header_operations_.Clear();
}
inline ::istio::mixer::v1::HeaderOperation* RouteDirective::mutable_response_header_operations(int index) {
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.RouteDirective.response_header_operations)
  return response_header_operations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::HeaderOperation >*
RouteDirective::mutable_response_header_operations() {
  // @@protoc_insertion_point(field_mutable_list:istio.mixer.v1.RouteDirective.response_header_operations)
  return &response_header_operations_;
}
inline const ::istio::mixer::v1::HeaderOperation& RouteDirective::response_header_operations(int index) const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.RouteDirective.response_header_operations)
  return response_header_operations_.Get(index);
}
inline ::istio::mixer::v1::HeaderOperation* RouteDirective::add_response_header_operations() {
  // @@protoc_insertion_point(field_add:istio.mixer.v1.RouteDirective.response_header_operations)
  return response_header_operations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::HeaderOperation >&
RouteDirective::response_header_operations() const {
  // @@protoc_insertion_point(field_list:istio.mixer.v1.RouteDirective.response_header_operations)
  return response_header_operations_;
}

// uint32 direct_response_code = 3;
inline void RouteDirective::clear_direct_response_code() {
  direct_response_code_ = 0u;
}
inline ::google::protobuf::uint32 RouteDirective::direct_response_code() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.RouteDirective.direct_response_code)
  return direct_response_code_;
}
inline void RouteDirective::set_direct_response_code(::google::protobuf::uint32 value) {
  
  direct_response_code_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.RouteDirective.direct_response_code)
}

// string direct_response_body = 4;
inline void RouteDirective::clear_direct_response_body() {
  direct_response_body_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& RouteDirective::direct_response_body() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.RouteDirective.direct_response_body)
  return direct_response_body_.Get();
}
inline void RouteDirective::set_direct_response_body(const ::std::string& value) {
  
  direct_response_body_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:istio.mixer.v1.RouteDirective.direct_response_body)
}
#if LANG_CXX11
inline void RouteDirective::set_direct_response_body(::std::string&& value) {
  
  direct_response_body_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:istio.mixer.v1.RouteDirective.direct_response_body)
}
#endif
inline void RouteDirective::set_direct_response_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  direct_response_body_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:istio.mixer.v1.RouteDirective.direct_response_body)
}
inline void RouteDirective::set_direct_response_body(const char* value,
    size_t size) {
  
  direct_response_body_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:istio.mixer.v1.RouteDirective.direct_response_body)
}
inline ::std::string* RouteDirective::mutable_direct_response_body() {
  
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.RouteDirective.direct_response_body)
  return direct_response_body_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RouteDirective::release_direct_response_body() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.RouteDirective.direct_response_body)
  
  return direct_response_body_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void RouteDirective::set_allocated_direct_response_body(::std::string* direct_response_body) {
  if (direct_response_body != NULL) {
    
  } else {
    
  }
  direct_response_body_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), direct_response_body,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.RouteDirective.direct_response_body)
}
inline ::std::string* RouteDirective::unsafe_arena_release_direct_response_body() {
  // @@protoc_insertion_point(field_unsafe_arena_release:istio.mixer.v1.RouteDirective.direct_response_body)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return direct_response_body_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RouteDirective::unsafe_arena_set_allocated_direct_response_body(
    ::std::string* direct_response_body) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (direct_response_body != NULL) {
    
  } else {
    
  }
  direct_response_body_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      direct_response_body, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:istio.mixer.v1.RouteDirective.direct_response_body)
}

// -------------------------------------------------------------------

// ReportRequest

// repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];
inline int ReportRequest::attributes_size() const {
  return attributes_.size();
}
inline ::istio::mixer::v1::CompressedAttributes* ReportRequest::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.ReportRequest.attributes)
  return attributes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::CompressedAttributes >*
ReportRequest::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:istio.mixer.v1.ReportRequest.attributes)
  return &attributes_;
}
inline const ::istio::mixer::v1::CompressedAttributes& ReportRequest::attributes(int index) const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.ReportRequest.attributes)
  return attributes_.Get(index);
}
inline ::istio::mixer::v1::CompressedAttributes* ReportRequest::add_attributes() {
  // @@protoc_insertion_point(field_add:istio.mixer.v1.ReportRequest.attributes)
  return attributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::mixer::v1::CompressedAttributes >&
ReportRequest::attributes() const {
  // @@protoc_insertion_point(field_list:istio.mixer.v1.ReportRequest.attributes)
  return attributes_;
}

// .istio.mixer.v1.ReportRequest.RepeatedAttributesSemantics repeated_attributes_semantics = 4;
inline void ReportRequest::clear_repeated_attributes_semantics() {
  repeated_attributes_semantics_ = 0;
}
inline ::istio::mixer::v1::ReportRequest_RepeatedAttributesSemantics ReportRequest::repeated_attributes_semantics() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.ReportRequest.repeated_attributes_semantics)
  return static_cast< ::istio::mixer::v1::ReportRequest_RepeatedAttributesSemantics >(repeated_attributes_semantics_);
}
inline void ReportRequest::set_repeated_attributes_semantics(::istio::mixer::v1::ReportRequest_RepeatedAttributesSemantics value) {
  
  repeated_attributes_semantics_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.ReportRequest.repeated_attributes_semantics)
}

// repeated string default_words = 2;
inline int ReportRequest::default_words_size() const {
  return default_words_.size();
}
inline void ReportRequest::clear_default_words() {
  default_words_.Clear();
}
inline const ::std::string& ReportRequest::default_words(int index) const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.ReportRequest.default_words)
  return default_words_.Get(index);
}
inline ::std::string* ReportRequest::mutable_default_words(int index) {
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.ReportRequest.default_words)
  return default_words_.Mutable(index);
}
inline void ReportRequest::set_default_words(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.mixer.v1.ReportRequest.default_words)
  default_words_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ReportRequest::set_default_words(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.mixer.v1.ReportRequest.default_words)
  default_words_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ReportRequest::set_default_words(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  default_words_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.mixer.v1.ReportRequest.default_words)
}
inline void ReportRequest::set_default_words(int index, const char* value, size_t size) {
  default_words_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.mixer.v1.ReportRequest.default_words)
}
inline ::std::string* ReportRequest::add_default_words() {
  // @@protoc_insertion_point(field_add_mutable:istio.mixer.v1.ReportRequest.default_words)
  return default_words_.Add();
}
inline void ReportRequest::add_default_words(const ::std::string& value) {
  default_words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.mixer.v1.ReportRequest.default_words)
}
#if LANG_CXX11
inline void ReportRequest::add_default_words(::std::string&& value) {
  default_words_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.mixer.v1.ReportRequest.default_words)
}
#endif
inline void ReportRequest::add_default_words(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  default_words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.mixer.v1.ReportRequest.default_words)
}
inline void ReportRequest::add_default_words(const char* value, size_t size) {
  default_words_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.mixer.v1.ReportRequest.default_words)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReportRequest::default_words() const {
  // @@protoc_insertion_point(field_list:istio.mixer.v1.ReportRequest.default_words)
  return default_words_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReportRequest::mutable_default_words() {
  // @@protoc_insertion_point(field_mutable_list:istio.mixer.v1.ReportRequest.default_words)
  return &default_words_;
}

// uint32 global_word_count = 3;
inline void ReportRequest::clear_global_word_count() {
  global_word_count_ = 0u;
}
inline ::google::protobuf::uint32 ReportRequest::global_word_count() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.ReportRequest.global_word_count)
  return global_word_count_;
}
inline void ReportRequest::set_global_word_count(::google::protobuf::uint32 value) {
  
  global_word_count_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.v1.ReportRequest.global_word_count)
}

// -------------------------------------------------------------------

// ReportResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace mixer
}  // namespace istio

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::istio::mixer::v1::ReferencedAttributes_Condition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::istio::mixer::v1::ReferencedAttributes_Condition>() {
  return ::istio::mixer::v1::ReferencedAttributes_Condition_descriptor();
}
template <> struct is_proto_enum< ::istio::mixer::v1::HeaderOperation_Operation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::istio::mixer::v1::HeaderOperation_Operation>() {
  return ::istio::mixer::v1::HeaderOperation_Operation_descriptor();
}
template <> struct is_proto_enum< ::istio::mixer::v1::ReportRequest_RepeatedAttributesSemantics> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::istio::mixer::v1::ReportRequest_RepeatedAttributesSemantics>() {
  return ::istio::mixer::v1::ReportRequest_RepeatedAttributesSemantics_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_mixer_2fv1_2fmixer_2eproto
