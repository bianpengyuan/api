// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mixer/adapter/model/v1beta1/info.proto

#ifndef PROTOBUF_mixer_2fadapter_2fmodel_2fv1beta1_2finfo_2eproto__INCLUDED
#define PROTOBUF_mixer_2fadapter_2fmodel_2fv1beta1_2finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_mixer_2fadapter_2fmodel_2fv1beta1_2finfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsInfoImpl();
void InitDefaultsInfo();
inline void InitDefaults() {
  InitDefaultsInfo();
}
}  // namespace protobuf_mixer_2fadapter_2fmodel_2fv1beta1_2finfo_2eproto
namespace istio {
namespace mixer {
namespace adapter {
namespace model {
namespace v1beta1 {
class Info;
class InfoDefaultTypeInternal;
extern InfoDefaultTypeInternal _Info_default_instance_;
}  // namespace v1beta1
}  // namespace model
}  // namespace adapter
}  // namespace mixer
}  // namespace istio
namespace istio {
namespace mixer {
namespace adapter {
namespace model {
namespace v1beta1 {

// ===================================================================

class Info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.adapter.model.v1beta1.Info) */ {
 public:
  Info();
  virtual ~Info();

  Info(const Info& from);

  inline Info& operator=(const Info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Info(Info&& from) noexcept
    : Info() {
    *this = ::std::move(from);
  }

  inline Info& operator=(Info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Info* internal_default_instance() {
    return reinterpret_cast<const Info*>(
               &_Info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Info* other);
  friend void swap(Info& a, Info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Info* New() const PROTOBUF_FINAL { return New(NULL); }

  Info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Info& from);
  void MergeFrom(const Info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string templates = 3;
  int templates_size() const;
  void clear_templates();
  static const int kTemplatesFieldNumber = 3;
  const ::std::string& templates(int index) const;
  ::std::string* mutable_templates(int index);
  void set_templates(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_templates(int index, ::std::string&& value);
  #endif
  void set_templates(int index, const char* value);
  void set_templates(int index, const char* value, size_t size);
  ::std::string* add_templates();
  void add_templates(const ::std::string& value);
  #if LANG_CXX11
  void add_templates(::std::string&& value);
  #endif
  void add_templates(const char* value);
  void add_templates(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& templates() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_templates();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string config = 4;
  void clear_config();
  static const int kConfigFieldNumber = 4;
  const ::std::string& config() const;
  void set_config(const ::std::string& value);
  #if LANG_CXX11
  void set_config(::std::string&& value);
  #endif
  void set_config(const char* value);
  void set_config(const char* value, size_t size);
  ::std::string* mutable_config();
  ::std::string* release_config();
  void set_allocated_config(::std::string* config);

  // bool session_based = 5;
  void clear_session_based();
  static const int kSessionBasedFieldNumber = 5;
  bool session_based() const;
  void set_session_based(bool value);

  // @@protoc_insertion_point(class_scope:istio.mixer.adapter.model.v1beta1.Info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> templates_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr config_;
  bool session_based_;
  mutable int _cached_size_;
  friend struct ::protobuf_mixer_2fadapter_2fmodel_2fv1beta1_2finfo_2eproto::TableStruct;
  friend void ::protobuf_mixer_2fadapter_2fmodel_2fv1beta1_2finfo_2eproto::InitDefaultsInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Info

// string name = 1;
inline void Info::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Info::name() const {
  // @@protoc_insertion_point(field_get:istio.mixer.adapter.model.v1beta1.Info.name)
  return name_.GetNoArena();
}
inline void Info::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.mixer.adapter.model.v1beta1.Info.name)
}
#if LANG_CXX11
inline void Info::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.mixer.adapter.model.v1beta1.Info.name)
}
#endif
inline void Info::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.mixer.adapter.model.v1beta1.Info.name)
}
inline void Info::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.mixer.adapter.model.v1beta1.Info.name)
}
inline ::std::string* Info::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:istio.mixer.adapter.model.v1beta1.Info.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Info::release_name() {
  // @@protoc_insertion_point(field_release:istio.mixer.adapter.model.v1beta1.Info.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Info::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.adapter.model.v1beta1.Info.name)
}

// string description = 2;
inline void Info::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Info::description() const {
  // @@protoc_insertion_point(field_get:istio.mixer.adapter.model.v1beta1.Info.description)
  return description_.GetNoArena();
}
inline void Info::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.mixer.adapter.model.v1beta1.Info.description)
}
#if LANG_CXX11
inline void Info::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.mixer.adapter.model.v1beta1.Info.description)
}
#endif
inline void Info::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.mixer.adapter.model.v1beta1.Info.description)
}
inline void Info::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.mixer.adapter.model.v1beta1.Info.description)
}
inline ::std::string* Info::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:istio.mixer.adapter.model.v1beta1.Info.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Info::release_description() {
  // @@protoc_insertion_point(field_release:istio.mixer.adapter.model.v1beta1.Info.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Info::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.adapter.model.v1beta1.Info.description)
}

// repeated string templates = 3;
inline int Info::templates_size() const {
  return templates_.size();
}
inline void Info::clear_templates() {
  templates_.Clear();
}
inline const ::std::string& Info::templates(int index) const {
  // @@protoc_insertion_point(field_get:istio.mixer.adapter.model.v1beta1.Info.templates)
  return templates_.Get(index);
}
inline ::std::string* Info::mutable_templates(int index) {
  // @@protoc_insertion_point(field_mutable:istio.mixer.adapter.model.v1beta1.Info.templates)
  return templates_.Mutable(index);
}
inline void Info::set_templates(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.mixer.adapter.model.v1beta1.Info.templates)
  templates_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Info::set_templates(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.mixer.adapter.model.v1beta1.Info.templates)
  templates_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Info::set_templates(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  templates_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.mixer.adapter.model.v1beta1.Info.templates)
}
inline void Info::set_templates(int index, const char* value, size_t size) {
  templates_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.mixer.adapter.model.v1beta1.Info.templates)
}
inline ::std::string* Info::add_templates() {
  // @@protoc_insertion_point(field_add_mutable:istio.mixer.adapter.model.v1beta1.Info.templates)
  return templates_.Add();
}
inline void Info::add_templates(const ::std::string& value) {
  templates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.mixer.adapter.model.v1beta1.Info.templates)
}
#if LANG_CXX11
inline void Info::add_templates(::std::string&& value) {
  templates_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.mixer.adapter.model.v1beta1.Info.templates)
}
#endif
inline void Info::add_templates(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  templates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.mixer.adapter.model.v1beta1.Info.templates)
}
inline void Info::add_templates(const char* value, size_t size) {
  templates_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.mixer.adapter.model.v1beta1.Info.templates)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Info::templates() const {
  // @@protoc_insertion_point(field_list:istio.mixer.adapter.model.v1beta1.Info.templates)
  return templates_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Info::mutable_templates() {
  // @@protoc_insertion_point(field_mutable_list:istio.mixer.adapter.model.v1beta1.Info.templates)
  return &templates_;
}

// string config = 4;
inline void Info::clear_config() {
  config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Info::config() const {
  // @@protoc_insertion_point(field_get:istio.mixer.adapter.model.v1beta1.Info.config)
  return config_.GetNoArena();
}
inline void Info::set_config(const ::std::string& value) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.mixer.adapter.model.v1beta1.Info.config)
}
#if LANG_CXX11
inline void Info::set_config(::std::string&& value) {
  
  config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.mixer.adapter.model.v1beta1.Info.config)
}
#endif
inline void Info::set_config(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.mixer.adapter.model.v1beta1.Info.config)
}
inline void Info::set_config(const char* value, size_t size) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.mixer.adapter.model.v1beta1.Info.config)
}
inline ::std::string* Info::mutable_config() {
  
  // @@protoc_insertion_point(field_mutable:istio.mixer.adapter.model.v1beta1.Info.config)
  return config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Info::release_config() {
  // @@protoc_insertion_point(field_release:istio.mixer.adapter.model.v1beta1.Info.config)
  
  return config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Info::set_allocated_config(::std::string* config) {
  if (config != NULL) {
    
  } else {
    
  }
  config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config);
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.adapter.model.v1beta1.Info.config)
}

// bool session_based = 5;
inline void Info::clear_session_based() {
  session_based_ = false;
}
inline bool Info::session_based() const {
  // @@protoc_insertion_point(field_get:istio.mixer.adapter.model.v1beta1.Info.session_based)
  return session_based_;
}
inline void Info::set_session_based(bool value) {
  
  session_based_ = value;
  // @@protoc_insertion_point(field_set:istio.mixer.adapter.model.v1beta1.Info.session_based)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace model
}  // namespace adapter
}  // namespace mixer
}  // namespace istio

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mixer_2fadapter_2fmodel_2fv1beta1_2finfo_2eproto__INCLUDED
