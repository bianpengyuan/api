// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mixer/adapter/model/v1beta1/check.proto

#include "mixer/adapter/model/v1beta1/check.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fduration_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration;
}  // namespace protobuf_google_2fprotobuf_2fduration_2eproto
namespace protobuf_google_2frpc_2fstatus_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2frpc_2fstatus_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Status;
}  // namespace protobuf_google_2frpc_2fstatus_2eproto
namespace istio {
namespace mixer {
namespace adapter {
namespace model {
namespace v1beta1 {
class CheckResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckResult>
      _instance;
} _CheckResult_default_instance_;
}  // namespace v1beta1
}  // namespace model
}  // namespace adapter
}  // namespace mixer
}  // namespace istio
namespace protobuf_mixer_2fadapter_2fmodel_2fv1beta1_2fcheck_2eproto {
static void InitDefaultsCheckResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::istio::mixer::adapter::model::v1beta1::_CheckResult_default_instance_;
    new (ptr) ::istio::mixer::adapter::model::v1beta1::CheckResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::mixer::adapter::model::v1beta1::CheckResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CheckResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCheckResult}, {
      &protobuf_google_2frpc_2fstatus_2eproto::scc_info_Status.base,
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CheckResult.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::adapter::model::v1beta1::CheckResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::adapter::model::v1beta1::CheckResult, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::adapter::model::v1beta1::CheckResult, valid_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::mixer::adapter::model::v1beta1::CheckResult, valid_use_count_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::istio::mixer::adapter::model::v1beta1::CheckResult)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::mixer::adapter::model::v1beta1::_CheckResult_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "mixer/adapter/model/v1beta1/check.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\'mixer/adapter/model/v1beta1/check.prot"
      "o\022!istio.mixer.adapter.model.v1beta1\032\024go"
      "goproto/gogo.proto\032\036google/protobuf/dura"
      "tion.proto\032\027google/rpc/status.proto\"\215\001\n\013"
      "CheckResult\022(\n\006status\030\001 \001(\0132\022.google.rpc"
      ".StatusB\004\310\336\037\000\022;\n\016valid_duration\030\002 \001(\0132\031."
      "google.protobuf.DurationB\010\310\336\037\000\230\337\037\001\022\027\n\017va"
      "lid_use_count\030\003 \001(\005B6Z(istio.io/api/mixe"
      "r/adapter/model/v1beta1\310\341\036\000\250\342\036\000\360\341\036\000b\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 363);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mixer/adapter/model/v1beta1/check.proto", &protobuf_RegisterTypes);
  ::protobuf_gogoproto_2fgogo_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::protobuf_google_2frpc_2fstatus_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_mixer_2fadapter_2fmodel_2fv1beta1_2fcheck_2eproto
namespace istio {
namespace mixer {
namespace adapter {
namespace model {
namespace v1beta1 {

// ===================================================================

void CheckResult::InitAsDefaultInstance() {
  ::istio::mixer::adapter::model::v1beta1::_CheckResult_default_instance_._instance.get_mutable()->status_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
  ::istio::mixer::adapter::model::v1beta1::_CheckResult_default_instance_._instance.get_mutable()->valid_duration_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void CheckResult::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}
void CheckResult::clear_valid_duration() {
  if (GetArenaNoVirtual() == NULL && valid_duration_ != NULL) {
    delete valid_duration_;
  }
  valid_duration_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckResult::kStatusFieldNumber;
const int CheckResult::kValidDurationFieldNumber;
const int CheckResult::kValidUseCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckResult::CheckResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mixer_2fadapter_2fmodel_2fv1beta1_2fcheck_2eproto::scc_info_CheckResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.mixer.adapter.model.v1beta1.CheckResult)
}
CheckResult::CheckResult(const CheckResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::google::rpc::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  if (from.has_valid_duration()) {
    valid_duration_ = new ::google::protobuf::Duration(*from.valid_duration_);
  } else {
    valid_duration_ = NULL;
  }
  valid_use_count_ = from.valid_use_count_;
  // @@protoc_insertion_point(copy_constructor:istio.mixer.adapter.model.v1beta1.CheckResult)
}

void CheckResult::SharedCtor() {
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&valid_use_count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(valid_use_count_));
}

CheckResult::~CheckResult() {
  // @@protoc_insertion_point(destructor:istio.mixer.adapter.model.v1beta1.CheckResult)
  SharedDtor();
}

void CheckResult::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete valid_duration_;
}

void CheckResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CheckResult::descriptor() {
  ::protobuf_mixer_2fadapter_2fmodel_2fv1beta1_2fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mixer_2fadapter_2fmodel_2fv1beta1_2fcheck_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckResult& CheckResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mixer_2fadapter_2fmodel_2fv1beta1_2fcheck_2eproto::scc_info_CheckResult.base);
  return *internal_default_instance();
}


void CheckResult::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.mixer.adapter.model.v1beta1.CheckResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
  if (GetArenaNoVirtual() == NULL && valid_duration_ != NULL) {
    delete valid_duration_;
  }
  valid_duration_ = NULL;
  valid_use_count_ = 0;
  _internal_metadata_.Clear();
}

bool CheckResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.mixer.adapter.model.v1beta1.CheckResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.rpc.Status status = 1 [(.gogoproto.nullable) = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration valid_duration = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_valid_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 valid_use_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valid_use_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.mixer.adapter.model.v1beta1.CheckResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.mixer.adapter.model.v1beta1.CheckResult)
  return false;
#undef DO_
}

void CheckResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.mixer.adapter.model.v1beta1.CheckResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status status = 1 [(.gogoproto.nullable) = false];
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_status(), output);
  }

  // .google.protobuf.Duration valid_duration = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  if (this->has_valid_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_valid_duration(), output);
  }

  // int32 valid_use_count = 3;
  if (this->valid_use_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->valid_use_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.mixer.adapter.model.v1beta1.CheckResult)
}

::google::protobuf::uint8* CheckResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.mixer.adapter.model.v1beta1.CheckResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status status = 1 [(.gogoproto.nullable) = false];
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_status(), deterministic, target);
  }

  // .google.protobuf.Duration valid_duration = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  if (this->has_valid_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_valid_duration(), deterministic, target);
  }

  // int32 valid_use_count = 3;
  if (this->valid_use_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->valid_use_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.mixer.adapter.model.v1beta1.CheckResult)
  return target;
}

size_t CheckResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.mixer.adapter.model.v1beta1.CheckResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.rpc.Status status = 1 [(.gogoproto.nullable) = false];
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .google.protobuf.Duration valid_duration = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  if (this->has_valid_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *valid_duration_);
  }

  // int32 valid_use_count = 3;
  if (this->valid_use_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->valid_use_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.mixer.adapter.model.v1beta1.CheckResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.mixer.adapter.model.v1beta1.CheckResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.mixer.adapter.model.v1beta1.CheckResult)
    MergeFrom(*source);
  }
}

void CheckResult::MergeFrom(const CheckResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.mixer.adapter.model.v1beta1.CheckResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::google::rpc::Status::MergeFrom(from.status());
  }
  if (from.has_valid_duration()) {
    mutable_valid_duration()->::google::protobuf::Duration::MergeFrom(from.valid_duration());
  }
  if (from.valid_use_count() != 0) {
    set_valid_use_count(from.valid_use_count());
  }
}

void CheckResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.mixer.adapter.model.v1beta1.CheckResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckResult::CopyFrom(const CheckResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.mixer.adapter.model.v1beta1.CheckResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckResult::IsInitialized() const {
  return true;
}

void CheckResult::Swap(CheckResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckResult::InternalSwap(CheckResult* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(valid_duration_, other->valid_duration_);
  swap(valid_use_count_, other->valid_use_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CheckResult::GetMetadata() const {
  protobuf_mixer_2fadapter_2fmodel_2fv1beta1_2fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mixer_2fadapter_2fmodel_2fv1beta1_2fcheck_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace model
}  // namespace adapter
}  // namespace mixer
}  // namespace istio
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::istio::mixer::adapter::model::v1beta1::CheckResult* Arena::CreateMaybeMessage< ::istio::mixer::adapter::model::v1beta1::CheckResult >(Arena* arena) {
  return Arena::CreateInternal< ::istio::mixer::adapter::model::v1beta1::CheckResult >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
