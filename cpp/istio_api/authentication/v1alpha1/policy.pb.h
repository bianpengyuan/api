// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authentication/v1alpha1/policy.proto

#ifndef PROTOBUF_authentication_2fv1alpha1_2fpolicy_2eproto__INCLUDED
#define PROTOBUF_authentication_2fv1alpha1_2fpolicy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_authentication_2fv1alpha1_2fpolicy_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsStringMatchImpl();
void InitDefaultsStringMatch();
void InitDefaultsMutualTlsImpl();
void InitDefaultsMutualTls();
void InitDefaultsJwt_TriggerRuleImpl();
void InitDefaultsJwt_TriggerRule();
void InitDefaultsJwtImpl();
void InitDefaultsJwt();
void InitDefaultsPeerAuthenticationMethodImpl();
void InitDefaultsPeerAuthenticationMethod();
void InitDefaultsOriginAuthenticationMethodImpl();
void InitDefaultsOriginAuthenticationMethod();
void InitDefaultsPolicyImpl();
void InitDefaultsPolicy();
void InitDefaultsTargetSelector_LabelsEntry_DoNotUseImpl();
void InitDefaultsTargetSelector_LabelsEntry_DoNotUse();
void InitDefaultsTargetSelectorImpl();
void InitDefaultsTargetSelector();
void InitDefaultsPortSelectorImpl();
void InitDefaultsPortSelector();
inline void InitDefaults() {
  InitDefaultsStringMatch();
  InitDefaultsMutualTls();
  InitDefaultsJwt_TriggerRule();
  InitDefaultsJwt();
  InitDefaultsPeerAuthenticationMethod();
  InitDefaultsOriginAuthenticationMethod();
  InitDefaultsPolicy();
  InitDefaultsTargetSelector_LabelsEntry_DoNotUse();
  InitDefaultsTargetSelector();
  InitDefaultsPortSelector();
}
}  // namespace protobuf_authentication_2fv1alpha1_2fpolicy_2eproto
namespace istio {
namespace authentication {
namespace v1alpha1 {
class Jwt;
class JwtDefaultTypeInternal;
extern JwtDefaultTypeInternal _Jwt_default_instance_;
class Jwt_TriggerRule;
class Jwt_TriggerRuleDefaultTypeInternal;
extern Jwt_TriggerRuleDefaultTypeInternal _Jwt_TriggerRule_default_instance_;
class MutualTls;
class MutualTlsDefaultTypeInternal;
extern MutualTlsDefaultTypeInternal _MutualTls_default_instance_;
class OriginAuthenticationMethod;
class OriginAuthenticationMethodDefaultTypeInternal;
extern OriginAuthenticationMethodDefaultTypeInternal _OriginAuthenticationMethod_default_instance_;
class PeerAuthenticationMethod;
class PeerAuthenticationMethodDefaultTypeInternal;
extern PeerAuthenticationMethodDefaultTypeInternal _PeerAuthenticationMethod_default_instance_;
class Policy;
class PolicyDefaultTypeInternal;
extern PolicyDefaultTypeInternal _Policy_default_instance_;
class PortSelector;
class PortSelectorDefaultTypeInternal;
extern PortSelectorDefaultTypeInternal _PortSelector_default_instance_;
class StringMatch;
class StringMatchDefaultTypeInternal;
extern StringMatchDefaultTypeInternal _StringMatch_default_instance_;
class TargetSelector;
class TargetSelectorDefaultTypeInternal;
extern TargetSelectorDefaultTypeInternal _TargetSelector_default_instance_;
class TargetSelector_LabelsEntry_DoNotUse;
class TargetSelector_LabelsEntry_DoNotUseDefaultTypeInternal;
extern TargetSelector_LabelsEntry_DoNotUseDefaultTypeInternal _TargetSelector_LabelsEntry_DoNotUse_default_instance_;
}  // namespace v1alpha1
}  // namespace authentication
}  // namespace istio
namespace istio {
namespace authentication {
namespace v1alpha1 {

enum MutualTls_Mode {
  MutualTls_Mode_STRICT = 0,
  MutualTls_Mode_PERMISSIVE = 1,
  MutualTls_Mode_MutualTls_Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MutualTls_Mode_MutualTls_Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MutualTls_Mode_IsValid(int value);
const MutualTls_Mode MutualTls_Mode_Mode_MIN = MutualTls_Mode_STRICT;
const MutualTls_Mode MutualTls_Mode_Mode_MAX = MutualTls_Mode_PERMISSIVE;
const int MutualTls_Mode_Mode_ARRAYSIZE = MutualTls_Mode_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* MutualTls_Mode_descriptor();
inline const ::std::string& MutualTls_Mode_Name(MutualTls_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    MutualTls_Mode_descriptor(), value);
}
inline bool MutualTls_Mode_Parse(
    const ::std::string& name, MutualTls_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MutualTls_Mode>(
    MutualTls_Mode_descriptor(), name, value);
}
enum PrincipalBinding {
  USE_PEER = 0,
  USE_ORIGIN = 1,
  PrincipalBinding_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PrincipalBinding_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PrincipalBinding_IsValid(int value);
const PrincipalBinding PrincipalBinding_MIN = USE_PEER;
const PrincipalBinding PrincipalBinding_MAX = USE_ORIGIN;
const int PrincipalBinding_ARRAYSIZE = PrincipalBinding_MAX + 1;

const ::google::protobuf::EnumDescriptor* PrincipalBinding_descriptor();
inline const ::std::string& PrincipalBinding_Name(PrincipalBinding value) {
  return ::google::protobuf::internal::NameOfEnum(
    PrincipalBinding_descriptor(), value);
}
inline bool PrincipalBinding_Parse(
    const ::std::string& name, PrincipalBinding* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PrincipalBinding>(
    PrincipalBinding_descriptor(), name, value);
}
// ===================================================================

class StringMatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.authentication.v1alpha1.StringMatch) */ {
 public:
  StringMatch();
  virtual ~StringMatch();

  StringMatch(const StringMatch& from);

  inline StringMatch& operator=(const StringMatch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StringMatch(StringMatch&& from) noexcept
    : StringMatch() {
    *this = ::std::move(from);
  }

  inline StringMatch& operator=(StringMatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StringMatch& default_instance();

  enum MatchTypeCase {
    kExact = 1,
    kPrefix = 2,
    kSuffix = 3,
    kRegex = 4,
    MATCH_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringMatch* internal_default_instance() {
    return reinterpret_cast<const StringMatch*>(
               &_StringMatch_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(StringMatch* other);
  friend void swap(StringMatch& a, StringMatch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StringMatch* New() const PROTOBUF_FINAL { return New(NULL); }

  StringMatch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StringMatch& from);
  void MergeFrom(const StringMatch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StringMatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string exact = 1;
  private:
  bool has_exact() const;
  public:
  void clear_exact();
  static const int kExactFieldNumber = 1;
  const ::std::string& exact() const;
  void set_exact(const ::std::string& value);
  #if LANG_CXX11
  void set_exact(::std::string&& value);
  #endif
  void set_exact(const char* value);
  void set_exact(const char* value, size_t size);
  ::std::string* mutable_exact();
  ::std::string* release_exact();
  void set_allocated_exact(::std::string* exact);

  // string prefix = 2;
  private:
  bool has_prefix() const;
  public:
  void clear_prefix();
  static const int kPrefixFieldNumber = 2;
  const ::std::string& prefix() const;
  void set_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_prefix(::std::string&& value);
  #endif
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  ::std::string* mutable_prefix();
  ::std::string* release_prefix();
  void set_allocated_prefix(::std::string* prefix);

  // string suffix = 3;
  private:
  bool has_suffix() const;
  public:
  void clear_suffix();
  static const int kSuffixFieldNumber = 3;
  const ::std::string& suffix() const;
  void set_suffix(const ::std::string& value);
  #if LANG_CXX11
  void set_suffix(::std::string&& value);
  #endif
  void set_suffix(const char* value);
  void set_suffix(const char* value, size_t size);
  ::std::string* mutable_suffix();
  ::std::string* release_suffix();
  void set_allocated_suffix(::std::string* suffix);

  // string regex = 4;
  private:
  bool has_regex() const;
  public:
  void clear_regex();
  static const int kRegexFieldNumber = 4;
  const ::std::string& regex() const;
  void set_regex(const ::std::string& value);
  #if LANG_CXX11
  void set_regex(::std::string&& value);
  #endif
  void set_regex(const char* value);
  void set_regex(const char* value, size_t size);
  ::std::string* mutable_regex();
  ::std::string* release_regex();
  void set_allocated_regex(::std::string* regex);

  MatchTypeCase match_type_case() const;
  // @@protoc_insertion_point(class_scope:istio.authentication.v1alpha1.StringMatch)
 private:
  void set_has_exact();
  void set_has_prefix();
  void set_has_suffix();
  void set_has_regex();

  inline bool has_match_type() const;
  void clear_match_type();
  inline void clear_has_match_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union MatchTypeUnion {
    MatchTypeUnion() {}
    ::google::protobuf::internal::ArenaStringPtr exact_;
    ::google::protobuf::internal::ArenaStringPtr prefix_;
    ::google::protobuf::internal::ArenaStringPtr suffix_;
    ::google::protobuf::internal::ArenaStringPtr regex_;
  } match_type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_authentication_2fv1alpha1_2fpolicy_2eproto::TableStruct;
  friend void ::protobuf_authentication_2fv1alpha1_2fpolicy_2eproto::InitDefaultsStringMatchImpl();
};
// -------------------------------------------------------------------

class MutualTls : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.authentication.v1alpha1.MutualTls) */ {
 public:
  MutualTls();
  virtual ~MutualTls();

  MutualTls(const MutualTls& from);

  inline MutualTls& operator=(const MutualTls& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MutualTls(MutualTls&& from) noexcept
    : MutualTls() {
    *this = ::std::move(from);
  }

  inline MutualTls& operator=(MutualTls&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MutualTls& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MutualTls* internal_default_instance() {
    return reinterpret_cast<const MutualTls*>(
               &_MutualTls_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(MutualTls* other);
  friend void swap(MutualTls& a, MutualTls& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MutualTls* New() const PROTOBUF_FINAL { return New(NULL); }

  MutualTls* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MutualTls& from);
  void MergeFrom(const MutualTls& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MutualTls* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MutualTls_Mode Mode;
  static const Mode STRICT =
    MutualTls_Mode_STRICT;
  static const Mode PERMISSIVE =
    MutualTls_Mode_PERMISSIVE;
  static inline bool Mode_IsValid(int value) {
    return MutualTls_Mode_IsValid(value);
  }
  static const Mode Mode_MIN =
    MutualTls_Mode_Mode_MIN;
  static const Mode Mode_MAX =
    MutualTls_Mode_Mode_MAX;
  static const int Mode_ARRAYSIZE =
    MutualTls_Mode_Mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mode_descriptor() {
    return MutualTls_Mode_descriptor();
  }
  static inline const ::std::string& Mode_Name(Mode value) {
    return MutualTls_Mode_Name(value);
  }
  static inline bool Mode_Parse(const ::std::string& name,
      Mode* value) {
    return MutualTls_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool allow_tls = 1;
  void clear_allow_tls();
  static const int kAllowTlsFieldNumber = 1;
  bool allow_tls() const;
  void set_allow_tls(bool value);

  // .istio.authentication.v1alpha1.MutualTls.Mode mode = 2;
  void clear_mode();
  static const int kModeFieldNumber = 2;
  ::istio::authentication::v1alpha1::MutualTls_Mode mode() const;
  void set_mode(::istio::authentication::v1alpha1::MutualTls_Mode value);

  // @@protoc_insertion_point(class_scope:istio.authentication.v1alpha1.MutualTls)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool allow_tls_;
  int mode_;
  mutable int _cached_size_;
  friend struct ::protobuf_authentication_2fv1alpha1_2fpolicy_2eproto::TableStruct;
  friend void ::protobuf_authentication_2fv1alpha1_2fpolicy_2eproto::InitDefaultsMutualTlsImpl();
};
// -------------------------------------------------------------------

class Jwt_TriggerRule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.authentication.v1alpha1.Jwt.TriggerRule) */ {
 public:
  Jwt_TriggerRule();
  virtual ~Jwt_TriggerRule();

  Jwt_TriggerRule(const Jwt_TriggerRule& from);

  inline Jwt_TriggerRule& operator=(const Jwt_TriggerRule& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Jwt_TriggerRule(Jwt_TriggerRule&& from) noexcept
    : Jwt_TriggerRule() {
    *this = ::std::move(from);
  }

  inline Jwt_TriggerRule& operator=(Jwt_TriggerRule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Jwt_TriggerRule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Jwt_TriggerRule* internal_default_instance() {
    return reinterpret_cast<const Jwt_TriggerRule*>(
               &_Jwt_TriggerRule_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Jwt_TriggerRule* other);
  friend void swap(Jwt_TriggerRule& a, Jwt_TriggerRule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Jwt_TriggerRule* New() const PROTOBUF_FINAL { return New(NULL); }

  Jwt_TriggerRule* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Jwt_TriggerRule& from);
  void MergeFrom(const Jwt_TriggerRule& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Jwt_TriggerRule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .istio.authentication.v1alpha1.StringMatch excluded_paths = 1;
  int excluded_paths_size() const;
  void clear_excluded_paths();
  static const int kExcludedPathsFieldNumber = 1;
  const ::istio::authentication::v1alpha1::StringMatch& excluded_paths(int index) const;
  ::istio::authentication::v1alpha1::StringMatch* mutable_excluded_paths(int index);
  ::istio::authentication::v1alpha1::StringMatch* add_excluded_paths();
  ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::StringMatch >*
      mutable_excluded_paths();
  const ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::StringMatch >&
      excluded_paths() const;

  // repeated .istio.authentication.v1alpha1.StringMatch included_paths = 2;
  int included_paths_size() const;
  void clear_included_paths();
  static const int kIncludedPathsFieldNumber = 2;
  const ::istio::authentication::v1alpha1::StringMatch& included_paths(int index) const;
  ::istio::authentication::v1alpha1::StringMatch* mutable_included_paths(int index);
  ::istio::authentication::v1alpha1::StringMatch* add_included_paths();
  ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::StringMatch >*
      mutable_included_paths();
  const ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::StringMatch >&
      included_paths() const;

  // @@protoc_insertion_point(class_scope:istio.authentication.v1alpha1.Jwt.TriggerRule)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::StringMatch > excluded_paths_;
  ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::StringMatch > included_paths_;
  mutable int _cached_size_;
  friend struct ::protobuf_authentication_2fv1alpha1_2fpolicy_2eproto::TableStruct;
  friend void ::protobuf_authentication_2fv1alpha1_2fpolicy_2eproto::InitDefaultsJwt_TriggerRuleImpl();
};
// -------------------------------------------------------------------

class Jwt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.authentication.v1alpha1.Jwt) */ {
 public:
  Jwt();
  virtual ~Jwt();

  Jwt(const Jwt& from);

  inline Jwt& operator=(const Jwt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Jwt(Jwt&& from) noexcept
    : Jwt() {
    *this = ::std::move(from);
  }

  inline Jwt& operator=(Jwt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Jwt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Jwt* internal_default_instance() {
    return reinterpret_cast<const Jwt*>(
               &_Jwt_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Jwt* other);
  friend void swap(Jwt& a, Jwt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Jwt* New() const PROTOBUF_FINAL { return New(NULL); }

  Jwt* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Jwt& from);
  void MergeFrom(const Jwt& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Jwt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Jwt_TriggerRule TriggerRule;

  // accessors -------------------------------------------------------

  // repeated string audiences = 2;
  int audiences_size() const;
  void clear_audiences();
  static const int kAudiencesFieldNumber = 2;
  const ::std::string& audiences(int index) const;
  ::std::string* mutable_audiences(int index);
  void set_audiences(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_audiences(int index, ::std::string&& value);
  #endif
  void set_audiences(int index, const char* value);
  void set_audiences(int index, const char* value, size_t size);
  ::std::string* add_audiences();
  void add_audiences(const ::std::string& value);
  #if LANG_CXX11
  void add_audiences(::std::string&& value);
  #endif
  void add_audiences(const char* value);
  void add_audiences(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& audiences() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_audiences();

  // repeated string jwt_headers = 6;
  int jwt_headers_size() const;
  void clear_jwt_headers();
  static const int kJwtHeadersFieldNumber = 6;
  const ::std::string& jwt_headers(int index) const;
  ::std::string* mutable_jwt_headers(int index);
  void set_jwt_headers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_jwt_headers(int index, ::std::string&& value);
  #endif
  void set_jwt_headers(int index, const char* value);
  void set_jwt_headers(int index, const char* value, size_t size);
  ::std::string* add_jwt_headers();
  void add_jwt_headers(const ::std::string& value);
  #if LANG_CXX11
  void add_jwt_headers(::std::string&& value);
  #endif
  void add_jwt_headers(const char* value);
  void add_jwt_headers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& jwt_headers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_jwt_headers();

  // repeated string jwt_params = 7;
  int jwt_params_size() const;
  void clear_jwt_params();
  static const int kJwtParamsFieldNumber = 7;
  const ::std::string& jwt_params(int index) const;
  ::std::string* mutable_jwt_params(int index);
  void set_jwt_params(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_jwt_params(int index, ::std::string&& value);
  #endif
  void set_jwt_params(int index, const char* value);
  void set_jwt_params(int index, const char* value, size_t size);
  ::std::string* add_jwt_params();
  void add_jwt_params(const ::std::string& value);
  #if LANG_CXX11
  void add_jwt_params(::std::string&& value);
  #endif
  void add_jwt_params(const char* value);
  void add_jwt_params(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& jwt_params() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_jwt_params();

  // repeated .istio.authentication.v1alpha1.Jwt.TriggerRule trigger_rules = 9;
  int trigger_rules_size() const;
  void clear_trigger_rules();
  static const int kTriggerRulesFieldNumber = 9;
  const ::istio::authentication::v1alpha1::Jwt_TriggerRule& trigger_rules(int index) const;
  ::istio::authentication::v1alpha1::Jwt_TriggerRule* mutable_trigger_rules(int index);
  ::istio::authentication::v1alpha1::Jwt_TriggerRule* add_trigger_rules();
  ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::Jwt_TriggerRule >*
      mutable_trigger_rules();
  const ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::Jwt_TriggerRule >&
      trigger_rules() const;

  // string issuer = 1;
  void clear_issuer();
  static const int kIssuerFieldNumber = 1;
  const ::std::string& issuer() const;
  void set_issuer(const ::std::string& value);
  #if LANG_CXX11
  void set_issuer(::std::string&& value);
  #endif
  void set_issuer(const char* value);
  void set_issuer(const char* value, size_t size);
  ::std::string* mutable_issuer();
  ::std::string* release_issuer();
  void set_allocated_issuer(::std::string* issuer);

  // string jwks_uri = 3;
  void clear_jwks_uri();
  static const int kJwksUriFieldNumber = 3;
  const ::std::string& jwks_uri() const;
  void set_jwks_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_jwks_uri(::std::string&& value);
  #endif
  void set_jwks_uri(const char* value);
  void set_jwks_uri(const char* value, size_t size);
  ::std::string* mutable_jwks_uri();
  ::std::string* release_jwks_uri();
  void set_allocated_jwks_uri(::std::string* jwks_uri);

  // @@protoc_insertion_point(class_scope:istio.authentication.v1alpha1.Jwt)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> audiences_;
  ::google::protobuf::RepeatedPtrField< ::std::string> jwt_headers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> jwt_params_;
  ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::Jwt_TriggerRule > trigger_rules_;
  ::google::protobuf::internal::ArenaStringPtr issuer_;
  ::google::protobuf::internal::ArenaStringPtr jwks_uri_;
  mutable int _cached_size_;
  friend struct ::protobuf_authentication_2fv1alpha1_2fpolicy_2eproto::TableStruct;
  friend void ::protobuf_authentication_2fv1alpha1_2fpolicy_2eproto::InitDefaultsJwtImpl();
};
// -------------------------------------------------------------------

class PeerAuthenticationMethod : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.authentication.v1alpha1.PeerAuthenticationMethod) */ {
 public:
  PeerAuthenticationMethod();
  virtual ~PeerAuthenticationMethod();

  PeerAuthenticationMethod(const PeerAuthenticationMethod& from);

  inline PeerAuthenticationMethod& operator=(const PeerAuthenticationMethod& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerAuthenticationMethod(PeerAuthenticationMethod&& from) noexcept
    : PeerAuthenticationMethod() {
    *this = ::std::move(from);
  }

  inline PeerAuthenticationMethod& operator=(PeerAuthenticationMethod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerAuthenticationMethod& default_instance();

  enum ParamsCase {
    kMtls = 1,
    kJwt = 2,
    PARAMS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerAuthenticationMethod* internal_default_instance() {
    return reinterpret_cast<const PeerAuthenticationMethod*>(
               &_PeerAuthenticationMethod_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PeerAuthenticationMethod* other);
  friend void swap(PeerAuthenticationMethod& a, PeerAuthenticationMethod& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerAuthenticationMethod* New() const PROTOBUF_FINAL { return New(NULL); }

  PeerAuthenticationMethod* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PeerAuthenticationMethod& from);
  void MergeFrom(const PeerAuthenticationMethod& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PeerAuthenticationMethod* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .istio.authentication.v1alpha1.MutualTls mtls = 1;
  bool has_mtls() const;
  void clear_mtls();
  static const int kMtlsFieldNumber = 1;
  const ::istio::authentication::v1alpha1::MutualTls& mtls() const;
  ::istio::authentication::v1alpha1::MutualTls* release_mtls();
  ::istio::authentication::v1alpha1::MutualTls* mutable_mtls();
  void set_allocated_mtls(::istio::authentication::v1alpha1::MutualTls* mtls);

  // .istio.authentication.v1alpha1.Jwt jwt = 2;
  bool has_jwt() const;
  void clear_jwt();
  static const int kJwtFieldNumber = 2;
  const ::istio::authentication::v1alpha1::Jwt& jwt() const;
  ::istio::authentication::v1alpha1::Jwt* release_jwt();
  ::istio::authentication::v1alpha1::Jwt* mutable_jwt();
  void set_allocated_jwt(::istio::authentication::v1alpha1::Jwt* jwt);

  ParamsCase params_case() const;
  // @@protoc_insertion_point(class_scope:istio.authentication.v1alpha1.PeerAuthenticationMethod)
 private:
  void set_has_mtls();
  void set_has_jwt();

  inline bool has_params() const;
  void clear_params();
  inline void clear_has_params();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ParamsUnion {
    ParamsUnion() {}
    ::istio::authentication::v1alpha1::MutualTls* mtls_;
    ::istio::authentication::v1alpha1::Jwt* jwt_;
  } params_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_authentication_2fv1alpha1_2fpolicy_2eproto::TableStruct;
  friend void ::protobuf_authentication_2fv1alpha1_2fpolicy_2eproto::InitDefaultsPeerAuthenticationMethodImpl();
};
// -------------------------------------------------------------------

class OriginAuthenticationMethod : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.authentication.v1alpha1.OriginAuthenticationMethod) */ {
 public:
  OriginAuthenticationMethod();
  virtual ~OriginAuthenticationMethod();

  OriginAuthenticationMethod(const OriginAuthenticationMethod& from);

  inline OriginAuthenticationMethod& operator=(const OriginAuthenticationMethod& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OriginAuthenticationMethod(OriginAuthenticationMethod&& from) noexcept
    : OriginAuthenticationMethod() {
    *this = ::std::move(from);
  }

  inline OriginAuthenticationMethod& operator=(OriginAuthenticationMethod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OriginAuthenticationMethod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OriginAuthenticationMethod* internal_default_instance() {
    return reinterpret_cast<const OriginAuthenticationMethod*>(
               &_OriginAuthenticationMethod_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(OriginAuthenticationMethod* other);
  friend void swap(OriginAuthenticationMethod& a, OriginAuthenticationMethod& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OriginAuthenticationMethod* New() const PROTOBUF_FINAL { return New(NULL); }

  OriginAuthenticationMethod* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OriginAuthenticationMethod& from);
  void MergeFrom(const OriginAuthenticationMethod& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OriginAuthenticationMethod* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .istio.authentication.v1alpha1.Jwt jwt = 1;
  bool has_jwt() const;
  void clear_jwt();
  static const int kJwtFieldNumber = 1;
  const ::istio::authentication::v1alpha1::Jwt& jwt() const;
  ::istio::authentication::v1alpha1::Jwt* release_jwt();
  ::istio::authentication::v1alpha1::Jwt* mutable_jwt();
  void set_allocated_jwt(::istio::authentication::v1alpha1::Jwt* jwt);

  // @@protoc_insertion_point(class_scope:istio.authentication.v1alpha1.OriginAuthenticationMethod)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::istio::authentication::v1alpha1::Jwt* jwt_;
  mutable int _cached_size_;
  friend struct ::protobuf_authentication_2fv1alpha1_2fpolicy_2eproto::TableStruct;
  friend void ::protobuf_authentication_2fv1alpha1_2fpolicy_2eproto::InitDefaultsOriginAuthenticationMethodImpl();
};
// -------------------------------------------------------------------

class Policy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.authentication.v1alpha1.Policy) */ {
 public:
  Policy();
  virtual ~Policy();

  Policy(const Policy& from);

  inline Policy& operator=(const Policy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Policy(Policy&& from) noexcept
    : Policy() {
    *this = ::std::move(from);
  }

  inline Policy& operator=(Policy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Policy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Policy* internal_default_instance() {
    return reinterpret_cast<const Policy*>(
               &_Policy_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Policy* other);
  friend void swap(Policy& a, Policy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Policy* New() const PROTOBUF_FINAL { return New(NULL); }

  Policy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Policy& from);
  void MergeFrom(const Policy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Policy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .istio.authentication.v1alpha1.TargetSelector targets = 1;
  int targets_size() const;
  void clear_targets();
  static const int kTargetsFieldNumber = 1;
  const ::istio::authentication::v1alpha1::TargetSelector& targets(int index) const;
  ::istio::authentication::v1alpha1::TargetSelector* mutable_targets(int index);
  ::istio::authentication::v1alpha1::TargetSelector* add_targets();
  ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::TargetSelector >*
      mutable_targets();
  const ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::TargetSelector >&
      targets() const;

  // repeated .istio.authentication.v1alpha1.PeerAuthenticationMethod peers = 2;
  int peers_size() const;
  void clear_peers();
  static const int kPeersFieldNumber = 2;
  const ::istio::authentication::v1alpha1::PeerAuthenticationMethod& peers(int index) const;
  ::istio::authentication::v1alpha1::PeerAuthenticationMethod* mutable_peers(int index);
  ::istio::authentication::v1alpha1::PeerAuthenticationMethod* add_peers();
  ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::PeerAuthenticationMethod >*
      mutable_peers();
  const ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::PeerAuthenticationMethod >&
      peers() const;

  // repeated .istio.authentication.v1alpha1.OriginAuthenticationMethod origins = 4;
  int origins_size() const;
  void clear_origins();
  static const int kOriginsFieldNumber = 4;
  const ::istio::authentication::v1alpha1::OriginAuthenticationMethod& origins(int index) const;
  ::istio::authentication::v1alpha1::OriginAuthenticationMethod* mutable_origins(int index);
  ::istio::authentication::v1alpha1::OriginAuthenticationMethod* add_origins();
  ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::OriginAuthenticationMethod >*
      mutable_origins();
  const ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::OriginAuthenticationMethod >&
      origins() const;

  // bool peer_is_optional = 3;
  void clear_peer_is_optional();
  static const int kPeerIsOptionalFieldNumber = 3;
  bool peer_is_optional() const;
  void set_peer_is_optional(bool value);

  // bool origin_is_optional = 5;
  void clear_origin_is_optional();
  static const int kOriginIsOptionalFieldNumber = 5;
  bool origin_is_optional() const;
  void set_origin_is_optional(bool value);

  // .istio.authentication.v1alpha1.PrincipalBinding principal_binding = 6;
  void clear_principal_binding();
  static const int kPrincipalBindingFieldNumber = 6;
  ::istio::authentication::v1alpha1::PrincipalBinding principal_binding() const;
  void set_principal_binding(::istio::authentication::v1alpha1::PrincipalBinding value);

  // @@protoc_insertion_point(class_scope:istio.authentication.v1alpha1.Policy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::TargetSelector > targets_;
  ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::PeerAuthenticationMethod > peers_;
  ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::OriginAuthenticationMethod > origins_;
  bool peer_is_optional_;
  bool origin_is_optional_;
  int principal_binding_;
  mutable int _cached_size_;
  friend struct ::protobuf_authentication_2fv1alpha1_2fpolicy_2eproto::TableStruct;
  friend void ::protobuf_authentication_2fv1alpha1_2fpolicy_2eproto::InitDefaultsPolicyImpl();
};
// -------------------------------------------------------------------

class TargetSelector_LabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<TargetSelector_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<TargetSelector_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  TargetSelector_LabelsEntry_DoNotUse();
  TargetSelector_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const TargetSelector_LabelsEntry_DoNotUse& other);
  static const TargetSelector_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TargetSelector_LabelsEntry_DoNotUse*>(&_TargetSelector_LabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class TargetSelector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.authentication.v1alpha1.TargetSelector) */ {
 public:
  TargetSelector();
  virtual ~TargetSelector();

  TargetSelector(const TargetSelector& from);

  inline TargetSelector& operator=(const TargetSelector& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TargetSelector(TargetSelector&& from) noexcept
    : TargetSelector() {
    *this = ::std::move(from);
  }

  inline TargetSelector& operator=(TargetSelector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TargetSelector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TargetSelector* internal_default_instance() {
    return reinterpret_cast<const TargetSelector*>(
               &_TargetSelector_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(TargetSelector* other);
  friend void swap(TargetSelector& a, TargetSelector& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TargetSelector* New() const PROTOBUF_FINAL { return New(NULL); }

  TargetSelector* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TargetSelector& from);
  void MergeFrom(const TargetSelector& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TargetSelector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .istio.authentication.v1alpha1.PortSelector ports = 2;
  int ports_size() const;
  void clear_ports();
  static const int kPortsFieldNumber = 2;
  const ::istio::authentication::v1alpha1::PortSelector& ports(int index) const;
  ::istio::authentication::v1alpha1::PortSelector* mutable_ports(int index);
  ::istio::authentication::v1alpha1::PortSelector* add_ports();
  ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::PortSelector >*
      mutable_ports();
  const ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::PortSelector >&
      ports() const;

  // map<string, string> labels = 3;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:istio.authentication.v1alpha1.TargetSelector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::PortSelector > ports_;
  ::google::protobuf::internal::MapField<
      TargetSelector_LabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_authentication_2fv1alpha1_2fpolicy_2eproto::TableStruct;
  friend void ::protobuf_authentication_2fv1alpha1_2fpolicy_2eproto::InitDefaultsTargetSelectorImpl();
};
// -------------------------------------------------------------------

class PortSelector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.authentication.v1alpha1.PortSelector) */ {
 public:
  PortSelector();
  virtual ~PortSelector();

  PortSelector(const PortSelector& from);

  inline PortSelector& operator=(const PortSelector& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PortSelector(PortSelector&& from) noexcept
    : PortSelector() {
    *this = ::std::move(from);
  }

  inline PortSelector& operator=(PortSelector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PortSelector& default_instance();

  enum PortCase {
    kNumber = 1,
    kName = 2,
    PORT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PortSelector* internal_default_instance() {
    return reinterpret_cast<const PortSelector*>(
               &_PortSelector_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(PortSelector* other);
  friend void swap(PortSelector& a, PortSelector& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PortSelector* New() const PROTOBUF_FINAL { return New(NULL); }

  PortSelector* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PortSelector& from);
  void MergeFrom(const PortSelector& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PortSelector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 number = 1;
  private:
  bool has_number() const;
  public:
  void clear_number();
  static const int kNumberFieldNumber = 1;
  ::google::protobuf::uint32 number() const;
  void set_number(::google::protobuf::uint32 value);

  // string name = 2;
  private:
  bool has_name() const;
  public:
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  PortCase port_case() const;
  // @@protoc_insertion_point(class_scope:istio.authentication.v1alpha1.PortSelector)
 private:
  void set_has_number();
  void set_has_name();

  inline bool has_port() const;
  void clear_port();
  inline void clear_has_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union PortUnion {
    PortUnion() {}
    ::google::protobuf::uint32 number_;
    ::google::protobuf::internal::ArenaStringPtr name_;
  } port_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_authentication_2fv1alpha1_2fpolicy_2eproto::TableStruct;
  friend void ::protobuf_authentication_2fv1alpha1_2fpolicy_2eproto::InitDefaultsPortSelectorImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StringMatch

// string exact = 1;
inline bool StringMatch::has_exact() const {
  return match_type_case() == kExact;
}
inline void StringMatch::set_has_exact() {
  _oneof_case_[0] = kExact;
}
inline void StringMatch::clear_exact() {
  if (has_exact()) {
    match_type_.exact_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_match_type();
  }
}
inline const ::std::string& StringMatch::exact() const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.StringMatch.exact)
  if (has_exact()) {
    return match_type_.exact_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void StringMatch::set_exact(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.StringMatch.exact)
  if (!has_exact()) {
    clear_match_type();
    set_has_exact();
    match_type_.exact_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.exact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.StringMatch.exact)
}
#if LANG_CXX11
inline void StringMatch::set_exact(::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.StringMatch.exact)
  if (!has_exact()) {
    clear_match_type();
    set_has_exact();
    match_type_.exact_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.exact_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.authentication.v1alpha1.StringMatch.exact)
}
#endif
inline void StringMatch::set_exact(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_exact()) {
    clear_match_type();
    set_has_exact();
    match_type_.exact_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.exact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.authentication.v1alpha1.StringMatch.exact)
}
inline void StringMatch::set_exact(const char* value, size_t size) {
  if (!has_exact()) {
    clear_match_type();
    set_has_exact();
    match_type_.exact_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.exact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.authentication.v1alpha1.StringMatch.exact)
}
inline ::std::string* StringMatch::mutable_exact() {
  if (!has_exact()) {
    clear_match_type();
    set_has_exact();
    match_type_.exact_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:istio.authentication.v1alpha1.StringMatch.exact)
  return match_type_.exact_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StringMatch::release_exact() {
  // @@protoc_insertion_point(field_release:istio.authentication.v1alpha1.StringMatch.exact)
  if (has_exact()) {
    clear_has_match_type();
    return match_type_.exact_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void StringMatch::set_allocated_exact(::std::string* exact) {
  if (!has_exact()) {
    match_type_.exact_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_match_type();
  if (exact != NULL) {
    set_has_exact();
    match_type_.exact_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        exact);
  }
  // @@protoc_insertion_point(field_set_allocated:istio.authentication.v1alpha1.StringMatch.exact)
}

// string prefix = 2;
inline bool StringMatch::has_prefix() const {
  return match_type_case() == kPrefix;
}
inline void StringMatch::set_has_prefix() {
  _oneof_case_[0] = kPrefix;
}
inline void StringMatch::clear_prefix() {
  if (has_prefix()) {
    match_type_.prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_match_type();
  }
}
inline const ::std::string& StringMatch::prefix() const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.StringMatch.prefix)
  if (has_prefix()) {
    return match_type_.prefix_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void StringMatch::set_prefix(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.StringMatch.prefix)
  if (!has_prefix()) {
    clear_match_type();
    set_has_prefix();
    match_type_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.StringMatch.prefix)
}
#if LANG_CXX11
inline void StringMatch::set_prefix(::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.StringMatch.prefix)
  if (!has_prefix()) {
    clear_match_type();
    set_has_prefix();
    match_type_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.authentication.v1alpha1.StringMatch.prefix)
}
#endif
inline void StringMatch::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_prefix()) {
    clear_match_type();
    set_has_prefix();
    match_type_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.authentication.v1alpha1.StringMatch.prefix)
}
inline void StringMatch::set_prefix(const char* value, size_t size) {
  if (!has_prefix()) {
    clear_match_type();
    set_has_prefix();
    match_type_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.authentication.v1alpha1.StringMatch.prefix)
}
inline ::std::string* StringMatch::mutable_prefix() {
  if (!has_prefix()) {
    clear_match_type();
    set_has_prefix();
    match_type_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:istio.authentication.v1alpha1.StringMatch.prefix)
  return match_type_.prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StringMatch::release_prefix() {
  // @@protoc_insertion_point(field_release:istio.authentication.v1alpha1.StringMatch.prefix)
  if (has_prefix()) {
    clear_has_match_type();
    return match_type_.prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void StringMatch::set_allocated_prefix(::std::string* prefix) {
  if (!has_prefix()) {
    match_type_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_match_type();
  if (prefix != NULL) {
    set_has_prefix();
    match_type_.prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        prefix);
  }
  // @@protoc_insertion_point(field_set_allocated:istio.authentication.v1alpha1.StringMatch.prefix)
}

// string suffix = 3;
inline bool StringMatch::has_suffix() const {
  return match_type_case() == kSuffix;
}
inline void StringMatch::set_has_suffix() {
  _oneof_case_[0] = kSuffix;
}
inline void StringMatch::clear_suffix() {
  if (has_suffix()) {
    match_type_.suffix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_match_type();
  }
}
inline const ::std::string& StringMatch::suffix() const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.StringMatch.suffix)
  if (has_suffix()) {
    return match_type_.suffix_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void StringMatch::set_suffix(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.StringMatch.suffix)
  if (!has_suffix()) {
    clear_match_type();
    set_has_suffix();
    match_type_.suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.StringMatch.suffix)
}
#if LANG_CXX11
inline void StringMatch::set_suffix(::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.StringMatch.suffix)
  if (!has_suffix()) {
    clear_match_type();
    set_has_suffix();
    match_type_.suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.suffix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.authentication.v1alpha1.StringMatch.suffix)
}
#endif
inline void StringMatch::set_suffix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_suffix()) {
    clear_match_type();
    set_has_suffix();
    match_type_.suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.authentication.v1alpha1.StringMatch.suffix)
}
inline void StringMatch::set_suffix(const char* value, size_t size) {
  if (!has_suffix()) {
    clear_match_type();
    set_has_suffix();
    match_type_.suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.authentication.v1alpha1.StringMatch.suffix)
}
inline ::std::string* StringMatch::mutable_suffix() {
  if (!has_suffix()) {
    clear_match_type();
    set_has_suffix();
    match_type_.suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:istio.authentication.v1alpha1.StringMatch.suffix)
  return match_type_.suffix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StringMatch::release_suffix() {
  // @@protoc_insertion_point(field_release:istio.authentication.v1alpha1.StringMatch.suffix)
  if (has_suffix()) {
    clear_has_match_type();
    return match_type_.suffix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void StringMatch::set_allocated_suffix(::std::string* suffix) {
  if (!has_suffix()) {
    match_type_.suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_match_type();
  if (suffix != NULL) {
    set_has_suffix();
    match_type_.suffix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        suffix);
  }
  // @@protoc_insertion_point(field_set_allocated:istio.authentication.v1alpha1.StringMatch.suffix)
}

// string regex = 4;
inline bool StringMatch::has_regex() const {
  return match_type_case() == kRegex;
}
inline void StringMatch::set_has_regex() {
  _oneof_case_[0] = kRegex;
}
inline void StringMatch::clear_regex() {
  if (has_regex()) {
    match_type_.regex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_match_type();
  }
}
inline const ::std::string& StringMatch::regex() const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.StringMatch.regex)
  if (has_regex()) {
    return match_type_.regex_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void StringMatch::set_regex(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.StringMatch.regex)
  if (!has_regex()) {
    clear_match_type();
    set_has_regex();
    match_type_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.StringMatch.regex)
}
#if LANG_CXX11
inline void StringMatch::set_regex(::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.StringMatch.regex)
  if (!has_regex()) {
    clear_match_type();
    set_has_regex();
    match_type_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.regex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.authentication.v1alpha1.StringMatch.regex)
}
#endif
inline void StringMatch::set_regex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_regex()) {
    clear_match_type();
    set_has_regex();
    match_type_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.authentication.v1alpha1.StringMatch.regex)
}
inline void StringMatch::set_regex(const char* value, size_t size) {
  if (!has_regex()) {
    clear_match_type();
    set_has_regex();
    match_type_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.authentication.v1alpha1.StringMatch.regex)
}
inline ::std::string* StringMatch::mutable_regex() {
  if (!has_regex()) {
    clear_match_type();
    set_has_regex();
    match_type_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:istio.authentication.v1alpha1.StringMatch.regex)
  return match_type_.regex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StringMatch::release_regex() {
  // @@protoc_insertion_point(field_release:istio.authentication.v1alpha1.StringMatch.regex)
  if (has_regex()) {
    clear_has_match_type();
    return match_type_.regex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void StringMatch::set_allocated_regex(::std::string* regex) {
  if (!has_regex()) {
    match_type_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_match_type();
  if (regex != NULL) {
    set_has_regex();
    match_type_.regex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        regex);
  }
  // @@protoc_insertion_point(field_set_allocated:istio.authentication.v1alpha1.StringMatch.regex)
}

inline bool StringMatch::has_match_type() const {
  return match_type_case() != MATCH_TYPE_NOT_SET;
}
inline void StringMatch::clear_has_match_type() {
  _oneof_case_[0] = MATCH_TYPE_NOT_SET;
}
inline StringMatch::MatchTypeCase StringMatch::match_type_case() const {
  return StringMatch::MatchTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MutualTls

// bool allow_tls = 1;
inline void MutualTls::clear_allow_tls() {
  allow_tls_ = false;
}
inline bool MutualTls::allow_tls() const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.MutualTls.allow_tls)
  return allow_tls_;
}
inline void MutualTls::set_allow_tls(bool value) {
  
  allow_tls_ = value;
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.MutualTls.allow_tls)
}

// .istio.authentication.v1alpha1.MutualTls.Mode mode = 2;
inline void MutualTls::clear_mode() {
  mode_ = 0;
}
inline ::istio::authentication::v1alpha1::MutualTls_Mode MutualTls::mode() const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.MutualTls.mode)
  return static_cast< ::istio::authentication::v1alpha1::MutualTls_Mode >(mode_);
}
inline void MutualTls::set_mode(::istio::authentication::v1alpha1::MutualTls_Mode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.MutualTls.mode)
}

// -------------------------------------------------------------------

// Jwt_TriggerRule

// repeated .istio.authentication.v1alpha1.StringMatch excluded_paths = 1;
inline int Jwt_TriggerRule::excluded_paths_size() const {
  return excluded_paths_.size();
}
inline void Jwt_TriggerRule::clear_excluded_paths() {
  excluded_paths_.Clear();
}
inline const ::istio::authentication::v1alpha1::StringMatch& Jwt_TriggerRule::excluded_paths(int index) const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.Jwt.TriggerRule.excluded_paths)
  return excluded_paths_.Get(index);
}
inline ::istio::authentication::v1alpha1::StringMatch* Jwt_TriggerRule::mutable_excluded_paths(int index) {
  // @@protoc_insertion_point(field_mutable:istio.authentication.v1alpha1.Jwt.TriggerRule.excluded_paths)
  return excluded_paths_.Mutable(index);
}
inline ::istio::authentication::v1alpha1::StringMatch* Jwt_TriggerRule::add_excluded_paths() {
  // @@protoc_insertion_point(field_add:istio.authentication.v1alpha1.Jwt.TriggerRule.excluded_paths)
  return excluded_paths_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::StringMatch >*
Jwt_TriggerRule::mutable_excluded_paths() {
  // @@protoc_insertion_point(field_mutable_list:istio.authentication.v1alpha1.Jwt.TriggerRule.excluded_paths)
  return &excluded_paths_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::StringMatch >&
Jwt_TriggerRule::excluded_paths() const {
  // @@protoc_insertion_point(field_list:istio.authentication.v1alpha1.Jwt.TriggerRule.excluded_paths)
  return excluded_paths_;
}

// repeated .istio.authentication.v1alpha1.StringMatch included_paths = 2;
inline int Jwt_TriggerRule::included_paths_size() const {
  return included_paths_.size();
}
inline void Jwt_TriggerRule::clear_included_paths() {
  included_paths_.Clear();
}
inline const ::istio::authentication::v1alpha1::StringMatch& Jwt_TriggerRule::included_paths(int index) const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.Jwt.TriggerRule.included_paths)
  return included_paths_.Get(index);
}
inline ::istio::authentication::v1alpha1::StringMatch* Jwt_TriggerRule::mutable_included_paths(int index) {
  // @@protoc_insertion_point(field_mutable:istio.authentication.v1alpha1.Jwt.TriggerRule.included_paths)
  return included_paths_.Mutable(index);
}
inline ::istio::authentication::v1alpha1::StringMatch* Jwt_TriggerRule::add_included_paths() {
  // @@protoc_insertion_point(field_add:istio.authentication.v1alpha1.Jwt.TriggerRule.included_paths)
  return included_paths_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::StringMatch >*
Jwt_TriggerRule::mutable_included_paths() {
  // @@protoc_insertion_point(field_mutable_list:istio.authentication.v1alpha1.Jwt.TriggerRule.included_paths)
  return &included_paths_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::StringMatch >&
Jwt_TriggerRule::included_paths() const {
  // @@protoc_insertion_point(field_list:istio.authentication.v1alpha1.Jwt.TriggerRule.included_paths)
  return included_paths_;
}

// -------------------------------------------------------------------

// Jwt

// string issuer = 1;
inline void Jwt::clear_issuer() {
  issuer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Jwt::issuer() const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.Jwt.issuer)
  return issuer_.GetNoArena();
}
inline void Jwt::set_issuer(const ::std::string& value) {
  
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.Jwt.issuer)
}
#if LANG_CXX11
inline void Jwt::set_issuer(::std::string&& value) {
  
  issuer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.authentication.v1alpha1.Jwt.issuer)
}
#endif
inline void Jwt::set_issuer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.authentication.v1alpha1.Jwt.issuer)
}
inline void Jwt::set_issuer(const char* value, size_t size) {
  
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.authentication.v1alpha1.Jwt.issuer)
}
inline ::std::string* Jwt::mutable_issuer() {
  
  // @@protoc_insertion_point(field_mutable:istio.authentication.v1alpha1.Jwt.issuer)
  return issuer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Jwt::release_issuer() {
  // @@protoc_insertion_point(field_release:istio.authentication.v1alpha1.Jwt.issuer)
  
  return issuer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Jwt::set_allocated_issuer(::std::string* issuer) {
  if (issuer != NULL) {
    
  } else {
    
  }
  issuer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuer);
  // @@protoc_insertion_point(field_set_allocated:istio.authentication.v1alpha1.Jwt.issuer)
}

// repeated string audiences = 2;
inline int Jwt::audiences_size() const {
  return audiences_.size();
}
inline void Jwt::clear_audiences() {
  audiences_.Clear();
}
inline const ::std::string& Jwt::audiences(int index) const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.Jwt.audiences)
  return audiences_.Get(index);
}
inline ::std::string* Jwt::mutable_audiences(int index) {
  // @@protoc_insertion_point(field_mutable:istio.authentication.v1alpha1.Jwt.audiences)
  return audiences_.Mutable(index);
}
inline void Jwt::set_audiences(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.Jwt.audiences)
  audiences_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Jwt::set_audiences(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.Jwt.audiences)
  audiences_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Jwt::set_audiences(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  audiences_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.authentication.v1alpha1.Jwt.audiences)
}
inline void Jwt::set_audiences(int index, const char* value, size_t size) {
  audiences_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.authentication.v1alpha1.Jwt.audiences)
}
inline ::std::string* Jwt::add_audiences() {
  // @@protoc_insertion_point(field_add_mutable:istio.authentication.v1alpha1.Jwt.audiences)
  return audiences_.Add();
}
inline void Jwt::add_audiences(const ::std::string& value) {
  audiences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.authentication.v1alpha1.Jwt.audiences)
}
#if LANG_CXX11
inline void Jwt::add_audiences(::std::string&& value) {
  audiences_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.authentication.v1alpha1.Jwt.audiences)
}
#endif
inline void Jwt::add_audiences(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  audiences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.authentication.v1alpha1.Jwt.audiences)
}
inline void Jwt::add_audiences(const char* value, size_t size) {
  audiences_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.authentication.v1alpha1.Jwt.audiences)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Jwt::audiences() const {
  // @@protoc_insertion_point(field_list:istio.authentication.v1alpha1.Jwt.audiences)
  return audiences_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Jwt::mutable_audiences() {
  // @@protoc_insertion_point(field_mutable_list:istio.authentication.v1alpha1.Jwt.audiences)
  return &audiences_;
}

// string jwks_uri = 3;
inline void Jwt::clear_jwks_uri() {
  jwks_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Jwt::jwks_uri() const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.Jwt.jwks_uri)
  return jwks_uri_.GetNoArena();
}
inline void Jwt::set_jwks_uri(const ::std::string& value) {
  
  jwks_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.Jwt.jwks_uri)
}
#if LANG_CXX11
inline void Jwt::set_jwks_uri(::std::string&& value) {
  
  jwks_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.authentication.v1alpha1.Jwt.jwks_uri)
}
#endif
inline void Jwt::set_jwks_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  jwks_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.authentication.v1alpha1.Jwt.jwks_uri)
}
inline void Jwt::set_jwks_uri(const char* value, size_t size) {
  
  jwks_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.authentication.v1alpha1.Jwt.jwks_uri)
}
inline ::std::string* Jwt::mutable_jwks_uri() {
  
  // @@protoc_insertion_point(field_mutable:istio.authentication.v1alpha1.Jwt.jwks_uri)
  return jwks_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Jwt::release_jwks_uri() {
  // @@protoc_insertion_point(field_release:istio.authentication.v1alpha1.Jwt.jwks_uri)
  
  return jwks_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Jwt::set_allocated_jwks_uri(::std::string* jwks_uri) {
  if (jwks_uri != NULL) {
    
  } else {
    
  }
  jwks_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jwks_uri);
  // @@protoc_insertion_point(field_set_allocated:istio.authentication.v1alpha1.Jwt.jwks_uri)
}

// repeated string jwt_headers = 6;
inline int Jwt::jwt_headers_size() const {
  return jwt_headers_.size();
}
inline void Jwt::clear_jwt_headers() {
  jwt_headers_.Clear();
}
inline const ::std::string& Jwt::jwt_headers(int index) const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.Jwt.jwt_headers)
  return jwt_headers_.Get(index);
}
inline ::std::string* Jwt::mutable_jwt_headers(int index) {
  // @@protoc_insertion_point(field_mutable:istio.authentication.v1alpha1.Jwt.jwt_headers)
  return jwt_headers_.Mutable(index);
}
inline void Jwt::set_jwt_headers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.Jwt.jwt_headers)
  jwt_headers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Jwt::set_jwt_headers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.Jwt.jwt_headers)
  jwt_headers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Jwt::set_jwt_headers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  jwt_headers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.authentication.v1alpha1.Jwt.jwt_headers)
}
inline void Jwt::set_jwt_headers(int index, const char* value, size_t size) {
  jwt_headers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.authentication.v1alpha1.Jwt.jwt_headers)
}
inline ::std::string* Jwt::add_jwt_headers() {
  // @@protoc_insertion_point(field_add_mutable:istio.authentication.v1alpha1.Jwt.jwt_headers)
  return jwt_headers_.Add();
}
inline void Jwt::add_jwt_headers(const ::std::string& value) {
  jwt_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.authentication.v1alpha1.Jwt.jwt_headers)
}
#if LANG_CXX11
inline void Jwt::add_jwt_headers(::std::string&& value) {
  jwt_headers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.authentication.v1alpha1.Jwt.jwt_headers)
}
#endif
inline void Jwt::add_jwt_headers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  jwt_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.authentication.v1alpha1.Jwt.jwt_headers)
}
inline void Jwt::add_jwt_headers(const char* value, size_t size) {
  jwt_headers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.authentication.v1alpha1.Jwt.jwt_headers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Jwt::jwt_headers() const {
  // @@protoc_insertion_point(field_list:istio.authentication.v1alpha1.Jwt.jwt_headers)
  return jwt_headers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Jwt::mutable_jwt_headers() {
  // @@protoc_insertion_point(field_mutable_list:istio.authentication.v1alpha1.Jwt.jwt_headers)
  return &jwt_headers_;
}

// repeated string jwt_params = 7;
inline int Jwt::jwt_params_size() const {
  return jwt_params_.size();
}
inline void Jwt::clear_jwt_params() {
  jwt_params_.Clear();
}
inline const ::std::string& Jwt::jwt_params(int index) const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.Jwt.jwt_params)
  return jwt_params_.Get(index);
}
inline ::std::string* Jwt::mutable_jwt_params(int index) {
  // @@protoc_insertion_point(field_mutable:istio.authentication.v1alpha1.Jwt.jwt_params)
  return jwt_params_.Mutable(index);
}
inline void Jwt::set_jwt_params(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.Jwt.jwt_params)
  jwt_params_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Jwt::set_jwt_params(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.Jwt.jwt_params)
  jwt_params_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Jwt::set_jwt_params(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  jwt_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.authentication.v1alpha1.Jwt.jwt_params)
}
inline void Jwt::set_jwt_params(int index, const char* value, size_t size) {
  jwt_params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.authentication.v1alpha1.Jwt.jwt_params)
}
inline ::std::string* Jwt::add_jwt_params() {
  // @@protoc_insertion_point(field_add_mutable:istio.authentication.v1alpha1.Jwt.jwt_params)
  return jwt_params_.Add();
}
inline void Jwt::add_jwt_params(const ::std::string& value) {
  jwt_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.authentication.v1alpha1.Jwt.jwt_params)
}
#if LANG_CXX11
inline void Jwt::add_jwt_params(::std::string&& value) {
  jwt_params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.authentication.v1alpha1.Jwt.jwt_params)
}
#endif
inline void Jwt::add_jwt_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  jwt_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.authentication.v1alpha1.Jwt.jwt_params)
}
inline void Jwt::add_jwt_params(const char* value, size_t size) {
  jwt_params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.authentication.v1alpha1.Jwt.jwt_params)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Jwt::jwt_params() const {
  // @@protoc_insertion_point(field_list:istio.authentication.v1alpha1.Jwt.jwt_params)
  return jwt_params_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Jwt::mutable_jwt_params() {
  // @@protoc_insertion_point(field_mutable_list:istio.authentication.v1alpha1.Jwt.jwt_params)
  return &jwt_params_;
}

// repeated .istio.authentication.v1alpha1.Jwt.TriggerRule trigger_rules = 9;
inline int Jwt::trigger_rules_size() const {
  return trigger_rules_.size();
}
inline void Jwt::clear_trigger_rules() {
  trigger_rules_.Clear();
}
inline const ::istio::authentication::v1alpha1::Jwt_TriggerRule& Jwt::trigger_rules(int index) const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.Jwt.trigger_rules)
  return trigger_rules_.Get(index);
}
inline ::istio::authentication::v1alpha1::Jwt_TriggerRule* Jwt::mutable_trigger_rules(int index) {
  // @@protoc_insertion_point(field_mutable:istio.authentication.v1alpha1.Jwt.trigger_rules)
  return trigger_rules_.Mutable(index);
}
inline ::istio::authentication::v1alpha1::Jwt_TriggerRule* Jwt::add_trigger_rules() {
  // @@protoc_insertion_point(field_add:istio.authentication.v1alpha1.Jwt.trigger_rules)
  return trigger_rules_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::Jwt_TriggerRule >*
Jwt::mutable_trigger_rules() {
  // @@protoc_insertion_point(field_mutable_list:istio.authentication.v1alpha1.Jwt.trigger_rules)
  return &trigger_rules_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::Jwt_TriggerRule >&
Jwt::trigger_rules() const {
  // @@protoc_insertion_point(field_list:istio.authentication.v1alpha1.Jwt.trigger_rules)
  return trigger_rules_;
}

// -------------------------------------------------------------------

// PeerAuthenticationMethod

// .istio.authentication.v1alpha1.MutualTls mtls = 1;
inline bool PeerAuthenticationMethod::has_mtls() const {
  return params_case() == kMtls;
}
inline void PeerAuthenticationMethod::set_has_mtls() {
  _oneof_case_[0] = kMtls;
}
inline void PeerAuthenticationMethod::clear_mtls() {
  if (has_mtls()) {
    delete params_.mtls_;
    clear_has_params();
  }
}
inline ::istio::authentication::v1alpha1::MutualTls* PeerAuthenticationMethod::release_mtls() {
  // @@protoc_insertion_point(field_release:istio.authentication.v1alpha1.PeerAuthenticationMethod.mtls)
  if (has_mtls()) {
    clear_has_params();
      ::istio::authentication::v1alpha1::MutualTls* temp = params_.mtls_;
    params_.mtls_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::istio::authentication::v1alpha1::MutualTls& PeerAuthenticationMethod::mtls() const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.PeerAuthenticationMethod.mtls)
  return has_mtls()
      ? *params_.mtls_
      : *reinterpret_cast< ::istio::authentication::v1alpha1::MutualTls*>(&::istio::authentication::v1alpha1::_MutualTls_default_instance_);
}
inline ::istio::authentication::v1alpha1::MutualTls* PeerAuthenticationMethod::mutable_mtls() {
  if (!has_mtls()) {
    clear_params();
    set_has_mtls();
    params_.mtls_ = new ::istio::authentication::v1alpha1::MutualTls;
  }
  // @@protoc_insertion_point(field_mutable:istio.authentication.v1alpha1.PeerAuthenticationMethod.mtls)
  return params_.mtls_;
}

// .istio.authentication.v1alpha1.Jwt jwt = 2;
inline bool PeerAuthenticationMethod::has_jwt() const {
  return params_case() == kJwt;
}
inline void PeerAuthenticationMethod::set_has_jwt() {
  _oneof_case_[0] = kJwt;
}
inline void PeerAuthenticationMethod::clear_jwt() {
  if (has_jwt()) {
    delete params_.jwt_;
    clear_has_params();
  }
}
inline ::istio::authentication::v1alpha1::Jwt* PeerAuthenticationMethod::release_jwt() {
  // @@protoc_insertion_point(field_release:istio.authentication.v1alpha1.PeerAuthenticationMethod.jwt)
  if (has_jwt()) {
    clear_has_params();
      ::istio::authentication::v1alpha1::Jwt* temp = params_.jwt_;
    params_.jwt_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::istio::authentication::v1alpha1::Jwt& PeerAuthenticationMethod::jwt() const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.PeerAuthenticationMethod.jwt)
  return has_jwt()
      ? *params_.jwt_
      : *reinterpret_cast< ::istio::authentication::v1alpha1::Jwt*>(&::istio::authentication::v1alpha1::_Jwt_default_instance_);
}
inline ::istio::authentication::v1alpha1::Jwt* PeerAuthenticationMethod::mutable_jwt() {
  if (!has_jwt()) {
    clear_params();
    set_has_jwt();
    params_.jwt_ = new ::istio::authentication::v1alpha1::Jwt;
  }
  // @@protoc_insertion_point(field_mutable:istio.authentication.v1alpha1.PeerAuthenticationMethod.jwt)
  return params_.jwt_;
}

inline bool PeerAuthenticationMethod::has_params() const {
  return params_case() != PARAMS_NOT_SET;
}
inline void PeerAuthenticationMethod::clear_has_params() {
  _oneof_case_[0] = PARAMS_NOT_SET;
}
inline PeerAuthenticationMethod::ParamsCase PeerAuthenticationMethod::params_case() const {
  return PeerAuthenticationMethod::ParamsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// OriginAuthenticationMethod

// .istio.authentication.v1alpha1.Jwt jwt = 1;
inline bool OriginAuthenticationMethod::has_jwt() const {
  return this != internal_default_instance() && jwt_ != NULL;
}
inline void OriginAuthenticationMethod::clear_jwt() {
  if (GetArenaNoVirtual() == NULL && jwt_ != NULL) {
    delete jwt_;
  }
  jwt_ = NULL;
}
inline const ::istio::authentication::v1alpha1::Jwt& OriginAuthenticationMethod::jwt() const {
  const ::istio::authentication::v1alpha1::Jwt* p = jwt_;
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.OriginAuthenticationMethod.jwt)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::authentication::v1alpha1::Jwt*>(
      &::istio::authentication::v1alpha1::_Jwt_default_instance_);
}
inline ::istio::authentication::v1alpha1::Jwt* OriginAuthenticationMethod::release_jwt() {
  // @@protoc_insertion_point(field_release:istio.authentication.v1alpha1.OriginAuthenticationMethod.jwt)
  
  ::istio::authentication::v1alpha1::Jwt* temp = jwt_;
  jwt_ = NULL;
  return temp;
}
inline ::istio::authentication::v1alpha1::Jwt* OriginAuthenticationMethod::mutable_jwt() {
  
  if (jwt_ == NULL) {
    jwt_ = new ::istio::authentication::v1alpha1::Jwt;
  }
  // @@protoc_insertion_point(field_mutable:istio.authentication.v1alpha1.OriginAuthenticationMethod.jwt)
  return jwt_;
}
inline void OriginAuthenticationMethod::set_allocated_jwt(::istio::authentication::v1alpha1::Jwt* jwt) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete jwt_;
  }
  if (jwt) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      jwt = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, jwt, submessage_arena);
    }
    
  } else {
    
  }
  jwt_ = jwt;
  // @@protoc_insertion_point(field_set_allocated:istio.authentication.v1alpha1.OriginAuthenticationMethod.jwt)
}

// -------------------------------------------------------------------

// Policy

// repeated .istio.authentication.v1alpha1.TargetSelector targets = 1;
inline int Policy::targets_size() const {
  return targets_.size();
}
inline void Policy::clear_targets() {
  targets_.Clear();
}
inline const ::istio::authentication::v1alpha1::TargetSelector& Policy::targets(int index) const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.Policy.targets)
  return targets_.Get(index);
}
inline ::istio::authentication::v1alpha1::TargetSelector* Policy::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:istio.authentication.v1alpha1.Policy.targets)
  return targets_.Mutable(index);
}
inline ::istio::authentication::v1alpha1::TargetSelector* Policy::add_targets() {
  // @@protoc_insertion_point(field_add:istio.authentication.v1alpha1.Policy.targets)
  return targets_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::TargetSelector >*
Policy::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:istio.authentication.v1alpha1.Policy.targets)
  return &targets_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::TargetSelector >&
Policy::targets() const {
  // @@protoc_insertion_point(field_list:istio.authentication.v1alpha1.Policy.targets)
  return targets_;
}

// repeated .istio.authentication.v1alpha1.PeerAuthenticationMethod peers = 2;
inline int Policy::peers_size() const {
  return peers_.size();
}
inline void Policy::clear_peers() {
  peers_.Clear();
}
inline const ::istio::authentication::v1alpha1::PeerAuthenticationMethod& Policy::peers(int index) const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.Policy.peers)
  return peers_.Get(index);
}
inline ::istio::authentication::v1alpha1::PeerAuthenticationMethod* Policy::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:istio.authentication.v1alpha1.Policy.peers)
  return peers_.Mutable(index);
}
inline ::istio::authentication::v1alpha1::PeerAuthenticationMethod* Policy::add_peers() {
  // @@protoc_insertion_point(field_add:istio.authentication.v1alpha1.Policy.peers)
  return peers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::PeerAuthenticationMethod >*
Policy::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:istio.authentication.v1alpha1.Policy.peers)
  return &peers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::PeerAuthenticationMethod >&
Policy::peers() const {
  // @@protoc_insertion_point(field_list:istio.authentication.v1alpha1.Policy.peers)
  return peers_;
}

// bool peer_is_optional = 3;
inline void Policy::clear_peer_is_optional() {
  peer_is_optional_ = false;
}
inline bool Policy::peer_is_optional() const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.Policy.peer_is_optional)
  return peer_is_optional_;
}
inline void Policy::set_peer_is_optional(bool value) {
  
  peer_is_optional_ = value;
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.Policy.peer_is_optional)
}

// repeated .istio.authentication.v1alpha1.OriginAuthenticationMethod origins = 4;
inline int Policy::origins_size() const {
  return origins_.size();
}
inline void Policy::clear_origins() {
  origins_.Clear();
}
inline const ::istio::authentication::v1alpha1::OriginAuthenticationMethod& Policy::origins(int index) const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.Policy.origins)
  return origins_.Get(index);
}
inline ::istio::authentication::v1alpha1::OriginAuthenticationMethod* Policy::mutable_origins(int index) {
  // @@protoc_insertion_point(field_mutable:istio.authentication.v1alpha1.Policy.origins)
  return origins_.Mutable(index);
}
inline ::istio::authentication::v1alpha1::OriginAuthenticationMethod* Policy::add_origins() {
  // @@protoc_insertion_point(field_add:istio.authentication.v1alpha1.Policy.origins)
  return origins_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::OriginAuthenticationMethod >*
Policy::mutable_origins() {
  // @@protoc_insertion_point(field_mutable_list:istio.authentication.v1alpha1.Policy.origins)
  return &origins_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::OriginAuthenticationMethod >&
Policy::origins() const {
  // @@protoc_insertion_point(field_list:istio.authentication.v1alpha1.Policy.origins)
  return origins_;
}

// bool origin_is_optional = 5;
inline void Policy::clear_origin_is_optional() {
  origin_is_optional_ = false;
}
inline bool Policy::origin_is_optional() const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.Policy.origin_is_optional)
  return origin_is_optional_;
}
inline void Policy::set_origin_is_optional(bool value) {
  
  origin_is_optional_ = value;
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.Policy.origin_is_optional)
}

// .istio.authentication.v1alpha1.PrincipalBinding principal_binding = 6;
inline void Policy::clear_principal_binding() {
  principal_binding_ = 0;
}
inline ::istio::authentication::v1alpha1::PrincipalBinding Policy::principal_binding() const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.Policy.principal_binding)
  return static_cast< ::istio::authentication::v1alpha1::PrincipalBinding >(principal_binding_);
}
inline void Policy::set_principal_binding(::istio::authentication::v1alpha1::PrincipalBinding value) {
  
  principal_binding_ = value;
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.Policy.principal_binding)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TargetSelector

// string name = 1;
inline void TargetSelector::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TargetSelector::name() const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.TargetSelector.name)
  return name_.GetNoArena();
}
inline void TargetSelector::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.TargetSelector.name)
}
#if LANG_CXX11
inline void TargetSelector::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.authentication.v1alpha1.TargetSelector.name)
}
#endif
inline void TargetSelector::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.authentication.v1alpha1.TargetSelector.name)
}
inline void TargetSelector::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.authentication.v1alpha1.TargetSelector.name)
}
inline ::std::string* TargetSelector::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:istio.authentication.v1alpha1.TargetSelector.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TargetSelector::release_name() {
  // @@protoc_insertion_point(field_release:istio.authentication.v1alpha1.TargetSelector.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TargetSelector::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:istio.authentication.v1alpha1.TargetSelector.name)
}

// map<string, string> labels = 3;
inline int TargetSelector::labels_size() const {
  return labels_.size();
}
inline void TargetSelector::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
TargetSelector::labels() const {
  // @@protoc_insertion_point(field_map:istio.authentication.v1alpha1.TargetSelector.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
TargetSelector::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:istio.authentication.v1alpha1.TargetSelector.labels)
  return labels_.MutableMap();
}

// repeated .istio.authentication.v1alpha1.PortSelector ports = 2;
inline int TargetSelector::ports_size() const {
  return ports_.size();
}
inline void TargetSelector::clear_ports() {
  ports_.Clear();
}
inline const ::istio::authentication::v1alpha1::PortSelector& TargetSelector::ports(int index) const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.TargetSelector.ports)
  return ports_.Get(index);
}
inline ::istio::authentication::v1alpha1::PortSelector* TargetSelector::mutable_ports(int index) {
  // @@protoc_insertion_point(field_mutable:istio.authentication.v1alpha1.TargetSelector.ports)
  return ports_.Mutable(index);
}
inline ::istio::authentication::v1alpha1::PortSelector* TargetSelector::add_ports() {
  // @@protoc_insertion_point(field_add:istio.authentication.v1alpha1.TargetSelector.ports)
  return ports_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::PortSelector >*
TargetSelector::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_list:istio.authentication.v1alpha1.TargetSelector.ports)
  return &ports_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::authentication::v1alpha1::PortSelector >&
TargetSelector::ports() const {
  // @@protoc_insertion_point(field_list:istio.authentication.v1alpha1.TargetSelector.ports)
  return ports_;
}

// -------------------------------------------------------------------

// PortSelector

// uint32 number = 1;
inline bool PortSelector::has_number() const {
  return port_case() == kNumber;
}
inline void PortSelector::set_has_number() {
  _oneof_case_[0] = kNumber;
}
inline void PortSelector::clear_number() {
  if (has_number()) {
    port_.number_ = 0u;
    clear_has_port();
  }
}
inline ::google::protobuf::uint32 PortSelector::number() const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.PortSelector.number)
  if (has_number()) {
    return port_.number_;
  }
  return 0u;
}
inline void PortSelector::set_number(::google::protobuf::uint32 value) {
  if (!has_number()) {
    clear_port();
    set_has_number();
  }
  port_.number_ = value;
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.PortSelector.number)
}

// string name = 2;
inline bool PortSelector::has_name() const {
  return port_case() == kName;
}
inline void PortSelector::set_has_name() {
  _oneof_case_[0] = kName;
}
inline void PortSelector::clear_name() {
  if (has_name()) {
    port_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_port();
  }
}
inline const ::std::string& PortSelector::name() const {
  // @@protoc_insertion_point(field_get:istio.authentication.v1alpha1.PortSelector.name)
  if (has_name()) {
    return port_.name_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void PortSelector::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.PortSelector.name)
  if (!has_name()) {
    clear_port();
    set_has_name();
    port_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  port_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.PortSelector.name)
}
#if LANG_CXX11
inline void PortSelector::set_name(::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.authentication.v1alpha1.PortSelector.name)
  if (!has_name()) {
    clear_port();
    set_has_name();
    port_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  port_.name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.authentication.v1alpha1.PortSelector.name)
}
#endif
inline void PortSelector::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_name()) {
    clear_port();
    set_has_name();
    port_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  port_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.authentication.v1alpha1.PortSelector.name)
}
inline void PortSelector::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_port();
    set_has_name();
    port_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  port_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.authentication.v1alpha1.PortSelector.name)
}
inline ::std::string* PortSelector::mutable_name() {
  if (!has_name()) {
    clear_port();
    set_has_name();
    port_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:istio.authentication.v1alpha1.PortSelector.name)
  return port_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PortSelector::release_name() {
  // @@protoc_insertion_point(field_release:istio.authentication.v1alpha1.PortSelector.name)
  if (has_name()) {
    clear_has_port();
    return port_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void PortSelector::set_allocated_name(::std::string* name) {
  if (!has_name()) {
    port_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_port();
  if (name != NULL) {
    set_has_name();
    port_.name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        name);
  }
  // @@protoc_insertion_point(field_set_allocated:istio.authentication.v1alpha1.PortSelector.name)
}

inline bool PortSelector::has_port() const {
  return port_case() != PORT_NOT_SET;
}
inline void PortSelector::clear_has_port() {
  _oneof_case_[0] = PORT_NOT_SET;
}
inline PortSelector::PortCase PortSelector::port_case() const {
  return PortSelector::PortCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace authentication
}  // namespace istio

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::istio::authentication::v1alpha1::MutualTls_Mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::istio::authentication::v1alpha1::MutualTls_Mode>() {
  return ::istio::authentication::v1alpha1::MutualTls_Mode_descriptor();
}
template <> struct is_proto_enum< ::istio::authentication::v1alpha1::PrincipalBinding> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::istio::authentication::v1alpha1::PrincipalBinding>() {
  return ::istio::authentication::v1alpha1::PrincipalBinding_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_authentication_2fv1alpha1_2fpolicy_2eproto__INCLUDED
