// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networking/v1alpha3/envoy_filter.proto

#include "networking/v1alpha3/envoy_filter.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace istio {
namespace networking {
namespace v1alpha3 {
class EnvoyFilter_WorkloadLabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnvoyFilter_WorkloadLabelsEntry_DoNotUse>
      _instance;
} _EnvoyFilter_WorkloadLabelsEntry_DoNotUse_default_instance_;
class EnvoyFilter_ListenerMatchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnvoyFilter_ListenerMatch>
      _instance;
} _EnvoyFilter_ListenerMatch_default_instance_;
class EnvoyFilter_InsertPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnvoyFilter_InsertPosition>
      _instance;
} _EnvoyFilter_InsertPosition_default_instance_;
class EnvoyFilter_FilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnvoyFilter_Filter>
      _instance;
} _EnvoyFilter_Filter_default_instance_;
class EnvoyFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnvoyFilter>
      _instance;
} _EnvoyFilter_default_instance_;
}  // namespace v1alpha3
}  // namespace networking
}  // namespace istio
namespace protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto {
void InitDefaultsEnvoyFilter_WorkloadLabelsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_EnvoyFilter_WorkloadLabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::EnvoyFilter_WorkloadLabelsEntry_DoNotUse();
  }
  ::istio::networking::v1alpha3::EnvoyFilter_WorkloadLabelsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsEnvoyFilter_WorkloadLabelsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnvoyFilter_WorkloadLabelsEntry_DoNotUseImpl);
}

void InitDefaultsEnvoyFilter_ListenerMatchImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_EnvoyFilter_ListenerMatch_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch::InitAsDefaultInstance();
}

void InitDefaultsEnvoyFilter_ListenerMatch() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnvoyFilter_ListenerMatchImpl);
}

void InitDefaultsEnvoyFilter_InsertPositionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_EnvoyFilter_InsertPosition_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::EnvoyFilter_InsertPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::EnvoyFilter_InsertPosition::InitAsDefaultInstance();
}

void InitDefaultsEnvoyFilter_InsertPosition() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnvoyFilter_InsertPositionImpl);
}

void InitDefaultsEnvoyFilter_FilterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::InitDefaultsEnvoyFilter_ListenerMatch();
  protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::InitDefaultsEnvoyFilter_InsertPosition();
  protobuf_google_2fprotobuf_2fstruct_2eproto::InitDefaultsListValue();
  {
    void* ptr = &::istio::networking::v1alpha3::_EnvoyFilter_Filter_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::EnvoyFilter_Filter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::EnvoyFilter_Filter::InitAsDefaultInstance();
}

void InitDefaultsEnvoyFilter_Filter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnvoyFilter_FilterImpl);
}

void InitDefaultsEnvoyFilterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::InitDefaultsEnvoyFilter_WorkloadLabelsEntry_DoNotUse();
  protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::InitDefaultsEnvoyFilter_Filter();
  {
    void* ptr = &::istio::networking::v1alpha3::_EnvoyFilter_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::EnvoyFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::EnvoyFilter::InitAsDefaultInstance();
}

void InitDefaultsEnvoyFilter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnvoyFilterImpl);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::EnvoyFilter_WorkloadLabelsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::EnvoyFilter_WorkloadLabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::EnvoyFilter_WorkloadLabelsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::EnvoyFilter_WorkloadLabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch, port_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch, port_name_prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch, listener_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch, listener_protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch, address_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::EnvoyFilter_InsertPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::EnvoyFilter_InsertPosition, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::EnvoyFilter_InsertPosition, relative_to_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::EnvoyFilter_Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::EnvoyFilter_Filter, listener_match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::EnvoyFilter_Filter, insert_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::EnvoyFilter_Filter, filter_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::EnvoyFilter_Filter, filter_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::EnvoyFilter_Filter, filter_config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::EnvoyFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::EnvoyFilter, workload_labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::EnvoyFilter, filters_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::istio::networking::v1alpha3::EnvoyFilter_WorkloadLabelsEntry_DoNotUse)},
  { 9, -1, sizeof(::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch)},
  { 19, -1, sizeof(::istio::networking::v1alpha3::EnvoyFilter_InsertPosition)},
  { 26, -1, sizeof(::istio::networking::v1alpha3::EnvoyFilter_Filter)},
  { 36, -1, sizeof(::istio::networking::v1alpha3::EnvoyFilter)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_EnvoyFilter_WorkloadLabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_EnvoyFilter_ListenerMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_EnvoyFilter_InsertPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_EnvoyFilter_Filter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_EnvoyFilter_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "networking/v1alpha3/envoy_filter.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n&networking/v1alpha3/envoy_filter.proto"
      "\022\031istio.networking.v1alpha3\032\034google/prot"
      "obuf/struct.proto\"\200\t\n\013EnvoyFilter\022S\n\017wor"
      "kload_labels\030\001 \003(\0132:.istio.networking.v1"
      "alpha3.EnvoyFilter.WorkloadLabelsEntry\022>"
      "\n\007filters\030\002 \003(\0132-.istio.networking.v1alp"
      "ha3.EnvoyFilter.Filter\0325\n\023WorkloadLabels"
      "Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032\214\003"
      "\n\rListenerMatch\022\023\n\013port_number\030\001 \001(\r\022\030\n\020"
      "port_name_prefix\030\002 \001(\t\022X\n\rlistener_type\030"
      "\003 \001(\0162A.istio.networking.v1alpha3.EnvoyF"
      "ilter.ListenerMatch.ListenerType\022`\n\021list"
      "ener_protocol\030\004 \001(\0162E.istio.networking.v"
      "1alpha3.EnvoyFilter.ListenerMatch.Listen"
      "erProtocol\022\017\n\007address\030\005 \003(\t\"O\n\014ListenerT"
      "ype\022\007\n\003ANY\020\000\022\023\n\017SIDECAR_INBOUND\020\001\022\024\n\020SID"
      "ECAR_OUTBOUND\020\002\022\013\n\007GATEWAY\020\003\".\n\020Listener"
      "Protocol\022\007\n\003ALL\020\000\022\010\n\004HTTP\020\001\022\007\n\003TCP\020\002\032\246\001\n"
      "\016InsertPosition\022J\n\005index\030\001 \001(\0162;.istio.n"
      "etworking.v1alpha3.EnvoyFilter.InsertPos"
      "ition.Index\022\023\n\013relative_to\030\002 \001(\t\"3\n\005Inde"
      "x\022\t\n\005FIRST\020\000\022\010\n\004LAST\020\001\022\n\n\006BEFORE\020\002\022\t\n\005AF"
      "TER\020\003\032\354\002\n\006Filter\022L\n\016listener_match\030\001 \001(\013"
      "24.istio.networking.v1alpha3.EnvoyFilter"
      ".ListenerMatch\022N\n\017insert_position\030\002 \001(\0132"
      "5.istio.networking.v1alpha3.EnvoyFilter."
      "InsertPosition\022M\n\013filter_type\030\003 \001(\01628.is"
      "tio.networking.v1alpha3.EnvoyFilter.Filt"
      "er.FilterType\022\023\n\013filter_name\030\004 \001(\t\022.\n\rfi"
      "lter_config\030\005 \001(\0132\027.google.protobuf.Stru"
      "ct\"0\n\nFilterType\022\013\n\007INVALID\020\000\022\010\n\004HTTP\020\001\022"
      "\013\n\007NETWORK\020\002B\"Z istio.io/api/networking/"
      "v1alpha3b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1296);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "networking/v1alpha3/envoy_filter.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fstruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto
namespace istio {
namespace networking {
namespace v1alpha3 {
const ::google::protobuf::EnumDescriptor* EnvoyFilter_ListenerMatch_ListenerType_descriptor() {
  protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::file_level_enum_descriptors[0];
}
bool EnvoyFilter_ListenerMatch_ListenerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EnvoyFilter_ListenerMatch_ListenerType EnvoyFilter_ListenerMatch::ANY;
const EnvoyFilter_ListenerMatch_ListenerType EnvoyFilter_ListenerMatch::SIDECAR_INBOUND;
const EnvoyFilter_ListenerMatch_ListenerType EnvoyFilter_ListenerMatch::SIDECAR_OUTBOUND;
const EnvoyFilter_ListenerMatch_ListenerType EnvoyFilter_ListenerMatch::GATEWAY;
const EnvoyFilter_ListenerMatch_ListenerType EnvoyFilter_ListenerMatch::ListenerType_MIN;
const EnvoyFilter_ListenerMatch_ListenerType EnvoyFilter_ListenerMatch::ListenerType_MAX;
const int EnvoyFilter_ListenerMatch::ListenerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EnvoyFilter_ListenerMatch_ListenerProtocol_descriptor() {
  protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::file_level_enum_descriptors[1];
}
bool EnvoyFilter_ListenerMatch_ListenerProtocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EnvoyFilter_ListenerMatch_ListenerProtocol EnvoyFilter_ListenerMatch::ALL;
const EnvoyFilter_ListenerMatch_ListenerProtocol EnvoyFilter_ListenerMatch::HTTP;
const EnvoyFilter_ListenerMatch_ListenerProtocol EnvoyFilter_ListenerMatch::TCP;
const EnvoyFilter_ListenerMatch_ListenerProtocol EnvoyFilter_ListenerMatch::ListenerProtocol_MIN;
const EnvoyFilter_ListenerMatch_ListenerProtocol EnvoyFilter_ListenerMatch::ListenerProtocol_MAX;
const int EnvoyFilter_ListenerMatch::ListenerProtocol_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EnvoyFilter_InsertPosition_Index_descriptor() {
  protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::file_level_enum_descriptors[2];
}
bool EnvoyFilter_InsertPosition_Index_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EnvoyFilter_InsertPosition_Index EnvoyFilter_InsertPosition::FIRST;
const EnvoyFilter_InsertPosition_Index EnvoyFilter_InsertPosition::LAST;
const EnvoyFilter_InsertPosition_Index EnvoyFilter_InsertPosition::BEFORE;
const EnvoyFilter_InsertPosition_Index EnvoyFilter_InsertPosition::AFTER;
const EnvoyFilter_InsertPosition_Index EnvoyFilter_InsertPosition::Index_MIN;
const EnvoyFilter_InsertPosition_Index EnvoyFilter_InsertPosition::Index_MAX;
const int EnvoyFilter_InsertPosition::Index_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EnvoyFilter_Filter_FilterType_descriptor() {
  protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::file_level_enum_descriptors[3];
}
bool EnvoyFilter_Filter_FilterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EnvoyFilter_Filter_FilterType EnvoyFilter_Filter::INVALID;
const EnvoyFilter_Filter_FilterType EnvoyFilter_Filter::HTTP;
const EnvoyFilter_Filter_FilterType EnvoyFilter_Filter::NETWORK;
const EnvoyFilter_Filter_FilterType EnvoyFilter_Filter::FilterType_MIN;
const EnvoyFilter_Filter_FilterType EnvoyFilter_Filter::FilterType_MAX;
const int EnvoyFilter_Filter::FilterType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

EnvoyFilter_WorkloadLabelsEntry_DoNotUse::EnvoyFilter_WorkloadLabelsEntry_DoNotUse() {}
EnvoyFilter_WorkloadLabelsEntry_DoNotUse::EnvoyFilter_WorkloadLabelsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void EnvoyFilter_WorkloadLabelsEntry_DoNotUse::MergeFrom(const EnvoyFilter_WorkloadLabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata EnvoyFilter_WorkloadLabelsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::file_level_metadata[0];
}
void EnvoyFilter_WorkloadLabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void EnvoyFilter_ListenerMatch::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnvoyFilter_ListenerMatch::kPortNumberFieldNumber;
const int EnvoyFilter_ListenerMatch::kPortNamePrefixFieldNumber;
const int EnvoyFilter_ListenerMatch::kListenerTypeFieldNumber;
const int EnvoyFilter_ListenerMatch::kListenerProtocolFieldNumber;
const int EnvoyFilter_ListenerMatch::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnvoyFilter_ListenerMatch::EnvoyFilter_ListenerMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::InitDefaultsEnvoyFilter_ListenerMatch();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch)
}
EnvoyFilter_ListenerMatch::EnvoyFilter_ListenerMatch(const EnvoyFilter_ListenerMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      address_(from.address_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  port_name_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.port_name_prefix().size() > 0) {
    port_name_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_name_prefix_);
  }
  ::memcpy(&port_number_, &from.port_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&listener_protocol_) -
    reinterpret_cast<char*>(&port_number_)) + sizeof(listener_protocol_));
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch)
}

void EnvoyFilter_ListenerMatch::SharedCtor() {
  port_name_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&listener_protocol_) -
      reinterpret_cast<char*>(&port_number_)) + sizeof(listener_protocol_));
  _cached_size_ = 0;
}

EnvoyFilter_ListenerMatch::~EnvoyFilter_ListenerMatch() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch)
  SharedDtor();
}

void EnvoyFilter_ListenerMatch::SharedDtor() {
  port_name_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EnvoyFilter_ListenerMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnvoyFilter_ListenerMatch::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnvoyFilter_ListenerMatch& EnvoyFilter_ListenerMatch::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::InitDefaultsEnvoyFilter_ListenerMatch();
  return *internal_default_instance();
}

EnvoyFilter_ListenerMatch* EnvoyFilter_ListenerMatch::New(::google::protobuf::Arena* arena) const {
  EnvoyFilter_ListenerMatch* n = new EnvoyFilter_ListenerMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnvoyFilter_ListenerMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.Clear();
  port_name_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&listener_protocol_) -
      reinterpret_cast<char*>(&port_number_)) + sizeof(listener_protocol_));
  _internal_metadata_.Clear();
}

bool EnvoyFilter_ListenerMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 port_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string port_name_prefix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port_name_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->port_name_prefix().data(), static_cast<int>(this->port_name_prefix().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.port_name_prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.ListenerType listener_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_listener_type(static_cast< ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch_ListenerType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.ListenerProtocol listener_protocol = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_listener_protocol(static_cast< ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch_ListenerProtocol >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string address = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address(this->address_size() - 1).data(),
            static_cast<int>(this->address(this->address_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch)
  return false;
#undef DO_
}

void EnvoyFilter_ListenerMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port_number = 1;
  if (this->port_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port_number(), output);
  }

  // string port_name_prefix = 2;
  if (this->port_name_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port_name_prefix().data(), static_cast<int>(this->port_name_prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.port_name_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->port_name_prefix(), output);
  }

  // .istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.ListenerType listener_type = 3;
  if (this->listener_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->listener_type(), output);
  }

  // .istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.ListenerProtocol listener_protocol = 4;
  if (this->listener_protocol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->listener_protocol(), output);
  }

  // repeated string address = 5;
  for (int i = 0, n = this->address_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address(i).data(), static_cast<int>(this->address(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.address");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->address(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch)
}

::google::protobuf::uint8* EnvoyFilter_ListenerMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port_number = 1;
  if (this->port_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port_number(), target);
  }

  // string port_name_prefix = 2;
  if (this->port_name_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port_name_prefix().data(), static_cast<int>(this->port_name_prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.port_name_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->port_name_prefix(), target);
  }

  // .istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.ListenerType listener_type = 3;
  if (this->listener_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->listener_type(), target);
  }

  // .istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.ListenerProtocol listener_protocol = 4;
  if (this->listener_protocol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->listener_protocol(), target);
  }

  // repeated string address = 5;
  for (int i = 0, n = this->address_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address(i).data(), static_cast<int>(this->address(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.address");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->address(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch)
  return target;
}

size_t EnvoyFilter_ListenerMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string address = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->address_size());
  for (int i = 0, n = this->address_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->address(i));
  }

  // string port_name_prefix = 2;
  if (this->port_name_prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->port_name_prefix());
  }

  // uint32 port_number = 1;
  if (this->port_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port_number());
  }

  // .istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.ListenerType listener_type = 3;
  if (this->listener_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->listener_type());
  }

  // .istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.ListenerProtocol listener_protocol = 4;
  if (this->listener_protocol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->listener_protocol());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvoyFilter_ListenerMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvoyFilter_ListenerMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnvoyFilter_ListenerMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch)
    MergeFrom(*source);
  }
}

void EnvoyFilter_ListenerMatch::MergeFrom(const EnvoyFilter_ListenerMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_.MergeFrom(from.address_);
  if (from.port_name_prefix().size() > 0) {

    port_name_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_name_prefix_);
  }
  if (from.port_number() != 0) {
    set_port_number(from.port_number());
  }
  if (from.listener_type() != 0) {
    set_listener_type(from.listener_type());
  }
  if (from.listener_protocol() != 0) {
    set_listener_protocol(from.listener_protocol());
  }
}

void EnvoyFilter_ListenerMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvoyFilter_ListenerMatch::CopyFrom(const EnvoyFilter_ListenerMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvoyFilter_ListenerMatch::IsInitialized() const {
  return true;
}

void EnvoyFilter_ListenerMatch::Swap(EnvoyFilter_ListenerMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnvoyFilter_ListenerMatch::InternalSwap(EnvoyFilter_ListenerMatch* other) {
  using std::swap;
  address_.InternalSwap(&other->address_);
  port_name_prefix_.Swap(&other->port_name_prefix_);
  swap(port_number_, other->port_number_);
  swap(listener_type_, other->listener_type_);
  swap(listener_protocol_, other->listener_protocol_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnvoyFilter_ListenerMatch::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EnvoyFilter_InsertPosition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnvoyFilter_InsertPosition::kIndexFieldNumber;
const int EnvoyFilter_InsertPosition::kRelativeToFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnvoyFilter_InsertPosition::EnvoyFilter_InsertPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::InitDefaultsEnvoyFilter_InsertPosition();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.EnvoyFilter.InsertPosition)
}
EnvoyFilter_InsertPosition::EnvoyFilter_InsertPosition(const EnvoyFilter_InsertPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  relative_to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.relative_to().size() > 0) {
    relative_to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.relative_to_);
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.EnvoyFilter.InsertPosition)
}

void EnvoyFilter_InsertPosition::SharedCtor() {
  relative_to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0;
  _cached_size_ = 0;
}

EnvoyFilter_InsertPosition::~EnvoyFilter_InsertPosition() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.EnvoyFilter.InsertPosition)
  SharedDtor();
}

void EnvoyFilter_InsertPosition::SharedDtor() {
  relative_to_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EnvoyFilter_InsertPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnvoyFilter_InsertPosition::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnvoyFilter_InsertPosition& EnvoyFilter_InsertPosition::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::InitDefaultsEnvoyFilter_InsertPosition();
  return *internal_default_instance();
}

EnvoyFilter_InsertPosition* EnvoyFilter_InsertPosition::New(::google::protobuf::Arena* arena) const {
  EnvoyFilter_InsertPosition* n = new EnvoyFilter_InsertPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnvoyFilter_InsertPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.EnvoyFilter.InsertPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relative_to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0;
  _internal_metadata_.Clear();
}

bool EnvoyFilter_InsertPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.EnvoyFilter.InsertPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.networking.v1alpha3.EnvoyFilter.InsertPosition.Index index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_index(static_cast< ::istio::networking::v1alpha3::EnvoyFilter_InsertPosition_Index >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string relative_to = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relative_to()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->relative_to().data(), static_cast<int>(this->relative_to().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.EnvoyFilter.InsertPosition.relative_to"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.EnvoyFilter.InsertPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.EnvoyFilter.InsertPosition)
  return false;
#undef DO_
}

void EnvoyFilter_InsertPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.EnvoyFilter.InsertPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.EnvoyFilter.InsertPosition.Index index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->index(), output);
  }

  // string relative_to = 2;
  if (this->relative_to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->relative_to().data(), static_cast<int>(this->relative_to().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.EnvoyFilter.InsertPosition.relative_to");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->relative_to(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.EnvoyFilter.InsertPosition)
}

::google::protobuf::uint8* EnvoyFilter_InsertPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.EnvoyFilter.InsertPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.EnvoyFilter.InsertPosition.Index index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->index(), target);
  }

  // string relative_to = 2;
  if (this->relative_to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->relative_to().data(), static_cast<int>(this->relative_to().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.EnvoyFilter.InsertPosition.relative_to");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->relative_to(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.EnvoyFilter.InsertPosition)
  return target;
}

size_t EnvoyFilter_InsertPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.EnvoyFilter.InsertPosition)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string relative_to = 2;
  if (this->relative_to().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->relative_to());
  }

  // .istio.networking.v1alpha3.EnvoyFilter.InsertPosition.Index index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvoyFilter_InsertPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.EnvoyFilter.InsertPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvoyFilter_InsertPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnvoyFilter_InsertPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.EnvoyFilter.InsertPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.EnvoyFilter.InsertPosition)
    MergeFrom(*source);
  }
}

void EnvoyFilter_InsertPosition::MergeFrom(const EnvoyFilter_InsertPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.EnvoyFilter.InsertPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.relative_to().size() > 0) {

    relative_to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.relative_to_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void EnvoyFilter_InsertPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.EnvoyFilter.InsertPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvoyFilter_InsertPosition::CopyFrom(const EnvoyFilter_InsertPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.EnvoyFilter.InsertPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvoyFilter_InsertPosition::IsInitialized() const {
  return true;
}

void EnvoyFilter_InsertPosition::Swap(EnvoyFilter_InsertPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnvoyFilter_InsertPosition::InternalSwap(EnvoyFilter_InsertPosition* other) {
  using std::swap;
  relative_to_.Swap(&other->relative_to_);
  swap(index_, other->index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnvoyFilter_InsertPosition::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EnvoyFilter_Filter::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_EnvoyFilter_Filter_default_instance_._instance.get_mutable()->listener_match_ = const_cast< ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch*>(
      ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch::internal_default_instance());
  ::istio::networking::v1alpha3::_EnvoyFilter_Filter_default_instance_._instance.get_mutable()->insert_position_ = const_cast< ::istio::networking::v1alpha3::EnvoyFilter_InsertPosition*>(
      ::istio::networking::v1alpha3::EnvoyFilter_InsertPosition::internal_default_instance());
  ::istio::networking::v1alpha3::_EnvoyFilter_Filter_default_instance_._instance.get_mutable()->filter_config_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
}
void EnvoyFilter_Filter::clear_filter_config() {
  if (GetArenaNoVirtual() == NULL && filter_config_ != NULL) {
    delete filter_config_;
  }
  filter_config_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnvoyFilter_Filter::kListenerMatchFieldNumber;
const int EnvoyFilter_Filter::kInsertPositionFieldNumber;
const int EnvoyFilter_Filter::kFilterTypeFieldNumber;
const int EnvoyFilter_Filter::kFilterNameFieldNumber;
const int EnvoyFilter_Filter::kFilterConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnvoyFilter_Filter::EnvoyFilter_Filter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::InitDefaultsEnvoyFilter_Filter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.EnvoyFilter.Filter)
}
EnvoyFilter_Filter::EnvoyFilter_Filter(const EnvoyFilter_Filter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filter_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter_name().size() > 0) {
    filter_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_name_);
  }
  if (from.has_listener_match()) {
    listener_match_ = new ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch(*from.listener_match_);
  } else {
    listener_match_ = NULL;
  }
  if (from.has_insert_position()) {
    insert_position_ = new ::istio::networking::v1alpha3::EnvoyFilter_InsertPosition(*from.insert_position_);
  } else {
    insert_position_ = NULL;
  }
  if (from.has_filter_config()) {
    filter_config_ = new ::google::protobuf::Struct(*from.filter_config_);
  } else {
    filter_config_ = NULL;
  }
  filter_type_ = from.filter_type_;
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.EnvoyFilter.Filter)
}

void EnvoyFilter_Filter::SharedCtor() {
  filter_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&listener_match_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_type_) -
      reinterpret_cast<char*>(&listener_match_)) + sizeof(filter_type_));
  _cached_size_ = 0;
}

EnvoyFilter_Filter::~EnvoyFilter_Filter() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.EnvoyFilter.Filter)
  SharedDtor();
}

void EnvoyFilter_Filter::SharedDtor() {
  filter_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete listener_match_;
  if (this != internal_default_instance()) delete insert_position_;
  if (this != internal_default_instance()) delete filter_config_;
}

void EnvoyFilter_Filter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnvoyFilter_Filter::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnvoyFilter_Filter& EnvoyFilter_Filter::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::InitDefaultsEnvoyFilter_Filter();
  return *internal_default_instance();
}

EnvoyFilter_Filter* EnvoyFilter_Filter::New(::google::protobuf::Arena* arena) const {
  EnvoyFilter_Filter* n = new EnvoyFilter_Filter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnvoyFilter_Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.EnvoyFilter.Filter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && listener_match_ != NULL) {
    delete listener_match_;
  }
  listener_match_ = NULL;
  if (GetArenaNoVirtual() == NULL && insert_position_ != NULL) {
    delete insert_position_;
  }
  insert_position_ = NULL;
  if (GetArenaNoVirtual() == NULL && filter_config_ != NULL) {
    delete filter_config_;
  }
  filter_config_ = NULL;
  filter_type_ = 0;
  _internal_metadata_.Clear();
}

bool EnvoyFilter_Filter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.EnvoyFilter.Filter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.networking.v1alpha3.EnvoyFilter.ListenerMatch listener_match = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_listener_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.EnvoyFilter.InsertPosition insert_position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_insert_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.EnvoyFilter.Filter.FilterType filter_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_filter_type(static_cast< ::istio::networking::v1alpha3::EnvoyFilter_Filter_FilterType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter_name().data(), static_cast<int>(this->filter_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.EnvoyFilter.Filter.filter_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct filter_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_filter_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.EnvoyFilter.Filter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.EnvoyFilter.Filter)
  return false;
#undef DO_
}

void EnvoyFilter_Filter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.EnvoyFilter.Filter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.EnvoyFilter.ListenerMatch listener_match = 1;
  if (this->has_listener_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->listener_match_, output);
  }

  // .istio.networking.v1alpha3.EnvoyFilter.InsertPosition insert_position = 2;
  if (this->has_insert_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->insert_position_, output);
  }

  // .istio.networking.v1alpha3.EnvoyFilter.Filter.FilterType filter_type = 3;
  if (this->filter_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->filter_type(), output);
  }

  // string filter_name = 4;
  if (this->filter_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter_name().data(), static_cast<int>(this->filter_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.EnvoyFilter.Filter.filter_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filter_name(), output);
  }

  // .google.protobuf.Struct filter_config = 5;
  if (this->has_filter_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->filter_config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.EnvoyFilter.Filter)
}

::google::protobuf::uint8* EnvoyFilter_Filter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.EnvoyFilter.Filter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.EnvoyFilter.ListenerMatch listener_match = 1;
  if (this->has_listener_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->listener_match_, deterministic, target);
  }

  // .istio.networking.v1alpha3.EnvoyFilter.InsertPosition insert_position = 2;
  if (this->has_insert_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->insert_position_, deterministic, target);
  }

  // .istio.networking.v1alpha3.EnvoyFilter.Filter.FilterType filter_type = 3;
  if (this->filter_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->filter_type(), target);
  }

  // string filter_name = 4;
  if (this->filter_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter_name().data(), static_cast<int>(this->filter_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.EnvoyFilter.Filter.filter_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filter_name(), target);
  }

  // .google.protobuf.Struct filter_config = 5;
  if (this->has_filter_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->filter_config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.EnvoyFilter.Filter)
  return target;
}

size_t EnvoyFilter_Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.EnvoyFilter.Filter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string filter_name = 4;
  if (this->filter_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter_name());
  }

  // .istio.networking.v1alpha3.EnvoyFilter.ListenerMatch listener_match = 1;
  if (this->has_listener_match()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->listener_match_);
  }

  // .istio.networking.v1alpha3.EnvoyFilter.InsertPosition insert_position = 2;
  if (this->has_insert_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->insert_position_);
  }

  // .google.protobuf.Struct filter_config = 5;
  if (this->has_filter_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->filter_config_);
  }

  // .istio.networking.v1alpha3.EnvoyFilter.Filter.FilterType filter_type = 3;
  if (this->filter_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvoyFilter_Filter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.EnvoyFilter.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvoyFilter_Filter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnvoyFilter_Filter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.EnvoyFilter.Filter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.EnvoyFilter.Filter)
    MergeFrom(*source);
  }
}

void EnvoyFilter_Filter::MergeFrom(const EnvoyFilter_Filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.EnvoyFilter.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filter_name().size() > 0) {

    filter_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_name_);
  }
  if (from.has_listener_match()) {
    mutable_listener_match()->::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch::MergeFrom(from.listener_match());
  }
  if (from.has_insert_position()) {
    mutable_insert_position()->::istio::networking::v1alpha3::EnvoyFilter_InsertPosition::MergeFrom(from.insert_position());
  }
  if (from.has_filter_config()) {
    mutable_filter_config()->::google::protobuf::Struct::MergeFrom(from.filter_config());
  }
  if (from.filter_type() != 0) {
    set_filter_type(from.filter_type());
  }
}

void EnvoyFilter_Filter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.EnvoyFilter.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvoyFilter_Filter::CopyFrom(const EnvoyFilter_Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.EnvoyFilter.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvoyFilter_Filter::IsInitialized() const {
  return true;
}

void EnvoyFilter_Filter::Swap(EnvoyFilter_Filter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnvoyFilter_Filter::InternalSwap(EnvoyFilter_Filter* other) {
  using std::swap;
  filter_name_.Swap(&other->filter_name_);
  swap(listener_match_, other->listener_match_);
  swap(insert_position_, other->insert_position_);
  swap(filter_config_, other->filter_config_);
  swap(filter_type_, other->filter_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnvoyFilter_Filter::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EnvoyFilter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnvoyFilter::kWorkloadLabelsFieldNumber;
const int EnvoyFilter::kFiltersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnvoyFilter::EnvoyFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::InitDefaultsEnvoyFilter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.EnvoyFilter)
}
EnvoyFilter::EnvoyFilter(const EnvoyFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      filters_(from.filters_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  workload_labels_.MergeFrom(from.workload_labels_);
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.EnvoyFilter)
}

void EnvoyFilter::SharedCtor() {
  _cached_size_ = 0;
}

EnvoyFilter::~EnvoyFilter() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.EnvoyFilter)
  SharedDtor();
}

void EnvoyFilter::SharedDtor() {
}

void EnvoyFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnvoyFilter::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnvoyFilter& EnvoyFilter::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::InitDefaultsEnvoyFilter();
  return *internal_default_instance();
}

EnvoyFilter* EnvoyFilter::New(::google::protobuf::Arena* arena) const {
  EnvoyFilter* n = new EnvoyFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnvoyFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.EnvoyFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workload_labels_.Clear();
  filters_.Clear();
  _internal_metadata_.Clear();
}

bool EnvoyFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.EnvoyFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> workload_labels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          EnvoyFilter_WorkloadLabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              EnvoyFilter_WorkloadLabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&workload_labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.EnvoyFilter.WorkloadLabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.EnvoyFilter.WorkloadLabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.networking.v1alpha3.EnvoyFilter.Filter filters = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_filters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.EnvoyFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.EnvoyFilter)
  return false;
#undef DO_
}

void EnvoyFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.EnvoyFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> workload_labels = 1;
  if (!this->workload_labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.EnvoyFilter.WorkloadLabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.EnvoyFilter.WorkloadLabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->workload_labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->workload_labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->workload_labels().begin();
          it != this->workload_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<EnvoyFilter_WorkloadLabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(workload_labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<EnvoyFilter_WorkloadLabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->workload_labels().begin();
          it != this->workload_labels().end(); ++it) {
        entry.reset(workload_labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .istio.networking.v1alpha3.EnvoyFilter.Filter filters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->filters(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.EnvoyFilter)
}

::google::protobuf::uint8* EnvoyFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.EnvoyFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> workload_labels = 1;
  if (!this->workload_labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.EnvoyFilter.WorkloadLabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.EnvoyFilter.WorkloadLabelsEntry.value");
      }
    };

    if (deterministic &&
        this->workload_labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->workload_labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->workload_labels().begin();
          it != this->workload_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<EnvoyFilter_WorkloadLabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(workload_labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<EnvoyFilter_WorkloadLabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->workload_labels().begin();
          it != this->workload_labels().end(); ++it) {
        entry.reset(workload_labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .istio.networking.v1alpha3.EnvoyFilter.Filter filters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->filters(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.EnvoyFilter)
  return target;
}

size_t EnvoyFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.EnvoyFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> workload_labels = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->workload_labels_size());
  {
    ::google::protobuf::scoped_ptr<EnvoyFilter_WorkloadLabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->workload_labels().begin();
        it != this->workload_labels().end(); ++it) {
      entry.reset(workload_labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .istio.networking.v1alpha3.EnvoyFilter.Filter filters = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->filters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->filters(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvoyFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.EnvoyFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvoyFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnvoyFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.EnvoyFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.EnvoyFilter)
    MergeFrom(*source);
  }
}

void EnvoyFilter::MergeFrom(const EnvoyFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.EnvoyFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  workload_labels_.MergeFrom(from.workload_labels_);
  filters_.MergeFrom(from.filters_);
}

void EnvoyFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.EnvoyFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvoyFilter::CopyFrom(const EnvoyFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.EnvoyFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvoyFilter::IsInitialized() const {
  return true;
}

void EnvoyFilter::Swap(EnvoyFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnvoyFilter::InternalSwap(EnvoyFilter* other) {
  using std::swap;
  workload_labels_.Swap(&other->workload_labels_);
  filters_.InternalSwap(&other->filters_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnvoyFilter::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha3
}  // namespace networking
}  // namespace istio

// @@protoc_insertion_point(global_scope)
