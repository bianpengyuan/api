// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networking/v1alpha3/service_entry.proto

#ifndef PROTOBUF_networking_2fv1alpha3_2fservice_5fentry_2eproto__INCLUDED
#define PROTOBUF_networking_2fv1alpha3_2fservice_5fentry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "networking/v1alpha3/gateway.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsServiceEntry_Endpoint_PortsEntry_DoNotUseImpl();
void InitDefaultsServiceEntry_Endpoint_PortsEntry_DoNotUse();
void InitDefaultsServiceEntry_Endpoint_LabelsEntry_DoNotUseImpl();
void InitDefaultsServiceEntry_Endpoint_LabelsEntry_DoNotUse();
void InitDefaultsServiceEntry_EndpointImpl();
void InitDefaultsServiceEntry_Endpoint();
void InitDefaultsServiceEntryImpl();
void InitDefaultsServiceEntry();
inline void InitDefaults() {
  InitDefaultsServiceEntry_Endpoint_PortsEntry_DoNotUse();
  InitDefaultsServiceEntry_Endpoint_LabelsEntry_DoNotUse();
  InitDefaultsServiceEntry_Endpoint();
  InitDefaultsServiceEntry();
}
}  // namespace protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto
namespace istio {
namespace networking {
namespace v1alpha3 {
class ServiceEntry;
class ServiceEntryDefaultTypeInternal;
extern ServiceEntryDefaultTypeInternal _ServiceEntry_default_instance_;
class ServiceEntry_Endpoint;
class ServiceEntry_EndpointDefaultTypeInternal;
extern ServiceEntry_EndpointDefaultTypeInternal _ServiceEntry_Endpoint_default_instance_;
class ServiceEntry_Endpoint_LabelsEntry_DoNotUse;
class ServiceEntry_Endpoint_LabelsEntry_DoNotUseDefaultTypeInternal;
extern ServiceEntry_Endpoint_LabelsEntry_DoNotUseDefaultTypeInternal _ServiceEntry_Endpoint_LabelsEntry_DoNotUse_default_instance_;
class ServiceEntry_Endpoint_PortsEntry_DoNotUse;
class ServiceEntry_Endpoint_PortsEntry_DoNotUseDefaultTypeInternal;
extern ServiceEntry_Endpoint_PortsEntry_DoNotUseDefaultTypeInternal _ServiceEntry_Endpoint_PortsEntry_DoNotUse_default_instance_;
}  // namespace v1alpha3
}  // namespace networking
}  // namespace istio
namespace istio {
namespace networking {
namespace v1alpha3 {

enum ServiceEntry_Location {
  ServiceEntry_Location_MESH_EXTERNAL = 0,
  ServiceEntry_Location_MESH_INTERNAL = 1,
  ServiceEntry_Location_ServiceEntry_Location_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServiceEntry_Location_ServiceEntry_Location_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServiceEntry_Location_IsValid(int value);
const ServiceEntry_Location ServiceEntry_Location_Location_MIN = ServiceEntry_Location_MESH_EXTERNAL;
const ServiceEntry_Location ServiceEntry_Location_Location_MAX = ServiceEntry_Location_MESH_INTERNAL;
const int ServiceEntry_Location_Location_ARRAYSIZE = ServiceEntry_Location_Location_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServiceEntry_Location_descriptor();
inline const ::std::string& ServiceEntry_Location_Name(ServiceEntry_Location value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServiceEntry_Location_descriptor(), value);
}
inline bool ServiceEntry_Location_Parse(
    const ::std::string& name, ServiceEntry_Location* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServiceEntry_Location>(
    ServiceEntry_Location_descriptor(), name, value);
}
enum ServiceEntry_Resolution {
  ServiceEntry_Resolution_NONE = 0,
  ServiceEntry_Resolution_STATIC = 1,
  ServiceEntry_Resolution_DNS = 2,
  ServiceEntry_Resolution_ServiceEntry_Resolution_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServiceEntry_Resolution_ServiceEntry_Resolution_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServiceEntry_Resolution_IsValid(int value);
const ServiceEntry_Resolution ServiceEntry_Resolution_Resolution_MIN = ServiceEntry_Resolution_NONE;
const ServiceEntry_Resolution ServiceEntry_Resolution_Resolution_MAX = ServiceEntry_Resolution_DNS;
const int ServiceEntry_Resolution_Resolution_ARRAYSIZE = ServiceEntry_Resolution_Resolution_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServiceEntry_Resolution_descriptor();
inline const ::std::string& ServiceEntry_Resolution_Name(ServiceEntry_Resolution value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServiceEntry_Resolution_descriptor(), value);
}
inline bool ServiceEntry_Resolution_Parse(
    const ::std::string& name, ServiceEntry_Resolution* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServiceEntry_Resolution>(
    ServiceEntry_Resolution_descriptor(), name, value);
}
// ===================================================================

class ServiceEntry_Endpoint_PortsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ServiceEntry_Endpoint_PortsEntry_DoNotUse, 
    ::std::string, ::google::protobuf::uint32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ServiceEntry_Endpoint_PortsEntry_DoNotUse, 
    ::std::string, ::google::protobuf::uint32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    0 > SuperType;
  ServiceEntry_Endpoint_PortsEntry_DoNotUse();
  ServiceEntry_Endpoint_PortsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ServiceEntry_Endpoint_PortsEntry_DoNotUse& other);
  static const ServiceEntry_Endpoint_PortsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ServiceEntry_Endpoint_PortsEntry_DoNotUse*>(&_ServiceEntry_Endpoint_PortsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ServiceEntry_Endpoint_LabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ServiceEntry_Endpoint_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ServiceEntry_Endpoint_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ServiceEntry_Endpoint_LabelsEntry_DoNotUse();
  ServiceEntry_Endpoint_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ServiceEntry_Endpoint_LabelsEntry_DoNotUse& other);
  static const ServiceEntry_Endpoint_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ServiceEntry_Endpoint_LabelsEntry_DoNotUse*>(&_ServiceEntry_Endpoint_LabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ServiceEntry_Endpoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.ServiceEntry.Endpoint) */ {
 public:
  ServiceEntry_Endpoint();
  virtual ~ServiceEntry_Endpoint();

  ServiceEntry_Endpoint(const ServiceEntry_Endpoint& from);

  inline ServiceEntry_Endpoint& operator=(const ServiceEntry_Endpoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceEntry_Endpoint(ServiceEntry_Endpoint&& from) noexcept
    : ServiceEntry_Endpoint() {
    *this = ::std::move(from);
  }

  inline ServiceEntry_Endpoint& operator=(ServiceEntry_Endpoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceEntry_Endpoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceEntry_Endpoint* internal_default_instance() {
    return reinterpret_cast<const ServiceEntry_Endpoint*>(
               &_ServiceEntry_Endpoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ServiceEntry_Endpoint* other);
  friend void swap(ServiceEntry_Endpoint& a, ServiceEntry_Endpoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceEntry_Endpoint* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceEntry_Endpoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServiceEntry_Endpoint& from);
  void MergeFrom(const ServiceEntry_Endpoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceEntry_Endpoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, uint32> ports = 2;
  int ports_size() const;
  void clear_ports();
  static const int kPortsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >&
      ports() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >*
      mutable_ports();

  // map<string, string> labels = 3;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string network = 4;
  void clear_network();
  static const int kNetworkFieldNumber = 4;
  const ::std::string& network() const;
  void set_network(const ::std::string& value);
  #if LANG_CXX11
  void set_network(::std::string&& value);
  #endif
  void set_network(const char* value);
  void set_network(const char* value, size_t size);
  ::std::string* mutable_network();
  ::std::string* release_network();
  void set_allocated_network(::std::string* network);

  // string locality = 5;
  void clear_locality();
  static const int kLocalityFieldNumber = 5;
  const ::std::string& locality() const;
  void set_locality(const ::std::string& value);
  #if LANG_CXX11
  void set_locality(::std::string&& value);
  #endif
  void set_locality(const char* value);
  void set_locality(const char* value, size_t size);
  ::std::string* mutable_locality();
  ::std::string* release_locality();
  void set_allocated_locality(::std::string* locality);

  // uint32 weight = 6;
  void clear_weight();
  static const int kWeightFieldNumber = 6;
  ::google::protobuf::uint32 weight() const;
  void set_weight(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.ServiceEntry.Endpoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      ServiceEntry_Endpoint_PortsEntry_DoNotUse,
      ::std::string, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > ports_;
  ::google::protobuf::internal::MapField<
      ServiceEntry_Endpoint_LabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr network_;
  ::google::protobuf::internal::ArenaStringPtr locality_;
  ::google::protobuf::uint32 weight_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::InitDefaultsServiceEntry_EndpointImpl();
};
// -------------------------------------------------------------------

class ServiceEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.ServiceEntry) */ {
 public:
  ServiceEntry();
  virtual ~ServiceEntry();

  ServiceEntry(const ServiceEntry& from);

  inline ServiceEntry& operator=(const ServiceEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceEntry(ServiceEntry&& from) noexcept
    : ServiceEntry() {
    *this = ::std::move(from);
  }

  inline ServiceEntry& operator=(ServiceEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceEntry* internal_default_instance() {
    return reinterpret_cast<const ServiceEntry*>(
               &_ServiceEntry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ServiceEntry* other);
  friend void swap(ServiceEntry& a, ServiceEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceEntry* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceEntry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServiceEntry& from);
  void MergeFrom(const ServiceEntry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ServiceEntry_Endpoint Endpoint;

  typedef ServiceEntry_Location Location;
  static const Location MESH_EXTERNAL =
    ServiceEntry_Location_MESH_EXTERNAL;
  static const Location MESH_INTERNAL =
    ServiceEntry_Location_MESH_INTERNAL;
  static inline bool Location_IsValid(int value) {
    return ServiceEntry_Location_IsValid(value);
  }
  static const Location Location_MIN =
    ServiceEntry_Location_Location_MIN;
  static const Location Location_MAX =
    ServiceEntry_Location_Location_MAX;
  static const int Location_ARRAYSIZE =
    ServiceEntry_Location_Location_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Location_descriptor() {
    return ServiceEntry_Location_descriptor();
  }
  static inline const ::std::string& Location_Name(Location value) {
    return ServiceEntry_Location_Name(value);
  }
  static inline bool Location_Parse(const ::std::string& name,
      Location* value) {
    return ServiceEntry_Location_Parse(name, value);
  }

  typedef ServiceEntry_Resolution Resolution;
  static const Resolution NONE =
    ServiceEntry_Resolution_NONE;
  static const Resolution STATIC =
    ServiceEntry_Resolution_STATIC;
  static const Resolution DNS =
    ServiceEntry_Resolution_DNS;
  static inline bool Resolution_IsValid(int value) {
    return ServiceEntry_Resolution_IsValid(value);
  }
  static const Resolution Resolution_MIN =
    ServiceEntry_Resolution_Resolution_MIN;
  static const Resolution Resolution_MAX =
    ServiceEntry_Resolution_Resolution_MAX;
  static const int Resolution_ARRAYSIZE =
    ServiceEntry_Resolution_Resolution_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Resolution_descriptor() {
    return ServiceEntry_Resolution_descriptor();
  }
  static inline const ::std::string& Resolution_Name(Resolution value) {
    return ServiceEntry_Resolution_Name(value);
  }
  static inline bool Resolution_Parse(const ::std::string& name,
      Resolution* value) {
    return ServiceEntry_Resolution_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string hosts = 1;
  int hosts_size() const;
  void clear_hosts();
  static const int kHostsFieldNumber = 1;
  const ::std::string& hosts(int index) const;
  ::std::string* mutable_hosts(int index);
  void set_hosts(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_hosts(int index, ::std::string&& value);
  #endif
  void set_hosts(int index, const char* value);
  void set_hosts(int index, const char* value, size_t size);
  ::std::string* add_hosts();
  void add_hosts(const ::std::string& value);
  #if LANG_CXX11
  void add_hosts(::std::string&& value);
  #endif
  void add_hosts(const char* value);
  void add_hosts(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& hosts() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_hosts();

  // repeated string addresses = 2;
  int addresses_size() const;
  void clear_addresses();
  static const int kAddressesFieldNumber = 2;
  const ::std::string& addresses(int index) const;
  ::std::string* mutable_addresses(int index);
  void set_addresses(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_addresses(int index, ::std::string&& value);
  #endif
  void set_addresses(int index, const char* value);
  void set_addresses(int index, const char* value, size_t size);
  ::std::string* add_addresses();
  void add_addresses(const ::std::string& value);
  #if LANG_CXX11
  void add_addresses(::std::string&& value);
  #endif
  void add_addresses(const char* value);
  void add_addresses(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& addresses() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_addresses();

  // repeated .istio.networking.v1alpha3.Port ports = 3;
  int ports_size() const;
  void clear_ports();
  static const int kPortsFieldNumber = 3;
  const ::istio::networking::v1alpha3::Port& ports(int index) const;
  ::istio::networking::v1alpha3::Port* mutable_ports(int index);
  ::istio::networking::v1alpha3::Port* add_ports();
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::Port >*
      mutable_ports();
  const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::Port >&
      ports() const;

  // repeated .istio.networking.v1alpha3.ServiceEntry.Endpoint endpoints = 6;
  int endpoints_size() const;
  void clear_endpoints();
  static const int kEndpointsFieldNumber = 6;
  const ::istio::networking::v1alpha3::ServiceEntry_Endpoint& endpoints(int index) const;
  ::istio::networking::v1alpha3::ServiceEntry_Endpoint* mutable_endpoints(int index);
  ::istio::networking::v1alpha3::ServiceEntry_Endpoint* add_endpoints();
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::ServiceEntry_Endpoint >*
      mutable_endpoints();
  const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::ServiceEntry_Endpoint >&
      endpoints() const;

  // repeated string export_to = 7;
  int export_to_size() const;
  void clear_export_to();
  static const int kExportToFieldNumber = 7;
  const ::std::string& export_to(int index) const;
  ::std::string* mutable_export_to(int index);
  void set_export_to(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_export_to(int index, ::std::string&& value);
  #endif
  void set_export_to(int index, const char* value);
  void set_export_to(int index, const char* value, size_t size);
  ::std::string* add_export_to();
  void add_export_to(const ::std::string& value);
  #if LANG_CXX11
  void add_export_to(::std::string&& value);
  #endif
  void add_export_to(const char* value);
  void add_export_to(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& export_to() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_export_to();

  // repeated string subject_alt_names = 8;
  int subject_alt_names_size() const;
  void clear_subject_alt_names();
  static const int kSubjectAltNamesFieldNumber = 8;
  const ::std::string& subject_alt_names(int index) const;
  ::std::string* mutable_subject_alt_names(int index);
  void set_subject_alt_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_subject_alt_names(int index, ::std::string&& value);
  #endif
  void set_subject_alt_names(int index, const char* value);
  void set_subject_alt_names(int index, const char* value, size_t size);
  ::std::string* add_subject_alt_names();
  void add_subject_alt_names(const ::std::string& value);
  #if LANG_CXX11
  void add_subject_alt_names(::std::string&& value);
  #endif
  void add_subject_alt_names(const char* value);
  void add_subject_alt_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& subject_alt_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_subject_alt_names();

  // .istio.networking.v1alpha3.ServiceEntry.Location location = 4;
  void clear_location();
  static const int kLocationFieldNumber = 4;
  ::istio::networking::v1alpha3::ServiceEntry_Location location() const;
  void set_location(::istio::networking::v1alpha3::ServiceEntry_Location value);

  // .istio.networking.v1alpha3.ServiceEntry.Resolution resolution = 5;
  void clear_resolution();
  static const int kResolutionFieldNumber = 5;
  ::istio::networking::v1alpha3::ServiceEntry_Resolution resolution() const;
  void set_resolution(::istio::networking::v1alpha3::ServiceEntry_Resolution value);

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.ServiceEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> hosts_;
  ::google::protobuf::RepeatedPtrField< ::std::string> addresses_;
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::Port > ports_;
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::ServiceEntry_Endpoint > endpoints_;
  ::google::protobuf::RepeatedPtrField< ::std::string> export_to_;
  ::google::protobuf::RepeatedPtrField< ::std::string> subject_alt_names_;
  int location_;
  int resolution_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::InitDefaultsServiceEntryImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ServiceEntry_Endpoint

// string address = 1;
inline void ServiceEntry_Endpoint::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceEntry_Endpoint::address() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.ServiceEntry.Endpoint.address)
  return address_.GetNoArena();
}
inline void ServiceEntry_Endpoint::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.ServiceEntry.Endpoint.address)
}
#if LANG_CXX11
inline void ServiceEntry_Endpoint::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.ServiceEntry.Endpoint.address)
}
#endif
inline void ServiceEntry_Endpoint::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.ServiceEntry.Endpoint.address)
}
inline void ServiceEntry_Endpoint::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.ServiceEntry.Endpoint.address)
}
inline ::std::string* ServiceEntry_Endpoint::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.ServiceEntry.Endpoint.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceEntry_Endpoint::release_address() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.ServiceEntry.Endpoint.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceEntry_Endpoint::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.ServiceEntry.Endpoint.address)
}

// map<string, uint32> ports = 2;
inline int ServiceEntry_Endpoint::ports_size() const {
  return ports_.size();
}
inline void ServiceEntry_Endpoint::clear_ports() {
  ports_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >&
ServiceEntry_Endpoint::ports() const {
  // @@protoc_insertion_point(field_map:istio.networking.v1alpha3.ServiceEntry.Endpoint.ports)
  return ports_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >*
ServiceEntry_Endpoint::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_map:istio.networking.v1alpha3.ServiceEntry.Endpoint.ports)
  return ports_.MutableMap();
}

// map<string, string> labels = 3;
inline int ServiceEntry_Endpoint::labels_size() const {
  return labels_.size();
}
inline void ServiceEntry_Endpoint::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
ServiceEntry_Endpoint::labels() const {
  // @@protoc_insertion_point(field_map:istio.networking.v1alpha3.ServiceEntry.Endpoint.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
ServiceEntry_Endpoint::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:istio.networking.v1alpha3.ServiceEntry.Endpoint.labels)
  return labels_.MutableMap();
}

// string network = 4;
inline void ServiceEntry_Endpoint::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceEntry_Endpoint::network() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.ServiceEntry.Endpoint.network)
  return network_.GetNoArena();
}
inline void ServiceEntry_Endpoint::set_network(const ::std::string& value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.ServiceEntry.Endpoint.network)
}
#if LANG_CXX11
inline void ServiceEntry_Endpoint::set_network(::std::string&& value) {
  
  network_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.ServiceEntry.Endpoint.network)
}
#endif
inline void ServiceEntry_Endpoint::set_network(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.ServiceEntry.Endpoint.network)
}
inline void ServiceEntry_Endpoint::set_network(const char* value, size_t size) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.ServiceEntry.Endpoint.network)
}
inline ::std::string* ServiceEntry_Endpoint::mutable_network() {
  
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.ServiceEntry.Endpoint.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceEntry_Endpoint::release_network() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.ServiceEntry.Endpoint.network)
  
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceEntry_Endpoint::set_allocated_network(::std::string* network) {
  if (network != NULL) {
    
  } else {
    
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.ServiceEntry.Endpoint.network)
}

// string locality = 5;
inline void ServiceEntry_Endpoint::clear_locality() {
  locality_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceEntry_Endpoint::locality() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.ServiceEntry.Endpoint.locality)
  return locality_.GetNoArena();
}
inline void ServiceEntry_Endpoint::set_locality(const ::std::string& value) {
  
  locality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.ServiceEntry.Endpoint.locality)
}
#if LANG_CXX11
inline void ServiceEntry_Endpoint::set_locality(::std::string&& value) {
  
  locality_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.ServiceEntry.Endpoint.locality)
}
#endif
inline void ServiceEntry_Endpoint::set_locality(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  locality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.ServiceEntry.Endpoint.locality)
}
inline void ServiceEntry_Endpoint::set_locality(const char* value, size_t size) {
  
  locality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.ServiceEntry.Endpoint.locality)
}
inline ::std::string* ServiceEntry_Endpoint::mutable_locality() {
  
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.ServiceEntry.Endpoint.locality)
  return locality_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceEntry_Endpoint::release_locality() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.ServiceEntry.Endpoint.locality)
  
  return locality_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceEntry_Endpoint::set_allocated_locality(::std::string* locality) {
  if (locality != NULL) {
    
  } else {
    
  }
  locality_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locality);
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.ServiceEntry.Endpoint.locality)
}

// uint32 weight = 6;
inline void ServiceEntry_Endpoint::clear_weight() {
  weight_ = 0u;
}
inline ::google::protobuf::uint32 ServiceEntry_Endpoint::weight() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.ServiceEntry.Endpoint.weight)
  return weight_;
}
inline void ServiceEntry_Endpoint::set_weight(::google::protobuf::uint32 value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.ServiceEntry.Endpoint.weight)
}

// -------------------------------------------------------------------

// ServiceEntry

// repeated string hosts = 1;
inline int ServiceEntry::hosts_size() const {
  return hosts_.size();
}
inline void ServiceEntry::clear_hosts() {
  hosts_.Clear();
}
inline const ::std::string& ServiceEntry::hosts(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.ServiceEntry.hosts)
  return hosts_.Get(index);
}
inline ::std::string* ServiceEntry::mutable_hosts(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.ServiceEntry.hosts)
  return hosts_.Mutable(index);
}
inline void ServiceEntry::set_hosts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.ServiceEntry.hosts)
  hosts_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ServiceEntry::set_hosts(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.ServiceEntry.hosts)
  hosts_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ServiceEntry::set_hosts(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hosts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.ServiceEntry.hosts)
}
inline void ServiceEntry::set_hosts(int index, const char* value, size_t size) {
  hosts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.ServiceEntry.hosts)
}
inline ::std::string* ServiceEntry::add_hosts() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.ServiceEntry.hosts)
  return hosts_.Add();
}
inline void ServiceEntry::add_hosts(const ::std::string& value) {
  hosts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.ServiceEntry.hosts)
}
#if LANG_CXX11
inline void ServiceEntry::add_hosts(::std::string&& value) {
  hosts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.ServiceEntry.hosts)
}
#endif
inline void ServiceEntry::add_hosts(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hosts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.ServiceEntry.hosts)
}
inline void ServiceEntry::add_hosts(const char* value, size_t size) {
  hosts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.ServiceEntry.hosts)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServiceEntry::hosts() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.ServiceEntry.hosts)
  return hosts_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServiceEntry::mutable_hosts() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.ServiceEntry.hosts)
  return &hosts_;
}

// repeated string addresses = 2;
inline int ServiceEntry::addresses_size() const {
  return addresses_.size();
}
inline void ServiceEntry::clear_addresses() {
  addresses_.Clear();
}
inline const ::std::string& ServiceEntry::addresses(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.ServiceEntry.addresses)
  return addresses_.Get(index);
}
inline ::std::string* ServiceEntry::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.ServiceEntry.addresses)
  return addresses_.Mutable(index);
}
inline void ServiceEntry::set_addresses(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.ServiceEntry.addresses)
  addresses_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ServiceEntry::set_addresses(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.ServiceEntry.addresses)
  addresses_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ServiceEntry::set_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.ServiceEntry.addresses)
}
inline void ServiceEntry::set_addresses(int index, const char* value, size_t size) {
  addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.ServiceEntry.addresses)
}
inline ::std::string* ServiceEntry::add_addresses() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.ServiceEntry.addresses)
  return addresses_.Add();
}
inline void ServiceEntry::add_addresses(const ::std::string& value) {
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.ServiceEntry.addresses)
}
#if LANG_CXX11
inline void ServiceEntry::add_addresses(::std::string&& value) {
  addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.ServiceEntry.addresses)
}
#endif
inline void ServiceEntry::add_addresses(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.ServiceEntry.addresses)
}
inline void ServiceEntry::add_addresses(const char* value, size_t size) {
  addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.ServiceEntry.addresses)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServiceEntry::addresses() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.ServiceEntry.addresses)
  return addresses_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServiceEntry::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.ServiceEntry.addresses)
  return &addresses_;
}

// repeated .istio.networking.v1alpha3.Port ports = 3;
inline int ServiceEntry::ports_size() const {
  return ports_.size();
}
inline const ::istio::networking::v1alpha3::Port& ServiceEntry::ports(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.ServiceEntry.ports)
  return ports_.Get(index);
}
inline ::istio::networking::v1alpha3::Port* ServiceEntry::mutable_ports(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.ServiceEntry.ports)
  return ports_.Mutable(index);
}
inline ::istio::networking::v1alpha3::Port* ServiceEntry::add_ports() {
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.ServiceEntry.ports)
  return ports_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::Port >*
ServiceEntry::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.ServiceEntry.ports)
  return &ports_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::Port >&
ServiceEntry::ports() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.ServiceEntry.ports)
  return ports_;
}

// .istio.networking.v1alpha3.ServiceEntry.Location location = 4;
inline void ServiceEntry::clear_location() {
  location_ = 0;
}
inline ::istio::networking::v1alpha3::ServiceEntry_Location ServiceEntry::location() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.ServiceEntry.location)
  return static_cast< ::istio::networking::v1alpha3::ServiceEntry_Location >(location_);
}
inline void ServiceEntry::set_location(::istio::networking::v1alpha3::ServiceEntry_Location value) {
  
  location_ = value;
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.ServiceEntry.location)
}

// .istio.networking.v1alpha3.ServiceEntry.Resolution resolution = 5;
inline void ServiceEntry::clear_resolution() {
  resolution_ = 0;
}
inline ::istio::networking::v1alpha3::ServiceEntry_Resolution ServiceEntry::resolution() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.ServiceEntry.resolution)
  return static_cast< ::istio::networking::v1alpha3::ServiceEntry_Resolution >(resolution_);
}
inline void ServiceEntry::set_resolution(::istio::networking::v1alpha3::ServiceEntry_Resolution value) {
  
  resolution_ = value;
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.ServiceEntry.resolution)
}

// repeated .istio.networking.v1alpha3.ServiceEntry.Endpoint endpoints = 6;
inline int ServiceEntry::endpoints_size() const {
  return endpoints_.size();
}
inline void ServiceEntry::clear_endpoints() {
  endpoints_.Clear();
}
inline const ::istio::networking::v1alpha3::ServiceEntry_Endpoint& ServiceEntry::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.ServiceEntry.endpoints)
  return endpoints_.Get(index);
}
inline ::istio::networking::v1alpha3::ServiceEntry_Endpoint* ServiceEntry::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.ServiceEntry.endpoints)
  return endpoints_.Mutable(index);
}
inline ::istio::networking::v1alpha3::ServiceEntry_Endpoint* ServiceEntry::add_endpoints() {
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.ServiceEntry.endpoints)
  return endpoints_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::ServiceEntry_Endpoint >*
ServiceEntry::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.ServiceEntry.endpoints)
  return &endpoints_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::ServiceEntry_Endpoint >&
ServiceEntry::endpoints() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.ServiceEntry.endpoints)
  return endpoints_;
}

// repeated string export_to = 7;
inline int ServiceEntry::export_to_size() const {
  return export_to_.size();
}
inline void ServiceEntry::clear_export_to() {
  export_to_.Clear();
}
inline const ::std::string& ServiceEntry::export_to(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.ServiceEntry.export_to)
  return export_to_.Get(index);
}
inline ::std::string* ServiceEntry::mutable_export_to(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.ServiceEntry.export_to)
  return export_to_.Mutable(index);
}
inline void ServiceEntry::set_export_to(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.ServiceEntry.export_to)
  export_to_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ServiceEntry::set_export_to(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.ServiceEntry.export_to)
  export_to_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ServiceEntry::set_export_to(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  export_to_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.ServiceEntry.export_to)
}
inline void ServiceEntry::set_export_to(int index, const char* value, size_t size) {
  export_to_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.ServiceEntry.export_to)
}
inline ::std::string* ServiceEntry::add_export_to() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.ServiceEntry.export_to)
  return export_to_.Add();
}
inline void ServiceEntry::add_export_to(const ::std::string& value) {
  export_to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.ServiceEntry.export_to)
}
#if LANG_CXX11
inline void ServiceEntry::add_export_to(::std::string&& value) {
  export_to_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.ServiceEntry.export_to)
}
#endif
inline void ServiceEntry::add_export_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  export_to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.ServiceEntry.export_to)
}
inline void ServiceEntry::add_export_to(const char* value, size_t size) {
  export_to_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.ServiceEntry.export_to)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServiceEntry::export_to() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.ServiceEntry.export_to)
  return export_to_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServiceEntry::mutable_export_to() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.ServiceEntry.export_to)
  return &export_to_;
}

// repeated string subject_alt_names = 8;
inline int ServiceEntry::subject_alt_names_size() const {
  return subject_alt_names_.size();
}
inline void ServiceEntry::clear_subject_alt_names() {
  subject_alt_names_.Clear();
}
inline const ::std::string& ServiceEntry::subject_alt_names(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.ServiceEntry.subject_alt_names)
  return subject_alt_names_.Get(index);
}
inline ::std::string* ServiceEntry::mutable_subject_alt_names(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.ServiceEntry.subject_alt_names)
  return subject_alt_names_.Mutable(index);
}
inline void ServiceEntry::set_subject_alt_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.ServiceEntry.subject_alt_names)
  subject_alt_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ServiceEntry::set_subject_alt_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.ServiceEntry.subject_alt_names)
  subject_alt_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ServiceEntry::set_subject_alt_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  subject_alt_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.ServiceEntry.subject_alt_names)
}
inline void ServiceEntry::set_subject_alt_names(int index, const char* value, size_t size) {
  subject_alt_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.ServiceEntry.subject_alt_names)
}
inline ::std::string* ServiceEntry::add_subject_alt_names() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.ServiceEntry.subject_alt_names)
  return subject_alt_names_.Add();
}
inline void ServiceEntry::add_subject_alt_names(const ::std::string& value) {
  subject_alt_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.ServiceEntry.subject_alt_names)
}
#if LANG_CXX11
inline void ServiceEntry::add_subject_alt_names(::std::string&& value) {
  subject_alt_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.ServiceEntry.subject_alt_names)
}
#endif
inline void ServiceEntry::add_subject_alt_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  subject_alt_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.ServiceEntry.subject_alt_names)
}
inline void ServiceEntry::add_subject_alt_names(const char* value, size_t size) {
  subject_alt_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.ServiceEntry.subject_alt_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServiceEntry::subject_alt_names() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.ServiceEntry.subject_alt_names)
  return subject_alt_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServiceEntry::mutable_subject_alt_names() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.ServiceEntry.subject_alt_names)
  return &subject_alt_names_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha3
}  // namespace networking
}  // namespace istio

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::istio::networking::v1alpha3::ServiceEntry_Location> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::istio::networking::v1alpha3::ServiceEntry_Location>() {
  return ::istio::networking::v1alpha3::ServiceEntry_Location_descriptor();
}
template <> struct is_proto_enum< ::istio::networking::v1alpha3::ServiceEntry_Resolution> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::istio::networking::v1alpha3::ServiceEntry_Resolution>() {
  return ::istio::networking::v1alpha3::ServiceEntry_Resolution_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_networking_2fv1alpha3_2fservice_5fentry_2eproto__INCLUDED
