// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networking/v1alpha3/destination_rule.proto

#include "networking/v1alpha3/destination_rule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace istio {
namespace networking {
namespace v1alpha3 {
class DestinationRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DestinationRule>
      _instance;
} _DestinationRule_default_instance_;
class TrafficPolicy_PortTrafficPolicyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficPolicy_PortTrafficPolicy>
      _instance;
} _TrafficPolicy_PortTrafficPolicy_default_instance_;
class TrafficPolicyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficPolicy>
      _instance;
} _TrafficPolicy_default_instance_;
class Subset_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Subset_LabelsEntry_DoNotUse>
      _instance;
} _Subset_LabelsEntry_DoNotUse_default_instance_;
class SubsetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Subset>
      _instance;
} _Subset_default_instance_;
class LoadBalancerSettings_ConsistentHashLB_HTTPCookieDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoadBalancerSettings_ConsistentHashLB_HTTPCookie>
      _instance;
} _LoadBalancerSettings_ConsistentHashLB_HTTPCookie_default_instance_;
class LoadBalancerSettings_ConsistentHashLBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoadBalancerSettings_ConsistentHashLB>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr http_header_name_;
  const ::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB_HTTPCookie* http_cookie_;
  bool use_source_ip_;
} _LoadBalancerSettings_ConsistentHashLB_default_instance_;
class LoadBalancerSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoadBalancerSettings>
      _instance;
  int simple_;
  const ::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB* consistent_hash_;
} _LoadBalancerSettings_default_instance_;
class ConnectionPoolSettings_TCPSettings_TcpKeepaliveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConnectionPoolSettings_TCPSettings_TcpKeepalive>
      _instance;
} _ConnectionPoolSettings_TCPSettings_TcpKeepalive_default_instance_;
class ConnectionPoolSettings_TCPSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConnectionPoolSettings_TCPSettings>
      _instance;
} _ConnectionPoolSettings_TCPSettings_default_instance_;
class ConnectionPoolSettings_HTTPSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConnectionPoolSettings_HTTPSettings>
      _instance;
} _ConnectionPoolSettings_HTTPSettings_default_instance_;
class ConnectionPoolSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConnectionPoolSettings>
      _instance;
} _ConnectionPoolSettings_default_instance_;
class OutlierDetectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OutlierDetection>
      _instance;
} _OutlierDetection_default_instance_;
class TLSSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TLSSettings>
      _instance;
} _TLSSettings_default_instance_;
}  // namespace v1alpha3
}  // namespace networking
}  // namespace istio
namespace protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto {
void InitDefaultsDestinationRuleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsTrafficPolicy();
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsSubset();
  {
    void* ptr = &::istio::networking::v1alpha3::_DestinationRule_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::DestinationRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::DestinationRule::InitAsDefaultInstance();
}

void InitDefaultsDestinationRule() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDestinationRuleImpl);
}

void InitDefaultsTrafficPolicy_PortTrafficPolicyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsPortSelector();
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsLoadBalancerSettings();
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsConnectionPoolSettings();
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsOutlierDetection();
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsTLSSettings();
  {
    void* ptr = &::istio::networking::v1alpha3::_TrafficPolicy_PortTrafficPolicy_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::TrafficPolicy_PortTrafficPolicy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::TrafficPolicy_PortTrafficPolicy::InitAsDefaultInstance();
}

void InitDefaultsTrafficPolicy_PortTrafficPolicy() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrafficPolicy_PortTrafficPolicyImpl);
}

void InitDefaultsTrafficPolicyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsLoadBalancerSettings();
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsConnectionPoolSettings();
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsOutlierDetection();
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsTLSSettings();
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsTrafficPolicy_PortTrafficPolicy();
  {
    void* ptr = &::istio::networking::v1alpha3::_TrafficPolicy_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::TrafficPolicy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::TrafficPolicy::InitAsDefaultInstance();
}

void InitDefaultsTrafficPolicy() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrafficPolicyImpl);
}

void InitDefaultsSubset_LabelsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_Subset_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::Subset_LabelsEntry_DoNotUse();
  }
  ::istio::networking::v1alpha3::Subset_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsSubset_LabelsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSubset_LabelsEntry_DoNotUseImpl);
}

void InitDefaultsSubsetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsSubset_LabelsEntry_DoNotUse();
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsTrafficPolicy();
  {
    void* ptr = &::istio::networking::v1alpha3::_Subset_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::Subset();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::Subset::InitAsDefaultInstance();
}

void InitDefaultsSubset() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSubsetImpl);
}

void InitDefaultsLoadBalancerSettings_ConsistentHashLB_HTTPCookieImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaultsDuration();
  {
    void* ptr = &::istio::networking::v1alpha3::_LoadBalancerSettings_ConsistentHashLB_HTTPCookie_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB_HTTPCookie();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB_HTTPCookie::InitAsDefaultInstance();
}

void InitDefaultsLoadBalancerSettings_ConsistentHashLB_HTTPCookie() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoadBalancerSettings_ConsistentHashLB_HTTPCookieImpl);
}

void InitDefaultsLoadBalancerSettings_ConsistentHashLBImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsLoadBalancerSettings_ConsistentHashLB_HTTPCookie();
  {
    void* ptr = &::istio::networking::v1alpha3::_LoadBalancerSettings_ConsistentHashLB_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB::InitAsDefaultInstance();
}

void InitDefaultsLoadBalancerSettings_ConsistentHashLB() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoadBalancerSettings_ConsistentHashLBImpl);
}

void InitDefaultsLoadBalancerSettingsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsLoadBalancerSettings_ConsistentHashLB();
  {
    void* ptr = &::istio::networking::v1alpha3::_LoadBalancerSettings_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::LoadBalancerSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::LoadBalancerSettings::InitAsDefaultInstance();
}

void InitDefaultsLoadBalancerSettings() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoadBalancerSettingsImpl);
}

void InitDefaultsConnectionPoolSettings_TCPSettings_TcpKeepaliveImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaultsDuration();
  {
    void* ptr = &::istio::networking::v1alpha3::_ConnectionPoolSettings_TCPSettings_TcpKeepalive_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::ConnectionPoolSettings_TCPSettings_TcpKeepalive();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::ConnectionPoolSettings_TCPSettings_TcpKeepalive::InitAsDefaultInstance();
}

void InitDefaultsConnectionPoolSettings_TCPSettings_TcpKeepalive() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsConnectionPoolSettings_TCPSettings_TcpKeepaliveImpl);
}

void InitDefaultsConnectionPoolSettings_TCPSettingsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaultsDuration();
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsConnectionPoolSettings_TCPSettings_TcpKeepalive();
  {
    void* ptr = &::istio::networking::v1alpha3::_ConnectionPoolSettings_TCPSettings_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::ConnectionPoolSettings_TCPSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::ConnectionPoolSettings_TCPSettings::InitAsDefaultInstance();
}

void InitDefaultsConnectionPoolSettings_TCPSettings() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsConnectionPoolSettings_TCPSettingsImpl);
}

void InitDefaultsConnectionPoolSettings_HTTPSettingsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_ConnectionPoolSettings_HTTPSettings_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::ConnectionPoolSettings_HTTPSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::ConnectionPoolSettings_HTTPSettings::InitAsDefaultInstance();
}

void InitDefaultsConnectionPoolSettings_HTTPSettings() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsConnectionPoolSettings_HTTPSettingsImpl);
}

void InitDefaultsConnectionPoolSettingsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsConnectionPoolSettings_TCPSettings();
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsConnectionPoolSettings_HTTPSettings();
  {
    void* ptr = &::istio::networking::v1alpha3::_ConnectionPoolSettings_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::ConnectionPoolSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::ConnectionPoolSettings::InitAsDefaultInstance();
}

void InitDefaultsConnectionPoolSettings() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsConnectionPoolSettingsImpl);
}

void InitDefaultsOutlierDetectionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaultsDuration();
  {
    void* ptr = &::istio::networking::v1alpha3::_OutlierDetection_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::OutlierDetection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::OutlierDetection::InitAsDefaultInstance();
}

void InitDefaultsOutlierDetection() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOutlierDetectionImpl);
}

void InitDefaultsTLSSettingsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_TLSSettings_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::TLSSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::TLSSettings::InitAsDefaultInstance();
}

void InitDefaultsTLSSettings() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTLSSettingsImpl);
}

::google::protobuf::Metadata file_level_metadata[14];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::DestinationRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::DestinationRule, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::DestinationRule, traffic_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::DestinationRule, subsets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::DestinationRule, export_to_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TrafficPolicy_PortTrafficPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TrafficPolicy_PortTrafficPolicy, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TrafficPolicy_PortTrafficPolicy, load_balancer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TrafficPolicy_PortTrafficPolicy, connection_pool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TrafficPolicy_PortTrafficPolicy, outlier_detection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TrafficPolicy_PortTrafficPolicy, tls_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TrafficPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TrafficPolicy, load_balancer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TrafficPolicy, connection_pool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TrafficPolicy, outlier_detection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TrafficPolicy, tls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TrafficPolicy, port_level_settings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Subset_LabelsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Subset_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Subset_LabelsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Subset_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Subset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Subset, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Subset, labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Subset, traffic_policy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB_HTTPCookie, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB_HTTPCookie, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB_HTTPCookie, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB_HTTPCookie, ttl_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLBDefaultTypeInternal, http_header_name_),
  offsetof(::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLBDefaultTypeInternal, http_cookie_),
  offsetof(::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLBDefaultTypeInternal, use_source_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB, minimum_ring_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB, hash_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::LoadBalancerSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::LoadBalancerSettings, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::istio::networking::v1alpha3::LoadBalancerSettingsDefaultTypeInternal, simple_),
  offsetof(::istio::networking::v1alpha3::LoadBalancerSettingsDefaultTypeInternal, consistent_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::LoadBalancerSettings, lb_policy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ConnectionPoolSettings_TCPSettings_TcpKeepalive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ConnectionPoolSettings_TCPSettings_TcpKeepalive, probes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ConnectionPoolSettings_TCPSettings_TcpKeepalive, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ConnectionPoolSettings_TCPSettings_TcpKeepalive, interval_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ConnectionPoolSettings_TCPSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ConnectionPoolSettings_TCPSettings, max_connections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ConnectionPoolSettings_TCPSettings, connect_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ConnectionPoolSettings_TCPSettings, tcp_keepalive_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ConnectionPoolSettings_HTTPSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ConnectionPoolSettings_HTTPSettings, http1_max_pending_requests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ConnectionPoolSettings_HTTPSettings, http2_max_requests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ConnectionPoolSettings_HTTPSettings, max_requests_per_connection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ConnectionPoolSettings_HTTPSettings, max_retries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ConnectionPoolSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ConnectionPoolSettings, tcp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ConnectionPoolSettings, http_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::OutlierDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::OutlierDetection, consecutive_errors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::OutlierDetection, interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::OutlierDetection, base_ejection_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::OutlierDetection, max_ejection_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::OutlierDetection, min_health_percent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TLSSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TLSSettings, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TLSSettings, client_certificate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TLSSettings, private_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TLSSettings, ca_certificates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TLSSettings, subject_alt_names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TLSSettings, sni_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::istio::networking::v1alpha3::DestinationRule)},
  { 9, -1, sizeof(::istio::networking::v1alpha3::TrafficPolicy_PortTrafficPolicy)},
  { 19, -1, sizeof(::istio::networking::v1alpha3::TrafficPolicy)},
  { 29, 36, sizeof(::istio::networking::v1alpha3::Subset_LabelsEntry_DoNotUse)},
  { 38, -1, sizeof(::istio::networking::v1alpha3::Subset)},
  { 46, -1, sizeof(::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB_HTTPCookie)},
  { 54, -1, sizeof(::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB)},
  { 64, -1, sizeof(::istio::networking::v1alpha3::LoadBalancerSettings)},
  { 72, -1, sizeof(::istio::networking::v1alpha3::ConnectionPoolSettings_TCPSettings_TcpKeepalive)},
  { 80, -1, sizeof(::istio::networking::v1alpha3::ConnectionPoolSettings_TCPSettings)},
  { 88, -1, sizeof(::istio::networking::v1alpha3::ConnectionPoolSettings_HTTPSettings)},
  { 97, -1, sizeof(::istio::networking::v1alpha3::ConnectionPoolSettings)},
  { 104, -1, sizeof(::istio::networking::v1alpha3::OutlierDetection)},
  { 114, -1, sizeof(::istio::networking::v1alpha3::TLSSettings)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_DestinationRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_TrafficPolicy_PortTrafficPolicy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_TrafficPolicy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_Subset_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_Subset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_LoadBalancerSettings_ConsistentHashLB_HTTPCookie_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_LoadBalancerSettings_ConsistentHashLB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_LoadBalancerSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_ConnectionPoolSettings_TCPSettings_TcpKeepalive_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_ConnectionPoolSettings_TCPSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_ConnectionPoolSettings_HTTPSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_ConnectionPoolSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_OutlierDetection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_TLSSettings_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "networking/v1alpha3/destination_rule.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n*networking/v1alpha3/destination_rule.p"
      "roto\022\031istio.networking.v1alpha3\032\036google/"
      "protobuf/duration.proto\032)networking/v1al"
      "pha3/virtual_service.proto\032\024gogoproto/go"
      "go.proto\"\250\001\n\017DestinationRule\022\014\n\004host\030\001 \001"
      "(\t\022@\n\016traffic_policy\030\002 \001(\0132(.istio.netwo"
      "rking.v1alpha3.TrafficPolicy\0222\n\007subsets\030"
      "\003 \003(\0132!.istio.networking.v1alpha3.Subset"
      "\022\021\n\texport_to\030\004 \003(\t\"\327\005\n\rTrafficPolicy\022F\n"
      "\rload_balancer\030\001 \001(\0132/.istio.networking."
      "v1alpha3.LoadBalancerSettings\022J\n\017connect"
      "ion_pool\030\002 \001(\01321.istio.networking.v1alph"
      "a3.ConnectionPoolSettings\022F\n\021outlier_det"
      "ection\030\003 \001(\0132+.istio.networking.v1alpha3"
      ".OutlierDetection\0223\n\003tls\030\004 \001(\0132&.istio.n"
      "etworking.v1alpha3.TLSSettings\022W\n\023port_l"
      "evel_settings\030\005 \003(\0132:.istio.networking.v"
      "1alpha3.TrafficPolicy.PortTrafficPolicy\032"
      "\333\002\n\021PortTrafficPolicy\0225\n\004port\030\001 \001(\0132\'.is"
      "tio.networking.v1alpha3.PortSelector\022F\n\r"
      "load_balancer\030\002 \001(\0132/.istio.networking.v"
      "1alpha3.LoadBalancerSettings\022J\n\017connecti"
      "on_pool\030\003 \001(\01321.istio.networking.v1alpha"
      "3.ConnectionPoolSettings\022F\n\021outlier_dete"
      "ction\030\004 \001(\0132+.istio.networking.v1alpha3."
      "OutlierDetection\0223\n\003tls\030\005 \001(\0132&.istio.ne"
      "tworking.v1alpha3.TLSSettings\"\306\001\n\006Subset"
      "\022\014\n\004name\030\001 \001(\t\022=\n\006labels\030\002 \003(\0132-.istio.n"
      "etworking.v1alpha3.Subset.LabelsEntry\022@\n"
      "\016traffic_policy\030\003 \001(\0132(.istio.networking"
      ".v1alpha3.TrafficPolicy\032-\n\013LabelsEntry\022\013"
      "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\303\004\n\024LoadB"
      "alancerSettings\022J\n\006simple\030\001 \001(\01628.istio."
      "networking.v1alpha3.LoadBalancerSettings"
      ".SimpleLBH\000\022[\n\017consistent_hash\030\002 \001(\0132@.i"
      "stio.networking.v1alpha3.LoadBalancerSet"
      "tings.ConsistentHashLBH\000\032\252\002\n\020ConsistentH"
      "ashLB\022\032\n\020http_header_name\030\001 \001(\tH\000\022b\n\013htt"
      "p_cookie\030\002 \001(\0132K.istio.networking.v1alph"
      "a3.LoadBalancerSettings.ConsistentHashLB"
      ".HTTPCookieH\000\022\027\n\ruse_source_ip\030\003 \001(\010H\000\022\031"
      "\n\021minimum_ring_size\030\004 \001(\004\032V\n\nHTTPCookie\022"
      "\014\n\004name\030\001 \001(\t\022\014\n\004path\030\002 \001(\t\022,\n\003ttl\030\003 \001(\013"
      "2\031.google.protobuf.DurationB\004\230\337\037\001B\n\n\010has"
      "h_key\"H\n\010SimpleLB\022\017\n\013ROUND_ROBIN\020\000\022\016\n\nLE"
      "AST_CONN\020\001\022\n\n\006RANDOM\020\002\022\017\n\013PASSTHROUGH\020\003B"
      "\013\n\tlb_policy\"\363\004\n\026ConnectionPoolSettings\022"
      "J\n\003tcp\030\001 \001(\0132=.istio.networking.v1alpha3"
      ".ConnectionPoolSettings.TCPSettings\022L\n\004h"
      "ttp\030\002 \001(\0132>.istio.networking.v1alpha3.Co"
      "nnectionPoolSettings.HTTPSettings\032\263\002\n\013TC"
      "PSettings\022\027\n\017max_connections\030\001 \001(\005\0222\n\017co"
      "nnect_timeout\030\002 \001(\0132\031.google.protobuf.Du"
      "ration\022a\n\rtcp_keepalive\030\003 \001(\0132J.istio.ne"
      "tworking.v1alpha3.ConnectionPoolSettings"
      ".TCPSettings.TcpKeepalive\032t\n\014TcpKeepaliv"
      "e\022\016\n\006probes\030\001 \001(\r\022\'\n\004time\030\002 \001(\0132\031.google"
      ".protobuf.Duration\022+\n\010interval\030\003 \001(\0132\031.g"
      "oogle.protobuf.Duration\032\210\001\n\014HTTPSettings"
      "\022\"\n\032http1_max_pending_requests\030\001 \001(\005\022\032\n\022"
      "http2_max_requests\030\002 \001(\005\022#\n\033max_requests"
      "_per_connection\030\003 \001(\005\022\023\n\013max_retries\030\004 \001"
      "(\005\"\314\001\n\020OutlierDetection\022\032\n\022consecutive_e"
      "rrors\030\001 \001(\005\022+\n\010interval\030\002 \001(\0132\031.google.p"
      "rotobuf.Duration\0225\n\022base_ejection_time\030\003"
      " \001(\0132\031.google.protobuf.Duration\022\034\n\024max_e"
      "jection_percent\030\004 \001(\005\022\032\n\022min_health_perc"
      "ent\030\005 \001(\005\"\377\001\n\013TLSSettings\022<\n\004mode\030\001 \001(\0162"
      "..istio.networking.v1alpha3.TLSSettings."
      "TLSmode\022\032\n\022client_certificate\030\002 \001(\t\022\023\n\013p"
      "rivate_key\030\003 \001(\t\022\027\n\017ca_certificates\030\004 \001("
      "\t\022\031\n\021subject_alt_names\030\005 \003(\t\022\013\n\003sni\030\006 \001("
      "\t\"@\n\007TLSmode\022\013\n\007DISABLE\020\000\022\n\n\006SIMPLE\020\001\022\n\n"
      "\006MUTUAL\020\002\022\020\n\014ISTIO_MUTUAL\020\003B\"Z istio.io/"
      "api/networking/v1alpha3b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2991);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "networking/v1alpha3/destination_rule.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::AddDescriptors();
  ::protobuf_gogoproto_2fgogo_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto
namespace istio {
namespace networking {
namespace v1alpha3 {
const ::google::protobuf::EnumDescriptor* LoadBalancerSettings_SimpleLB_descriptor() {
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_enum_descriptors[0];
}
bool LoadBalancerSettings_SimpleLB_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LoadBalancerSettings_SimpleLB LoadBalancerSettings::ROUND_ROBIN;
const LoadBalancerSettings_SimpleLB LoadBalancerSettings::LEAST_CONN;
const LoadBalancerSettings_SimpleLB LoadBalancerSettings::RANDOM;
const LoadBalancerSettings_SimpleLB LoadBalancerSettings::PASSTHROUGH;
const LoadBalancerSettings_SimpleLB LoadBalancerSettings::SimpleLB_MIN;
const LoadBalancerSettings_SimpleLB LoadBalancerSettings::SimpleLB_MAX;
const int LoadBalancerSettings::SimpleLB_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TLSSettings_TLSmode_descriptor() {
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_enum_descriptors[1];
}
bool TLSSettings_TLSmode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TLSSettings_TLSmode TLSSettings::DISABLE;
const TLSSettings_TLSmode TLSSettings::SIMPLE;
const TLSSettings_TLSmode TLSSettings::MUTUAL;
const TLSSettings_TLSmode TLSSettings::ISTIO_MUTUAL;
const TLSSettings_TLSmode TLSSettings::TLSmode_MIN;
const TLSSettings_TLSmode TLSSettings::TLSmode_MAX;
const int TLSSettings::TLSmode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void DestinationRule::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_DestinationRule_default_instance_._instance.get_mutable()->traffic_policy_ = const_cast< ::istio::networking::v1alpha3::TrafficPolicy*>(
      ::istio::networking::v1alpha3::TrafficPolicy::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DestinationRule::kHostFieldNumber;
const int DestinationRule::kTrafficPolicyFieldNumber;
const int DestinationRule::kSubsetsFieldNumber;
const int DestinationRule::kExportToFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DestinationRule::DestinationRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsDestinationRule();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.DestinationRule)
}
DestinationRule::DestinationRule(const DestinationRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      subsets_(from.subsets_),
      export_to_(from.export_to_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host().size() > 0) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.has_traffic_policy()) {
    traffic_policy_ = new ::istio::networking::v1alpha3::TrafficPolicy(*from.traffic_policy_);
  } else {
    traffic_policy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.DestinationRule)
}

void DestinationRule::SharedCtor() {
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_policy_ = NULL;
  _cached_size_ = 0;
}

DestinationRule::~DestinationRule() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.DestinationRule)
  SharedDtor();
}

void DestinationRule::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete traffic_policy_;
}

void DestinationRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestinationRule::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DestinationRule& DestinationRule::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsDestinationRule();
  return *internal_default_instance();
}

DestinationRule* DestinationRule::New(::google::protobuf::Arena* arena) const {
  DestinationRule* n = new DestinationRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DestinationRule::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.DestinationRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subsets_.Clear();
  export_to_.Clear();
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && traffic_policy_ != NULL) {
    delete traffic_policy_;
  }
  traffic_policy_ = NULL;
  _internal_metadata_.Clear();
}

bool DestinationRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.DestinationRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.DestinationRule.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.TrafficPolicy traffic_policy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_traffic_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.networking.v1alpha3.Subset subsets = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_subsets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string export_to = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_export_to()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->export_to(this->export_to_size() - 1).data(),
            static_cast<int>(this->export_to(this->export_to_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.DestinationRule.export_to"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.DestinationRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.DestinationRule)
  return false;
#undef DO_
}

void DestinationRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.DestinationRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.DestinationRule.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // .istio.networking.v1alpha3.TrafficPolicy traffic_policy = 2;
  if (this->has_traffic_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->traffic_policy_, output);
  }

  // repeated .istio.networking.v1alpha3.Subset subsets = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subsets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->subsets(static_cast<int>(i)), output);
  }

  // repeated string export_to = 4;
  for (int i = 0, n = this->export_to_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->export_to(i).data(), static_cast<int>(this->export_to(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.DestinationRule.export_to");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->export_to(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.DestinationRule)
}

::google::protobuf::uint8* DestinationRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.DestinationRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.DestinationRule.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // .istio.networking.v1alpha3.TrafficPolicy traffic_policy = 2;
  if (this->has_traffic_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->traffic_policy_, deterministic, target);
  }

  // repeated .istio.networking.v1alpha3.Subset subsets = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subsets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->subsets(static_cast<int>(i)), deterministic, target);
  }

  // repeated string export_to = 4;
  for (int i = 0, n = this->export_to_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->export_to(i).data(), static_cast<int>(this->export_to(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.DestinationRule.export_to");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->export_to(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.DestinationRule)
  return target;
}

size_t DestinationRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.DestinationRule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .istio.networking.v1alpha3.Subset subsets = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->subsets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->subsets(static_cast<int>(i)));
    }
  }

  // repeated string export_to = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->export_to_size());
  for (int i = 0, n = this->export_to_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->export_to(i));
  }

  // string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // .istio.networking.v1alpha3.TrafficPolicy traffic_policy = 2;
  if (this->has_traffic_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->traffic_policy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestinationRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.DestinationRule)
  GOOGLE_DCHECK_NE(&from, this);
  const DestinationRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DestinationRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.DestinationRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.DestinationRule)
    MergeFrom(*source);
  }
}

void DestinationRule::MergeFrom(const DestinationRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.DestinationRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subsets_.MergeFrom(from.subsets_);
  export_to_.MergeFrom(from.export_to_);
  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.has_traffic_policy()) {
    mutable_traffic_policy()->::istio::networking::v1alpha3::TrafficPolicy::MergeFrom(from.traffic_policy());
  }
}

void DestinationRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.DestinationRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestinationRule::CopyFrom(const DestinationRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.DestinationRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestinationRule::IsInitialized() const {
  return true;
}

void DestinationRule::Swap(DestinationRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DestinationRule::InternalSwap(DestinationRule* other) {
  using std::swap;
  subsets_.InternalSwap(&other->subsets_);
  export_to_.InternalSwap(&other->export_to_);
  host_.Swap(&other->host_);
  swap(traffic_policy_, other->traffic_policy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DestinationRule::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficPolicy_PortTrafficPolicy::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_TrafficPolicy_PortTrafficPolicy_default_instance_._instance.get_mutable()->port_ = const_cast< ::istio::networking::v1alpha3::PortSelector*>(
      ::istio::networking::v1alpha3::PortSelector::internal_default_instance());
  ::istio::networking::v1alpha3::_TrafficPolicy_PortTrafficPolicy_default_instance_._instance.get_mutable()->load_balancer_ = const_cast< ::istio::networking::v1alpha3::LoadBalancerSettings*>(
      ::istio::networking::v1alpha3::LoadBalancerSettings::internal_default_instance());
  ::istio::networking::v1alpha3::_TrafficPolicy_PortTrafficPolicy_default_instance_._instance.get_mutable()->connection_pool_ = const_cast< ::istio::networking::v1alpha3::ConnectionPoolSettings*>(
      ::istio::networking::v1alpha3::ConnectionPoolSettings::internal_default_instance());
  ::istio::networking::v1alpha3::_TrafficPolicy_PortTrafficPolicy_default_instance_._instance.get_mutable()->outlier_detection_ = const_cast< ::istio::networking::v1alpha3::OutlierDetection*>(
      ::istio::networking::v1alpha3::OutlierDetection::internal_default_instance());
  ::istio::networking::v1alpha3::_TrafficPolicy_PortTrafficPolicy_default_instance_._instance.get_mutable()->tls_ = const_cast< ::istio::networking::v1alpha3::TLSSettings*>(
      ::istio::networking::v1alpha3::TLSSettings::internal_default_instance());
}
void TrafficPolicy_PortTrafficPolicy::clear_port() {
  if (GetArenaNoVirtual() == NULL && port_ != NULL) {
    delete port_;
  }
  port_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficPolicy_PortTrafficPolicy::kPortFieldNumber;
const int TrafficPolicy_PortTrafficPolicy::kLoadBalancerFieldNumber;
const int TrafficPolicy_PortTrafficPolicy::kConnectionPoolFieldNumber;
const int TrafficPolicy_PortTrafficPolicy::kOutlierDetectionFieldNumber;
const int TrafficPolicy_PortTrafficPolicy::kTlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficPolicy_PortTrafficPolicy::TrafficPolicy_PortTrafficPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsTrafficPolicy_PortTrafficPolicy();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.TrafficPolicy.PortTrafficPolicy)
}
TrafficPolicy_PortTrafficPolicy::TrafficPolicy_PortTrafficPolicy(const TrafficPolicy_PortTrafficPolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_port()) {
    port_ = new ::istio::networking::v1alpha3::PortSelector(*from.port_);
  } else {
    port_ = NULL;
  }
  if (from.has_load_balancer()) {
    load_balancer_ = new ::istio::networking::v1alpha3::LoadBalancerSettings(*from.load_balancer_);
  } else {
    load_balancer_ = NULL;
  }
  if (from.has_connection_pool()) {
    connection_pool_ = new ::istio::networking::v1alpha3::ConnectionPoolSettings(*from.connection_pool_);
  } else {
    connection_pool_ = NULL;
  }
  if (from.has_outlier_detection()) {
    outlier_detection_ = new ::istio::networking::v1alpha3::OutlierDetection(*from.outlier_detection_);
  } else {
    outlier_detection_ = NULL;
  }
  if (from.has_tls()) {
    tls_ = new ::istio::networking::v1alpha3::TLSSettings(*from.tls_);
  } else {
    tls_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.TrafficPolicy.PortTrafficPolicy)
}

void TrafficPolicy_PortTrafficPolicy::SharedCtor() {
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tls_) -
      reinterpret_cast<char*>(&port_)) + sizeof(tls_));
  _cached_size_ = 0;
}

TrafficPolicy_PortTrafficPolicy::~TrafficPolicy_PortTrafficPolicy() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.TrafficPolicy.PortTrafficPolicy)
  SharedDtor();
}

void TrafficPolicy_PortTrafficPolicy::SharedDtor() {
  if (this != internal_default_instance()) delete port_;
  if (this != internal_default_instance()) delete load_balancer_;
  if (this != internal_default_instance()) delete connection_pool_;
  if (this != internal_default_instance()) delete outlier_detection_;
  if (this != internal_default_instance()) delete tls_;
}

void TrafficPolicy_PortTrafficPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficPolicy_PortTrafficPolicy::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficPolicy_PortTrafficPolicy& TrafficPolicy_PortTrafficPolicy::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsTrafficPolicy_PortTrafficPolicy();
  return *internal_default_instance();
}

TrafficPolicy_PortTrafficPolicy* TrafficPolicy_PortTrafficPolicy::New(::google::protobuf::Arena* arena) const {
  TrafficPolicy_PortTrafficPolicy* n = new TrafficPolicy_PortTrafficPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficPolicy_PortTrafficPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.TrafficPolicy.PortTrafficPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && port_ != NULL) {
    delete port_;
  }
  port_ = NULL;
  if (GetArenaNoVirtual() == NULL && load_balancer_ != NULL) {
    delete load_balancer_;
  }
  load_balancer_ = NULL;
  if (GetArenaNoVirtual() == NULL && connection_pool_ != NULL) {
    delete connection_pool_;
  }
  connection_pool_ = NULL;
  if (GetArenaNoVirtual() == NULL && outlier_detection_ != NULL) {
    delete outlier_detection_;
  }
  outlier_detection_ = NULL;
  if (GetArenaNoVirtual() == NULL && tls_ != NULL) {
    delete tls_;
  }
  tls_ = NULL;
  _internal_metadata_.Clear();
}

bool TrafficPolicy_PortTrafficPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.TrafficPolicy.PortTrafficPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.networking.v1alpha3.PortSelector port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_port()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.LoadBalancerSettings load_balancer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_load_balancer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.ConnectionPoolSettings connection_pool = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connection_pool()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.OutlierDetection outlier_detection = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_outlier_detection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.TLSSettings tls = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.TrafficPolicy.PortTrafficPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.TrafficPolicy.PortTrafficPolicy)
  return false;
#undef DO_
}

void TrafficPolicy_PortTrafficPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.TrafficPolicy.PortTrafficPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.PortSelector port = 1;
  if (this->has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->port_, output);
  }

  // .istio.networking.v1alpha3.LoadBalancerSettings load_balancer = 2;
  if (this->has_load_balancer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->load_balancer_, output);
  }

  // .istio.networking.v1alpha3.ConnectionPoolSettings connection_pool = 3;
  if (this->has_connection_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->connection_pool_, output);
  }

  // .istio.networking.v1alpha3.OutlierDetection outlier_detection = 4;
  if (this->has_outlier_detection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->outlier_detection_, output);
  }

  // .istio.networking.v1alpha3.TLSSettings tls = 5;
  if (this->has_tls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->tls_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.TrafficPolicy.PortTrafficPolicy)
}

::google::protobuf::uint8* TrafficPolicy_PortTrafficPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.TrafficPolicy.PortTrafficPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.PortSelector port = 1;
  if (this->has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->port_, deterministic, target);
  }

  // .istio.networking.v1alpha3.LoadBalancerSettings load_balancer = 2;
  if (this->has_load_balancer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->load_balancer_, deterministic, target);
  }

  // .istio.networking.v1alpha3.ConnectionPoolSettings connection_pool = 3;
  if (this->has_connection_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->connection_pool_, deterministic, target);
  }

  // .istio.networking.v1alpha3.OutlierDetection outlier_detection = 4;
  if (this->has_outlier_detection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->outlier_detection_, deterministic, target);
  }

  // .istio.networking.v1alpha3.TLSSettings tls = 5;
  if (this->has_tls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->tls_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.TrafficPolicy.PortTrafficPolicy)
  return target;
}

size_t TrafficPolicy_PortTrafficPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.TrafficPolicy.PortTrafficPolicy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .istio.networking.v1alpha3.PortSelector port = 1;
  if (this->has_port()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->port_);
  }

  // .istio.networking.v1alpha3.LoadBalancerSettings load_balancer = 2;
  if (this->has_load_balancer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->load_balancer_);
  }

  // .istio.networking.v1alpha3.ConnectionPoolSettings connection_pool = 3;
  if (this->has_connection_pool()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->connection_pool_);
  }

  // .istio.networking.v1alpha3.OutlierDetection outlier_detection = 4;
  if (this->has_outlier_detection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->outlier_detection_);
  }

  // .istio.networking.v1alpha3.TLSSettings tls = 5;
  if (this->has_tls()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tls_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficPolicy_PortTrafficPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.TrafficPolicy.PortTrafficPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficPolicy_PortTrafficPolicy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficPolicy_PortTrafficPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.TrafficPolicy.PortTrafficPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.TrafficPolicy.PortTrafficPolicy)
    MergeFrom(*source);
  }
}

void TrafficPolicy_PortTrafficPolicy::MergeFrom(const TrafficPolicy_PortTrafficPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.TrafficPolicy.PortTrafficPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_port()) {
    mutable_port()->::istio::networking::v1alpha3::PortSelector::MergeFrom(from.port());
  }
  if (from.has_load_balancer()) {
    mutable_load_balancer()->::istio::networking::v1alpha3::LoadBalancerSettings::MergeFrom(from.load_balancer());
  }
  if (from.has_connection_pool()) {
    mutable_connection_pool()->::istio::networking::v1alpha3::ConnectionPoolSettings::MergeFrom(from.connection_pool());
  }
  if (from.has_outlier_detection()) {
    mutable_outlier_detection()->::istio::networking::v1alpha3::OutlierDetection::MergeFrom(from.outlier_detection());
  }
  if (from.has_tls()) {
    mutable_tls()->::istio::networking::v1alpha3::TLSSettings::MergeFrom(from.tls());
  }
}

void TrafficPolicy_PortTrafficPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.TrafficPolicy.PortTrafficPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficPolicy_PortTrafficPolicy::CopyFrom(const TrafficPolicy_PortTrafficPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.TrafficPolicy.PortTrafficPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficPolicy_PortTrafficPolicy::IsInitialized() const {
  return true;
}

void TrafficPolicy_PortTrafficPolicy::Swap(TrafficPolicy_PortTrafficPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficPolicy_PortTrafficPolicy::InternalSwap(TrafficPolicy_PortTrafficPolicy* other) {
  using std::swap;
  swap(port_, other->port_);
  swap(load_balancer_, other->load_balancer_);
  swap(connection_pool_, other->connection_pool_);
  swap(outlier_detection_, other->outlier_detection_);
  swap(tls_, other->tls_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficPolicy_PortTrafficPolicy::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficPolicy::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_TrafficPolicy_default_instance_._instance.get_mutable()->load_balancer_ = const_cast< ::istio::networking::v1alpha3::LoadBalancerSettings*>(
      ::istio::networking::v1alpha3::LoadBalancerSettings::internal_default_instance());
  ::istio::networking::v1alpha3::_TrafficPolicy_default_instance_._instance.get_mutable()->connection_pool_ = const_cast< ::istio::networking::v1alpha3::ConnectionPoolSettings*>(
      ::istio::networking::v1alpha3::ConnectionPoolSettings::internal_default_instance());
  ::istio::networking::v1alpha3::_TrafficPolicy_default_instance_._instance.get_mutable()->outlier_detection_ = const_cast< ::istio::networking::v1alpha3::OutlierDetection*>(
      ::istio::networking::v1alpha3::OutlierDetection::internal_default_instance());
  ::istio::networking::v1alpha3::_TrafficPolicy_default_instance_._instance.get_mutable()->tls_ = const_cast< ::istio::networking::v1alpha3::TLSSettings*>(
      ::istio::networking::v1alpha3::TLSSettings::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficPolicy::kLoadBalancerFieldNumber;
const int TrafficPolicy::kConnectionPoolFieldNumber;
const int TrafficPolicy::kOutlierDetectionFieldNumber;
const int TrafficPolicy::kTlsFieldNumber;
const int TrafficPolicy::kPortLevelSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficPolicy::TrafficPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsTrafficPolicy();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.TrafficPolicy)
}
TrafficPolicy::TrafficPolicy(const TrafficPolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      port_level_settings_(from.port_level_settings_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_load_balancer()) {
    load_balancer_ = new ::istio::networking::v1alpha3::LoadBalancerSettings(*from.load_balancer_);
  } else {
    load_balancer_ = NULL;
  }
  if (from.has_connection_pool()) {
    connection_pool_ = new ::istio::networking::v1alpha3::ConnectionPoolSettings(*from.connection_pool_);
  } else {
    connection_pool_ = NULL;
  }
  if (from.has_outlier_detection()) {
    outlier_detection_ = new ::istio::networking::v1alpha3::OutlierDetection(*from.outlier_detection_);
  } else {
    outlier_detection_ = NULL;
  }
  if (from.has_tls()) {
    tls_ = new ::istio::networking::v1alpha3::TLSSettings(*from.tls_);
  } else {
    tls_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.TrafficPolicy)
}

void TrafficPolicy::SharedCtor() {
  ::memset(&load_balancer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tls_) -
      reinterpret_cast<char*>(&load_balancer_)) + sizeof(tls_));
  _cached_size_ = 0;
}

TrafficPolicy::~TrafficPolicy() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.TrafficPolicy)
  SharedDtor();
}

void TrafficPolicy::SharedDtor() {
  if (this != internal_default_instance()) delete load_balancer_;
  if (this != internal_default_instance()) delete connection_pool_;
  if (this != internal_default_instance()) delete outlier_detection_;
  if (this != internal_default_instance()) delete tls_;
}

void TrafficPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficPolicy::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficPolicy& TrafficPolicy::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsTrafficPolicy();
  return *internal_default_instance();
}

TrafficPolicy* TrafficPolicy::New(::google::protobuf::Arena* arena) const {
  TrafficPolicy* n = new TrafficPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.TrafficPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  port_level_settings_.Clear();
  if (GetArenaNoVirtual() == NULL && load_balancer_ != NULL) {
    delete load_balancer_;
  }
  load_balancer_ = NULL;
  if (GetArenaNoVirtual() == NULL && connection_pool_ != NULL) {
    delete connection_pool_;
  }
  connection_pool_ = NULL;
  if (GetArenaNoVirtual() == NULL && outlier_detection_ != NULL) {
    delete outlier_detection_;
  }
  outlier_detection_ = NULL;
  if (GetArenaNoVirtual() == NULL && tls_ != NULL) {
    delete tls_;
  }
  tls_ = NULL;
  _internal_metadata_.Clear();
}

bool TrafficPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.TrafficPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.networking.v1alpha3.LoadBalancerSettings load_balancer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_load_balancer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.ConnectionPoolSettings connection_pool = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connection_pool()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.OutlierDetection outlier_detection = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_outlier_detection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.TLSSettings tls = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.networking.v1alpha3.TrafficPolicy.PortTrafficPolicy port_level_settings = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_port_level_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.TrafficPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.TrafficPolicy)
  return false;
#undef DO_
}

void TrafficPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.TrafficPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.LoadBalancerSettings load_balancer = 1;
  if (this->has_load_balancer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->load_balancer_, output);
  }

  // .istio.networking.v1alpha3.ConnectionPoolSettings connection_pool = 2;
  if (this->has_connection_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->connection_pool_, output);
  }

  // .istio.networking.v1alpha3.OutlierDetection outlier_detection = 3;
  if (this->has_outlier_detection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->outlier_detection_, output);
  }

  // .istio.networking.v1alpha3.TLSSettings tls = 4;
  if (this->has_tls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->tls_, output);
  }

  // repeated .istio.networking.v1alpha3.TrafficPolicy.PortTrafficPolicy port_level_settings = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->port_level_settings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->port_level_settings(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.TrafficPolicy)
}

::google::protobuf::uint8* TrafficPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.TrafficPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.LoadBalancerSettings load_balancer = 1;
  if (this->has_load_balancer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->load_balancer_, deterministic, target);
  }

  // .istio.networking.v1alpha3.ConnectionPoolSettings connection_pool = 2;
  if (this->has_connection_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->connection_pool_, deterministic, target);
  }

  // .istio.networking.v1alpha3.OutlierDetection outlier_detection = 3;
  if (this->has_outlier_detection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->outlier_detection_, deterministic, target);
  }

  // .istio.networking.v1alpha3.TLSSettings tls = 4;
  if (this->has_tls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->tls_, deterministic, target);
  }

  // repeated .istio.networking.v1alpha3.TrafficPolicy.PortTrafficPolicy port_level_settings = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->port_level_settings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->port_level_settings(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.TrafficPolicy)
  return target;
}

size_t TrafficPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.TrafficPolicy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .istio.networking.v1alpha3.TrafficPolicy.PortTrafficPolicy port_level_settings = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->port_level_settings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->port_level_settings(static_cast<int>(i)));
    }
  }

  // .istio.networking.v1alpha3.LoadBalancerSettings load_balancer = 1;
  if (this->has_load_balancer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->load_balancer_);
  }

  // .istio.networking.v1alpha3.ConnectionPoolSettings connection_pool = 2;
  if (this->has_connection_pool()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->connection_pool_);
  }

  // .istio.networking.v1alpha3.OutlierDetection outlier_detection = 3;
  if (this->has_outlier_detection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->outlier_detection_);
  }

  // .istio.networking.v1alpha3.TLSSettings tls = 4;
  if (this->has_tls()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tls_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.TrafficPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficPolicy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.TrafficPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.TrafficPolicy)
    MergeFrom(*source);
  }
}

void TrafficPolicy::MergeFrom(const TrafficPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.TrafficPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  port_level_settings_.MergeFrom(from.port_level_settings_);
  if (from.has_load_balancer()) {
    mutable_load_balancer()->::istio::networking::v1alpha3::LoadBalancerSettings::MergeFrom(from.load_balancer());
  }
  if (from.has_connection_pool()) {
    mutable_connection_pool()->::istio::networking::v1alpha3::ConnectionPoolSettings::MergeFrom(from.connection_pool());
  }
  if (from.has_outlier_detection()) {
    mutable_outlier_detection()->::istio::networking::v1alpha3::OutlierDetection::MergeFrom(from.outlier_detection());
  }
  if (from.has_tls()) {
    mutable_tls()->::istio::networking::v1alpha3::TLSSettings::MergeFrom(from.tls());
  }
}

void TrafficPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.TrafficPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficPolicy::CopyFrom(const TrafficPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.TrafficPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficPolicy::IsInitialized() const {
  return true;
}

void TrafficPolicy::Swap(TrafficPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficPolicy::InternalSwap(TrafficPolicy* other) {
  using std::swap;
  port_level_settings_.InternalSwap(&other->port_level_settings_);
  swap(load_balancer_, other->load_balancer_);
  swap(connection_pool_, other->connection_pool_);
  swap(outlier_detection_, other->outlier_detection_);
  swap(tls_, other->tls_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficPolicy::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Subset_LabelsEntry_DoNotUse::Subset_LabelsEntry_DoNotUse() {}
Subset_LabelsEntry_DoNotUse::Subset_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Subset_LabelsEntry_DoNotUse::MergeFrom(const Subset_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Subset_LabelsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[3];
}
void Subset_LabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Subset::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_Subset_default_instance_._instance.get_mutable()->traffic_policy_ = const_cast< ::istio::networking::v1alpha3::TrafficPolicy*>(
      ::istio::networking::v1alpha3::TrafficPolicy::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Subset::kNameFieldNumber;
const int Subset::kLabelsFieldNumber;
const int Subset::kTrafficPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Subset::Subset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsSubset();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.Subset)
}
Subset::Subset(const Subset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_traffic_policy()) {
    traffic_policy_ = new ::istio::networking::v1alpha3::TrafficPolicy(*from.traffic_policy_);
  } else {
    traffic_policy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.Subset)
}

void Subset::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_policy_ = NULL;
  _cached_size_ = 0;
}

Subset::~Subset() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.Subset)
  SharedDtor();
}

void Subset::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete traffic_policy_;
}

void Subset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Subset::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Subset& Subset::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsSubset();
  return *internal_default_instance();
}

Subset* Subset::New(::google::protobuf::Arena* arena) const {
  Subset* n = new Subset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Subset::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.Subset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && traffic_policy_ != NULL) {
    delete traffic_policy_;
  }
  traffic_policy_ = NULL;
  _internal_metadata_.Clear();
}

bool Subset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.Subset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.Subset.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          Subset_LabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Subset_LabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.Subset.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.Subset.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.TrafficPolicy traffic_policy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_traffic_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.Subset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.Subset)
  return false;
#undef DO_
}

void Subset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.Subset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Subset.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // map<string, string> labels = 2;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.Subset.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.Subset.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Subset_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Subset_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // .istio.networking.v1alpha3.TrafficPolicy traffic_policy = 3;
  if (this->has_traffic_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->traffic_policy_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.Subset)
}

::google::protobuf::uint8* Subset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.Subset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Subset.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // map<string, string> labels = 2;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.Subset.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.Subset.LabelsEntry.value");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Subset_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Subset_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // .istio.networking.v1alpha3.TrafficPolicy traffic_policy = 3;
  if (this->has_traffic_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->traffic_policy_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.Subset)
  return target;
}

size_t Subset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.Subset)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> labels = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::google::protobuf::scoped_ptr<Subset_LabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .istio.networking.v1alpha3.TrafficPolicy traffic_policy = 3;
  if (this->has_traffic_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->traffic_policy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Subset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.Subset)
  GOOGLE_DCHECK_NE(&from, this);
  const Subset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Subset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.Subset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.Subset)
    MergeFrom(*source);
  }
}

void Subset::MergeFrom(const Subset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.Subset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_traffic_policy()) {
    mutable_traffic_policy()->::istio::networking::v1alpha3::TrafficPolicy::MergeFrom(from.traffic_policy());
  }
}

void Subset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.Subset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subset::CopyFrom(const Subset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.Subset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subset::IsInitialized() const {
  return true;
}

void Subset::Swap(Subset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Subset::InternalSwap(Subset* other) {
  using std::swap;
  labels_.Swap(&other->labels_);
  name_.Swap(&other->name_);
  swap(traffic_policy_, other->traffic_policy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Subset::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoadBalancerSettings_ConsistentHashLB_HTTPCookie::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_LoadBalancerSettings_ConsistentHashLB_HTTPCookie_default_instance_._instance.get_mutable()->ttl_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void LoadBalancerSettings_ConsistentHashLB_HTTPCookie::clear_ttl() {
  if (GetArenaNoVirtual() == NULL && ttl_ != NULL) {
    delete ttl_;
  }
  ttl_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoadBalancerSettings_ConsistentHashLB_HTTPCookie::kNameFieldNumber;
const int LoadBalancerSettings_ConsistentHashLB_HTTPCookie::kPathFieldNumber;
const int LoadBalancerSettings_ConsistentHashLB_HTTPCookie::kTtlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoadBalancerSettings_ConsistentHashLB_HTTPCookie::LoadBalancerSettings_ConsistentHashLB_HTTPCookie()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsLoadBalancerSettings_ConsistentHashLB_HTTPCookie();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie)
}
LoadBalancerSettings_ConsistentHashLB_HTTPCookie::LoadBalancerSettings_ConsistentHashLB_HTTPCookie(const LoadBalancerSettings_ConsistentHashLB_HTTPCookie& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.has_ttl()) {
    ttl_ = new ::google::protobuf::Duration(*from.ttl_);
  } else {
    ttl_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie)
}

void LoadBalancerSettings_ConsistentHashLB_HTTPCookie::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ttl_ = NULL;
  _cached_size_ = 0;
}

LoadBalancerSettings_ConsistentHashLB_HTTPCookie::~LoadBalancerSettings_ConsistentHashLB_HTTPCookie() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie)
  SharedDtor();
}

void LoadBalancerSettings_ConsistentHashLB_HTTPCookie::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ttl_;
}

void LoadBalancerSettings_ConsistentHashLB_HTTPCookie::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadBalancerSettings_ConsistentHashLB_HTTPCookie::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoadBalancerSettings_ConsistentHashLB_HTTPCookie& LoadBalancerSettings_ConsistentHashLB_HTTPCookie::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsLoadBalancerSettings_ConsistentHashLB_HTTPCookie();
  return *internal_default_instance();
}

LoadBalancerSettings_ConsistentHashLB_HTTPCookie* LoadBalancerSettings_ConsistentHashLB_HTTPCookie::New(::google::protobuf::Arena* arena) const {
  LoadBalancerSettings_ConsistentHashLB_HTTPCookie* n = new LoadBalancerSettings_ConsistentHashLB_HTTPCookie;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoadBalancerSettings_ConsistentHashLB_HTTPCookie::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && ttl_ != NULL) {
    delete ttl_;
  }
  ttl_ = NULL;
  _internal_metadata_.Clear();
}

bool LoadBalancerSettings_ConsistentHashLB_HTTPCookie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration ttl = 3 [(.gogoproto.stdduration) = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ttl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie)
  return false;
#undef DO_
}

void LoadBalancerSettings_ConsistentHashLB_HTTPCookie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // .google.protobuf.Duration ttl = 3 [(.gogoproto.stdduration) = true];
  if (this->has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->ttl_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie)
}

::google::protobuf::uint8* LoadBalancerSettings_ConsistentHashLB_HTTPCookie::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // .google.protobuf.Duration ttl = 3 [(.gogoproto.stdduration) = true];
  if (this->has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->ttl_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie)
  return target;
}

size_t LoadBalancerSettings_ConsistentHashLB_HTTPCookie::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // .google.protobuf.Duration ttl = 3 [(.gogoproto.stdduration) = true];
  if (this->has_ttl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ttl_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadBalancerSettings_ConsistentHashLB_HTTPCookie::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadBalancerSettings_ConsistentHashLB_HTTPCookie* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoadBalancerSettings_ConsistentHashLB_HTTPCookie>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie)
    MergeFrom(*source);
  }
}

void LoadBalancerSettings_ConsistentHashLB_HTTPCookie::MergeFrom(const LoadBalancerSettings_ConsistentHashLB_HTTPCookie& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.has_ttl()) {
    mutable_ttl()->::google::protobuf::Duration::MergeFrom(from.ttl());
  }
}

void LoadBalancerSettings_ConsistentHashLB_HTTPCookie::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadBalancerSettings_ConsistentHashLB_HTTPCookie::CopyFrom(const LoadBalancerSettings_ConsistentHashLB_HTTPCookie& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadBalancerSettings_ConsistentHashLB_HTTPCookie::IsInitialized() const {
  return true;
}

void LoadBalancerSettings_ConsistentHashLB_HTTPCookie::Swap(LoadBalancerSettings_ConsistentHashLB_HTTPCookie* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoadBalancerSettings_ConsistentHashLB_HTTPCookie::InternalSwap(LoadBalancerSettings_ConsistentHashLB_HTTPCookie* other) {
  using std::swap;
  name_.Swap(&other->name_);
  path_.Swap(&other->path_);
  swap(ttl_, other->ttl_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoadBalancerSettings_ConsistentHashLB_HTTPCookie::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoadBalancerSettings_ConsistentHashLB::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_LoadBalancerSettings_ConsistentHashLB_default_instance_.http_header_name_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::istio::networking::v1alpha3::_LoadBalancerSettings_ConsistentHashLB_default_instance_.http_cookie_ = const_cast< ::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB_HTTPCookie*>(
      ::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB_HTTPCookie::internal_default_instance());
  ::istio::networking::v1alpha3::_LoadBalancerSettings_ConsistentHashLB_default_instance_.use_source_ip_ = false;
}
void LoadBalancerSettings_ConsistentHashLB::set_allocated_http_cookie(::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB_HTTPCookie* http_cookie) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_hash_key();
  if (http_cookie) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      http_cookie = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, http_cookie, submessage_arena);
    }
    set_has_http_cookie();
    hash_key_.http_cookie_ = http_cookie;
  }
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.http_cookie)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoadBalancerSettings_ConsistentHashLB::kHttpHeaderNameFieldNumber;
const int LoadBalancerSettings_ConsistentHashLB::kHttpCookieFieldNumber;
const int LoadBalancerSettings_ConsistentHashLB::kUseSourceIpFieldNumber;
const int LoadBalancerSettings_ConsistentHashLB::kMinimumRingSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoadBalancerSettings_ConsistentHashLB::LoadBalancerSettings_ConsistentHashLB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsLoadBalancerSettings_ConsistentHashLB();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB)
}
LoadBalancerSettings_ConsistentHashLB::LoadBalancerSettings_ConsistentHashLB(const LoadBalancerSettings_ConsistentHashLB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  minimum_ring_size_ = from.minimum_ring_size_;
  clear_has_hash_key();
  switch (from.hash_key_case()) {
    case kHttpHeaderName: {
      set_http_header_name(from.http_header_name());
      break;
    }
    case kHttpCookie: {
      mutable_http_cookie()->::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB_HTTPCookie::MergeFrom(from.http_cookie());
      break;
    }
    case kUseSourceIp: {
      set_use_source_ip(from.use_source_ip());
      break;
    }
    case HASH_KEY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB)
}

void LoadBalancerSettings_ConsistentHashLB::SharedCtor() {
  minimum_ring_size_ = GOOGLE_ULONGLONG(0);
  clear_has_hash_key();
  _cached_size_ = 0;
}

LoadBalancerSettings_ConsistentHashLB::~LoadBalancerSettings_ConsistentHashLB() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB)
  SharedDtor();
}

void LoadBalancerSettings_ConsistentHashLB::SharedDtor() {
  if (has_hash_key()) {
    clear_hash_key();
  }
}

void LoadBalancerSettings_ConsistentHashLB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadBalancerSettings_ConsistentHashLB::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoadBalancerSettings_ConsistentHashLB& LoadBalancerSettings_ConsistentHashLB::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsLoadBalancerSettings_ConsistentHashLB();
  return *internal_default_instance();
}

LoadBalancerSettings_ConsistentHashLB* LoadBalancerSettings_ConsistentHashLB::New(::google::protobuf::Arena* arena) const {
  LoadBalancerSettings_ConsistentHashLB* n = new LoadBalancerSettings_ConsistentHashLB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoadBalancerSettings_ConsistentHashLB::clear_hash_key() {
// @@protoc_insertion_point(one_of_clear_start:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB)
  switch (hash_key_case()) {
    case kHttpHeaderName: {
      hash_key_.http_header_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kHttpCookie: {
      delete hash_key_.http_cookie_;
      break;
    }
    case kUseSourceIp: {
      // No need to clear
      break;
    }
    case HASH_KEY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HASH_KEY_NOT_SET;
}


void LoadBalancerSettings_ConsistentHashLB::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  minimum_ring_size_ = GOOGLE_ULONGLONG(0);
  clear_hash_key();
  _internal_metadata_.Clear();
}

bool LoadBalancerSettings_ConsistentHashLB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string http_header_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http_header_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->http_header_name().data(), static_cast<int>(this->http_header_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.http_header_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie http_cookie = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_http_cookie()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_source_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_hash_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hash_key_.use_source_ip_)));
          set_has_use_source_ip();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 minimum_ring_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &minimum_ring_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB)
  return false;
#undef DO_
}

void LoadBalancerSettings_ConsistentHashLB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string http_header_name = 1;
  if (has_http_header_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->http_header_name().data(), static_cast<int>(this->http_header_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.http_header_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->http_header_name(), output);
  }

  // .istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie http_cookie = 2;
  if (has_http_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *hash_key_.http_cookie_, output);
  }

  // bool use_source_ip = 3;
  if (has_use_source_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_source_ip(), output);
  }

  // uint64 minimum_ring_size = 4;
  if (this->minimum_ring_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->minimum_ring_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB)
}

::google::protobuf::uint8* LoadBalancerSettings_ConsistentHashLB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string http_header_name = 1;
  if (has_http_header_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->http_header_name().data(), static_cast<int>(this->http_header_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.http_header_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->http_header_name(), target);
  }

  // .istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie http_cookie = 2;
  if (has_http_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *hash_key_.http_cookie_, deterministic, target);
  }

  // bool use_source_ip = 3;
  if (has_use_source_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_source_ip(), target);
  }

  // uint64 minimum_ring_size = 4;
  if (this->minimum_ring_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->minimum_ring_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB)
  return target;
}

size_t LoadBalancerSettings_ConsistentHashLB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 minimum_ring_size = 4;
  if (this->minimum_ring_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->minimum_ring_size());
  }

  switch (hash_key_case()) {
    // string http_header_name = 1;
    case kHttpHeaderName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->http_header_name());
      break;
    }
    // .istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB.HTTPCookie http_cookie = 2;
    case kHttpCookie: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *hash_key_.http_cookie_);
      break;
    }
    // bool use_source_ip = 3;
    case kUseSourceIp: {
      total_size += 1 + 1;
      break;
    }
    case HASH_KEY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadBalancerSettings_ConsistentHashLB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadBalancerSettings_ConsistentHashLB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoadBalancerSettings_ConsistentHashLB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB)
    MergeFrom(*source);
  }
}

void LoadBalancerSettings_ConsistentHashLB::MergeFrom(const LoadBalancerSettings_ConsistentHashLB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.minimum_ring_size() != 0) {
    set_minimum_ring_size(from.minimum_ring_size());
  }
  switch (from.hash_key_case()) {
    case kHttpHeaderName: {
      set_http_header_name(from.http_header_name());
      break;
    }
    case kHttpCookie: {
      mutable_http_cookie()->::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB_HTTPCookie::MergeFrom(from.http_cookie());
      break;
    }
    case kUseSourceIp: {
      set_use_source_ip(from.use_source_ip());
      break;
    }
    case HASH_KEY_NOT_SET: {
      break;
    }
  }
}

void LoadBalancerSettings_ConsistentHashLB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadBalancerSettings_ConsistentHashLB::CopyFrom(const LoadBalancerSettings_ConsistentHashLB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadBalancerSettings_ConsistentHashLB::IsInitialized() const {
  return true;
}

void LoadBalancerSettings_ConsistentHashLB::Swap(LoadBalancerSettings_ConsistentHashLB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoadBalancerSettings_ConsistentHashLB::InternalSwap(LoadBalancerSettings_ConsistentHashLB* other) {
  using std::swap;
  swap(minimum_ring_size_, other->minimum_ring_size_);
  swap(hash_key_, other->hash_key_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoadBalancerSettings_ConsistentHashLB::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoadBalancerSettings::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_LoadBalancerSettings_default_instance_.simple_ = 0;
  ::istio::networking::v1alpha3::_LoadBalancerSettings_default_instance_.consistent_hash_ = const_cast< ::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB*>(
      ::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB::internal_default_instance());
}
void LoadBalancerSettings::set_allocated_consistent_hash(::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB* consistent_hash) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_lb_policy();
  if (consistent_hash) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      consistent_hash = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, consistent_hash, submessage_arena);
    }
    set_has_consistent_hash();
    lb_policy_.consistent_hash_ = consistent_hash;
  }
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.LoadBalancerSettings.consistent_hash)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoadBalancerSettings::kSimpleFieldNumber;
const int LoadBalancerSettings::kConsistentHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoadBalancerSettings::LoadBalancerSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsLoadBalancerSettings();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.LoadBalancerSettings)
}
LoadBalancerSettings::LoadBalancerSettings(const LoadBalancerSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_lb_policy();
  switch (from.lb_policy_case()) {
    case kSimple: {
      set_simple(from.simple());
      break;
    }
    case kConsistentHash: {
      mutable_consistent_hash()->::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB::MergeFrom(from.consistent_hash());
      break;
    }
    case LB_POLICY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.LoadBalancerSettings)
}

void LoadBalancerSettings::SharedCtor() {
  clear_has_lb_policy();
  _cached_size_ = 0;
}

LoadBalancerSettings::~LoadBalancerSettings() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.LoadBalancerSettings)
  SharedDtor();
}

void LoadBalancerSettings::SharedDtor() {
  if (has_lb_policy()) {
    clear_lb_policy();
  }
}

void LoadBalancerSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadBalancerSettings::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoadBalancerSettings& LoadBalancerSettings::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsLoadBalancerSettings();
  return *internal_default_instance();
}

LoadBalancerSettings* LoadBalancerSettings::New(::google::protobuf::Arena* arena) const {
  LoadBalancerSettings* n = new LoadBalancerSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoadBalancerSettings::clear_lb_policy() {
// @@protoc_insertion_point(one_of_clear_start:istio.networking.v1alpha3.LoadBalancerSettings)
  switch (lb_policy_case()) {
    case kSimple: {
      // No need to clear
      break;
    }
    case kConsistentHash: {
      delete lb_policy_.consistent_hash_;
      break;
    }
    case LB_POLICY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LB_POLICY_NOT_SET;
}


void LoadBalancerSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.LoadBalancerSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_lb_policy();
  _internal_metadata_.Clear();
}

bool LoadBalancerSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.LoadBalancerSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.networking.v1alpha3.LoadBalancerSettings.SimpleLB simple = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_simple(static_cast< ::istio::networking::v1alpha3::LoadBalancerSettings_SimpleLB >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB consistent_hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_consistent_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.LoadBalancerSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.LoadBalancerSettings)
  return false;
#undef DO_
}

void LoadBalancerSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.LoadBalancerSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.LoadBalancerSettings.SimpleLB simple = 1;
  if (has_simple()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->simple(), output);
  }

  // .istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB consistent_hash = 2;
  if (has_consistent_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *lb_policy_.consistent_hash_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.LoadBalancerSettings)
}

::google::protobuf::uint8* LoadBalancerSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.LoadBalancerSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.LoadBalancerSettings.SimpleLB simple = 1;
  if (has_simple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->simple(), target);
  }

  // .istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB consistent_hash = 2;
  if (has_consistent_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *lb_policy_.consistent_hash_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.LoadBalancerSettings)
  return target;
}

size_t LoadBalancerSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.LoadBalancerSettings)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (lb_policy_case()) {
    // .istio.networking.v1alpha3.LoadBalancerSettings.SimpleLB simple = 1;
    case kSimple: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->simple());
      break;
    }
    // .istio.networking.v1alpha3.LoadBalancerSettings.ConsistentHashLB consistent_hash = 2;
    case kConsistentHash: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lb_policy_.consistent_hash_);
      break;
    }
    case LB_POLICY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadBalancerSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.LoadBalancerSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadBalancerSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoadBalancerSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.LoadBalancerSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.LoadBalancerSettings)
    MergeFrom(*source);
  }
}

void LoadBalancerSettings::MergeFrom(const LoadBalancerSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.LoadBalancerSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.lb_policy_case()) {
    case kSimple: {
      set_simple(from.simple());
      break;
    }
    case kConsistentHash: {
      mutable_consistent_hash()->::istio::networking::v1alpha3::LoadBalancerSettings_ConsistentHashLB::MergeFrom(from.consistent_hash());
      break;
    }
    case LB_POLICY_NOT_SET: {
      break;
    }
  }
}

void LoadBalancerSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.LoadBalancerSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadBalancerSettings::CopyFrom(const LoadBalancerSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.LoadBalancerSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadBalancerSettings::IsInitialized() const {
  return true;
}

void LoadBalancerSettings::Swap(LoadBalancerSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoadBalancerSettings::InternalSwap(LoadBalancerSettings* other) {
  using std::swap;
  swap(lb_policy_, other->lb_policy_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoadBalancerSettings::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConnectionPoolSettings_TCPSettings_TcpKeepalive::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_ConnectionPoolSettings_TCPSettings_TcpKeepalive_default_instance_._instance.get_mutable()->time_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::istio::networking::v1alpha3::_ConnectionPoolSettings_TCPSettings_TcpKeepalive_default_instance_._instance.get_mutable()->interval_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void ConnectionPoolSettings_TCPSettings_TcpKeepalive::clear_time() {
  if (GetArenaNoVirtual() == NULL && time_ != NULL) {
    delete time_;
  }
  time_ = NULL;
}
void ConnectionPoolSettings_TCPSettings_TcpKeepalive::clear_interval() {
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) {
    delete interval_;
  }
  interval_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectionPoolSettings_TCPSettings_TcpKeepalive::kProbesFieldNumber;
const int ConnectionPoolSettings_TCPSettings_TcpKeepalive::kTimeFieldNumber;
const int ConnectionPoolSettings_TCPSettings_TcpKeepalive::kIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectionPoolSettings_TCPSettings_TcpKeepalive::ConnectionPoolSettings_TCPSettings_TcpKeepalive()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsConnectionPoolSettings_TCPSettings_TcpKeepalive();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings.TcpKeepalive)
}
ConnectionPoolSettings_TCPSettings_TcpKeepalive::ConnectionPoolSettings_TCPSettings_TcpKeepalive(const ConnectionPoolSettings_TCPSettings_TcpKeepalive& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_time()) {
    time_ = new ::google::protobuf::Duration(*from.time_);
  } else {
    time_ = NULL;
  }
  if (from.has_interval()) {
    interval_ = new ::google::protobuf::Duration(*from.interval_);
  } else {
    interval_ = NULL;
  }
  probes_ = from.probes_;
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings.TcpKeepalive)
}

void ConnectionPoolSettings_TCPSettings_TcpKeepalive::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probes_) -
      reinterpret_cast<char*>(&time_)) + sizeof(probes_));
  _cached_size_ = 0;
}

ConnectionPoolSettings_TCPSettings_TcpKeepalive::~ConnectionPoolSettings_TCPSettings_TcpKeepalive() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings.TcpKeepalive)
  SharedDtor();
}

void ConnectionPoolSettings_TCPSettings_TcpKeepalive::SharedDtor() {
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete interval_;
}

void ConnectionPoolSettings_TCPSettings_TcpKeepalive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionPoolSettings_TCPSettings_TcpKeepalive::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConnectionPoolSettings_TCPSettings_TcpKeepalive& ConnectionPoolSettings_TCPSettings_TcpKeepalive::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsConnectionPoolSettings_TCPSettings_TcpKeepalive();
  return *internal_default_instance();
}

ConnectionPoolSettings_TCPSettings_TcpKeepalive* ConnectionPoolSettings_TCPSettings_TcpKeepalive::New(::google::protobuf::Arena* arena) const {
  ConnectionPoolSettings_TCPSettings_TcpKeepalive* n = new ConnectionPoolSettings_TCPSettings_TcpKeepalive;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectionPoolSettings_TCPSettings_TcpKeepalive::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings.TcpKeepalive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && time_ != NULL) {
    delete time_;
  }
  time_ = NULL;
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) {
    delete interval_;
  }
  interval_ = NULL;
  probes_ = 0u;
  _internal_metadata_.Clear();
}

bool ConnectionPoolSettings_TCPSettings_TcpKeepalive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings.TcpKeepalive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 probes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &probes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration interval = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings.TcpKeepalive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings.TcpKeepalive)
  return false;
#undef DO_
}

void ConnectionPoolSettings_TCPSettings_TcpKeepalive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings.TcpKeepalive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 probes = 1;
  if (this->probes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->probes(), output);
  }

  // .google.protobuf.Duration time = 2;
  if (this->has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->time_, output);
  }

  // .google.protobuf.Duration interval = 3;
  if (this->has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->interval_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings.TcpKeepalive)
}

::google::protobuf::uint8* ConnectionPoolSettings_TCPSettings_TcpKeepalive::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings.TcpKeepalive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 probes = 1;
  if (this->probes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->probes(), target);
  }

  // .google.protobuf.Duration time = 2;
  if (this->has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->time_, deterministic, target);
  }

  // .google.protobuf.Duration interval = 3;
  if (this->has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->interval_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings.TcpKeepalive)
  return target;
}

size_t ConnectionPoolSettings_TCPSettings_TcpKeepalive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings.TcpKeepalive)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Duration time = 2;
  if (this->has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->time_);
  }

  // .google.protobuf.Duration interval = 3;
  if (this->has_interval()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->interval_);
  }

  // uint32 probes = 1;
  if (this->probes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->probes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionPoolSettings_TCPSettings_TcpKeepalive::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings.TcpKeepalive)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectionPoolSettings_TCPSettings_TcpKeepalive* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectionPoolSettings_TCPSettings_TcpKeepalive>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings.TcpKeepalive)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings.TcpKeepalive)
    MergeFrom(*source);
  }
}

void ConnectionPoolSettings_TCPSettings_TcpKeepalive::MergeFrom(const ConnectionPoolSettings_TCPSettings_TcpKeepalive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings.TcpKeepalive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_time()) {
    mutable_time()->::google::protobuf::Duration::MergeFrom(from.time());
  }
  if (from.has_interval()) {
    mutable_interval()->::google::protobuf::Duration::MergeFrom(from.interval());
  }
  if (from.probes() != 0) {
    set_probes(from.probes());
  }
}

void ConnectionPoolSettings_TCPSettings_TcpKeepalive::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings.TcpKeepalive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionPoolSettings_TCPSettings_TcpKeepalive::CopyFrom(const ConnectionPoolSettings_TCPSettings_TcpKeepalive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings.TcpKeepalive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionPoolSettings_TCPSettings_TcpKeepalive::IsInitialized() const {
  return true;
}

void ConnectionPoolSettings_TCPSettings_TcpKeepalive::Swap(ConnectionPoolSettings_TCPSettings_TcpKeepalive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectionPoolSettings_TCPSettings_TcpKeepalive::InternalSwap(ConnectionPoolSettings_TCPSettings_TcpKeepalive* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(interval_, other->interval_);
  swap(probes_, other->probes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectionPoolSettings_TCPSettings_TcpKeepalive::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConnectionPoolSettings_TCPSettings::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_ConnectionPoolSettings_TCPSettings_default_instance_._instance.get_mutable()->connect_timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::istio::networking::v1alpha3::_ConnectionPoolSettings_TCPSettings_default_instance_._instance.get_mutable()->tcp_keepalive_ = const_cast< ::istio::networking::v1alpha3::ConnectionPoolSettings_TCPSettings_TcpKeepalive*>(
      ::istio::networking::v1alpha3::ConnectionPoolSettings_TCPSettings_TcpKeepalive::internal_default_instance());
}
void ConnectionPoolSettings_TCPSettings::clear_connect_timeout() {
  if (GetArenaNoVirtual() == NULL && connect_timeout_ != NULL) {
    delete connect_timeout_;
  }
  connect_timeout_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectionPoolSettings_TCPSettings::kMaxConnectionsFieldNumber;
const int ConnectionPoolSettings_TCPSettings::kConnectTimeoutFieldNumber;
const int ConnectionPoolSettings_TCPSettings::kTcpKeepaliveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectionPoolSettings_TCPSettings::ConnectionPoolSettings_TCPSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsConnectionPoolSettings_TCPSettings();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings)
}
ConnectionPoolSettings_TCPSettings::ConnectionPoolSettings_TCPSettings(const ConnectionPoolSettings_TCPSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_connect_timeout()) {
    connect_timeout_ = new ::google::protobuf::Duration(*from.connect_timeout_);
  } else {
    connect_timeout_ = NULL;
  }
  if (from.has_tcp_keepalive()) {
    tcp_keepalive_ = new ::istio::networking::v1alpha3::ConnectionPoolSettings_TCPSettings_TcpKeepalive(*from.tcp_keepalive_);
  } else {
    tcp_keepalive_ = NULL;
  }
  max_connections_ = from.max_connections_;
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings)
}

void ConnectionPoolSettings_TCPSettings::SharedCtor() {
  ::memset(&connect_timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_connections_) -
      reinterpret_cast<char*>(&connect_timeout_)) + sizeof(max_connections_));
  _cached_size_ = 0;
}

ConnectionPoolSettings_TCPSettings::~ConnectionPoolSettings_TCPSettings() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings)
  SharedDtor();
}

void ConnectionPoolSettings_TCPSettings::SharedDtor() {
  if (this != internal_default_instance()) delete connect_timeout_;
  if (this != internal_default_instance()) delete tcp_keepalive_;
}

void ConnectionPoolSettings_TCPSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionPoolSettings_TCPSettings::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConnectionPoolSettings_TCPSettings& ConnectionPoolSettings_TCPSettings::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsConnectionPoolSettings_TCPSettings();
  return *internal_default_instance();
}

ConnectionPoolSettings_TCPSettings* ConnectionPoolSettings_TCPSettings::New(::google::protobuf::Arena* arena) const {
  ConnectionPoolSettings_TCPSettings* n = new ConnectionPoolSettings_TCPSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectionPoolSettings_TCPSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && connect_timeout_ != NULL) {
    delete connect_timeout_;
  }
  connect_timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && tcp_keepalive_ != NULL) {
    delete tcp_keepalive_;
  }
  tcp_keepalive_ = NULL;
  max_connections_ = 0;
  _internal_metadata_.Clear();
}

bool ConnectionPoolSettings_TCPSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 max_connections = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_connections_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration connect_timeout = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connect_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings.TcpKeepalive tcp_keepalive = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tcp_keepalive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings)
  return false;
#undef DO_
}

void ConnectionPoolSettings_TCPSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_connections = 1;
  if (this->max_connections() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_connections(), output);
  }

  // .google.protobuf.Duration connect_timeout = 2;
  if (this->has_connect_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->connect_timeout_, output);
  }

  // .istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings.TcpKeepalive tcp_keepalive = 3;
  if (this->has_tcp_keepalive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->tcp_keepalive_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings)
}

::google::protobuf::uint8* ConnectionPoolSettings_TCPSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_connections = 1;
  if (this->max_connections() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_connections(), target);
  }

  // .google.protobuf.Duration connect_timeout = 2;
  if (this->has_connect_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->connect_timeout_, deterministic, target);
  }

  // .istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings.TcpKeepalive tcp_keepalive = 3;
  if (this->has_tcp_keepalive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->tcp_keepalive_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings)
  return target;
}

size_t ConnectionPoolSettings_TCPSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Duration connect_timeout = 2;
  if (this->has_connect_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->connect_timeout_);
  }

  // .istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings.TcpKeepalive tcp_keepalive = 3;
  if (this->has_tcp_keepalive()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tcp_keepalive_);
  }

  // int32 max_connections = 1;
  if (this->max_connections() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_connections());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionPoolSettings_TCPSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectionPoolSettings_TCPSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectionPoolSettings_TCPSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings)
    MergeFrom(*source);
  }
}

void ConnectionPoolSettings_TCPSettings::MergeFrom(const ConnectionPoolSettings_TCPSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_connect_timeout()) {
    mutable_connect_timeout()->::google::protobuf::Duration::MergeFrom(from.connect_timeout());
  }
  if (from.has_tcp_keepalive()) {
    mutable_tcp_keepalive()->::istio::networking::v1alpha3::ConnectionPoolSettings_TCPSettings_TcpKeepalive::MergeFrom(from.tcp_keepalive());
  }
  if (from.max_connections() != 0) {
    set_max_connections(from.max_connections());
  }
}

void ConnectionPoolSettings_TCPSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionPoolSettings_TCPSettings::CopyFrom(const ConnectionPoolSettings_TCPSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionPoolSettings_TCPSettings::IsInitialized() const {
  return true;
}

void ConnectionPoolSettings_TCPSettings::Swap(ConnectionPoolSettings_TCPSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectionPoolSettings_TCPSettings::InternalSwap(ConnectionPoolSettings_TCPSettings* other) {
  using std::swap;
  swap(connect_timeout_, other->connect_timeout_);
  swap(tcp_keepalive_, other->tcp_keepalive_);
  swap(max_connections_, other->max_connections_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectionPoolSettings_TCPSettings::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConnectionPoolSettings_HTTPSettings::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectionPoolSettings_HTTPSettings::kHttp1MaxPendingRequestsFieldNumber;
const int ConnectionPoolSettings_HTTPSettings::kHttp2MaxRequestsFieldNumber;
const int ConnectionPoolSettings_HTTPSettings::kMaxRequestsPerConnectionFieldNumber;
const int ConnectionPoolSettings_HTTPSettings::kMaxRetriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectionPoolSettings_HTTPSettings::ConnectionPoolSettings_HTTPSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsConnectionPoolSettings_HTTPSettings();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.ConnectionPoolSettings.HTTPSettings)
}
ConnectionPoolSettings_HTTPSettings::ConnectionPoolSettings_HTTPSettings(const ConnectionPoolSettings_HTTPSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&http1_max_pending_requests_, &from.http1_max_pending_requests_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_retries_) -
    reinterpret_cast<char*>(&http1_max_pending_requests_)) + sizeof(max_retries_));
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.ConnectionPoolSettings.HTTPSettings)
}

void ConnectionPoolSettings_HTTPSettings::SharedCtor() {
  ::memset(&http1_max_pending_requests_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_retries_) -
      reinterpret_cast<char*>(&http1_max_pending_requests_)) + sizeof(max_retries_));
  _cached_size_ = 0;
}

ConnectionPoolSettings_HTTPSettings::~ConnectionPoolSettings_HTTPSettings() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.ConnectionPoolSettings.HTTPSettings)
  SharedDtor();
}

void ConnectionPoolSettings_HTTPSettings::SharedDtor() {
}

void ConnectionPoolSettings_HTTPSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionPoolSettings_HTTPSettings::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConnectionPoolSettings_HTTPSettings& ConnectionPoolSettings_HTTPSettings::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsConnectionPoolSettings_HTTPSettings();
  return *internal_default_instance();
}

ConnectionPoolSettings_HTTPSettings* ConnectionPoolSettings_HTTPSettings::New(::google::protobuf::Arena* arena) const {
  ConnectionPoolSettings_HTTPSettings* n = new ConnectionPoolSettings_HTTPSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectionPoolSettings_HTTPSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.ConnectionPoolSettings.HTTPSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&http1_max_pending_requests_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_retries_) -
      reinterpret_cast<char*>(&http1_max_pending_requests_)) + sizeof(max_retries_));
  _internal_metadata_.Clear();
}

bool ConnectionPoolSettings_HTTPSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.ConnectionPoolSettings.HTTPSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 http1_max_pending_requests = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &http1_max_pending_requests_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 http2_max_requests = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &http2_max_requests_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_requests_per_connection = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_requests_per_connection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_retries = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_retries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.ConnectionPoolSettings.HTTPSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.ConnectionPoolSettings.HTTPSettings)
  return false;
#undef DO_
}

void ConnectionPoolSettings_HTTPSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.ConnectionPoolSettings.HTTPSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 http1_max_pending_requests = 1;
  if (this->http1_max_pending_requests() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->http1_max_pending_requests(), output);
  }

  // int32 http2_max_requests = 2;
  if (this->http2_max_requests() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->http2_max_requests(), output);
  }

  // int32 max_requests_per_connection = 3;
  if (this->max_requests_per_connection() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_requests_per_connection(), output);
  }

  // int32 max_retries = 4;
  if (this->max_retries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_retries(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.ConnectionPoolSettings.HTTPSettings)
}

::google::protobuf::uint8* ConnectionPoolSettings_HTTPSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.ConnectionPoolSettings.HTTPSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 http1_max_pending_requests = 1;
  if (this->http1_max_pending_requests() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->http1_max_pending_requests(), target);
  }

  // int32 http2_max_requests = 2;
  if (this->http2_max_requests() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->http2_max_requests(), target);
  }

  // int32 max_requests_per_connection = 3;
  if (this->max_requests_per_connection() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_requests_per_connection(), target);
  }

  // int32 max_retries = 4;
  if (this->max_retries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_retries(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.ConnectionPoolSettings.HTTPSettings)
  return target;
}

size_t ConnectionPoolSettings_HTTPSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.ConnectionPoolSettings.HTTPSettings)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 http1_max_pending_requests = 1;
  if (this->http1_max_pending_requests() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->http1_max_pending_requests());
  }

  // int32 http2_max_requests = 2;
  if (this->http2_max_requests() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->http2_max_requests());
  }

  // int32 max_requests_per_connection = 3;
  if (this->max_requests_per_connection() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_requests_per_connection());
  }

  // int32 max_retries = 4;
  if (this->max_retries() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_retries());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionPoolSettings_HTTPSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.ConnectionPoolSettings.HTTPSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectionPoolSettings_HTTPSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectionPoolSettings_HTTPSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.ConnectionPoolSettings.HTTPSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.ConnectionPoolSettings.HTTPSettings)
    MergeFrom(*source);
  }
}

void ConnectionPoolSettings_HTTPSettings::MergeFrom(const ConnectionPoolSettings_HTTPSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.ConnectionPoolSettings.HTTPSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.http1_max_pending_requests() != 0) {
    set_http1_max_pending_requests(from.http1_max_pending_requests());
  }
  if (from.http2_max_requests() != 0) {
    set_http2_max_requests(from.http2_max_requests());
  }
  if (from.max_requests_per_connection() != 0) {
    set_max_requests_per_connection(from.max_requests_per_connection());
  }
  if (from.max_retries() != 0) {
    set_max_retries(from.max_retries());
  }
}

void ConnectionPoolSettings_HTTPSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.ConnectionPoolSettings.HTTPSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionPoolSettings_HTTPSettings::CopyFrom(const ConnectionPoolSettings_HTTPSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.ConnectionPoolSettings.HTTPSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionPoolSettings_HTTPSettings::IsInitialized() const {
  return true;
}

void ConnectionPoolSettings_HTTPSettings::Swap(ConnectionPoolSettings_HTTPSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectionPoolSettings_HTTPSettings::InternalSwap(ConnectionPoolSettings_HTTPSettings* other) {
  using std::swap;
  swap(http1_max_pending_requests_, other->http1_max_pending_requests_);
  swap(http2_max_requests_, other->http2_max_requests_);
  swap(max_requests_per_connection_, other->max_requests_per_connection_);
  swap(max_retries_, other->max_retries_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectionPoolSettings_HTTPSettings::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConnectionPoolSettings::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_ConnectionPoolSettings_default_instance_._instance.get_mutable()->tcp_ = const_cast< ::istio::networking::v1alpha3::ConnectionPoolSettings_TCPSettings*>(
      ::istio::networking::v1alpha3::ConnectionPoolSettings_TCPSettings::internal_default_instance());
  ::istio::networking::v1alpha3::_ConnectionPoolSettings_default_instance_._instance.get_mutable()->http_ = const_cast< ::istio::networking::v1alpha3::ConnectionPoolSettings_HTTPSettings*>(
      ::istio::networking::v1alpha3::ConnectionPoolSettings_HTTPSettings::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectionPoolSettings::kTcpFieldNumber;
const int ConnectionPoolSettings::kHttpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectionPoolSettings::ConnectionPoolSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsConnectionPoolSettings();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.ConnectionPoolSettings)
}
ConnectionPoolSettings::ConnectionPoolSettings(const ConnectionPoolSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tcp()) {
    tcp_ = new ::istio::networking::v1alpha3::ConnectionPoolSettings_TCPSettings(*from.tcp_);
  } else {
    tcp_ = NULL;
  }
  if (from.has_http()) {
    http_ = new ::istio::networking::v1alpha3::ConnectionPoolSettings_HTTPSettings(*from.http_);
  } else {
    http_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.ConnectionPoolSettings)
}

void ConnectionPoolSettings::SharedCtor() {
  ::memset(&tcp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&http_) -
      reinterpret_cast<char*>(&tcp_)) + sizeof(http_));
  _cached_size_ = 0;
}

ConnectionPoolSettings::~ConnectionPoolSettings() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.ConnectionPoolSettings)
  SharedDtor();
}

void ConnectionPoolSettings::SharedDtor() {
  if (this != internal_default_instance()) delete tcp_;
  if (this != internal_default_instance()) delete http_;
}

void ConnectionPoolSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionPoolSettings::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConnectionPoolSettings& ConnectionPoolSettings::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsConnectionPoolSettings();
  return *internal_default_instance();
}

ConnectionPoolSettings* ConnectionPoolSettings::New(::google::protobuf::Arena* arena) const {
  ConnectionPoolSettings* n = new ConnectionPoolSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectionPoolSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.ConnectionPoolSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tcp_ != NULL) {
    delete tcp_;
  }
  tcp_ = NULL;
  if (GetArenaNoVirtual() == NULL && http_ != NULL) {
    delete http_;
  }
  http_ = NULL;
  _internal_metadata_.Clear();
}

bool ConnectionPoolSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.ConnectionPoolSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings tcp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tcp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.ConnectionPoolSettings.HTTPSettings http = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_http()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.ConnectionPoolSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.ConnectionPoolSettings)
  return false;
#undef DO_
}

void ConnectionPoolSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.ConnectionPoolSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings tcp = 1;
  if (this->has_tcp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tcp_, output);
  }

  // .istio.networking.v1alpha3.ConnectionPoolSettings.HTTPSettings http = 2;
  if (this->has_http()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->http_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.ConnectionPoolSettings)
}

::google::protobuf::uint8* ConnectionPoolSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.ConnectionPoolSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings tcp = 1;
  if (this->has_tcp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->tcp_, deterministic, target);
  }

  // .istio.networking.v1alpha3.ConnectionPoolSettings.HTTPSettings http = 2;
  if (this->has_http()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->http_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.ConnectionPoolSettings)
  return target;
}

size_t ConnectionPoolSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.ConnectionPoolSettings)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .istio.networking.v1alpha3.ConnectionPoolSettings.TCPSettings tcp = 1;
  if (this->has_tcp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tcp_);
  }

  // .istio.networking.v1alpha3.ConnectionPoolSettings.HTTPSettings http = 2;
  if (this->has_http()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->http_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionPoolSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.ConnectionPoolSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectionPoolSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectionPoolSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.ConnectionPoolSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.ConnectionPoolSettings)
    MergeFrom(*source);
  }
}

void ConnectionPoolSettings::MergeFrom(const ConnectionPoolSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.ConnectionPoolSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tcp()) {
    mutable_tcp()->::istio::networking::v1alpha3::ConnectionPoolSettings_TCPSettings::MergeFrom(from.tcp());
  }
  if (from.has_http()) {
    mutable_http()->::istio::networking::v1alpha3::ConnectionPoolSettings_HTTPSettings::MergeFrom(from.http());
  }
}

void ConnectionPoolSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.ConnectionPoolSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionPoolSettings::CopyFrom(const ConnectionPoolSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.ConnectionPoolSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionPoolSettings::IsInitialized() const {
  return true;
}

void ConnectionPoolSettings::Swap(ConnectionPoolSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectionPoolSettings::InternalSwap(ConnectionPoolSettings* other) {
  using std::swap;
  swap(tcp_, other->tcp_);
  swap(http_, other->http_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectionPoolSettings::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OutlierDetection::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_OutlierDetection_default_instance_._instance.get_mutable()->interval_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::istio::networking::v1alpha3::_OutlierDetection_default_instance_._instance.get_mutable()->base_ejection_time_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void OutlierDetection::clear_interval() {
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) {
    delete interval_;
  }
  interval_ = NULL;
}
void OutlierDetection::clear_base_ejection_time() {
  if (GetArenaNoVirtual() == NULL && base_ejection_time_ != NULL) {
    delete base_ejection_time_;
  }
  base_ejection_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OutlierDetection::kConsecutiveErrorsFieldNumber;
const int OutlierDetection::kIntervalFieldNumber;
const int OutlierDetection::kBaseEjectionTimeFieldNumber;
const int OutlierDetection::kMaxEjectionPercentFieldNumber;
const int OutlierDetection::kMinHealthPercentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OutlierDetection::OutlierDetection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsOutlierDetection();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.OutlierDetection)
}
OutlierDetection::OutlierDetection(const OutlierDetection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_interval()) {
    interval_ = new ::google::protobuf::Duration(*from.interval_);
  } else {
    interval_ = NULL;
  }
  if (from.has_base_ejection_time()) {
    base_ejection_time_ = new ::google::protobuf::Duration(*from.base_ejection_time_);
  } else {
    base_ejection_time_ = NULL;
  }
  ::memcpy(&consecutive_errors_, &from.consecutive_errors_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_health_percent_) -
    reinterpret_cast<char*>(&consecutive_errors_)) + sizeof(min_health_percent_));
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.OutlierDetection)
}

void OutlierDetection::SharedCtor() {
  ::memset(&interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_health_percent_) -
      reinterpret_cast<char*>(&interval_)) + sizeof(min_health_percent_));
  _cached_size_ = 0;
}

OutlierDetection::~OutlierDetection() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.OutlierDetection)
  SharedDtor();
}

void OutlierDetection::SharedDtor() {
  if (this != internal_default_instance()) delete interval_;
  if (this != internal_default_instance()) delete base_ejection_time_;
}

void OutlierDetection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutlierDetection::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OutlierDetection& OutlierDetection::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsOutlierDetection();
  return *internal_default_instance();
}

OutlierDetection* OutlierDetection::New(::google::protobuf::Arena* arena) const {
  OutlierDetection* n = new OutlierDetection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OutlierDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.OutlierDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && interval_ != NULL) {
    delete interval_;
  }
  interval_ = NULL;
  if (GetArenaNoVirtual() == NULL && base_ejection_time_ != NULL) {
    delete base_ejection_time_;
  }
  base_ejection_time_ = NULL;
  ::memset(&consecutive_errors_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_health_percent_) -
      reinterpret_cast<char*>(&consecutive_errors_)) + sizeof(min_health_percent_));
  _internal_metadata_.Clear();
}

bool OutlierDetection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.OutlierDetection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 consecutive_errors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consecutive_errors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration interval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration base_ejection_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_base_ejection_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_ejection_percent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_ejection_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_health_percent = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_health_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.OutlierDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.OutlierDetection)
  return false;
#undef DO_
}

void OutlierDetection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.OutlierDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 consecutive_errors = 1;
  if (this->consecutive_errors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->consecutive_errors(), output);
  }

  // .google.protobuf.Duration interval = 2;
  if (this->has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->interval_, output);
  }

  // .google.protobuf.Duration base_ejection_time = 3;
  if (this->has_base_ejection_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->base_ejection_time_, output);
  }

  // int32 max_ejection_percent = 4;
  if (this->max_ejection_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_ejection_percent(), output);
  }

  // int32 min_health_percent = 5;
  if (this->min_health_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->min_health_percent(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.OutlierDetection)
}

::google::protobuf::uint8* OutlierDetection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.OutlierDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 consecutive_errors = 1;
  if (this->consecutive_errors() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->consecutive_errors(), target);
  }

  // .google.protobuf.Duration interval = 2;
  if (this->has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->interval_, deterministic, target);
  }

  // .google.protobuf.Duration base_ejection_time = 3;
  if (this->has_base_ejection_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->base_ejection_time_, deterministic, target);
  }

  // int32 max_ejection_percent = 4;
  if (this->max_ejection_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_ejection_percent(), target);
  }

  // int32 min_health_percent = 5;
  if (this->min_health_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->min_health_percent(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.OutlierDetection)
  return target;
}

size_t OutlierDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.OutlierDetection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Duration interval = 2;
  if (this->has_interval()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->interval_);
  }

  // .google.protobuf.Duration base_ejection_time = 3;
  if (this->has_base_ejection_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->base_ejection_time_);
  }

  // int32 consecutive_errors = 1;
  if (this->consecutive_errors() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->consecutive_errors());
  }

  // int32 max_ejection_percent = 4;
  if (this->max_ejection_percent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_ejection_percent());
  }

  // int32 min_health_percent = 5;
  if (this->min_health_percent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_health_percent());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutlierDetection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.OutlierDetection)
  GOOGLE_DCHECK_NE(&from, this);
  const OutlierDetection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OutlierDetection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.OutlierDetection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.OutlierDetection)
    MergeFrom(*source);
  }
}

void OutlierDetection::MergeFrom(const OutlierDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.OutlierDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_interval()) {
    mutable_interval()->::google::protobuf::Duration::MergeFrom(from.interval());
  }
  if (from.has_base_ejection_time()) {
    mutable_base_ejection_time()->::google::protobuf::Duration::MergeFrom(from.base_ejection_time());
  }
  if (from.consecutive_errors() != 0) {
    set_consecutive_errors(from.consecutive_errors());
  }
  if (from.max_ejection_percent() != 0) {
    set_max_ejection_percent(from.max_ejection_percent());
  }
  if (from.min_health_percent() != 0) {
    set_min_health_percent(from.min_health_percent());
  }
}

void OutlierDetection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.OutlierDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutlierDetection::CopyFrom(const OutlierDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.OutlierDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutlierDetection::IsInitialized() const {
  return true;
}

void OutlierDetection::Swap(OutlierDetection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OutlierDetection::InternalSwap(OutlierDetection* other) {
  using std::swap;
  swap(interval_, other->interval_);
  swap(base_ejection_time_, other->base_ejection_time_);
  swap(consecutive_errors_, other->consecutive_errors_);
  swap(max_ejection_percent_, other->max_ejection_percent_);
  swap(min_health_percent_, other->min_health_percent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OutlierDetection::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TLSSettings::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TLSSettings::kModeFieldNumber;
const int TLSSettings::kClientCertificateFieldNumber;
const int TLSSettings::kPrivateKeyFieldNumber;
const int TLSSettings::kCaCertificatesFieldNumber;
const int TLSSettings::kSubjectAltNamesFieldNumber;
const int TLSSettings::kSniFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TLSSettings::TLSSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsTLSSettings();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.TLSSettings)
}
TLSSettings::TLSSettings(const TLSSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      subject_alt_names_(from.subject_alt_names_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_certificate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_certificate().size() > 0) {
    client_certificate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_certificate_);
  }
  private_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.private_key().size() > 0) {
    private_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_key_);
  }
  ca_certificates_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ca_certificates().size() > 0) {
    ca_certificates_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ca_certificates_);
  }
  sni_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sni().size() > 0) {
    sni_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sni_);
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.TLSSettings)
}

void TLSSettings::SharedCtor() {
  client_certificate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ca_certificates_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sni_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
  _cached_size_ = 0;
}

TLSSettings::~TLSSettings() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.TLSSettings)
  SharedDtor();
}

void TLSSettings::SharedDtor() {
  client_certificate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ca_certificates_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sni_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TLSSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLSSettings::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TLSSettings& TLSSettings::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::InitDefaultsTLSSettings();
  return *internal_default_instance();
}

TLSSettings* TLSSettings::New(::google::protobuf::Arena* arena) const {
  TLSSettings* n = new TLSSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TLSSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.TLSSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subject_alt_names_.Clear();
  client_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ca_certificates_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sni_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
  _internal_metadata_.Clear();
}

bool TLSSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.TLSSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.networking.v1alpha3.TLSSettings.TLSmode mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::istio::networking::v1alpha3::TLSSettings_TLSmode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_certificate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_certificate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_certificate().data(), static_cast<int>(this->client_certificate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.TLSSettings.client_certificate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string private_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->private_key().data(), static_cast<int>(this->private_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.TLSSettings.private_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ca_certificates = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ca_certificates()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ca_certificates().data(), static_cast<int>(this->ca_certificates().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.TLSSettings.ca_certificates"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string subject_alt_names = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_subject_alt_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subject_alt_names(this->subject_alt_names_size() - 1).data(),
            static_cast<int>(this->subject_alt_names(this->subject_alt_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.TLSSettings.subject_alt_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sni = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sni()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sni().data(), static_cast<int>(this->sni().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.TLSSettings.sni"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.TLSSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.TLSSettings)
  return false;
#undef DO_
}

void TLSSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.TLSSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.TLSSettings.TLSmode mode = 1;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // string client_certificate = 2;
  if (this->client_certificate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_certificate().data(), static_cast<int>(this->client_certificate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.TLSSettings.client_certificate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_certificate(), output);
  }

  // string private_key = 3;
  if (this->private_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->private_key().data(), static_cast<int>(this->private_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.TLSSettings.private_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->private_key(), output);
  }

  // string ca_certificates = 4;
  if (this->ca_certificates().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ca_certificates().data(), static_cast<int>(this->ca_certificates().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.TLSSettings.ca_certificates");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ca_certificates(), output);
  }

  // repeated string subject_alt_names = 5;
  for (int i = 0, n = this->subject_alt_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subject_alt_names(i).data(), static_cast<int>(this->subject_alt_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.TLSSettings.subject_alt_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->subject_alt_names(i), output);
  }

  // string sni = 6;
  if (this->sni().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sni().data(), static_cast<int>(this->sni().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.TLSSettings.sni");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sni(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.TLSSettings)
}

::google::protobuf::uint8* TLSSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.TLSSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.TLSSettings.TLSmode mode = 1;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // string client_certificate = 2;
  if (this->client_certificate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_certificate().data(), static_cast<int>(this->client_certificate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.TLSSettings.client_certificate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_certificate(), target);
  }

  // string private_key = 3;
  if (this->private_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->private_key().data(), static_cast<int>(this->private_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.TLSSettings.private_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->private_key(), target);
  }

  // string ca_certificates = 4;
  if (this->ca_certificates().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ca_certificates().data(), static_cast<int>(this->ca_certificates().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.TLSSettings.ca_certificates");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ca_certificates(), target);
  }

  // repeated string subject_alt_names = 5;
  for (int i = 0, n = this->subject_alt_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subject_alt_names(i).data(), static_cast<int>(this->subject_alt_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.TLSSettings.subject_alt_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->subject_alt_names(i), target);
  }

  // string sni = 6;
  if (this->sni().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sni().data(), static_cast<int>(this->sni().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.TLSSettings.sni");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sni(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.TLSSettings)
  return target;
}

size_t TLSSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.TLSSettings)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string subject_alt_names = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->subject_alt_names_size());
  for (int i = 0, n = this->subject_alt_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->subject_alt_names(i));
  }

  // string client_certificate = 2;
  if (this->client_certificate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_certificate());
  }

  // string private_key = 3;
  if (this->private_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->private_key());
  }

  // string ca_certificates = 4;
  if (this->ca_certificates().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ca_certificates());
  }

  // string sni = 6;
  if (this->sni().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sni());
  }

  // .istio.networking.v1alpha3.TLSSettings.TLSmode mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLSSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.TLSSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const TLSSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TLSSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.TLSSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.TLSSettings)
    MergeFrom(*source);
  }
}

void TLSSettings::MergeFrom(const TLSSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.TLSSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subject_alt_names_.MergeFrom(from.subject_alt_names_);
  if (from.client_certificate().size() > 0) {

    client_certificate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_certificate_);
  }
  if (from.private_key().size() > 0) {

    private_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_key_);
  }
  if (from.ca_certificates().size() > 0) {

    ca_certificates_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ca_certificates_);
  }
  if (from.sni().size() > 0) {

    sni_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sni_);
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
}

void TLSSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.TLSSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLSSettings::CopyFrom(const TLSSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.TLSSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLSSettings::IsInitialized() const {
  return true;
}

void TLSSettings::Swap(TLSSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TLSSettings::InternalSwap(TLSSettings* other) {
  using std::swap;
  subject_alt_names_.InternalSwap(&other->subject_alt_names_);
  client_certificate_.Swap(&other->client_certificate_);
  private_key_.Swap(&other->private_key_);
  ca_certificates_.Swap(&other->ca_certificates_);
  sni_.Swap(&other->sni_);
  swap(mode_, other->mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TLSSettings::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fdestination_5frule_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha3
}  // namespace networking
}  // namespace istio

// @@protoc_insertion_point(global_scope)
