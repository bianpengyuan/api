// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networking/v1alpha3/service_entry.proto

#include "networking/v1alpha3/service_entry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace istio {
namespace networking {
namespace v1alpha3 {
class ServiceEntry_Endpoint_PortsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServiceEntry_Endpoint_PortsEntry_DoNotUse>
      _instance;
} _ServiceEntry_Endpoint_PortsEntry_DoNotUse_default_instance_;
class ServiceEntry_Endpoint_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServiceEntry_Endpoint_LabelsEntry_DoNotUse>
      _instance;
} _ServiceEntry_Endpoint_LabelsEntry_DoNotUse_default_instance_;
class ServiceEntry_EndpointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServiceEntry_Endpoint>
      _instance;
} _ServiceEntry_Endpoint_default_instance_;
class ServiceEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServiceEntry>
      _instance;
} _ServiceEntry_default_instance_;
}  // namespace v1alpha3
}  // namespace networking
}  // namespace istio
namespace protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto {
void InitDefaultsServiceEntry_Endpoint_PortsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_ServiceEntry_Endpoint_PortsEntry_DoNotUse_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::ServiceEntry_Endpoint_PortsEntry_DoNotUse();
  }
  ::istio::networking::v1alpha3::ServiceEntry_Endpoint_PortsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsServiceEntry_Endpoint_PortsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServiceEntry_Endpoint_PortsEntry_DoNotUseImpl);
}

void InitDefaultsServiceEntry_Endpoint_LabelsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_ServiceEntry_Endpoint_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::ServiceEntry_Endpoint_LabelsEntry_DoNotUse();
  }
  ::istio::networking::v1alpha3::ServiceEntry_Endpoint_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsServiceEntry_Endpoint_LabelsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServiceEntry_Endpoint_LabelsEntry_DoNotUseImpl);
}

void InitDefaultsServiceEntry_EndpointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::InitDefaultsServiceEntry_Endpoint_PortsEntry_DoNotUse();
  protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::InitDefaultsServiceEntry_Endpoint_LabelsEntry_DoNotUse();
  {
    void* ptr = &::istio::networking::v1alpha3::_ServiceEntry_Endpoint_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::ServiceEntry_Endpoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::ServiceEntry_Endpoint::InitAsDefaultInstance();
}

void InitDefaultsServiceEntry_Endpoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServiceEntry_EndpointImpl);
}

void InitDefaultsServiceEntryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fgateway_2eproto::InitDefaultsPort();
  protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::InitDefaultsServiceEntry_Endpoint();
  {
    void* ptr = &::istio::networking::v1alpha3::_ServiceEntry_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::ServiceEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::ServiceEntry::InitAsDefaultInstance();
}

void InitDefaultsServiceEntry() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServiceEntryImpl);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ServiceEntry_Endpoint_PortsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ServiceEntry_Endpoint_PortsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ServiceEntry_Endpoint_PortsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ServiceEntry_Endpoint_PortsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ServiceEntry_Endpoint_LabelsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ServiceEntry_Endpoint_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ServiceEntry_Endpoint_LabelsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ServiceEntry_Endpoint_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ServiceEntry_Endpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ServiceEntry_Endpoint, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ServiceEntry_Endpoint, ports_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ServiceEntry_Endpoint, labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ServiceEntry_Endpoint, network_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ServiceEntry_Endpoint, locality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ServiceEntry_Endpoint, weight_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ServiceEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ServiceEntry, hosts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ServiceEntry, addresses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ServiceEntry, ports_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ServiceEntry, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ServiceEntry, resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ServiceEntry, endpoints_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ServiceEntry, export_to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::ServiceEntry, subject_alt_names_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::istio::networking::v1alpha3::ServiceEntry_Endpoint_PortsEntry_DoNotUse)},
  { 9, 16, sizeof(::istio::networking::v1alpha3::ServiceEntry_Endpoint_LabelsEntry_DoNotUse)},
  { 18, -1, sizeof(::istio::networking::v1alpha3::ServiceEntry_Endpoint)},
  { 29, -1, sizeof(::istio::networking::v1alpha3::ServiceEntry)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_ServiceEntry_Endpoint_PortsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_ServiceEntry_Endpoint_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_ServiceEntry_Endpoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_ServiceEntry_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "networking/v1alpha3/service_entry.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\'networking/v1alpha3/service_entry.prot"
      "o\022\031istio.networking.v1alpha3\032!networking"
      "/v1alpha3/gateway.proto\"\206\006\n\014ServiceEntry"
      "\022\r\n\005hosts\030\001 \003(\t\022\021\n\taddresses\030\002 \003(\t\022.\n\005po"
      "rts\030\003 \003(\0132\037.istio.networking.v1alpha3.Po"
      "rt\022B\n\010location\030\004 \001(\01620.istio.networking."
      "v1alpha3.ServiceEntry.Location\022F\n\nresolu"
      "tion\030\005 \001(\01622.istio.networking.v1alpha3.S"
      "erviceEntry.Resolution\022C\n\tendpoints\030\006 \003("
      "\01320.istio.networking.v1alpha3.ServiceEnt"
      "ry.Endpoint\022\021\n\texport_to\030\007 \003(\t\022\031\n\021subjec"
      "t_alt_names\030\010 \003(\t\032\305\002\n\010Endpoint\022\017\n\007addres"
      "s\030\001 \001(\t\022J\n\005ports\030\002 \003(\0132;.istio.networkin"
      "g.v1alpha3.ServiceEntry.Endpoint.PortsEn"
      "try\022L\n\006labels\030\003 \003(\0132<.istio.networking.v"
      "1alpha3.ServiceEntry.Endpoint.LabelsEntr"
      "y\022\017\n\007network\030\004 \001(\t\022\020\n\010locality\030\005 \001(\t\022\016\n\006"
      "weight\030\006 \001(\r\032,\n\nPortsEntry\022\013\n\003key\030\001 \001(\t\022"
      "\r\n\005value\030\002 \001(\r:\0028\001\032-\n\013LabelsEntry\022\013\n\003key"
      "\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"0\n\010Location\022\021\n"
      "\rMESH_EXTERNAL\020\000\022\021\n\rMESH_INTERNAL\020\001\"+\n\nR"
      "esolution\022\010\n\004NONE\020\000\022\n\n\006STATIC\020\001\022\007\n\003DNS\020\002"
      "B\"Z istio.io/api/networking/v1alpha3b\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 924);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "networking/v1alpha3/service_entry.proto", &protobuf_RegisterTypes);
  ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto
namespace istio {
namespace networking {
namespace v1alpha3 {
const ::google::protobuf::EnumDescriptor* ServiceEntry_Location_descriptor() {
  protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::file_level_enum_descriptors[0];
}
bool ServiceEntry_Location_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ServiceEntry_Location ServiceEntry::MESH_EXTERNAL;
const ServiceEntry_Location ServiceEntry::MESH_INTERNAL;
const ServiceEntry_Location ServiceEntry::Location_MIN;
const ServiceEntry_Location ServiceEntry::Location_MAX;
const int ServiceEntry::Location_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ServiceEntry_Resolution_descriptor() {
  protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::file_level_enum_descriptors[1];
}
bool ServiceEntry_Resolution_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ServiceEntry_Resolution ServiceEntry::NONE;
const ServiceEntry_Resolution ServiceEntry::STATIC;
const ServiceEntry_Resolution ServiceEntry::DNS;
const ServiceEntry_Resolution ServiceEntry::Resolution_MIN;
const ServiceEntry_Resolution ServiceEntry::Resolution_MAX;
const int ServiceEntry::Resolution_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

ServiceEntry_Endpoint_PortsEntry_DoNotUse::ServiceEntry_Endpoint_PortsEntry_DoNotUse() {}
ServiceEntry_Endpoint_PortsEntry_DoNotUse::ServiceEntry_Endpoint_PortsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void ServiceEntry_Endpoint_PortsEntry_DoNotUse::MergeFrom(const ServiceEntry_Endpoint_PortsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata ServiceEntry_Endpoint_PortsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::file_level_metadata[0];
}
void ServiceEntry_Endpoint_PortsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

ServiceEntry_Endpoint_LabelsEntry_DoNotUse::ServiceEntry_Endpoint_LabelsEntry_DoNotUse() {}
ServiceEntry_Endpoint_LabelsEntry_DoNotUse::ServiceEntry_Endpoint_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void ServiceEntry_Endpoint_LabelsEntry_DoNotUse::MergeFrom(const ServiceEntry_Endpoint_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata ServiceEntry_Endpoint_LabelsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::file_level_metadata[1];
}
void ServiceEntry_Endpoint_LabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void ServiceEntry_Endpoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceEntry_Endpoint::kAddressFieldNumber;
const int ServiceEntry_Endpoint::kPortsFieldNumber;
const int ServiceEntry_Endpoint::kLabelsFieldNumber;
const int ServiceEntry_Endpoint::kNetworkFieldNumber;
const int ServiceEntry_Endpoint::kLocalityFieldNumber;
const int ServiceEntry_Endpoint::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceEntry_Endpoint::ServiceEntry_Endpoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::InitDefaultsServiceEntry_Endpoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.ServiceEntry.Endpoint)
}
ServiceEntry_Endpoint::ServiceEntry_Endpoint(const ServiceEntry_Endpoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ports_.MergeFrom(from.ports_);
  labels_.MergeFrom(from.labels_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.network().size() > 0) {
    network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_);
  }
  locality_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.locality().size() > 0) {
    locality_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.locality_);
  }
  weight_ = from.weight_;
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.ServiceEntry.Endpoint)
}

void ServiceEntry_Endpoint::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locality_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_ = 0u;
  _cached_size_ = 0;
}

ServiceEntry_Endpoint::~ServiceEntry_Endpoint() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.ServiceEntry.Endpoint)
  SharedDtor();
}

void ServiceEntry_Endpoint::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locality_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServiceEntry_Endpoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceEntry_Endpoint::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServiceEntry_Endpoint& ServiceEntry_Endpoint::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::InitDefaultsServiceEntry_Endpoint();
  return *internal_default_instance();
}

ServiceEntry_Endpoint* ServiceEntry_Endpoint::New(::google::protobuf::Arena* arena) const {
  ServiceEntry_Endpoint* n = new ServiceEntry_Endpoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceEntry_Endpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.ServiceEntry.Endpoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ports_.Clear();
  labels_.Clear();
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locality_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_ = 0u;
  _internal_metadata_.Clear();
}

bool ServiceEntry_Endpoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.ServiceEntry.Endpoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.ServiceEntry.Endpoint.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, uint32> ports = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          ServiceEntry_Endpoint_PortsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              ServiceEntry_Endpoint_PortsEntry_DoNotUse,
              ::std::string, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 > > parser(&ports_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.ServiceEntry.Endpoint.PortsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          ServiceEntry_Endpoint_LabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              ServiceEntry_Endpoint_LabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.ServiceEntry.Endpoint.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.ServiceEntry.Endpoint.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string network = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->network().data(), static_cast<int>(this->network().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.ServiceEntry.Endpoint.network"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string locality = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locality()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->locality().data(), static_cast<int>(this->locality().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.ServiceEntry.Endpoint.locality"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 weight = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.ServiceEntry.Endpoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.ServiceEntry.Endpoint)
  return false;
#undef DO_
}

void ServiceEntry_Endpoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.ServiceEntry.Endpoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.ServiceEntry.Endpoint.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // map<string, uint32> ports = 2;
  if (!this->ports().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.ServiceEntry.Endpoint.PortsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->ports().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ports().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_iterator
          it = this->ports().begin();
          it != this->ports().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ServiceEntry_Endpoint_PortsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ports_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ServiceEntry_Endpoint_PortsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_iterator
          it = this->ports().begin();
          it != this->ports().end(); ++it) {
        entry.reset(ports_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> labels = 3;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.ServiceEntry.Endpoint.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.ServiceEntry.Endpoint.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ServiceEntry_Endpoint_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ServiceEntry_Endpoint_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // string network = 4;
  if (this->network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network().data(), static_cast<int>(this->network().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.ServiceEntry.Endpoint.network");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->network(), output);
  }

  // string locality = 5;
  if (this->locality().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->locality().data(), static_cast<int>(this->locality().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.ServiceEntry.Endpoint.locality");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->locality(), output);
  }

  // uint32 weight = 6;
  if (this->weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->weight(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.ServiceEntry.Endpoint)
}

::google::protobuf::uint8* ServiceEntry_Endpoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.ServiceEntry.Endpoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.ServiceEntry.Endpoint.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // map<string, uint32> ports = 2;
  if (!this->ports().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.ServiceEntry.Endpoint.PortsEntry.key");
      }
    };

    if (deterministic &&
        this->ports().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ports().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_iterator
          it = this->ports().begin();
          it != this->ports().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ServiceEntry_Endpoint_PortsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ports_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ServiceEntry_Endpoint_PortsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_iterator
          it = this->ports().begin();
          it != this->ports().end(); ++it) {
        entry.reset(ports_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> labels = 3;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.ServiceEntry.Endpoint.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.ServiceEntry.Endpoint.LabelsEntry.value");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ServiceEntry_Endpoint_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ServiceEntry_Endpoint_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // string network = 4;
  if (this->network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network().data(), static_cast<int>(this->network().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.ServiceEntry.Endpoint.network");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->network(), target);
  }

  // string locality = 5;
  if (this->locality().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->locality().data(), static_cast<int>(this->locality().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.ServiceEntry.Endpoint.locality");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->locality(), target);
  }

  // uint32 weight = 6;
  if (this->weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->weight(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.ServiceEntry.Endpoint)
  return target;
}

size_t ServiceEntry_Endpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.ServiceEntry.Endpoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, uint32> ports = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ports_size());
  {
    ::google::protobuf::scoped_ptr<ServiceEntry_Endpoint_PortsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_iterator
        it = this->ports().begin();
        it != this->ports().end(); ++it) {
      entry.reset(ports_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> labels = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::google::protobuf::scoped_ptr<ServiceEntry_Endpoint_LabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string network = 4;
  if (this->network().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->network());
  }

  // string locality = 5;
  if (this->locality().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->locality());
  }

  // uint32 weight = 6;
  if (this->weight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->weight());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceEntry_Endpoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.ServiceEntry.Endpoint)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceEntry_Endpoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceEntry_Endpoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.ServiceEntry.Endpoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.ServiceEntry.Endpoint)
    MergeFrom(*source);
  }
}

void ServiceEntry_Endpoint::MergeFrom(const ServiceEntry_Endpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.ServiceEntry.Endpoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ports_.MergeFrom(from.ports_);
  labels_.MergeFrom(from.labels_);
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.network().size() > 0) {

    network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_);
  }
  if (from.locality().size() > 0) {

    locality_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.locality_);
  }
  if (from.weight() != 0) {
    set_weight(from.weight());
  }
}

void ServiceEntry_Endpoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.ServiceEntry.Endpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceEntry_Endpoint::CopyFrom(const ServiceEntry_Endpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.ServiceEntry.Endpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceEntry_Endpoint::IsInitialized() const {
  return true;
}

void ServiceEntry_Endpoint::Swap(ServiceEntry_Endpoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceEntry_Endpoint::InternalSwap(ServiceEntry_Endpoint* other) {
  using std::swap;
  ports_.Swap(&other->ports_);
  labels_.Swap(&other->labels_);
  address_.Swap(&other->address_);
  network_.Swap(&other->network_);
  locality_.Swap(&other->locality_);
  swap(weight_, other->weight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceEntry_Endpoint::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServiceEntry::InitAsDefaultInstance() {
}
void ServiceEntry::clear_ports() {
  ports_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceEntry::kHostsFieldNumber;
const int ServiceEntry::kAddressesFieldNumber;
const int ServiceEntry::kPortsFieldNumber;
const int ServiceEntry::kLocationFieldNumber;
const int ServiceEntry::kResolutionFieldNumber;
const int ServiceEntry::kEndpointsFieldNumber;
const int ServiceEntry::kExportToFieldNumber;
const int ServiceEntry::kSubjectAltNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceEntry::ServiceEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::InitDefaultsServiceEntry();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.ServiceEntry)
}
ServiceEntry::ServiceEntry(const ServiceEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      hosts_(from.hosts_),
      addresses_(from.addresses_),
      ports_(from.ports_),
      endpoints_(from.endpoints_),
      export_to_(from.export_to_),
      subject_alt_names_(from.subject_alt_names_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&location_, &from.location_,
    static_cast<size_t>(reinterpret_cast<char*>(&resolution_) -
    reinterpret_cast<char*>(&location_)) + sizeof(resolution_));
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.ServiceEntry)
}

void ServiceEntry::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resolution_) -
      reinterpret_cast<char*>(&location_)) + sizeof(resolution_));
  _cached_size_ = 0;
}

ServiceEntry::~ServiceEntry() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.ServiceEntry)
  SharedDtor();
}

void ServiceEntry::SharedDtor() {
}

void ServiceEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceEntry::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServiceEntry& ServiceEntry::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::InitDefaultsServiceEntry();
  return *internal_default_instance();
}

ServiceEntry* ServiceEntry::New(::google::protobuf::Arena* arena) const {
  ServiceEntry* n = new ServiceEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.ServiceEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hosts_.Clear();
  addresses_.Clear();
  ports_.Clear();
  endpoints_.Clear();
  export_to_.Clear();
  subject_alt_names_.Clear();
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resolution_) -
      reinterpret_cast<char*>(&location_)) + sizeof(resolution_));
  _internal_metadata_.Clear();
}

bool ServiceEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.ServiceEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string hosts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hosts()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hosts(this->hosts_size() - 1).data(),
            static_cast<int>(this->hosts(this->hosts_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.ServiceEntry.hosts"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string addresses = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_addresses()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addresses(this->addresses_size() - 1).data(),
            static_cast<int>(this->addresses(this->addresses_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.ServiceEntry.addresses"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.networking.v1alpha3.Port ports = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_ports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.ServiceEntry.Location location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_location(static_cast< ::istio::networking::v1alpha3::ServiceEntry_Location >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.ServiceEntry.Resolution resolution = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_resolution(static_cast< ::istio::networking::v1alpha3::ServiceEntry_Resolution >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.networking.v1alpha3.ServiceEntry.Endpoint endpoints = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_endpoints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string export_to = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_export_to()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->export_to(this->export_to_size() - 1).data(),
            static_cast<int>(this->export_to(this->export_to_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.ServiceEntry.export_to"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string subject_alt_names = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_subject_alt_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subject_alt_names(this->subject_alt_names_size() - 1).data(),
            static_cast<int>(this->subject_alt_names(this->subject_alt_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.ServiceEntry.subject_alt_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.ServiceEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.ServiceEntry)
  return false;
#undef DO_
}

void ServiceEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.ServiceEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string hosts = 1;
  for (int i = 0, n = this->hosts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hosts(i).data(), static_cast<int>(this->hosts(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.ServiceEntry.hosts");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hosts(i), output);
  }

  // repeated string addresses = 2;
  for (int i = 0, n = this->addresses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addresses(i).data(), static_cast<int>(this->addresses(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.ServiceEntry.addresses");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->addresses(i), output);
  }

  // repeated .istio.networking.v1alpha3.Port ports = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ports_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ports(static_cast<int>(i)), output);
  }

  // .istio.networking.v1alpha3.ServiceEntry.Location location = 4;
  if (this->location() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->location(), output);
  }

  // .istio.networking.v1alpha3.ServiceEntry.Resolution resolution = 5;
  if (this->resolution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->resolution(), output);
  }

  // repeated .istio.networking.v1alpha3.ServiceEntry.Endpoint endpoints = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->endpoints_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->endpoints(static_cast<int>(i)), output);
  }

  // repeated string export_to = 7;
  for (int i = 0, n = this->export_to_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->export_to(i).data(), static_cast<int>(this->export_to(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.ServiceEntry.export_to");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->export_to(i), output);
  }

  // repeated string subject_alt_names = 8;
  for (int i = 0, n = this->subject_alt_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subject_alt_names(i).data(), static_cast<int>(this->subject_alt_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.ServiceEntry.subject_alt_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->subject_alt_names(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.ServiceEntry)
}

::google::protobuf::uint8* ServiceEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.ServiceEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string hosts = 1;
  for (int i = 0, n = this->hosts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hosts(i).data(), static_cast<int>(this->hosts(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.ServiceEntry.hosts");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->hosts(i), target);
  }

  // repeated string addresses = 2;
  for (int i = 0, n = this->addresses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addresses(i).data(), static_cast<int>(this->addresses(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.ServiceEntry.addresses");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->addresses(i), target);
  }

  // repeated .istio.networking.v1alpha3.Port ports = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ports_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->ports(static_cast<int>(i)), deterministic, target);
  }

  // .istio.networking.v1alpha3.ServiceEntry.Location location = 4;
  if (this->location() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->location(), target);
  }

  // .istio.networking.v1alpha3.ServiceEntry.Resolution resolution = 5;
  if (this->resolution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->resolution(), target);
  }

  // repeated .istio.networking.v1alpha3.ServiceEntry.Endpoint endpoints = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->endpoints_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->endpoints(static_cast<int>(i)), deterministic, target);
  }

  // repeated string export_to = 7;
  for (int i = 0, n = this->export_to_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->export_to(i).data(), static_cast<int>(this->export_to(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.ServiceEntry.export_to");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->export_to(i), target);
  }

  // repeated string subject_alt_names = 8;
  for (int i = 0, n = this->subject_alt_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subject_alt_names(i).data(), static_cast<int>(this->subject_alt_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.ServiceEntry.subject_alt_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->subject_alt_names(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.ServiceEntry)
  return target;
}

size_t ServiceEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.ServiceEntry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string hosts = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->hosts_size());
  for (int i = 0, n = this->hosts_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hosts(i));
  }

  // repeated string addresses = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->addresses_size());
  for (int i = 0, n = this->addresses_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->addresses(i));
  }

  // repeated .istio.networking.v1alpha3.Port ports = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->ports_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ports(static_cast<int>(i)));
    }
  }

  // repeated .istio.networking.v1alpha3.ServiceEntry.Endpoint endpoints = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->endpoints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->endpoints(static_cast<int>(i)));
    }
  }

  // repeated string export_to = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->export_to_size());
  for (int i = 0, n = this->export_to_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->export_to(i));
  }

  // repeated string subject_alt_names = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->subject_alt_names_size());
  for (int i = 0, n = this->subject_alt_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->subject_alt_names(i));
  }

  // .istio.networking.v1alpha3.ServiceEntry.Location location = 4;
  if (this->location() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->location());
  }

  // .istio.networking.v1alpha3.ServiceEntry.Resolution resolution = 5;
  if (this->resolution() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->resolution());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.ServiceEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.ServiceEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.ServiceEntry)
    MergeFrom(*source);
  }
}

void ServiceEntry::MergeFrom(const ServiceEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.ServiceEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hosts_.MergeFrom(from.hosts_);
  addresses_.MergeFrom(from.addresses_);
  ports_.MergeFrom(from.ports_);
  endpoints_.MergeFrom(from.endpoints_);
  export_to_.MergeFrom(from.export_to_);
  subject_alt_names_.MergeFrom(from.subject_alt_names_);
  if (from.location() != 0) {
    set_location(from.location());
  }
  if (from.resolution() != 0) {
    set_resolution(from.resolution());
  }
}

void ServiceEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.ServiceEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceEntry::CopyFrom(const ServiceEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.ServiceEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceEntry::IsInitialized() const {
  return true;
}

void ServiceEntry::Swap(ServiceEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceEntry::InternalSwap(ServiceEntry* other) {
  using std::swap;
  hosts_.InternalSwap(&other->hosts_);
  addresses_.InternalSwap(&other->addresses_);
  ports_.InternalSwap(&other->ports_);
  endpoints_.InternalSwap(&other->endpoints_);
  export_to_.InternalSwap(&other->export_to_);
  subject_alt_names_.InternalSwap(&other->subject_alt_names_);
  swap(location_, other->location_);
  swap(resolution_, other->resolution_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceEntry::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fservice_5fentry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha3
}  // namespace networking
}  // namespace istio

// @@protoc_insertion_point(global_scope)
