// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networking/v1alpha3/virtual_service.proto

#include "networking/v1alpha3/virtual_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace istio {
namespace networking {
namespace v1alpha3 {
class VirtualServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VirtualService>
      _instance;
} _VirtualService_default_instance_;
class DestinationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Destination>
      _instance;
} _Destination_default_instance_;
class HTTPRoute_AppendHeadersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPRoute_AppendHeadersEntry_DoNotUse>
      _instance;
} _HTTPRoute_AppendHeadersEntry_DoNotUse_default_instance_;
class HTTPRoute_AppendResponseHeadersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPRoute_AppendResponseHeadersEntry_DoNotUse>
      _instance;
} _HTTPRoute_AppendResponseHeadersEntry_DoNotUse_default_instance_;
class HTTPRoute_AppendRequestHeadersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPRoute_AppendRequestHeadersEntry_DoNotUse>
      _instance;
} _HTTPRoute_AppendRequestHeadersEntry_DoNotUse_default_instance_;
class HTTPRouteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPRoute>
      _instance;
} _HTTPRoute_default_instance_;
class Headers_HeaderOperations_SetEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Headers_HeaderOperations_SetEntry_DoNotUse>
      _instance;
} _Headers_HeaderOperations_SetEntry_DoNotUse_default_instance_;
class Headers_HeaderOperations_AddEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Headers_HeaderOperations_AddEntry_DoNotUse>
      _instance;
} _Headers_HeaderOperations_AddEntry_DoNotUse_default_instance_;
class Headers_HeaderOperationsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Headers_HeaderOperations>
      _instance;
} _Headers_HeaderOperations_default_instance_;
class HeadersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Headers>
      _instance;
} _Headers_default_instance_;
class TLSRouteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TLSRoute>
      _instance;
} _TLSRoute_default_instance_;
class TCPRouteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TCPRoute>
      _instance;
} _TCPRoute_default_instance_;
class HTTPMatchRequest_HeadersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPMatchRequest_HeadersEntry_DoNotUse>
      _instance;
} _HTTPMatchRequest_HeadersEntry_DoNotUse_default_instance_;
class HTTPMatchRequest_SourceLabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPMatchRequest_SourceLabelsEntry_DoNotUse>
      _instance;
} _HTTPMatchRequest_SourceLabelsEntry_DoNotUse_default_instance_;
class HTTPMatchRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPMatchRequest>
      _instance;
} _HTTPMatchRequest_default_instance_;
class HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse>
      _instance;
} _HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse_default_instance_;
class HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse>
      _instance;
} _HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse_default_instance_;
class HTTPRouteDestinationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPRouteDestination>
      _instance;
} _HTTPRouteDestination_default_instance_;
class RouteDestinationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RouteDestination>
      _instance;
} _RouteDestination_default_instance_;
class L4MatchAttributes_SourceLabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<L4MatchAttributes_SourceLabelsEntry_DoNotUse>
      _instance;
} _L4MatchAttributes_SourceLabelsEntry_DoNotUse_default_instance_;
class L4MatchAttributesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<L4MatchAttributes>
      _instance;
} _L4MatchAttributes_default_instance_;
class TLSMatchAttributes_SourceLabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TLSMatchAttributes_SourceLabelsEntry_DoNotUse>
      _instance;
} _TLSMatchAttributes_SourceLabelsEntry_DoNotUse_default_instance_;
class TLSMatchAttributesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TLSMatchAttributes>
      _instance;
} _TLSMatchAttributes_default_instance_;
class HTTPRedirectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPRedirect>
      _instance;
} _HTTPRedirect_default_instance_;
class HTTPRewriteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPRewrite>
      _instance;
} _HTTPRewrite_default_instance_;
class StringMatchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StringMatch>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr exact_;
  ::google::protobuf::internal::ArenaStringPtr prefix_;
  ::google::protobuf::internal::ArenaStringPtr regex_;
} _StringMatch_default_instance_;
class HTTPRetryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPRetry>
      _instance;
} _HTTPRetry_default_instance_;
class CorsPolicyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CorsPolicy>
      _instance;
} _CorsPolicy_default_instance_;
class HTTPFaultInjection_DelayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPFaultInjection_Delay>
      _instance;
  const ::google::protobuf::Duration* fixed_delay_;
  const ::google::protobuf::Duration* exponential_delay_;
} _HTTPFaultInjection_Delay_default_instance_;
class HTTPFaultInjection_AbortDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPFaultInjection_Abort>
      _instance;
  ::google::protobuf::int32 http_status_;
  ::google::protobuf::internal::ArenaStringPtr grpc_status_;
  ::google::protobuf::internal::ArenaStringPtr http2_error_;
} _HTTPFaultInjection_Abort_default_instance_;
class HTTPFaultInjectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HTTPFaultInjection>
      _instance;
} _HTTPFaultInjection_default_instance_;
class PortSelectorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PortSelector>
      _instance;
  ::google::protobuf::uint32 number_;
  ::google::protobuf::internal::ArenaStringPtr name_;
} _PortSelector_default_instance_;
class PercentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Percent>
      _instance;
} _Percent_default_instance_;
}  // namespace v1alpha3
}  // namespace networking
}  // namespace istio
namespace protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto {
void InitDefaultsVirtualServiceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPRoute();
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsTLSRoute();
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsTCPRoute();
  {
    void* ptr = &::istio::networking::v1alpha3::_VirtualService_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::VirtualService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::VirtualService::InitAsDefaultInstance();
}

void InitDefaultsVirtualService() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVirtualServiceImpl);
}

void InitDefaultsDestinationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsPortSelector();
  {
    void* ptr = &::istio::networking::v1alpha3::_Destination_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::Destination();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::Destination::InitAsDefaultInstance();
}

void InitDefaultsDestination() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDestinationImpl);
}

void InitDefaultsHTTPRoute_AppendHeadersEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_HTTPRoute_AppendHeadersEntry_DoNotUse_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::HTTPRoute_AppendHeadersEntry_DoNotUse();
  }
  ::istio::networking::v1alpha3::HTTPRoute_AppendHeadersEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsHTTPRoute_AppendHeadersEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPRoute_AppendHeadersEntry_DoNotUseImpl);
}

void InitDefaultsHTTPRoute_AppendResponseHeadersEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_HTTPRoute_AppendResponseHeadersEntry_DoNotUse_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::HTTPRoute_AppendResponseHeadersEntry_DoNotUse();
  }
  ::istio::networking::v1alpha3::HTTPRoute_AppendResponseHeadersEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsHTTPRoute_AppendResponseHeadersEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPRoute_AppendResponseHeadersEntry_DoNotUseImpl);
}

void InitDefaultsHTTPRoute_AppendRequestHeadersEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_HTTPRoute_AppendRequestHeadersEntry_DoNotUse_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::HTTPRoute_AppendRequestHeadersEntry_DoNotUse();
  }
  ::istio::networking::v1alpha3::HTTPRoute_AppendRequestHeadersEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsHTTPRoute_AppendRequestHeadersEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPRoute_AppendRequestHeadersEntry_DoNotUseImpl);
}

void InitDefaultsHTTPRouteImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPMatchRequest();
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPRouteDestination();
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPRedirect();
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPRewrite();
  protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaultsDuration();
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPRetry();
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPFaultInjection();
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsDestination();
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsCorsPolicy();
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPRoute_AppendHeadersEntry_DoNotUse();
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPRoute_AppendResponseHeadersEntry_DoNotUse();
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPRoute_AppendRequestHeadersEntry_DoNotUse();
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHeaders();
  {
    void* ptr = &::istio::networking::v1alpha3::_HTTPRoute_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::HTTPRoute();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::HTTPRoute::InitAsDefaultInstance();
}

void InitDefaultsHTTPRoute() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPRouteImpl);
}

void InitDefaultsHeaders_HeaderOperations_SetEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_Headers_HeaderOperations_SetEntry_DoNotUse_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::Headers_HeaderOperations_SetEntry_DoNotUse();
  }
  ::istio::networking::v1alpha3::Headers_HeaderOperations_SetEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsHeaders_HeaderOperations_SetEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHeaders_HeaderOperations_SetEntry_DoNotUseImpl);
}

void InitDefaultsHeaders_HeaderOperations_AddEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_Headers_HeaderOperations_AddEntry_DoNotUse_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::Headers_HeaderOperations_AddEntry_DoNotUse();
  }
  ::istio::networking::v1alpha3::Headers_HeaderOperations_AddEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsHeaders_HeaderOperations_AddEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHeaders_HeaderOperations_AddEntry_DoNotUseImpl);
}

void InitDefaultsHeaders_HeaderOperationsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHeaders_HeaderOperations_SetEntry_DoNotUse();
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHeaders_HeaderOperations_AddEntry_DoNotUse();
  {
    void* ptr = &::istio::networking::v1alpha3::_Headers_HeaderOperations_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::Headers_HeaderOperations();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::Headers_HeaderOperations::InitAsDefaultInstance();
}

void InitDefaultsHeaders_HeaderOperations() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHeaders_HeaderOperationsImpl);
}

void InitDefaultsHeadersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHeaders_HeaderOperations();
  {
    void* ptr = &::istio::networking::v1alpha3::_Headers_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::Headers();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::Headers::InitAsDefaultInstance();
}

void InitDefaultsHeaders() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHeadersImpl);
}

void InitDefaultsTLSRouteImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsTLSMatchAttributes();
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsRouteDestination();
  {
    void* ptr = &::istio::networking::v1alpha3::_TLSRoute_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::TLSRoute();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::TLSRoute::InitAsDefaultInstance();
}

void InitDefaultsTLSRoute() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTLSRouteImpl);
}

void InitDefaultsTCPRouteImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsL4MatchAttributes();
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsRouteDestination();
  {
    void* ptr = &::istio::networking::v1alpha3::_TCPRoute_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::TCPRoute();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::TCPRoute::InitAsDefaultInstance();
}

void InitDefaultsTCPRoute() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTCPRouteImpl);
}

void InitDefaultsHTTPMatchRequest_HeadersEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsStringMatch();
  {
    void* ptr = &::istio::networking::v1alpha3::_HTTPMatchRequest_HeadersEntry_DoNotUse_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::HTTPMatchRequest_HeadersEntry_DoNotUse();
  }
  ::istio::networking::v1alpha3::HTTPMatchRequest_HeadersEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsHTTPMatchRequest_HeadersEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPMatchRequest_HeadersEntry_DoNotUseImpl);
}

void InitDefaultsHTTPMatchRequest_SourceLabelsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_HTTPMatchRequest_SourceLabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::HTTPMatchRequest_SourceLabelsEntry_DoNotUse();
  }
  ::istio::networking::v1alpha3::HTTPMatchRequest_SourceLabelsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsHTTPMatchRequest_SourceLabelsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPMatchRequest_SourceLabelsEntry_DoNotUseImpl);
}

void InitDefaultsHTTPMatchRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsStringMatch();
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPMatchRequest_HeadersEntry_DoNotUse();
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPMatchRequest_SourceLabelsEntry_DoNotUse();
  {
    void* ptr = &::istio::networking::v1alpha3::_HTTPMatchRequest_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::HTTPMatchRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::HTTPMatchRequest::InitAsDefaultInstance();
}

void InitDefaultsHTTPMatchRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPMatchRequestImpl);
}

void InitDefaultsHTTPRouteDestination_AppendResponseHeadersEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse();
  }
  ::istio::networking::v1alpha3::HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsHTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPRouteDestination_AppendResponseHeadersEntry_DoNotUseImpl);
}

void InitDefaultsHTTPRouteDestination_AppendRequestHeadersEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse();
  }
  ::istio::networking::v1alpha3::HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsHTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPRouteDestination_AppendRequestHeadersEntry_DoNotUseImpl);
}

void InitDefaultsHTTPRouteDestinationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsDestination();
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse();
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse();
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHeaders();
  {
    void* ptr = &::istio::networking::v1alpha3::_HTTPRouteDestination_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::HTTPRouteDestination();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::HTTPRouteDestination::InitAsDefaultInstance();
}

void InitDefaultsHTTPRouteDestination() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPRouteDestinationImpl);
}

void InitDefaultsRouteDestinationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsDestination();
  {
    void* ptr = &::istio::networking::v1alpha3::_RouteDestination_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::RouteDestination();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::RouteDestination::InitAsDefaultInstance();
}

void InitDefaultsRouteDestination() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRouteDestinationImpl);
}

void InitDefaultsL4MatchAttributes_SourceLabelsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_L4MatchAttributes_SourceLabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::L4MatchAttributes_SourceLabelsEntry_DoNotUse();
  }
  ::istio::networking::v1alpha3::L4MatchAttributes_SourceLabelsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsL4MatchAttributes_SourceLabelsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsL4MatchAttributes_SourceLabelsEntry_DoNotUseImpl);
}

void InitDefaultsL4MatchAttributesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsL4MatchAttributes_SourceLabelsEntry_DoNotUse();
  {
    void* ptr = &::istio::networking::v1alpha3::_L4MatchAttributes_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::L4MatchAttributes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::L4MatchAttributes::InitAsDefaultInstance();
}

void InitDefaultsL4MatchAttributes() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsL4MatchAttributesImpl);
}

void InitDefaultsTLSMatchAttributes_SourceLabelsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_TLSMatchAttributes_SourceLabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::TLSMatchAttributes_SourceLabelsEntry_DoNotUse();
  }
  ::istio::networking::v1alpha3::TLSMatchAttributes_SourceLabelsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsTLSMatchAttributes_SourceLabelsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTLSMatchAttributes_SourceLabelsEntry_DoNotUseImpl);
}

void InitDefaultsTLSMatchAttributesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsTLSMatchAttributes_SourceLabelsEntry_DoNotUse();
  {
    void* ptr = &::istio::networking::v1alpha3::_TLSMatchAttributes_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::TLSMatchAttributes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::TLSMatchAttributes::InitAsDefaultInstance();
}

void InitDefaultsTLSMatchAttributes() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTLSMatchAttributesImpl);
}

void InitDefaultsHTTPRedirectImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_HTTPRedirect_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::HTTPRedirect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::HTTPRedirect::InitAsDefaultInstance();
}

void InitDefaultsHTTPRedirect() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPRedirectImpl);
}

void InitDefaultsHTTPRewriteImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_HTTPRewrite_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::HTTPRewrite();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::HTTPRewrite::InitAsDefaultInstance();
}

void InitDefaultsHTTPRewrite() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPRewriteImpl);
}

void InitDefaultsStringMatchImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_StringMatch_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::StringMatch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::StringMatch::InitAsDefaultInstance();
}

void InitDefaultsStringMatch() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStringMatchImpl);
}

void InitDefaultsHTTPRetryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaultsDuration();
  {
    void* ptr = &::istio::networking::v1alpha3::_HTTPRetry_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::HTTPRetry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::HTTPRetry::InitAsDefaultInstance();
}

void InitDefaultsHTTPRetry() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPRetryImpl);
}

void InitDefaultsCorsPolicyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaultsDuration();
  protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaultsBoolValue();
  {
    void* ptr = &::istio::networking::v1alpha3::_CorsPolicy_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::CorsPolicy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::CorsPolicy::InitAsDefaultInstance();
}

void InitDefaultsCorsPolicy() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCorsPolicyImpl);
}

void InitDefaultsHTTPFaultInjection_DelayImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaultsDuration();
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsPercent();
  {
    void* ptr = &::istio::networking::v1alpha3::_HTTPFaultInjection_Delay_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::HTTPFaultInjection_Delay();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::HTTPFaultInjection_Delay::InitAsDefaultInstance();
}

void InitDefaultsHTTPFaultInjection_Delay() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPFaultInjection_DelayImpl);
}

void InitDefaultsHTTPFaultInjection_AbortImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsPercent();
  {
    void* ptr = &::istio::networking::v1alpha3::_HTTPFaultInjection_Abort_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::HTTPFaultInjection_Abort();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::HTTPFaultInjection_Abort::InitAsDefaultInstance();
}

void InitDefaultsHTTPFaultInjection_Abort() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPFaultInjection_AbortImpl);
}

void InitDefaultsHTTPFaultInjectionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPFaultInjection_Delay();
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPFaultInjection_Abort();
  {
    void* ptr = &::istio::networking::v1alpha3::_HTTPFaultInjection_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::HTTPFaultInjection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::HTTPFaultInjection::InitAsDefaultInstance();
}

void InitDefaultsHTTPFaultInjection() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHTTPFaultInjectionImpl);
}

void InitDefaultsPortSelectorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_PortSelector_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::PortSelector();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::PortSelector::InitAsDefaultInstance();
}

void InitDefaultsPortSelector() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPortSelectorImpl);
}

void InitDefaultsPercentImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_Percent_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::Percent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::Percent::InitAsDefaultInstance();
}

void InitDefaultsPercent() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPercentImpl);
}

::google::protobuf::Metadata file_level_metadata[33];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::VirtualService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::VirtualService, hosts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::VirtualService, gateways_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::VirtualService, http_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::VirtualService, tls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::VirtualService, tcp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::VirtualService, export_to_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Destination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Destination, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Destination, subset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Destination, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute_AppendHeadersEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute_AppendHeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute_AppendHeadersEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute_AppendHeadersEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute_AppendResponseHeadersEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute_AppendResponseHeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute_AppendResponseHeadersEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute_AppendResponseHeadersEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute_AppendRequestHeadersEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute_AppendRequestHeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute_AppendRequestHeadersEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute_AppendRequestHeadersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute, match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute, route_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute, redirect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute, rewrite_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute, websocket_upgrade_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute, timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute, retries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute, fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute, mirror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute, cors_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute, append_headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute, remove_response_headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute, append_response_headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute, remove_request_headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute, append_request_headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRoute, headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Headers_HeaderOperations_SetEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Headers_HeaderOperations_SetEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Headers_HeaderOperations_SetEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Headers_HeaderOperations_SetEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Headers_HeaderOperations_AddEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Headers_HeaderOperations_AddEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Headers_HeaderOperations_AddEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Headers_HeaderOperations_AddEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Headers_HeaderOperations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Headers_HeaderOperations, set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Headers_HeaderOperations, add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Headers_HeaderOperations, remove_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Headers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Headers, request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Headers, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TLSRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TLSRoute, match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TLSRoute, route_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TCPRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TCPRoute, match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TCPRoute, route_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPMatchRequest_HeadersEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPMatchRequest_HeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPMatchRequest_HeadersEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPMatchRequest_HeadersEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPMatchRequest_SourceLabelsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPMatchRequest_SourceLabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPMatchRequest_SourceLabelsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPMatchRequest_SourceLabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPMatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPMatchRequest, uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPMatchRequest, scheme_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPMatchRequest, method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPMatchRequest, authority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPMatchRequest, headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPMatchRequest, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPMatchRequest, source_labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPMatchRequest, gateways_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRouteDestination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRouteDestination, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRouteDestination, weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRouteDestination, remove_response_headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRouteDestination, append_response_headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRouteDestination, remove_request_headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRouteDestination, append_request_headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRouteDestination, headers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::RouteDestination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::RouteDestination, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::RouteDestination, weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::L4MatchAttributes_SourceLabelsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::L4MatchAttributes_SourceLabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::L4MatchAttributes_SourceLabelsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::L4MatchAttributes_SourceLabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::L4MatchAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::L4MatchAttributes, destination_subnets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::L4MatchAttributes, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::L4MatchAttributes, source_subnet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::L4MatchAttributes, source_labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::L4MatchAttributes, gateways_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TLSMatchAttributes_SourceLabelsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TLSMatchAttributes_SourceLabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TLSMatchAttributes_SourceLabelsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TLSMatchAttributes_SourceLabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TLSMatchAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TLSMatchAttributes, sni_hosts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TLSMatchAttributes, destination_subnets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TLSMatchAttributes, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TLSMatchAttributes, source_subnet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TLSMatchAttributes, source_labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::TLSMatchAttributes, gateways_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRedirect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRedirect, uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRedirect, authority_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRewrite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRewrite, uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRewrite, authority_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::StringMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::StringMatch, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::istio::networking::v1alpha3::StringMatchDefaultTypeInternal, exact_),
  offsetof(::istio::networking::v1alpha3::StringMatchDefaultTypeInternal, prefix_),
  offsetof(::istio::networking::v1alpha3::StringMatchDefaultTypeInternal, regex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::StringMatch, match_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRetry, attempts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRetry, per_try_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPRetry, retry_on_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::CorsPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::CorsPolicy, allow_origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::CorsPolicy, allow_methods_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::CorsPolicy, allow_headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::CorsPolicy, expose_headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::CorsPolicy, max_age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::CorsPolicy, allow_credentials_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPFaultInjection_Delay, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPFaultInjection_Delay, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPFaultInjection_Delay, percent_),
  offsetof(::istio::networking::v1alpha3::HTTPFaultInjection_DelayDefaultTypeInternal, fixed_delay_),
  offsetof(::istio::networking::v1alpha3::HTTPFaultInjection_DelayDefaultTypeInternal, exponential_delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPFaultInjection_Delay, percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPFaultInjection_Delay, http_delay_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPFaultInjection_Abort, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPFaultInjection_Abort, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPFaultInjection_Abort, percent_),
  offsetof(::istio::networking::v1alpha3::HTTPFaultInjection_AbortDefaultTypeInternal, http_status_),
  offsetof(::istio::networking::v1alpha3::HTTPFaultInjection_AbortDefaultTypeInternal, grpc_status_),
  offsetof(::istio::networking::v1alpha3::HTTPFaultInjection_AbortDefaultTypeInternal, http2_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPFaultInjection_Abort, percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPFaultInjection_Abort, error_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPFaultInjection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPFaultInjection, delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::HTTPFaultInjection, abort_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::PortSelector, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::PortSelector, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::istio::networking::v1alpha3::PortSelectorDefaultTypeInternal, number_),
  offsetof(::istio::networking::v1alpha3::PortSelectorDefaultTypeInternal, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::PortSelector, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Percent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Percent, value_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::istio::networking::v1alpha3::VirtualService)},
  { 11, -1, sizeof(::istio::networking::v1alpha3::Destination)},
  { 19, 26, sizeof(::istio::networking::v1alpha3::HTTPRoute_AppendHeadersEntry_DoNotUse)},
  { 28, 35, sizeof(::istio::networking::v1alpha3::HTTPRoute_AppendResponseHeadersEntry_DoNotUse)},
  { 37, 44, sizeof(::istio::networking::v1alpha3::HTTPRoute_AppendRequestHeadersEntry_DoNotUse)},
  { 46, -1, sizeof(::istio::networking::v1alpha3::HTTPRoute)},
  { 67, 74, sizeof(::istio::networking::v1alpha3::Headers_HeaderOperations_SetEntry_DoNotUse)},
  { 76, 83, sizeof(::istio::networking::v1alpha3::Headers_HeaderOperations_AddEntry_DoNotUse)},
  { 85, -1, sizeof(::istio::networking::v1alpha3::Headers_HeaderOperations)},
  { 93, -1, sizeof(::istio::networking::v1alpha3::Headers)},
  { 100, -1, sizeof(::istio::networking::v1alpha3::TLSRoute)},
  { 107, -1, sizeof(::istio::networking::v1alpha3::TCPRoute)},
  { 114, 121, sizeof(::istio::networking::v1alpha3::HTTPMatchRequest_HeadersEntry_DoNotUse)},
  { 123, 130, sizeof(::istio::networking::v1alpha3::HTTPMatchRequest_SourceLabelsEntry_DoNotUse)},
  { 132, -1, sizeof(::istio::networking::v1alpha3::HTTPMatchRequest)},
  { 145, 152, sizeof(::istio::networking::v1alpha3::HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse)},
  { 154, 161, sizeof(::istio::networking::v1alpha3::HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse)},
  { 163, -1, sizeof(::istio::networking::v1alpha3::HTTPRouteDestination)},
  { 175, -1, sizeof(::istio::networking::v1alpha3::RouteDestination)},
  { 182, 189, sizeof(::istio::networking::v1alpha3::L4MatchAttributes_SourceLabelsEntry_DoNotUse)},
  { 191, -1, sizeof(::istio::networking::v1alpha3::L4MatchAttributes)},
  { 201, 208, sizeof(::istio::networking::v1alpha3::TLSMatchAttributes_SourceLabelsEntry_DoNotUse)},
  { 210, -1, sizeof(::istio::networking::v1alpha3::TLSMatchAttributes)},
  { 221, -1, sizeof(::istio::networking::v1alpha3::HTTPRedirect)},
  { 228, -1, sizeof(::istio::networking::v1alpha3::HTTPRewrite)},
  { 235, -1, sizeof(::istio::networking::v1alpha3::StringMatch)},
  { 244, -1, sizeof(::istio::networking::v1alpha3::HTTPRetry)},
  { 252, -1, sizeof(::istio::networking::v1alpha3::CorsPolicy)},
  { 263, -1, sizeof(::istio::networking::v1alpha3::HTTPFaultInjection_Delay)},
  { 273, -1, sizeof(::istio::networking::v1alpha3::HTTPFaultInjection_Abort)},
  { 284, -1, sizeof(::istio::networking::v1alpha3::HTTPFaultInjection)},
  { 291, -1, sizeof(::istio::networking::v1alpha3::PortSelector)},
  { 299, -1, sizeof(::istio::networking::v1alpha3::Percent)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_VirtualService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_Destination_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_HTTPRoute_AppendHeadersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_HTTPRoute_AppendResponseHeadersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_HTTPRoute_AppendRequestHeadersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_HTTPRoute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_Headers_HeaderOperations_SetEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_Headers_HeaderOperations_AddEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_Headers_HeaderOperations_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_Headers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_TLSRoute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_TCPRoute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_HTTPMatchRequest_HeadersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_HTTPMatchRequest_SourceLabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_HTTPMatchRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_HTTPRouteDestination_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_RouteDestination_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_L4MatchAttributes_SourceLabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_L4MatchAttributes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_TLSMatchAttributes_SourceLabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_TLSMatchAttributes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_HTTPRedirect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_HTTPRewrite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_StringMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_HTTPRetry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_CorsPolicy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_HTTPFaultInjection_Delay_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_HTTPFaultInjection_Abort_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_HTTPFaultInjection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_PortSelector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_Percent_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "networking/v1alpha3/virtual_service.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 33);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n)networking/v1alpha3/virtual_service.pr"
      "oto\022\031istio.networking.v1alpha3\032\036google/p"
      "rotobuf/duration.proto\032\036google/protobuf/"
      "wrappers.proto\"\334\001\n\016VirtualService\022\r\n\005hos"
      "ts\030\001 \003(\t\022\020\n\010gateways\030\002 \003(\t\0222\n\004http\030\003 \003(\013"
      "2$.istio.networking.v1alpha3.HTTPRoute\0220"
      "\n\003tls\030\005 \003(\0132#.istio.networking.v1alpha3."
      "TLSRoute\0220\n\003tcp\030\004 \003(\0132#.istio.networking"
      ".v1alpha3.TCPRoute\022\021\n\texport_to\030\006 \003(\t\"b\n"
      "\013Destination\022\014\n\004host\030\001 \001(\t\022\016\n\006subset\030\002 \001"
      "(\t\0225\n\004port\030\003 \001(\0132\'.istio.networking.v1al"
      "pha3.PortSelector\"\371\010\n\tHTTPRoute\022:\n\005match"
      "\030\001 \003(\0132+.istio.networking.v1alpha3.HTTPM"
      "atchRequest\022>\n\005route\030\002 \003(\0132/.istio.netwo"
      "rking.v1alpha3.HTTPRouteDestination\0229\n\010r"
      "edirect\030\003 \001(\0132\'.istio.networking.v1alpha"
      "3.HTTPRedirect\0227\n\007rewrite\030\004 \001(\0132&.istio."
      "networking.v1alpha3.HTTPRewrite\022\031\n\021webso"
      "cket_upgrade\030\005 \001(\010\022*\n\007timeout\030\006 \001(\0132\031.go"
      "ogle.protobuf.Duration\0225\n\007retries\030\007 \001(\0132"
      "$.istio.networking.v1alpha3.HTTPRetry\022<\n"
      "\005fault\030\010 \001(\0132-.istio.networking.v1alpha3"
      ".HTTPFaultInjection\0226\n\006mirror\030\t \001(\0132&.is"
      "tio.networking.v1alpha3.Destination\022:\n\013c"
      "ors_policy\030\n \001(\0132%.istio.networking.v1al"
      "pha3.CorsPolicy\022S\n\016append_headers\030\013 \003(\0132"
      "7.istio.networking.v1alpha3.HTTPRoute.Ap"
      "pendHeadersEntryB\002\030\001\022#\n\027remove_response_"
      "headers\030\014 \003(\tB\002\030\001\022d\n\027append_response_hea"
      "ders\030\r \003(\0132\?.istio.networking.v1alpha3.H"
      "TTPRoute.AppendResponseHeadersEntryB\002\030\001\022"
      "\"\n\026remove_request_headers\030\016 \003(\tB\002\030\001\022b\n\026a"
      "ppend_request_headers\030\017 \003(\0132>.istio.netw"
      "orking.v1alpha3.HTTPRoute.AppendRequestH"
      "eadersEntryB\002\030\001\0223\n\007headers\030\020 \001(\0132\".istio"
      ".networking.v1alpha3.Headers\0324\n\022AppendHe"
      "adersEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\002"
      "8\001\032<\n\032AppendResponseHeadersEntry\022\013\n\003key\030"
      "\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032;\n\031AppendReques"
      "tHeadersEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
      "\t:\0028\001\"\251\003\n\007Headers\022D\n\007request\030\001 \001(\01323.ist"
      "io.networking.v1alpha3.Headers.HeaderOpe"
      "rations\022E\n\010response\030\002 \001(\01323.istio.networ"
      "king.v1alpha3.Headers.HeaderOperations\032\220"
      "\002\n\020HeaderOperations\022I\n\003set\030\001 \003(\0132<.istio"
      ".networking.v1alpha3.Headers.HeaderOpera"
      "tions.SetEntry\022I\n\003add\030\002 \003(\0132<.istio.netw"
      "orking.v1alpha3.Headers.HeaderOperations"
      ".AddEntry\022\016\n\006remove\030\003 \003(\t\032*\n\010SetEntry\022\013\n"
      "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032*\n\010AddEntr"
      "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\204\001\n\010TL"
      "SRoute\022<\n\005match\030\001 \003(\0132-.istio.networking"
      ".v1alpha3.TLSMatchAttributes\022:\n\005route\030\002 "
      "\003(\0132+.istio.networking.v1alpha3.RouteDes"
      "tination\"\203\001\n\010TCPRoute\022;\n\005match\030\001 \003(\0132,.i"
      "stio.networking.v1alpha3.L4MatchAttribut"
      "es\022:\n\005route\030\002 \003(\0132+.istio.networking.v1a"
      "lpha3.RouteDestination\"\300\004\n\020HTTPMatchRequ"
      "est\0223\n\003uri\030\001 \001(\0132&.istio.networking.v1al"
      "pha3.StringMatch\0226\n\006scheme\030\002 \001(\0132&.istio"
      ".networking.v1alpha3.StringMatch\0226\n\006meth"
      "od\030\003 \001(\0132&.istio.networking.v1alpha3.Str"
      "ingMatch\0229\n\tauthority\030\004 \001(\0132&.istio.netw"
      "orking.v1alpha3.StringMatch\022I\n\007headers\030\005"
      " \003(\01328.istio.networking.v1alpha3.HTTPMat"
      "chRequest.HeadersEntry\022\014\n\004port\030\006 \001(\r\022T\n\r"
      "source_labels\030\007 \003(\0132=.istio.networking.v"
      "1alpha3.HTTPMatchRequest.SourceLabelsEnt"
      "ry\022\020\n\010gateways\030\010 \003(\t\032V\n\014HeadersEntry\022\013\n\003"
      "key\030\001 \001(\t\0225\n\005value\030\002 \001(\0132&.istio.network"
      "ing.v1alpha3.StringMatch:\0028\001\0323\n\021SourceLa"
      "belsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028"
      "\001\"\274\004\n\024HTTPRouteDestination\022;\n\013destinatio"
      "n\030\001 \001(\0132&.istio.networking.v1alpha3.Dest"
      "ination\022\016\n\006weight\030\002 \001(\005\022#\n\027remove_respon"
      "se_headers\030\003 \003(\tB\002\030\001\022o\n\027append_response_"
      "headers\030\004 \003(\0132J.istio.networking.v1alpha"
      "3.HTTPRouteDestination.AppendResponseHea"
      "dersEntryB\002\030\001\022\"\n\026remove_request_headers\030"
      "\005 \003(\tB\002\030\001\022m\n\026append_request_headers\030\006 \003("
      "\0132I.istio.networking.v1alpha3.HTTPRouteD"
      "estination.AppendRequestHeadersEntryB\002\030\001"
      "\0223\n\007headers\030\007 \001(\0132\".istio.networking.v1a"
      "lpha3.Headers\032<\n\032AppendResponseHeadersEn"
      "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032;\n\031A"
      "ppendRequestHeadersEntry\022\013\n\003key\030\001 \001(\t\022\r\n"
      "\005value\030\002 \001(\t:\0028\001\"_\n\020RouteDestination\022;\n\013"
      "destination\030\001 \001(\0132&.istio.networking.v1a"
      "lpha3.Destination\022\016\n\006weight\030\002 \001(\005\"\363\001\n\021L4"
      "MatchAttributes\022\033\n\023destination_subnets\030\001"
      " \003(\t\022\014\n\004port\030\002 \001(\r\022\025\n\rsource_subnet\030\003 \001("
      "\t\022U\n\rsource_labels\030\004 \003(\0132>.istio.network"
      "ing.v1alpha3.L4MatchAttributes.SourceLab"
      "elsEntry\022\020\n\010gateways\030\005 \003(\t\0323\n\021SourceLabe"
      "lsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\""
      "\210\002\n\022TLSMatchAttributes\022\021\n\tsni_hosts\030\001 \003("
      "\t\022\033\n\023destination_subnets\030\002 \003(\t\022\014\n\004port\030\003"
      " \001(\r\022\025\n\rsource_subnet\030\004 \001(\t\022V\n\rsource_la"
      "bels\030\005 \003(\0132\?.istio.networking.v1alpha3.T"
      "LSMatchAttributes.SourceLabelsEntry\022\020\n\010g"
      "ateways\030\006 \003(\t\0323\n\021SourceLabelsEntry\022\013\n\003ke"
      "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\".\n\014HTTPRedire"
      "ct\022\013\n\003uri\030\001 \001(\t\022\021\n\tauthority\030\002 \001(\t\"-\n\013HT"
      "TPRewrite\022\013\n\003uri\030\001 \001(\t\022\021\n\tauthority\030\002 \001("
      "\t\"O\n\013StringMatch\022\017\n\005exact\030\001 \001(\tH\000\022\020\n\006pre"
      "fix\030\002 \001(\tH\000\022\017\n\005regex\030\003 \001(\tH\000B\014\n\nmatch_ty"
      "pe\"c\n\tHTTPRetry\022\020\n\010attempts\030\001 \001(\005\0222\n\017per"
      "_try_timeout\030\002 \001(\0132\031.google.protobuf.Dur"
      "ation\022\020\n\010retry_on\030\003 \001(\t\"\313\001\n\nCorsPolicy\022\024"
      "\n\014allow_origin\030\001 \003(\t\022\025\n\rallow_methods\030\002 "
      "\003(\t\022\025\n\rallow_headers\030\003 \003(\t\022\026\n\016expose_hea"
      "ders\030\004 \003(\t\022*\n\007max_age\030\005 \001(\0132\031.google.pro"
      "tobuf.Duration\0225\n\021allow_credentials\030\006 \001("
      "\0132\032.google.protobuf.BoolValue\"\232\004\n\022HTTPFa"
      "ultInjection\022B\n\005delay\030\001 \001(\01323.istio.netw"
      "orking.v1alpha3.HTTPFaultInjection.Delay"
      "\022B\n\005abort\030\002 \001(\01323.istio.networking.v1alp"
      "ha3.HTTPFaultInjection.Abort\032\321\001\n\005Delay\022\023"
      "\n\007percent\030\001 \001(\005B\002\030\001\0220\n\013fixed_delay\030\002 \001(\013"
      "2\031.google.protobuf.DurationH\000\0226\n\021exponen"
      "tial_delay\030\003 \001(\0132\031.google.protobuf.Durat"
      "ionH\000\0226\n\npercentage\030\005 \001(\0132\".istio.networ"
      "king.v1alpha3.PercentB\021\n\017http_delay_type"
      "\032\247\001\n\005Abort\022\023\n\007percent\030\001 \001(\005B\002\030\001\022\025\n\013http_"
      "status\030\002 \001(\005H\000\022\025\n\013grpc_status\030\003 \001(\tH\000\022\025\n"
      "\013http2_error\030\004 \001(\tH\000\0226\n\npercentage\030\005 \001(\013"
      "2\".istio.networking.v1alpha3.PercentB\014\n\n"
      "error_type\"8\n\014PortSelector\022\020\n\006number\030\001 \001"
      "(\rH\000\022\016\n\004name\030\002 \001(\tH\000B\006\n\004port\"\030\n\007Percent\022"
      "\r\n\005value\030\001 \001(\001B\"Z istio.io/api/networkin"
      "g/v1alpha3b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5218);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "networking/v1alpha3/virtual_service.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto
namespace istio {
namespace networking {
namespace v1alpha3 {

// ===================================================================

void VirtualService::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VirtualService::kHostsFieldNumber;
const int VirtualService::kGatewaysFieldNumber;
const int VirtualService::kHttpFieldNumber;
const int VirtualService::kTlsFieldNumber;
const int VirtualService::kTcpFieldNumber;
const int VirtualService::kExportToFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VirtualService::VirtualService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsVirtualService();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.VirtualService)
}
VirtualService::VirtualService(const VirtualService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      hosts_(from.hosts_),
      gateways_(from.gateways_),
      http_(from.http_),
      tcp_(from.tcp_),
      tls_(from.tls_),
      export_to_(from.export_to_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.VirtualService)
}

void VirtualService::SharedCtor() {
  _cached_size_ = 0;
}

VirtualService::~VirtualService() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.VirtualService)
  SharedDtor();
}

void VirtualService::SharedDtor() {
}

void VirtualService::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VirtualService::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VirtualService& VirtualService::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsVirtualService();
  return *internal_default_instance();
}

VirtualService* VirtualService::New(::google::protobuf::Arena* arena) const {
  VirtualService* n = new VirtualService;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VirtualService::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.VirtualService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hosts_.Clear();
  gateways_.Clear();
  http_.Clear();
  tcp_.Clear();
  tls_.Clear();
  export_to_.Clear();
  _internal_metadata_.Clear();
}

bool VirtualService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.VirtualService)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string hosts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hosts()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hosts(this->hosts_size() - 1).data(),
            static_cast<int>(this->hosts(this->hosts_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.VirtualService.hosts"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string gateways = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_gateways()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateways(this->gateways_size() - 1).data(),
            static_cast<int>(this->gateways(this->gateways_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.VirtualService.gateways"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.networking.v1alpha3.HTTPRoute http = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_http()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_tcp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.networking.v1alpha3.TLSRoute tls = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_tls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string export_to = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_export_to()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->export_to(this->export_to_size() - 1).data(),
            static_cast<int>(this->export_to(this->export_to_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.VirtualService.export_to"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.VirtualService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.VirtualService)
  return false;
#undef DO_
}

void VirtualService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.VirtualService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string hosts = 1;
  for (int i = 0, n = this->hosts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hosts(i).data(), static_cast<int>(this->hosts(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.VirtualService.hosts");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hosts(i), output);
  }

  // repeated string gateways = 2;
  for (int i = 0, n = this->gateways_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateways(i).data(), static_cast<int>(this->gateways(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.VirtualService.gateways");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gateways(i), output);
  }

  // repeated .istio.networking.v1alpha3.HTTPRoute http = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->http_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->http(static_cast<int>(i)), output);
  }

  // repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tcp_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tcp(static_cast<int>(i)), output);
  }

  // repeated .istio.networking.v1alpha3.TLSRoute tls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tls(static_cast<int>(i)), output);
  }

  // repeated string export_to = 6;
  for (int i = 0, n = this->export_to_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->export_to(i).data(), static_cast<int>(this->export_to(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.VirtualService.export_to");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->export_to(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.VirtualService)
}

::google::protobuf::uint8* VirtualService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.VirtualService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string hosts = 1;
  for (int i = 0, n = this->hosts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hosts(i).data(), static_cast<int>(this->hosts(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.VirtualService.hosts");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->hosts(i), target);
  }

  // repeated string gateways = 2;
  for (int i = 0, n = this->gateways_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateways(i).data(), static_cast<int>(this->gateways(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.VirtualService.gateways");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->gateways(i), target);
  }

  // repeated .istio.networking.v1alpha3.HTTPRoute http = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->http_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->http(static_cast<int>(i)), deterministic, target);
  }

  // repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tcp_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->tcp(static_cast<int>(i)), deterministic, target);
  }

  // repeated .istio.networking.v1alpha3.TLSRoute tls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->tls(static_cast<int>(i)), deterministic, target);
  }

  // repeated string export_to = 6;
  for (int i = 0, n = this->export_to_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->export_to(i).data(), static_cast<int>(this->export_to(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.VirtualService.export_to");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->export_to(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.VirtualService)
  return target;
}

size_t VirtualService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.VirtualService)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string hosts = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->hosts_size());
  for (int i = 0, n = this->hosts_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hosts(i));
  }

  // repeated string gateways = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->gateways_size());
  for (int i = 0, n = this->gateways_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->gateways(i));
  }

  // repeated .istio.networking.v1alpha3.HTTPRoute http = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->http_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->http(static_cast<int>(i)));
    }
  }

  // repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->tcp_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tcp(static_cast<int>(i)));
    }
  }

  // repeated .istio.networking.v1alpha3.TLSRoute tls = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->tls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tls(static_cast<int>(i)));
    }
  }

  // repeated string export_to = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->export_to_size());
  for (int i = 0, n = this->export_to_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->export_to(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VirtualService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.VirtualService)
  GOOGLE_DCHECK_NE(&from, this);
  const VirtualService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VirtualService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.VirtualService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.VirtualService)
    MergeFrom(*source);
  }
}

void VirtualService::MergeFrom(const VirtualService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.VirtualService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hosts_.MergeFrom(from.hosts_);
  gateways_.MergeFrom(from.gateways_);
  http_.MergeFrom(from.http_);
  tcp_.MergeFrom(from.tcp_);
  tls_.MergeFrom(from.tls_);
  export_to_.MergeFrom(from.export_to_);
}

void VirtualService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.VirtualService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VirtualService::CopyFrom(const VirtualService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.VirtualService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualService::IsInitialized() const {
  return true;
}

void VirtualService::Swap(VirtualService* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VirtualService::InternalSwap(VirtualService* other) {
  using std::swap;
  hosts_.InternalSwap(&other->hosts_);
  gateways_.InternalSwap(&other->gateways_);
  http_.InternalSwap(&other->http_);
  tcp_.InternalSwap(&other->tcp_);
  tls_.InternalSwap(&other->tls_);
  export_to_.InternalSwap(&other->export_to_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VirtualService::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Destination::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_Destination_default_instance_._instance.get_mutable()->port_ = const_cast< ::istio::networking::v1alpha3::PortSelector*>(
      ::istio::networking::v1alpha3::PortSelector::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Destination::kHostFieldNumber;
const int Destination::kSubsetFieldNumber;
const int Destination::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Destination::Destination()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsDestination();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.Destination)
}
Destination::Destination(const Destination& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host().size() > 0) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  subset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subset().size() > 0) {
    subset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subset_);
  }
  if (from.has_port()) {
    port_ = new ::istio::networking::v1alpha3::PortSelector(*from.port_);
  } else {
    port_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.Destination)
}

void Destination::SharedCtor() {
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = NULL;
  _cached_size_ = 0;
}

Destination::~Destination() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.Destination)
  SharedDtor();
}

void Destination::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete port_;
}

void Destination::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Destination::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Destination& Destination::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsDestination();
  return *internal_default_instance();
}

Destination* Destination::New(::google::protobuf::Arena* arena) const {
  Destination* n = new Destination;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Destination::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.Destination)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && port_ != NULL) {
    delete port_;
  }
  port_ = NULL;
  _internal_metadata_.Clear();
}

bool Destination::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.Destination)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.Destination.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string subset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subset().data(), static_cast<int>(this->subset().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.Destination.subset"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.PortSelector port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_port()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.Destination)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.Destination)
  return false;
#undef DO_
}

void Destination::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.Destination)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Destination.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // string subset = 2;
  if (this->subset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subset().data(), static_cast<int>(this->subset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Destination.subset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->subset(), output);
  }

  // .istio.networking.v1alpha3.PortSelector port = 3;
  if (this->has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->port_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.Destination)
}

::google::protobuf::uint8* Destination::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.Destination)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Destination.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // string subset = 2;
  if (this->subset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subset().data(), static_cast<int>(this->subset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Destination.subset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->subset(), target);
  }

  // .istio.networking.v1alpha3.PortSelector port = 3;
  if (this->has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->port_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.Destination)
  return target;
}

size_t Destination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.Destination)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // string subset = 2;
  if (this->subset().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subset());
  }

  // .istio.networking.v1alpha3.PortSelector port = 3;
  if (this->has_port()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->port_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Destination::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.Destination)
  GOOGLE_DCHECK_NE(&from, this);
  const Destination* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Destination>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.Destination)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.Destination)
    MergeFrom(*source);
  }
}

void Destination::MergeFrom(const Destination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.Destination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.subset().size() > 0) {

    subset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subset_);
  }
  if (from.has_port()) {
    mutable_port()->::istio::networking::v1alpha3::PortSelector::MergeFrom(from.port());
  }
}

void Destination::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.Destination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Destination::CopyFrom(const Destination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.Destination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Destination::IsInitialized() const {
  return true;
}

void Destination::Swap(Destination* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Destination::InternalSwap(Destination* other) {
  using std::swap;
  host_.Swap(&other->host_);
  subset_.Swap(&other->subset_);
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Destination::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

HTTPRoute_AppendHeadersEntry_DoNotUse::HTTPRoute_AppendHeadersEntry_DoNotUse() {}
HTTPRoute_AppendHeadersEntry_DoNotUse::HTTPRoute_AppendHeadersEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void HTTPRoute_AppendHeadersEntry_DoNotUse::MergeFrom(const HTTPRoute_AppendHeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata HTTPRoute_AppendHeadersEntry_DoNotUse::GetMetadata() const {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[2];
}
void HTTPRoute_AppendHeadersEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

HTTPRoute_AppendResponseHeadersEntry_DoNotUse::HTTPRoute_AppendResponseHeadersEntry_DoNotUse() {}
HTTPRoute_AppendResponseHeadersEntry_DoNotUse::HTTPRoute_AppendResponseHeadersEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void HTTPRoute_AppendResponseHeadersEntry_DoNotUse::MergeFrom(const HTTPRoute_AppendResponseHeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata HTTPRoute_AppendResponseHeadersEntry_DoNotUse::GetMetadata() const {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[3];
}
void HTTPRoute_AppendResponseHeadersEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

HTTPRoute_AppendRequestHeadersEntry_DoNotUse::HTTPRoute_AppendRequestHeadersEntry_DoNotUse() {}
HTTPRoute_AppendRequestHeadersEntry_DoNotUse::HTTPRoute_AppendRequestHeadersEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void HTTPRoute_AppendRequestHeadersEntry_DoNotUse::MergeFrom(const HTTPRoute_AppendRequestHeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata HTTPRoute_AppendRequestHeadersEntry_DoNotUse::GetMetadata() const {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[4];
}
void HTTPRoute_AppendRequestHeadersEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void HTTPRoute::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_HTTPRoute_default_instance_._instance.get_mutable()->redirect_ = const_cast< ::istio::networking::v1alpha3::HTTPRedirect*>(
      ::istio::networking::v1alpha3::HTTPRedirect::internal_default_instance());
  ::istio::networking::v1alpha3::_HTTPRoute_default_instance_._instance.get_mutable()->rewrite_ = const_cast< ::istio::networking::v1alpha3::HTTPRewrite*>(
      ::istio::networking::v1alpha3::HTTPRewrite::internal_default_instance());
  ::istio::networking::v1alpha3::_HTTPRoute_default_instance_._instance.get_mutable()->timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::istio::networking::v1alpha3::_HTTPRoute_default_instance_._instance.get_mutable()->retries_ = const_cast< ::istio::networking::v1alpha3::HTTPRetry*>(
      ::istio::networking::v1alpha3::HTTPRetry::internal_default_instance());
  ::istio::networking::v1alpha3::_HTTPRoute_default_instance_._instance.get_mutable()->fault_ = const_cast< ::istio::networking::v1alpha3::HTTPFaultInjection*>(
      ::istio::networking::v1alpha3::HTTPFaultInjection::internal_default_instance());
  ::istio::networking::v1alpha3::_HTTPRoute_default_instance_._instance.get_mutable()->mirror_ = const_cast< ::istio::networking::v1alpha3::Destination*>(
      ::istio::networking::v1alpha3::Destination::internal_default_instance());
  ::istio::networking::v1alpha3::_HTTPRoute_default_instance_._instance.get_mutable()->cors_policy_ = const_cast< ::istio::networking::v1alpha3::CorsPolicy*>(
      ::istio::networking::v1alpha3::CorsPolicy::internal_default_instance());
  ::istio::networking::v1alpha3::_HTTPRoute_default_instance_._instance.get_mutable()->headers_ = const_cast< ::istio::networking::v1alpha3::Headers*>(
      ::istio::networking::v1alpha3::Headers::internal_default_instance());
}
void HTTPRoute::clear_timeout() {
  if (GetArenaNoVirtual() == NULL && timeout_ != NULL) {
    delete timeout_;
  }
  timeout_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HTTPRoute::kMatchFieldNumber;
const int HTTPRoute::kRouteFieldNumber;
const int HTTPRoute::kRedirectFieldNumber;
const int HTTPRoute::kRewriteFieldNumber;
const int HTTPRoute::kWebsocketUpgradeFieldNumber;
const int HTTPRoute::kTimeoutFieldNumber;
const int HTTPRoute::kRetriesFieldNumber;
const int HTTPRoute::kFaultFieldNumber;
const int HTTPRoute::kMirrorFieldNumber;
const int HTTPRoute::kCorsPolicyFieldNumber;
const int HTTPRoute::kAppendHeadersFieldNumber;
const int HTTPRoute::kRemoveResponseHeadersFieldNumber;
const int HTTPRoute::kAppendResponseHeadersFieldNumber;
const int HTTPRoute::kRemoveRequestHeadersFieldNumber;
const int HTTPRoute::kAppendRequestHeadersFieldNumber;
const int HTTPRoute::kHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HTTPRoute::HTTPRoute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPRoute();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.HTTPRoute)
}
HTTPRoute::HTTPRoute(const HTTPRoute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      match_(from.match_),
      route_(from.route_),
      remove_response_headers_(from.remove_response_headers_),
      remove_request_headers_(from.remove_request_headers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  append_headers_.MergeFrom(from.append_headers_);
  append_response_headers_.MergeFrom(from.append_response_headers_);
  append_request_headers_.MergeFrom(from.append_request_headers_);
  if (from.has_redirect()) {
    redirect_ = new ::istio::networking::v1alpha3::HTTPRedirect(*from.redirect_);
  } else {
    redirect_ = NULL;
  }
  if (from.has_rewrite()) {
    rewrite_ = new ::istio::networking::v1alpha3::HTTPRewrite(*from.rewrite_);
  } else {
    rewrite_ = NULL;
  }
  if (from.has_timeout()) {
    timeout_ = new ::google::protobuf::Duration(*from.timeout_);
  } else {
    timeout_ = NULL;
  }
  if (from.has_retries()) {
    retries_ = new ::istio::networking::v1alpha3::HTTPRetry(*from.retries_);
  } else {
    retries_ = NULL;
  }
  if (from.has_fault()) {
    fault_ = new ::istio::networking::v1alpha3::HTTPFaultInjection(*from.fault_);
  } else {
    fault_ = NULL;
  }
  if (from.has_mirror()) {
    mirror_ = new ::istio::networking::v1alpha3::Destination(*from.mirror_);
  } else {
    mirror_ = NULL;
  }
  if (from.has_cors_policy()) {
    cors_policy_ = new ::istio::networking::v1alpha3::CorsPolicy(*from.cors_policy_);
  } else {
    cors_policy_ = NULL;
  }
  if (from.has_headers()) {
    headers_ = new ::istio::networking::v1alpha3::Headers(*from.headers_);
  } else {
    headers_ = NULL;
  }
  websocket_upgrade_ = from.websocket_upgrade_;
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.HTTPRoute)
}

void HTTPRoute::SharedCtor() {
  ::memset(&redirect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&websocket_upgrade_) -
      reinterpret_cast<char*>(&redirect_)) + sizeof(websocket_upgrade_));
  _cached_size_ = 0;
}

HTTPRoute::~HTTPRoute() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.HTTPRoute)
  SharedDtor();
}

void HTTPRoute::SharedDtor() {
  if (this != internal_default_instance()) delete redirect_;
  if (this != internal_default_instance()) delete rewrite_;
  if (this != internal_default_instance()) delete timeout_;
  if (this != internal_default_instance()) delete retries_;
  if (this != internal_default_instance()) delete fault_;
  if (this != internal_default_instance()) delete mirror_;
  if (this != internal_default_instance()) delete cors_policy_;
  if (this != internal_default_instance()) delete headers_;
}

void HTTPRoute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HTTPRoute::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HTTPRoute& HTTPRoute::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPRoute();
  return *internal_default_instance();
}

HTTPRoute* HTTPRoute::New(::google::protobuf::Arena* arena) const {
  HTTPRoute* n = new HTTPRoute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HTTPRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.HTTPRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_.Clear();
  route_.Clear();
  append_headers_.Clear();
  remove_response_headers_.Clear();
  append_response_headers_.Clear();
  remove_request_headers_.Clear();
  append_request_headers_.Clear();
  if (GetArenaNoVirtual() == NULL && redirect_ != NULL) {
    delete redirect_;
  }
  redirect_ = NULL;
  if (GetArenaNoVirtual() == NULL && rewrite_ != NULL) {
    delete rewrite_;
  }
  rewrite_ = NULL;
  if (GetArenaNoVirtual() == NULL && timeout_ != NULL) {
    delete timeout_;
  }
  timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && retries_ != NULL) {
    delete retries_;
  }
  retries_ = NULL;
  if (GetArenaNoVirtual() == NULL && fault_ != NULL) {
    delete fault_;
  }
  fault_ = NULL;
  if (GetArenaNoVirtual() == NULL && mirror_ != NULL) {
    delete mirror_;
  }
  mirror_ = NULL;
  if (GetArenaNoVirtual() == NULL && cors_policy_ != NULL) {
    delete cors_policy_;
  }
  cors_policy_ = NULL;
  if (GetArenaNoVirtual() == NULL && headers_ != NULL) {
    delete headers_;
  }
  headers_ = NULL;
  websocket_upgrade_ = false;
  _internal_metadata_.Clear();
}

bool HTTPRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.HTTPRoute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_route()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.HTTPRedirect redirect = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_redirect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.HTTPRewrite rewrite = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rewrite()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool websocket_upgrade = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &websocket_upgrade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration timeout = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.HTTPRetry retries = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_retries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.HTTPFaultInjection fault = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fault()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.Destination mirror = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mirror()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.CorsPolicy cors_policy = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cors_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> append_headers = 11 [deprecated = true];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          HTTPRoute_AppendHeadersEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              HTTPRoute_AppendHeadersEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&append_headers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.HTTPRoute.AppendHeadersEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.HTTPRoute.AppendHeadersEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string remove_response_headers = 12 [deprecated = true];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_remove_response_headers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->remove_response_headers(this->remove_response_headers_size() - 1).data(),
            static_cast<int>(this->remove_response_headers(this->remove_response_headers_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.HTTPRoute.remove_response_headers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> append_response_headers = 13 [deprecated = true];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          HTTPRoute_AppendResponseHeadersEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              HTTPRoute_AppendResponseHeadersEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&append_response_headers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.HTTPRoute.AppendResponseHeadersEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.HTTPRoute.AppendResponseHeadersEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string remove_request_headers = 14 [deprecated = true];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_remove_request_headers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->remove_request_headers(this->remove_request_headers_size() - 1).data(),
            static_cast<int>(this->remove_request_headers(this->remove_request_headers_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.HTTPRoute.remove_request_headers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> append_request_headers = 15 [deprecated = true];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          HTTPRoute_AppendRequestHeadersEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              HTTPRoute_AppendRequestHeadersEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&append_request_headers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.HTTPRoute.AppendRequestHeadersEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.HTTPRoute.AppendRequestHeadersEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.Headers headers = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.HTTPRoute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.HTTPRoute)
  return false;
#undef DO_
}

void HTTPRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.HTTPRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->match_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->match(static_cast<int>(i)), output);
  }

  // repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->route_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->route(static_cast<int>(i)), output);
  }

  // .istio.networking.v1alpha3.HTTPRedirect redirect = 3;
  if (this->has_redirect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->redirect_, output);
  }

  // .istio.networking.v1alpha3.HTTPRewrite rewrite = 4;
  if (this->has_rewrite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->rewrite_, output);
  }

  // bool websocket_upgrade = 5;
  if (this->websocket_upgrade() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->websocket_upgrade(), output);
  }

  // .google.protobuf.Duration timeout = 6;
  if (this->has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->timeout_, output);
  }

  // .istio.networking.v1alpha3.HTTPRetry retries = 7;
  if (this->has_retries()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->retries_, output);
  }

  // .istio.networking.v1alpha3.HTTPFaultInjection fault = 8;
  if (this->has_fault()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->fault_, output);
  }

  // .istio.networking.v1alpha3.Destination mirror = 9;
  if (this->has_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->mirror_, output);
  }

  // .istio.networking.v1alpha3.CorsPolicy cors_policy = 10;
  if (this->has_cors_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->cors_policy_, output);
  }

  // map<string, string> append_headers = 11 [deprecated = true];
  if (!this->append_headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPRoute.AppendHeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPRoute.AppendHeadersEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->append_headers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->append_headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->append_headers().begin();
          it != this->append_headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<HTTPRoute_AppendHeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(append_headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HTTPRoute_AppendHeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->append_headers().begin();
          it != this->append_headers().end(); ++it) {
        entry.reset(append_headers_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string remove_response_headers = 12 [deprecated = true];
  for (int i = 0, n = this->remove_response_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remove_response_headers(i).data(), static_cast<int>(this->remove_response_headers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.HTTPRoute.remove_response_headers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->remove_response_headers(i), output);
  }

  // map<string, string> append_response_headers = 13 [deprecated = true];
  if (!this->append_response_headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPRoute.AppendResponseHeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPRoute.AppendResponseHeadersEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->append_response_headers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->append_response_headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->append_response_headers().begin();
          it != this->append_response_headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<HTTPRoute_AppendResponseHeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(append_response_headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HTTPRoute_AppendResponseHeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->append_response_headers().begin();
          it != this->append_response_headers().end(); ++it) {
        entry.reset(append_response_headers_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string remove_request_headers = 14 [deprecated = true];
  for (int i = 0, n = this->remove_request_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remove_request_headers(i).data(), static_cast<int>(this->remove_request_headers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.HTTPRoute.remove_request_headers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->remove_request_headers(i), output);
  }

  // map<string, string> append_request_headers = 15 [deprecated = true];
  if (!this->append_request_headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPRoute.AppendRequestHeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPRoute.AppendRequestHeadersEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->append_request_headers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->append_request_headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->append_request_headers().begin();
          it != this->append_request_headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<HTTPRoute_AppendRequestHeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(append_request_headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HTTPRoute_AppendRequestHeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->append_request_headers().begin();
          it != this->append_request_headers().end(); ++it) {
        entry.reset(append_request_headers_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // .istio.networking.v1alpha3.Headers headers = 16;
  if (this->has_headers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->headers_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.HTTPRoute)
}

::google::protobuf::uint8* HTTPRoute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.HTTPRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->match_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->match(static_cast<int>(i)), deterministic, target);
  }

  // repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->route_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->route(static_cast<int>(i)), deterministic, target);
  }

  // .istio.networking.v1alpha3.HTTPRedirect redirect = 3;
  if (this->has_redirect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->redirect_, deterministic, target);
  }

  // .istio.networking.v1alpha3.HTTPRewrite rewrite = 4;
  if (this->has_rewrite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->rewrite_, deterministic, target);
  }

  // bool websocket_upgrade = 5;
  if (this->websocket_upgrade() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->websocket_upgrade(), target);
  }

  // .google.protobuf.Duration timeout = 6;
  if (this->has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->timeout_, deterministic, target);
  }

  // .istio.networking.v1alpha3.HTTPRetry retries = 7;
  if (this->has_retries()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->retries_, deterministic, target);
  }

  // .istio.networking.v1alpha3.HTTPFaultInjection fault = 8;
  if (this->has_fault()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->fault_, deterministic, target);
  }

  // .istio.networking.v1alpha3.Destination mirror = 9;
  if (this->has_mirror()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->mirror_, deterministic, target);
  }

  // .istio.networking.v1alpha3.CorsPolicy cors_policy = 10;
  if (this->has_cors_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->cors_policy_, deterministic, target);
  }

  // map<string, string> append_headers = 11 [deprecated = true];
  if (!this->append_headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPRoute.AppendHeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPRoute.AppendHeadersEntry.value");
      }
    };

    if (deterministic &&
        this->append_headers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->append_headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->append_headers().begin();
          it != this->append_headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<HTTPRoute_AppendHeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(append_headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HTTPRoute_AppendHeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->append_headers().begin();
          it != this->append_headers().end(); ++it) {
        entry.reset(append_headers_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string remove_response_headers = 12 [deprecated = true];
  for (int i = 0, n = this->remove_response_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remove_response_headers(i).data(), static_cast<int>(this->remove_response_headers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.HTTPRoute.remove_response_headers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->remove_response_headers(i), target);
  }

  // map<string, string> append_response_headers = 13 [deprecated = true];
  if (!this->append_response_headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPRoute.AppendResponseHeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPRoute.AppendResponseHeadersEntry.value");
      }
    };

    if (deterministic &&
        this->append_response_headers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->append_response_headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->append_response_headers().begin();
          it != this->append_response_headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<HTTPRoute_AppendResponseHeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(append_response_headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HTTPRoute_AppendResponseHeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->append_response_headers().begin();
          it != this->append_response_headers().end(); ++it) {
        entry.reset(append_response_headers_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string remove_request_headers = 14 [deprecated = true];
  for (int i = 0, n = this->remove_request_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remove_request_headers(i).data(), static_cast<int>(this->remove_request_headers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.HTTPRoute.remove_request_headers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->remove_request_headers(i), target);
  }

  // map<string, string> append_request_headers = 15 [deprecated = true];
  if (!this->append_request_headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPRoute.AppendRequestHeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPRoute.AppendRequestHeadersEntry.value");
      }
    };

    if (deterministic &&
        this->append_request_headers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->append_request_headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->append_request_headers().begin();
          it != this->append_request_headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<HTTPRoute_AppendRequestHeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(append_request_headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HTTPRoute_AppendRequestHeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->append_request_headers().begin();
          it != this->append_request_headers().end(); ++it) {
        entry.reset(append_request_headers_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // .istio.networking.v1alpha3.Headers headers = 16;
  if (this->has_headers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, *this->headers_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.HTTPRoute)
  return target;
}

size_t HTTPRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.HTTPRoute)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->match_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->match(static_cast<int>(i)));
    }
  }

  // repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->route_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->route(static_cast<int>(i)));
    }
  }

  // map<string, string> append_headers = 11 [deprecated = true];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->append_headers_size());
  {
    ::google::protobuf::scoped_ptr<HTTPRoute_AppendHeadersEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->append_headers().begin();
        it != this->append_headers().end(); ++it) {
      entry.reset(append_headers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated string remove_response_headers = 12 [deprecated = true];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->remove_response_headers_size());
  for (int i = 0, n = this->remove_response_headers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->remove_response_headers(i));
  }

  // map<string, string> append_response_headers = 13 [deprecated = true];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->append_response_headers_size());
  {
    ::google::protobuf::scoped_ptr<HTTPRoute_AppendResponseHeadersEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->append_response_headers().begin();
        it != this->append_response_headers().end(); ++it) {
      entry.reset(append_response_headers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated string remove_request_headers = 14 [deprecated = true];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->remove_request_headers_size());
  for (int i = 0, n = this->remove_request_headers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->remove_request_headers(i));
  }

  // map<string, string> append_request_headers = 15 [deprecated = true];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->append_request_headers_size());
  {
    ::google::protobuf::scoped_ptr<HTTPRoute_AppendRequestHeadersEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->append_request_headers().begin();
        it != this->append_request_headers().end(); ++it) {
      entry.reset(append_request_headers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .istio.networking.v1alpha3.HTTPRedirect redirect = 3;
  if (this->has_redirect()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->redirect_);
  }

  // .istio.networking.v1alpha3.HTTPRewrite rewrite = 4;
  if (this->has_rewrite()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rewrite_);
  }

  // .google.protobuf.Duration timeout = 6;
  if (this->has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->timeout_);
  }

  // .istio.networking.v1alpha3.HTTPRetry retries = 7;
  if (this->has_retries()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->retries_);
  }

  // .istio.networking.v1alpha3.HTTPFaultInjection fault = 8;
  if (this->has_fault()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->fault_);
  }

  // .istio.networking.v1alpha3.Destination mirror = 9;
  if (this->has_mirror()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mirror_);
  }

  // .istio.networking.v1alpha3.CorsPolicy cors_policy = 10;
  if (this->has_cors_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cors_policy_);
  }

  // .istio.networking.v1alpha3.Headers headers = 16;
  if (this->has_headers()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->headers_);
  }

  // bool websocket_upgrade = 5;
  if (this->websocket_upgrade() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HTTPRoute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.HTTPRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const HTTPRoute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HTTPRoute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.HTTPRoute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.HTTPRoute)
    MergeFrom(*source);
  }
}

void HTTPRoute::MergeFrom(const HTTPRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.HTTPRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_.MergeFrom(from.match_);
  route_.MergeFrom(from.route_);
  append_headers_.MergeFrom(from.append_headers_);
  remove_response_headers_.MergeFrom(from.remove_response_headers_);
  append_response_headers_.MergeFrom(from.append_response_headers_);
  remove_request_headers_.MergeFrom(from.remove_request_headers_);
  append_request_headers_.MergeFrom(from.append_request_headers_);
  if (from.has_redirect()) {
    mutable_redirect()->::istio::networking::v1alpha3::HTTPRedirect::MergeFrom(from.redirect());
  }
  if (from.has_rewrite()) {
    mutable_rewrite()->::istio::networking::v1alpha3::HTTPRewrite::MergeFrom(from.rewrite());
  }
  if (from.has_timeout()) {
    mutable_timeout()->::google::protobuf::Duration::MergeFrom(from.timeout());
  }
  if (from.has_retries()) {
    mutable_retries()->::istio::networking::v1alpha3::HTTPRetry::MergeFrom(from.retries());
  }
  if (from.has_fault()) {
    mutable_fault()->::istio::networking::v1alpha3::HTTPFaultInjection::MergeFrom(from.fault());
  }
  if (from.has_mirror()) {
    mutable_mirror()->::istio::networking::v1alpha3::Destination::MergeFrom(from.mirror());
  }
  if (from.has_cors_policy()) {
    mutable_cors_policy()->::istio::networking::v1alpha3::CorsPolicy::MergeFrom(from.cors_policy());
  }
  if (from.has_headers()) {
    mutable_headers()->::istio::networking::v1alpha3::Headers::MergeFrom(from.headers());
  }
  if (from.websocket_upgrade() != 0) {
    set_websocket_upgrade(from.websocket_upgrade());
  }
}

void HTTPRoute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.HTTPRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPRoute::CopyFrom(const HTTPRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.HTTPRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPRoute::IsInitialized() const {
  return true;
}

void HTTPRoute::Swap(HTTPRoute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HTTPRoute::InternalSwap(HTTPRoute* other) {
  using std::swap;
  match_.InternalSwap(&other->match_);
  route_.InternalSwap(&other->route_);
  append_headers_.Swap(&other->append_headers_);
  remove_response_headers_.InternalSwap(&other->remove_response_headers_);
  append_response_headers_.Swap(&other->append_response_headers_);
  remove_request_headers_.InternalSwap(&other->remove_request_headers_);
  append_request_headers_.Swap(&other->append_request_headers_);
  swap(redirect_, other->redirect_);
  swap(rewrite_, other->rewrite_);
  swap(timeout_, other->timeout_);
  swap(retries_, other->retries_);
  swap(fault_, other->fault_);
  swap(mirror_, other->mirror_);
  swap(cors_policy_, other->cors_policy_);
  swap(headers_, other->headers_);
  swap(websocket_upgrade_, other->websocket_upgrade_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HTTPRoute::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Headers_HeaderOperations_SetEntry_DoNotUse::Headers_HeaderOperations_SetEntry_DoNotUse() {}
Headers_HeaderOperations_SetEntry_DoNotUse::Headers_HeaderOperations_SetEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Headers_HeaderOperations_SetEntry_DoNotUse::MergeFrom(const Headers_HeaderOperations_SetEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Headers_HeaderOperations_SetEntry_DoNotUse::GetMetadata() const {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[6];
}
void Headers_HeaderOperations_SetEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

Headers_HeaderOperations_AddEntry_DoNotUse::Headers_HeaderOperations_AddEntry_DoNotUse() {}
Headers_HeaderOperations_AddEntry_DoNotUse::Headers_HeaderOperations_AddEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Headers_HeaderOperations_AddEntry_DoNotUse::MergeFrom(const Headers_HeaderOperations_AddEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Headers_HeaderOperations_AddEntry_DoNotUse::GetMetadata() const {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[7];
}
void Headers_HeaderOperations_AddEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Headers_HeaderOperations::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Headers_HeaderOperations::kSetFieldNumber;
const int Headers_HeaderOperations::kAddFieldNumber;
const int Headers_HeaderOperations::kRemoveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Headers_HeaderOperations::Headers_HeaderOperations()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHeaders_HeaderOperations();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.Headers.HeaderOperations)
}
Headers_HeaderOperations::Headers_HeaderOperations(const Headers_HeaderOperations& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      remove_(from.remove_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  set_.MergeFrom(from.set_);
  add_.MergeFrom(from.add_);
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.Headers.HeaderOperations)
}

void Headers_HeaderOperations::SharedCtor() {
  _cached_size_ = 0;
}

Headers_HeaderOperations::~Headers_HeaderOperations() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.Headers.HeaderOperations)
  SharedDtor();
}

void Headers_HeaderOperations::SharedDtor() {
}

void Headers_HeaderOperations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Headers_HeaderOperations::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Headers_HeaderOperations& Headers_HeaderOperations::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHeaders_HeaderOperations();
  return *internal_default_instance();
}

Headers_HeaderOperations* Headers_HeaderOperations::New(::google::protobuf::Arena* arena) const {
  Headers_HeaderOperations* n = new Headers_HeaderOperations;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Headers_HeaderOperations::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.Headers.HeaderOperations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_.Clear();
  add_.Clear();
  remove_.Clear();
  _internal_metadata_.Clear();
}

bool Headers_HeaderOperations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.Headers.HeaderOperations)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> set = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          Headers_HeaderOperations_SetEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Headers_HeaderOperations_SetEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&set_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.Headers.HeaderOperations.SetEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.Headers.HeaderOperations.SetEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> add = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          Headers_HeaderOperations_AddEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Headers_HeaderOperations_AddEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&add_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.Headers.HeaderOperations.AddEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.Headers.HeaderOperations.AddEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string remove = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_remove()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->remove(this->remove_size() - 1).data(),
            static_cast<int>(this->remove(this->remove_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.Headers.HeaderOperations.remove"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.Headers.HeaderOperations)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.Headers.HeaderOperations)
  return false;
#undef DO_
}

void Headers_HeaderOperations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.Headers.HeaderOperations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> set = 1;
  if (!this->set().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.Headers.HeaderOperations.SetEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.Headers.HeaderOperations.SetEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->set().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->set().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->set().begin();
          it != this->set().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Headers_HeaderOperations_SetEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(set_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Headers_HeaderOperations_SetEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->set().begin();
          it != this->set().end(); ++it) {
        entry.reset(set_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> add = 2;
  if (!this->add().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.Headers.HeaderOperations.AddEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.Headers.HeaderOperations.AddEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->add().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->add().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->add().begin();
          it != this->add().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Headers_HeaderOperations_AddEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(add_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Headers_HeaderOperations_AddEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->add().begin();
          it != this->add().end(); ++it) {
        entry.reset(add_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string remove = 3;
  for (int i = 0, n = this->remove_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remove(i).data(), static_cast<int>(this->remove(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Headers.HeaderOperations.remove");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->remove(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.Headers.HeaderOperations)
}

::google::protobuf::uint8* Headers_HeaderOperations::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.Headers.HeaderOperations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> set = 1;
  if (!this->set().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.Headers.HeaderOperations.SetEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.Headers.HeaderOperations.SetEntry.value");
      }
    };

    if (deterministic &&
        this->set().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->set().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->set().begin();
          it != this->set().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Headers_HeaderOperations_SetEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(set_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Headers_HeaderOperations_SetEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->set().begin();
          it != this->set().end(); ++it) {
        entry.reset(set_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> add = 2;
  if (!this->add().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.Headers.HeaderOperations.AddEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.Headers.HeaderOperations.AddEntry.value");
      }
    };

    if (deterministic &&
        this->add().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->add().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->add().begin();
          it != this->add().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Headers_HeaderOperations_AddEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(add_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Headers_HeaderOperations_AddEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->add().begin();
          it != this->add().end(); ++it) {
        entry.reset(add_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string remove = 3;
  for (int i = 0, n = this->remove_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remove(i).data(), static_cast<int>(this->remove(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Headers.HeaderOperations.remove");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->remove(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.Headers.HeaderOperations)
  return target;
}

size_t Headers_HeaderOperations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.Headers.HeaderOperations)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> set = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->set_size());
  {
    ::google::protobuf::scoped_ptr<Headers_HeaderOperations_SetEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->set().begin();
        it != this->set().end(); ++it) {
      entry.reset(set_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> add = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->add_size());
  {
    ::google::protobuf::scoped_ptr<Headers_HeaderOperations_AddEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->add().begin();
        it != this->add().end(); ++it) {
      entry.reset(add_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated string remove = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->remove_size());
  for (int i = 0, n = this->remove_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->remove(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Headers_HeaderOperations::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.Headers.HeaderOperations)
  GOOGLE_DCHECK_NE(&from, this);
  const Headers_HeaderOperations* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Headers_HeaderOperations>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.Headers.HeaderOperations)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.Headers.HeaderOperations)
    MergeFrom(*source);
  }
}

void Headers_HeaderOperations::MergeFrom(const Headers_HeaderOperations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.Headers.HeaderOperations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  set_.MergeFrom(from.set_);
  add_.MergeFrom(from.add_);
  remove_.MergeFrom(from.remove_);
}

void Headers_HeaderOperations::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.Headers.HeaderOperations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Headers_HeaderOperations::CopyFrom(const Headers_HeaderOperations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.Headers.HeaderOperations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Headers_HeaderOperations::IsInitialized() const {
  return true;
}

void Headers_HeaderOperations::Swap(Headers_HeaderOperations* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Headers_HeaderOperations::InternalSwap(Headers_HeaderOperations* other) {
  using std::swap;
  set_.Swap(&other->set_);
  add_.Swap(&other->add_);
  remove_.InternalSwap(&other->remove_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Headers_HeaderOperations::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Headers::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_Headers_default_instance_._instance.get_mutable()->request_ = const_cast< ::istio::networking::v1alpha3::Headers_HeaderOperations*>(
      ::istio::networking::v1alpha3::Headers_HeaderOperations::internal_default_instance());
  ::istio::networking::v1alpha3::_Headers_default_instance_._instance.get_mutable()->response_ = const_cast< ::istio::networking::v1alpha3::Headers_HeaderOperations*>(
      ::istio::networking::v1alpha3::Headers_HeaderOperations::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Headers::kRequestFieldNumber;
const int Headers::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Headers::Headers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHeaders();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.Headers)
}
Headers::Headers(const Headers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_request()) {
    request_ = new ::istio::networking::v1alpha3::Headers_HeaderOperations(*from.request_);
  } else {
    request_ = NULL;
  }
  if (from.has_response()) {
    response_ = new ::istio::networking::v1alpha3::Headers_HeaderOperations(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.Headers)
}

void Headers::SharedCtor() {
  ::memset(&request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_) -
      reinterpret_cast<char*>(&request_)) + sizeof(response_));
  _cached_size_ = 0;
}

Headers::~Headers() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.Headers)
  SharedDtor();
}

void Headers::SharedDtor() {
  if (this != internal_default_instance()) delete request_;
  if (this != internal_default_instance()) delete response_;
}

void Headers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Headers::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Headers& Headers::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHeaders();
  return *internal_default_instance();
}

Headers* Headers::New(::google::protobuf::Arena* arena) const {
  Headers* n = new Headers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Headers::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.Headers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && request_ != NULL) {
    delete request_;
  }
  request_ = NULL;
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
  _internal_metadata_.Clear();
}

bool Headers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.Headers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.networking.v1alpha3.Headers.HeaderOperations request = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.Headers.HeaderOperations response = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.Headers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.Headers)
  return false;
#undef DO_
}

void Headers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.Headers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.Headers.HeaderOperations request = 1;
  if (this->has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->request_, output);
  }

  // .istio.networking.v1alpha3.Headers.HeaderOperations response = 2;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->response_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.Headers)
}

::google::protobuf::uint8* Headers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.Headers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.Headers.HeaderOperations request = 1;
  if (this->has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->request_, deterministic, target);
  }

  // .istio.networking.v1alpha3.Headers.HeaderOperations response = 2;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->response_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.Headers)
  return target;
}

size_t Headers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.Headers)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .istio.networking.v1alpha3.Headers.HeaderOperations request = 1;
  if (this->has_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->request_);
  }

  // .istio.networking.v1alpha3.Headers.HeaderOperations response = 2;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Headers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.Headers)
  GOOGLE_DCHECK_NE(&from, this);
  const Headers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Headers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.Headers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.Headers)
    MergeFrom(*source);
  }
}

void Headers::MergeFrom(const Headers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.Headers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_request()) {
    mutable_request()->::istio::networking::v1alpha3::Headers_HeaderOperations::MergeFrom(from.request());
  }
  if (from.has_response()) {
    mutable_response()->::istio::networking::v1alpha3::Headers_HeaderOperations::MergeFrom(from.response());
  }
}

void Headers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.Headers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Headers::CopyFrom(const Headers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.Headers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Headers::IsInitialized() const {
  return true;
}

void Headers::Swap(Headers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Headers::InternalSwap(Headers* other) {
  using std::swap;
  swap(request_, other->request_);
  swap(response_, other->response_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Headers::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TLSRoute::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TLSRoute::kMatchFieldNumber;
const int TLSRoute::kRouteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TLSRoute::TLSRoute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsTLSRoute();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.TLSRoute)
}
TLSRoute::TLSRoute(const TLSRoute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      match_(from.match_),
      route_(from.route_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.TLSRoute)
}

void TLSRoute::SharedCtor() {
  _cached_size_ = 0;
}

TLSRoute::~TLSRoute() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.TLSRoute)
  SharedDtor();
}

void TLSRoute::SharedDtor() {
}

void TLSRoute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLSRoute::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TLSRoute& TLSRoute::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsTLSRoute();
  return *internal_default_instance();
}

TLSRoute* TLSRoute::New(::google::protobuf::Arena* arena) const {
  TLSRoute* n = new TLSRoute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TLSRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.TLSRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_.Clear();
  route_.Clear();
  _internal_metadata_.Clear();
}

bool TLSRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.TLSRoute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .istio.networking.v1alpha3.TLSMatchAttributes match = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.networking.v1alpha3.RouteDestination route = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_route()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.TLSRoute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.TLSRoute)
  return false;
#undef DO_
}

void TLSRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.TLSRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .istio.networking.v1alpha3.TLSMatchAttributes match = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->match_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->match(static_cast<int>(i)), output);
  }

  // repeated .istio.networking.v1alpha3.RouteDestination route = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->route_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->route(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.TLSRoute)
}

::google::protobuf::uint8* TLSRoute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.TLSRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .istio.networking.v1alpha3.TLSMatchAttributes match = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->match_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->match(static_cast<int>(i)), deterministic, target);
  }

  // repeated .istio.networking.v1alpha3.RouteDestination route = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->route_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->route(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.TLSRoute)
  return target;
}

size_t TLSRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.TLSRoute)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .istio.networking.v1alpha3.TLSMatchAttributes match = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->match_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->match(static_cast<int>(i)));
    }
  }

  // repeated .istio.networking.v1alpha3.RouteDestination route = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->route_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->route(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLSRoute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.TLSRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const TLSRoute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TLSRoute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.TLSRoute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.TLSRoute)
    MergeFrom(*source);
  }
}

void TLSRoute::MergeFrom(const TLSRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.TLSRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_.MergeFrom(from.match_);
  route_.MergeFrom(from.route_);
}

void TLSRoute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.TLSRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLSRoute::CopyFrom(const TLSRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.TLSRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLSRoute::IsInitialized() const {
  return true;
}

void TLSRoute::Swap(TLSRoute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TLSRoute::InternalSwap(TLSRoute* other) {
  using std::swap;
  match_.InternalSwap(&other->match_);
  route_.InternalSwap(&other->route_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TLSRoute::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TCPRoute::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TCPRoute::kMatchFieldNumber;
const int TCPRoute::kRouteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TCPRoute::TCPRoute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsTCPRoute();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.TCPRoute)
}
TCPRoute::TCPRoute(const TCPRoute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      match_(from.match_),
      route_(from.route_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.TCPRoute)
}

void TCPRoute::SharedCtor() {
  _cached_size_ = 0;
}

TCPRoute::~TCPRoute() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.TCPRoute)
  SharedDtor();
}

void TCPRoute::SharedDtor() {
}

void TCPRoute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCPRoute::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TCPRoute& TCPRoute::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsTCPRoute();
  return *internal_default_instance();
}

TCPRoute* TCPRoute::New(::google::protobuf::Arena* arena) const {
  TCPRoute* n = new TCPRoute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TCPRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.TCPRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_.Clear();
  route_.Clear();
  _internal_metadata_.Clear();
}

bool TCPRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.TCPRoute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .istio.networking.v1alpha3.L4MatchAttributes match = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.networking.v1alpha3.RouteDestination route = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_route()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.TCPRoute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.TCPRoute)
  return false;
#undef DO_
}

void TCPRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.TCPRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .istio.networking.v1alpha3.L4MatchAttributes match = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->match_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->match(static_cast<int>(i)), output);
  }

  // repeated .istio.networking.v1alpha3.RouteDestination route = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->route_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->route(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.TCPRoute)
}

::google::protobuf::uint8* TCPRoute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.TCPRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .istio.networking.v1alpha3.L4MatchAttributes match = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->match_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->match(static_cast<int>(i)), deterministic, target);
  }

  // repeated .istio.networking.v1alpha3.RouteDestination route = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->route_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->route(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.TCPRoute)
  return target;
}

size_t TCPRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.TCPRoute)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .istio.networking.v1alpha3.L4MatchAttributes match = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->match_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->match(static_cast<int>(i)));
    }
  }

  // repeated .istio.networking.v1alpha3.RouteDestination route = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->route_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->route(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCPRoute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.TCPRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const TCPRoute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TCPRoute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.TCPRoute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.TCPRoute)
    MergeFrom(*source);
  }
}

void TCPRoute::MergeFrom(const TCPRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.TCPRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_.MergeFrom(from.match_);
  route_.MergeFrom(from.route_);
}

void TCPRoute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.TCPRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCPRoute::CopyFrom(const TCPRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.TCPRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCPRoute::IsInitialized() const {
  return true;
}

void TCPRoute::Swap(TCPRoute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TCPRoute::InternalSwap(TCPRoute* other) {
  using std::swap;
  match_.InternalSwap(&other->match_);
  route_.InternalSwap(&other->route_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TCPRoute::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

HTTPMatchRequest_HeadersEntry_DoNotUse::HTTPMatchRequest_HeadersEntry_DoNotUse() {}
HTTPMatchRequest_HeadersEntry_DoNotUse::HTTPMatchRequest_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void HTTPMatchRequest_HeadersEntry_DoNotUse::MergeFrom(const HTTPMatchRequest_HeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata HTTPMatchRequest_HeadersEntry_DoNotUse::GetMetadata() const {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[12];
}
void HTTPMatchRequest_HeadersEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

HTTPMatchRequest_SourceLabelsEntry_DoNotUse::HTTPMatchRequest_SourceLabelsEntry_DoNotUse() {}
HTTPMatchRequest_SourceLabelsEntry_DoNotUse::HTTPMatchRequest_SourceLabelsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void HTTPMatchRequest_SourceLabelsEntry_DoNotUse::MergeFrom(const HTTPMatchRequest_SourceLabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata HTTPMatchRequest_SourceLabelsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[13];
}
void HTTPMatchRequest_SourceLabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void HTTPMatchRequest::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_HTTPMatchRequest_default_instance_._instance.get_mutable()->uri_ = const_cast< ::istio::networking::v1alpha3::StringMatch*>(
      ::istio::networking::v1alpha3::StringMatch::internal_default_instance());
  ::istio::networking::v1alpha3::_HTTPMatchRequest_default_instance_._instance.get_mutable()->scheme_ = const_cast< ::istio::networking::v1alpha3::StringMatch*>(
      ::istio::networking::v1alpha3::StringMatch::internal_default_instance());
  ::istio::networking::v1alpha3::_HTTPMatchRequest_default_instance_._instance.get_mutable()->method_ = const_cast< ::istio::networking::v1alpha3::StringMatch*>(
      ::istio::networking::v1alpha3::StringMatch::internal_default_instance());
  ::istio::networking::v1alpha3::_HTTPMatchRequest_default_instance_._instance.get_mutable()->authority_ = const_cast< ::istio::networking::v1alpha3::StringMatch*>(
      ::istio::networking::v1alpha3::StringMatch::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HTTPMatchRequest::kUriFieldNumber;
const int HTTPMatchRequest::kSchemeFieldNumber;
const int HTTPMatchRequest::kMethodFieldNumber;
const int HTTPMatchRequest::kAuthorityFieldNumber;
const int HTTPMatchRequest::kHeadersFieldNumber;
const int HTTPMatchRequest::kPortFieldNumber;
const int HTTPMatchRequest::kSourceLabelsFieldNumber;
const int HTTPMatchRequest::kGatewaysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HTTPMatchRequest::HTTPMatchRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPMatchRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.HTTPMatchRequest)
}
HTTPMatchRequest::HTTPMatchRequest(const HTTPMatchRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      gateways_(from.gateways_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  headers_.MergeFrom(from.headers_);
  source_labels_.MergeFrom(from.source_labels_);
  if (from.has_uri()) {
    uri_ = new ::istio::networking::v1alpha3::StringMatch(*from.uri_);
  } else {
    uri_ = NULL;
  }
  if (from.has_scheme()) {
    scheme_ = new ::istio::networking::v1alpha3::StringMatch(*from.scheme_);
  } else {
    scheme_ = NULL;
  }
  if (from.has_method()) {
    method_ = new ::istio::networking::v1alpha3::StringMatch(*from.method_);
  } else {
    method_ = NULL;
  }
  if (from.has_authority()) {
    authority_ = new ::istio::networking::v1alpha3::StringMatch(*from.authority_);
  } else {
    authority_ = NULL;
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.HTTPMatchRequest)
}

void HTTPMatchRequest::SharedCtor() {
  ::memset(&uri_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&uri_)) + sizeof(port_));
  _cached_size_ = 0;
}

HTTPMatchRequest::~HTTPMatchRequest() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.HTTPMatchRequest)
  SharedDtor();
}

void HTTPMatchRequest::SharedDtor() {
  if (this != internal_default_instance()) delete uri_;
  if (this != internal_default_instance()) delete scheme_;
  if (this != internal_default_instance()) delete method_;
  if (this != internal_default_instance()) delete authority_;
}

void HTTPMatchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HTTPMatchRequest::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HTTPMatchRequest& HTTPMatchRequest::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPMatchRequest();
  return *internal_default_instance();
}

HTTPMatchRequest* HTTPMatchRequest::New(::google::protobuf::Arena* arena) const {
  HTTPMatchRequest* n = new HTTPMatchRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HTTPMatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.HTTPMatchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  source_labels_.Clear();
  gateways_.Clear();
  if (GetArenaNoVirtual() == NULL && uri_ != NULL) {
    delete uri_;
  }
  uri_ = NULL;
  if (GetArenaNoVirtual() == NULL && scheme_ != NULL) {
    delete scheme_;
  }
  scheme_ = NULL;
  if (GetArenaNoVirtual() == NULL && method_ != NULL) {
    delete method_;
  }
  method_ = NULL;
  if (GetArenaNoVirtual() == NULL && authority_ != NULL) {
    delete authority_;
  }
  authority_ = NULL;
  port_ = 0u;
  _internal_metadata_.Clear();
}

bool HTTPMatchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.HTTPMatchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.networking.v1alpha3.StringMatch uri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uri()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.StringMatch scheme = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scheme()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.StringMatch method = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_method()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.StringMatch authority = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_authority()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .istio.networking.v1alpha3.StringMatch> headers = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          HTTPMatchRequest_HeadersEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              HTTPMatchRequest_HeadersEntry_DoNotUse,
              ::std::string, ::istio::networking::v1alpha3::StringMatch,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::istio::networking::v1alpha3::StringMatch > > parser(&headers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.HTTPMatchRequest.HeadersEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> source_labels = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          HTTPMatchRequest_SourceLabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              HTTPMatchRequest_SourceLabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&source_labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.HTTPMatchRequest.SourceLabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.HTTPMatchRequest.SourceLabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string gateways = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_gateways()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateways(this->gateways_size() - 1).data(),
            static_cast<int>(this->gateways(this->gateways_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.HTTPMatchRequest.gateways"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.HTTPMatchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.HTTPMatchRequest)
  return false;
#undef DO_
}

void HTTPMatchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.HTTPMatchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.StringMatch uri = 1;
  if (this->has_uri()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->uri_, output);
  }

  // .istio.networking.v1alpha3.StringMatch scheme = 2;
  if (this->has_scheme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->scheme_, output);
  }

  // .istio.networking.v1alpha3.StringMatch method = 3;
  if (this->has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->method_, output);
  }

  // .istio.networking.v1alpha3.StringMatch authority = 4;
  if (this->has_authority()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->authority_, output);
  }

  // map<string, .istio.networking.v1alpha3.StringMatch> headers = 5;
  if (!this->headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::istio::networking::v1alpha3::StringMatch >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPMatchRequest.HeadersEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->headers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::istio::networking::v1alpha3::StringMatch >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::istio::networking::v1alpha3::StringMatch >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<HTTPMatchRequest_HeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HTTPMatchRequest_HeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::istio::networking::v1alpha3::StringMatch >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it) {
        entry.reset(headers_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // uint32 port = 6;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->port(), output);
  }

  // map<string, string> source_labels = 7;
  if (!this->source_labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPMatchRequest.SourceLabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPMatchRequest.SourceLabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->source_labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->source_labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->source_labels().begin();
          it != this->source_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<HTTPMatchRequest_SourceLabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(source_labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HTTPMatchRequest_SourceLabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->source_labels().begin();
          it != this->source_labels().end(); ++it) {
        entry.reset(source_labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string gateways = 8;
  for (int i = 0, n = this->gateways_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateways(i).data(), static_cast<int>(this->gateways(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.HTTPMatchRequest.gateways");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->gateways(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.HTTPMatchRequest)
}

::google::protobuf::uint8* HTTPMatchRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.HTTPMatchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.StringMatch uri = 1;
  if (this->has_uri()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->uri_, deterministic, target);
  }

  // .istio.networking.v1alpha3.StringMatch scheme = 2;
  if (this->has_scheme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->scheme_, deterministic, target);
  }

  // .istio.networking.v1alpha3.StringMatch method = 3;
  if (this->has_method()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->method_, deterministic, target);
  }

  // .istio.networking.v1alpha3.StringMatch authority = 4;
  if (this->has_authority()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->authority_, deterministic, target);
  }

  // map<string, .istio.networking.v1alpha3.StringMatch> headers = 5;
  if (!this->headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::istio::networking::v1alpha3::StringMatch >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPMatchRequest.HeadersEntry.key");
      }
    };

    if (deterministic &&
        this->headers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::istio::networking::v1alpha3::StringMatch >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::istio::networking::v1alpha3::StringMatch >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<HTTPMatchRequest_HeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HTTPMatchRequest_HeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::istio::networking::v1alpha3::StringMatch >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it) {
        entry.reset(headers_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // uint32 port = 6;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->port(), target);
  }

  // map<string, string> source_labels = 7;
  if (!this->source_labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPMatchRequest.SourceLabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPMatchRequest.SourceLabelsEntry.value");
      }
    };

    if (deterministic &&
        this->source_labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->source_labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->source_labels().begin();
          it != this->source_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<HTTPMatchRequest_SourceLabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(source_labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HTTPMatchRequest_SourceLabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->source_labels().begin();
          it != this->source_labels().end(); ++it) {
        entry.reset(source_labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string gateways = 8;
  for (int i = 0, n = this->gateways_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateways(i).data(), static_cast<int>(this->gateways(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.HTTPMatchRequest.gateways");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->gateways(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.HTTPMatchRequest)
  return target;
}

size_t HTTPMatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.HTTPMatchRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .istio.networking.v1alpha3.StringMatch> headers = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->headers_size());
  {
    ::google::protobuf::scoped_ptr<HTTPMatchRequest_HeadersEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::istio::networking::v1alpha3::StringMatch >::const_iterator
        it = this->headers().begin();
        it != this->headers().end(); ++it) {
      entry.reset(headers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> source_labels = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->source_labels_size());
  {
    ::google::protobuf::scoped_ptr<HTTPMatchRequest_SourceLabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->source_labels().begin();
        it != this->source_labels().end(); ++it) {
      entry.reset(source_labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated string gateways = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->gateways_size());
  for (int i = 0, n = this->gateways_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->gateways(i));
  }

  // .istio.networking.v1alpha3.StringMatch uri = 1;
  if (this->has_uri()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->uri_);
  }

  // .istio.networking.v1alpha3.StringMatch scheme = 2;
  if (this->has_scheme()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scheme_);
  }

  // .istio.networking.v1alpha3.StringMatch method = 3;
  if (this->has_method()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->method_);
  }

  // .istio.networking.v1alpha3.StringMatch authority = 4;
  if (this->has_authority()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->authority_);
  }

  // uint32 port = 6;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HTTPMatchRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.HTTPMatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HTTPMatchRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HTTPMatchRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.HTTPMatchRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.HTTPMatchRequest)
    MergeFrom(*source);
  }
}

void HTTPMatchRequest::MergeFrom(const HTTPMatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.HTTPMatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  source_labels_.MergeFrom(from.source_labels_);
  gateways_.MergeFrom(from.gateways_);
  if (from.has_uri()) {
    mutable_uri()->::istio::networking::v1alpha3::StringMatch::MergeFrom(from.uri());
  }
  if (from.has_scheme()) {
    mutable_scheme()->::istio::networking::v1alpha3::StringMatch::MergeFrom(from.scheme());
  }
  if (from.has_method()) {
    mutable_method()->::istio::networking::v1alpha3::StringMatch::MergeFrom(from.method());
  }
  if (from.has_authority()) {
    mutable_authority()->::istio::networking::v1alpha3::StringMatch::MergeFrom(from.authority());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void HTTPMatchRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.HTTPMatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPMatchRequest::CopyFrom(const HTTPMatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.HTTPMatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPMatchRequest::IsInitialized() const {
  return true;
}

void HTTPMatchRequest::Swap(HTTPMatchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HTTPMatchRequest::InternalSwap(HTTPMatchRequest* other) {
  using std::swap;
  headers_.Swap(&other->headers_);
  source_labels_.Swap(&other->source_labels_);
  gateways_.InternalSwap(&other->gateways_);
  swap(uri_, other->uri_);
  swap(scheme_, other->scheme_);
  swap(method_, other->method_);
  swap(authority_, other->authority_);
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HTTPMatchRequest::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse::HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse() {}
HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse::HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse::MergeFrom(const HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse::GetMetadata() const {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[15];
}
void HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse::HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse() {}
HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse::HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse::MergeFrom(const HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse::GetMetadata() const {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[16];
}
void HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void HTTPRouteDestination::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_HTTPRouteDestination_default_instance_._instance.get_mutable()->destination_ = const_cast< ::istio::networking::v1alpha3::Destination*>(
      ::istio::networking::v1alpha3::Destination::internal_default_instance());
  ::istio::networking::v1alpha3::_HTTPRouteDestination_default_instance_._instance.get_mutable()->headers_ = const_cast< ::istio::networking::v1alpha3::Headers*>(
      ::istio::networking::v1alpha3::Headers::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HTTPRouteDestination::kDestinationFieldNumber;
const int HTTPRouteDestination::kWeightFieldNumber;
const int HTTPRouteDestination::kRemoveResponseHeadersFieldNumber;
const int HTTPRouteDestination::kAppendResponseHeadersFieldNumber;
const int HTTPRouteDestination::kRemoveRequestHeadersFieldNumber;
const int HTTPRouteDestination::kAppendRequestHeadersFieldNumber;
const int HTTPRouteDestination::kHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HTTPRouteDestination::HTTPRouteDestination()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPRouteDestination();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.HTTPRouteDestination)
}
HTTPRouteDestination::HTTPRouteDestination(const HTTPRouteDestination& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      remove_response_headers_(from.remove_response_headers_),
      remove_request_headers_(from.remove_request_headers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  append_response_headers_.MergeFrom(from.append_response_headers_);
  append_request_headers_.MergeFrom(from.append_request_headers_);
  if (from.has_destination()) {
    destination_ = new ::istio::networking::v1alpha3::Destination(*from.destination_);
  } else {
    destination_ = NULL;
  }
  if (from.has_headers()) {
    headers_ = new ::istio::networking::v1alpha3::Headers(*from.headers_);
  } else {
    headers_ = NULL;
  }
  weight_ = from.weight_;
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.HTTPRouteDestination)
}

void HTTPRouteDestination::SharedCtor() {
  ::memset(&destination_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&destination_)) + sizeof(weight_));
  _cached_size_ = 0;
}

HTTPRouteDestination::~HTTPRouteDestination() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.HTTPRouteDestination)
  SharedDtor();
}

void HTTPRouteDestination::SharedDtor() {
  if (this != internal_default_instance()) delete destination_;
  if (this != internal_default_instance()) delete headers_;
}

void HTTPRouteDestination::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HTTPRouteDestination::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HTTPRouteDestination& HTTPRouteDestination::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPRouteDestination();
  return *internal_default_instance();
}

HTTPRouteDestination* HTTPRouteDestination::New(::google::protobuf::Arena* arena) const {
  HTTPRouteDestination* n = new HTTPRouteDestination;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HTTPRouteDestination::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.HTTPRouteDestination)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remove_response_headers_.Clear();
  append_response_headers_.Clear();
  remove_request_headers_.Clear();
  append_request_headers_.Clear();
  if (GetArenaNoVirtual() == NULL && destination_ != NULL) {
    delete destination_;
  }
  destination_ = NULL;
  if (GetArenaNoVirtual() == NULL && headers_ != NULL) {
    delete headers_;
  }
  headers_ = NULL;
  weight_ = 0;
  _internal_metadata_.Clear();
}

bool HTTPRouteDestination::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.HTTPRouteDestination)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.networking.v1alpha3.Destination destination = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 weight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string remove_response_headers = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_remove_response_headers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->remove_response_headers(this->remove_response_headers_size() - 1).data(),
            static_cast<int>(this->remove_response_headers(this->remove_response_headers_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.HTTPRouteDestination.remove_response_headers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> append_response_headers = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&append_response_headers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.HTTPRouteDestination.AppendResponseHeadersEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.HTTPRouteDestination.AppendResponseHeadersEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string remove_request_headers = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_remove_request_headers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->remove_request_headers(this->remove_request_headers_size() - 1).data(),
            static_cast<int>(this->remove_request_headers(this->remove_request_headers_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.HTTPRouteDestination.remove_request_headers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> append_request_headers = 6 [deprecated = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&append_request_headers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.HTTPRouteDestination.AppendRequestHeadersEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.HTTPRouteDestination.AppendRequestHeadersEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.Headers headers = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.HTTPRouteDestination)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.HTTPRouteDestination)
  return false;
#undef DO_
}

void HTTPRouteDestination::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.HTTPRouteDestination)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.Destination destination = 1;
  if (this->has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->destination_, output);
  }

  // int32 weight = 2;
  if (this->weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->weight(), output);
  }

  // repeated string remove_response_headers = 3 [deprecated = true];
  for (int i = 0, n = this->remove_response_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remove_response_headers(i).data(), static_cast<int>(this->remove_response_headers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.HTTPRouteDestination.remove_response_headers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->remove_response_headers(i), output);
  }

  // map<string, string> append_response_headers = 4 [deprecated = true];
  if (!this->append_response_headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPRouteDestination.AppendResponseHeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPRouteDestination.AppendResponseHeadersEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->append_response_headers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->append_response_headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->append_response_headers().begin();
          it != this->append_response_headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(append_response_headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->append_response_headers().begin();
          it != this->append_response_headers().end(); ++it) {
        entry.reset(append_response_headers_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string remove_request_headers = 5 [deprecated = true];
  for (int i = 0, n = this->remove_request_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remove_request_headers(i).data(), static_cast<int>(this->remove_request_headers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.HTTPRouteDestination.remove_request_headers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->remove_request_headers(i), output);
  }

  // map<string, string> append_request_headers = 6 [deprecated = true];
  if (!this->append_request_headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPRouteDestination.AppendRequestHeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPRouteDestination.AppendRequestHeadersEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->append_request_headers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->append_request_headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->append_request_headers().begin();
          it != this->append_request_headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(append_request_headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->append_request_headers().begin();
          it != this->append_request_headers().end(); ++it) {
        entry.reset(append_request_headers_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // .istio.networking.v1alpha3.Headers headers = 7;
  if (this->has_headers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->headers_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.HTTPRouteDestination)
}

::google::protobuf::uint8* HTTPRouteDestination::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.HTTPRouteDestination)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.Destination destination = 1;
  if (this->has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->destination_, deterministic, target);
  }

  // int32 weight = 2;
  if (this->weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->weight(), target);
  }

  // repeated string remove_response_headers = 3 [deprecated = true];
  for (int i = 0, n = this->remove_response_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remove_response_headers(i).data(), static_cast<int>(this->remove_response_headers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.HTTPRouteDestination.remove_response_headers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->remove_response_headers(i), target);
  }

  // map<string, string> append_response_headers = 4 [deprecated = true];
  if (!this->append_response_headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPRouteDestination.AppendResponseHeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPRouteDestination.AppendResponseHeadersEntry.value");
      }
    };

    if (deterministic &&
        this->append_response_headers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->append_response_headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->append_response_headers().begin();
          it != this->append_response_headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(append_response_headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->append_response_headers().begin();
          it != this->append_response_headers().end(); ++it) {
        entry.reset(append_response_headers_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string remove_request_headers = 5 [deprecated = true];
  for (int i = 0, n = this->remove_request_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remove_request_headers(i).data(), static_cast<int>(this->remove_request_headers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.HTTPRouteDestination.remove_request_headers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->remove_request_headers(i), target);
  }

  // map<string, string> append_request_headers = 6 [deprecated = true];
  if (!this->append_request_headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPRouteDestination.AppendRequestHeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.HTTPRouteDestination.AppendRequestHeadersEntry.value");
      }
    };

    if (deterministic &&
        this->append_request_headers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->append_request_headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->append_request_headers().begin();
          it != this->append_request_headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(append_request_headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->append_request_headers().begin();
          it != this->append_request_headers().end(); ++it) {
        entry.reset(append_request_headers_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // .istio.networking.v1alpha3.Headers headers = 7;
  if (this->has_headers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->headers_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.HTTPRouteDestination)
  return target;
}

size_t HTTPRouteDestination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.HTTPRouteDestination)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string remove_response_headers = 3 [deprecated = true];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->remove_response_headers_size());
  for (int i = 0, n = this->remove_response_headers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->remove_response_headers(i));
  }

  // map<string, string> append_response_headers = 4 [deprecated = true];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->append_response_headers_size());
  {
    ::google::protobuf::scoped_ptr<HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->append_response_headers().begin();
        it != this->append_response_headers().end(); ++it) {
      entry.reset(append_response_headers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated string remove_request_headers = 5 [deprecated = true];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->remove_request_headers_size());
  for (int i = 0, n = this->remove_request_headers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->remove_request_headers(i));
  }

  // map<string, string> append_request_headers = 6 [deprecated = true];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->append_request_headers_size());
  {
    ::google::protobuf::scoped_ptr<HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->append_request_headers().begin();
        it != this->append_request_headers().end(); ++it) {
      entry.reset(append_request_headers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .istio.networking.v1alpha3.Destination destination = 1;
  if (this->has_destination()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destination_);
  }

  // .istio.networking.v1alpha3.Headers headers = 7;
  if (this->has_headers()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->headers_);
  }

  // int32 weight = 2;
  if (this->weight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->weight());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HTTPRouteDestination::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.HTTPRouteDestination)
  GOOGLE_DCHECK_NE(&from, this);
  const HTTPRouteDestination* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HTTPRouteDestination>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.HTTPRouteDestination)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.HTTPRouteDestination)
    MergeFrom(*source);
  }
}

void HTTPRouteDestination::MergeFrom(const HTTPRouteDestination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.HTTPRouteDestination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  remove_response_headers_.MergeFrom(from.remove_response_headers_);
  append_response_headers_.MergeFrom(from.append_response_headers_);
  remove_request_headers_.MergeFrom(from.remove_request_headers_);
  append_request_headers_.MergeFrom(from.append_request_headers_);
  if (from.has_destination()) {
    mutable_destination()->::istio::networking::v1alpha3::Destination::MergeFrom(from.destination());
  }
  if (from.has_headers()) {
    mutable_headers()->::istio::networking::v1alpha3::Headers::MergeFrom(from.headers());
  }
  if (from.weight() != 0) {
    set_weight(from.weight());
  }
}

void HTTPRouteDestination::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.HTTPRouteDestination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPRouteDestination::CopyFrom(const HTTPRouteDestination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.HTTPRouteDestination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPRouteDestination::IsInitialized() const {
  return true;
}

void HTTPRouteDestination::Swap(HTTPRouteDestination* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HTTPRouteDestination::InternalSwap(HTTPRouteDestination* other) {
  using std::swap;
  remove_response_headers_.InternalSwap(&other->remove_response_headers_);
  append_response_headers_.Swap(&other->append_response_headers_);
  remove_request_headers_.InternalSwap(&other->remove_request_headers_);
  append_request_headers_.Swap(&other->append_request_headers_);
  swap(destination_, other->destination_);
  swap(headers_, other->headers_);
  swap(weight_, other->weight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HTTPRouteDestination::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RouteDestination::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_RouteDestination_default_instance_._instance.get_mutable()->destination_ = const_cast< ::istio::networking::v1alpha3::Destination*>(
      ::istio::networking::v1alpha3::Destination::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteDestination::kDestinationFieldNumber;
const int RouteDestination::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteDestination::RouteDestination()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsRouteDestination();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.RouteDestination)
}
RouteDestination::RouteDestination(const RouteDestination& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_destination()) {
    destination_ = new ::istio::networking::v1alpha3::Destination(*from.destination_);
  } else {
    destination_ = NULL;
  }
  weight_ = from.weight_;
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.RouteDestination)
}

void RouteDestination::SharedCtor() {
  ::memset(&destination_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&destination_)) + sizeof(weight_));
  _cached_size_ = 0;
}

RouteDestination::~RouteDestination() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.RouteDestination)
  SharedDtor();
}

void RouteDestination::SharedDtor() {
  if (this != internal_default_instance()) delete destination_;
}

void RouteDestination::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteDestination::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RouteDestination& RouteDestination::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsRouteDestination();
  return *internal_default_instance();
}

RouteDestination* RouteDestination::New(::google::protobuf::Arena* arena) const {
  RouteDestination* n = new RouteDestination;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteDestination::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.RouteDestination)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && destination_ != NULL) {
    delete destination_;
  }
  destination_ = NULL;
  weight_ = 0;
  _internal_metadata_.Clear();
}

bool RouteDestination::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.RouteDestination)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.networking.v1alpha3.Destination destination = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 weight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.RouteDestination)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.RouteDestination)
  return false;
#undef DO_
}

void RouteDestination::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.RouteDestination)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.Destination destination = 1;
  if (this->has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->destination_, output);
  }

  // int32 weight = 2;
  if (this->weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->weight(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.RouteDestination)
}

::google::protobuf::uint8* RouteDestination::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.RouteDestination)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.Destination destination = 1;
  if (this->has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->destination_, deterministic, target);
  }

  // int32 weight = 2;
  if (this->weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->weight(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.RouteDestination)
  return target;
}

size_t RouteDestination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.RouteDestination)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .istio.networking.v1alpha3.Destination destination = 1;
  if (this->has_destination()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->destination_);
  }

  // int32 weight = 2;
  if (this->weight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->weight());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteDestination::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.RouteDestination)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteDestination* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteDestination>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.RouteDestination)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.RouteDestination)
    MergeFrom(*source);
  }
}

void RouteDestination::MergeFrom(const RouteDestination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.RouteDestination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_destination()) {
    mutable_destination()->::istio::networking::v1alpha3::Destination::MergeFrom(from.destination());
  }
  if (from.weight() != 0) {
    set_weight(from.weight());
  }
}

void RouteDestination::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.RouteDestination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteDestination::CopyFrom(const RouteDestination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.RouteDestination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteDestination::IsInitialized() const {
  return true;
}

void RouteDestination::Swap(RouteDestination* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteDestination::InternalSwap(RouteDestination* other) {
  using std::swap;
  swap(destination_, other->destination_);
  swap(weight_, other->weight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteDestination::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

L4MatchAttributes_SourceLabelsEntry_DoNotUse::L4MatchAttributes_SourceLabelsEntry_DoNotUse() {}
L4MatchAttributes_SourceLabelsEntry_DoNotUse::L4MatchAttributes_SourceLabelsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void L4MatchAttributes_SourceLabelsEntry_DoNotUse::MergeFrom(const L4MatchAttributes_SourceLabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata L4MatchAttributes_SourceLabelsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[19];
}
void L4MatchAttributes_SourceLabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void L4MatchAttributes::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int L4MatchAttributes::kDestinationSubnetsFieldNumber;
const int L4MatchAttributes::kPortFieldNumber;
const int L4MatchAttributes::kSourceSubnetFieldNumber;
const int L4MatchAttributes::kSourceLabelsFieldNumber;
const int L4MatchAttributes::kGatewaysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

L4MatchAttributes::L4MatchAttributes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsL4MatchAttributes();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.L4MatchAttributes)
}
L4MatchAttributes::L4MatchAttributes(const L4MatchAttributes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      destination_subnets_(from.destination_subnets_),
      gateways_(from.gateways_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_labels_.MergeFrom(from.source_labels_);
  source_subnet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source_subnet().size() > 0) {
    source_subnet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_subnet_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.L4MatchAttributes)
}

void L4MatchAttributes::SharedCtor() {
  source_subnet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  _cached_size_ = 0;
}

L4MatchAttributes::~L4MatchAttributes() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.L4MatchAttributes)
  SharedDtor();
}

void L4MatchAttributes::SharedDtor() {
  source_subnet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void L4MatchAttributes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L4MatchAttributes::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const L4MatchAttributes& L4MatchAttributes::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsL4MatchAttributes();
  return *internal_default_instance();
}

L4MatchAttributes* L4MatchAttributes::New(::google::protobuf::Arena* arena) const {
  L4MatchAttributes* n = new L4MatchAttributes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void L4MatchAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.L4MatchAttributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destination_subnets_.Clear();
  source_labels_.Clear();
  gateways_.Clear();
  source_subnet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  _internal_metadata_.Clear();
}

bool L4MatchAttributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.L4MatchAttributes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string destination_subnets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_destination_subnets()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destination_subnets(this->destination_subnets_size() - 1).data(),
            static_cast<int>(this->destination_subnets(this->destination_subnets_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.L4MatchAttributes.destination_subnets"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_subnet = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_subnet()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_subnet().data(), static_cast<int>(this->source_subnet().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.L4MatchAttributes.source_subnet"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> source_labels = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          L4MatchAttributes_SourceLabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              L4MatchAttributes_SourceLabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&source_labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.L4MatchAttributes.SourceLabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.L4MatchAttributes.SourceLabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string gateways = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_gateways()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateways(this->gateways_size() - 1).data(),
            static_cast<int>(this->gateways(this->gateways_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.L4MatchAttributes.gateways"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.L4MatchAttributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.L4MatchAttributes)
  return false;
#undef DO_
}

void L4MatchAttributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.L4MatchAttributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string destination_subnets = 1;
  for (int i = 0, n = this->destination_subnets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination_subnets(i).data(), static_cast<int>(this->destination_subnets(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.L4MatchAttributes.destination_subnets");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->destination_subnets(i), output);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // string source_subnet = 3;
  if (this->source_subnet().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_subnet().data(), static_cast<int>(this->source_subnet().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.L4MatchAttributes.source_subnet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->source_subnet(), output);
  }

  // map<string, string> source_labels = 4;
  if (!this->source_labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.L4MatchAttributes.SourceLabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.L4MatchAttributes.SourceLabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->source_labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->source_labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->source_labels().begin();
          it != this->source_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<L4MatchAttributes_SourceLabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(source_labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<L4MatchAttributes_SourceLabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->source_labels().begin();
          it != this->source_labels().end(); ++it) {
        entry.reset(source_labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string gateways = 5;
  for (int i = 0, n = this->gateways_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateways(i).data(), static_cast<int>(this->gateways(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.L4MatchAttributes.gateways");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->gateways(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.L4MatchAttributes)
}

::google::protobuf::uint8* L4MatchAttributes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.L4MatchAttributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string destination_subnets = 1;
  for (int i = 0, n = this->destination_subnets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination_subnets(i).data(), static_cast<int>(this->destination_subnets(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.L4MatchAttributes.destination_subnets");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->destination_subnets(i), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // string source_subnet = 3;
  if (this->source_subnet().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_subnet().data(), static_cast<int>(this->source_subnet().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.L4MatchAttributes.source_subnet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->source_subnet(), target);
  }

  // map<string, string> source_labels = 4;
  if (!this->source_labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.L4MatchAttributes.SourceLabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.L4MatchAttributes.SourceLabelsEntry.value");
      }
    };

    if (deterministic &&
        this->source_labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->source_labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->source_labels().begin();
          it != this->source_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<L4MatchAttributes_SourceLabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(source_labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<L4MatchAttributes_SourceLabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->source_labels().begin();
          it != this->source_labels().end(); ++it) {
        entry.reset(source_labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string gateways = 5;
  for (int i = 0, n = this->gateways_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateways(i).data(), static_cast<int>(this->gateways(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.L4MatchAttributes.gateways");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->gateways(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.L4MatchAttributes)
  return target;
}

size_t L4MatchAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.L4MatchAttributes)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string destination_subnets = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->destination_subnets_size());
  for (int i = 0, n = this->destination_subnets_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->destination_subnets(i));
  }

  // map<string, string> source_labels = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->source_labels_size());
  {
    ::google::protobuf::scoped_ptr<L4MatchAttributes_SourceLabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->source_labels().begin();
        it != this->source_labels().end(); ++it) {
      entry.reset(source_labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated string gateways = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->gateways_size());
  for (int i = 0, n = this->gateways_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->gateways(i));
  }

  // string source_subnet = 3;
  if (this->source_subnet().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_subnet());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L4MatchAttributes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.L4MatchAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  const L4MatchAttributes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const L4MatchAttributes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.L4MatchAttributes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.L4MatchAttributes)
    MergeFrom(*source);
  }
}

void L4MatchAttributes::MergeFrom(const L4MatchAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.L4MatchAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  destination_subnets_.MergeFrom(from.destination_subnets_);
  source_labels_.MergeFrom(from.source_labels_);
  gateways_.MergeFrom(from.gateways_);
  if (from.source_subnet().size() > 0) {

    source_subnet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_subnet_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void L4MatchAttributes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.L4MatchAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L4MatchAttributes::CopyFrom(const L4MatchAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.L4MatchAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L4MatchAttributes::IsInitialized() const {
  return true;
}

void L4MatchAttributes::Swap(L4MatchAttributes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void L4MatchAttributes::InternalSwap(L4MatchAttributes* other) {
  using std::swap;
  destination_subnets_.InternalSwap(&other->destination_subnets_);
  source_labels_.Swap(&other->source_labels_);
  gateways_.InternalSwap(&other->gateways_);
  source_subnet_.Swap(&other->source_subnet_);
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata L4MatchAttributes::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

TLSMatchAttributes_SourceLabelsEntry_DoNotUse::TLSMatchAttributes_SourceLabelsEntry_DoNotUse() {}
TLSMatchAttributes_SourceLabelsEntry_DoNotUse::TLSMatchAttributes_SourceLabelsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TLSMatchAttributes_SourceLabelsEntry_DoNotUse::MergeFrom(const TLSMatchAttributes_SourceLabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TLSMatchAttributes_SourceLabelsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[21];
}
void TLSMatchAttributes_SourceLabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void TLSMatchAttributes::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TLSMatchAttributes::kSniHostsFieldNumber;
const int TLSMatchAttributes::kDestinationSubnetsFieldNumber;
const int TLSMatchAttributes::kPortFieldNumber;
const int TLSMatchAttributes::kSourceSubnetFieldNumber;
const int TLSMatchAttributes::kSourceLabelsFieldNumber;
const int TLSMatchAttributes::kGatewaysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TLSMatchAttributes::TLSMatchAttributes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsTLSMatchAttributes();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.TLSMatchAttributes)
}
TLSMatchAttributes::TLSMatchAttributes(const TLSMatchAttributes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sni_hosts_(from.sni_hosts_),
      destination_subnets_(from.destination_subnets_),
      gateways_(from.gateways_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_labels_.MergeFrom(from.source_labels_);
  source_subnet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source_subnet().size() > 0) {
    source_subnet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_subnet_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.TLSMatchAttributes)
}

void TLSMatchAttributes::SharedCtor() {
  source_subnet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  _cached_size_ = 0;
}

TLSMatchAttributes::~TLSMatchAttributes() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.TLSMatchAttributes)
  SharedDtor();
}

void TLSMatchAttributes::SharedDtor() {
  source_subnet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TLSMatchAttributes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLSMatchAttributes::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TLSMatchAttributes& TLSMatchAttributes::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsTLSMatchAttributes();
  return *internal_default_instance();
}

TLSMatchAttributes* TLSMatchAttributes::New(::google::protobuf::Arena* arena) const {
  TLSMatchAttributes* n = new TLSMatchAttributes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TLSMatchAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.TLSMatchAttributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sni_hosts_.Clear();
  destination_subnets_.Clear();
  source_labels_.Clear();
  gateways_.Clear();
  source_subnet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  _internal_metadata_.Clear();
}

bool TLSMatchAttributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.TLSMatchAttributes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string sni_hosts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sni_hosts()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sni_hosts(this->sni_hosts_size() - 1).data(),
            static_cast<int>(this->sni_hosts(this->sni_hosts_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.TLSMatchAttributes.sni_hosts"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string destination_subnets = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_destination_subnets()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destination_subnets(this->destination_subnets_size() - 1).data(),
            static_cast<int>(this->destination_subnets(this->destination_subnets_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.TLSMatchAttributes.destination_subnets"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_subnet = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_subnet()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_subnet().data(), static_cast<int>(this->source_subnet().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.TLSMatchAttributes.source_subnet"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> source_labels = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          TLSMatchAttributes_SourceLabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TLSMatchAttributes_SourceLabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&source_labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.TLSMatchAttributes.SourceLabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.TLSMatchAttributes.SourceLabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string gateways = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_gateways()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateways(this->gateways_size() - 1).data(),
            static_cast<int>(this->gateways(this->gateways_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.TLSMatchAttributes.gateways"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.TLSMatchAttributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.TLSMatchAttributes)
  return false;
#undef DO_
}

void TLSMatchAttributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.TLSMatchAttributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string sni_hosts = 1;
  for (int i = 0, n = this->sni_hosts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sni_hosts(i).data(), static_cast<int>(this->sni_hosts(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.TLSMatchAttributes.sni_hosts");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sni_hosts(i), output);
  }

  // repeated string destination_subnets = 2;
  for (int i = 0, n = this->destination_subnets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination_subnets(i).data(), static_cast<int>(this->destination_subnets(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.TLSMatchAttributes.destination_subnets");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->destination_subnets(i), output);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // string source_subnet = 4;
  if (this->source_subnet().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_subnet().data(), static_cast<int>(this->source_subnet().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.TLSMatchAttributes.source_subnet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->source_subnet(), output);
  }

  // map<string, string> source_labels = 5;
  if (!this->source_labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.TLSMatchAttributes.SourceLabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.TLSMatchAttributes.SourceLabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->source_labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->source_labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->source_labels().begin();
          it != this->source_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<TLSMatchAttributes_SourceLabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(source_labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TLSMatchAttributes_SourceLabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->source_labels().begin();
          it != this->source_labels().end(); ++it) {
        entry.reset(source_labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string gateways = 6;
  for (int i = 0, n = this->gateways_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateways(i).data(), static_cast<int>(this->gateways(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.TLSMatchAttributes.gateways");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->gateways(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.TLSMatchAttributes)
}

::google::protobuf::uint8* TLSMatchAttributes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.TLSMatchAttributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string sni_hosts = 1;
  for (int i = 0, n = this->sni_hosts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sni_hosts(i).data(), static_cast<int>(this->sni_hosts(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.TLSMatchAttributes.sni_hosts");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->sni_hosts(i), target);
  }

  // repeated string destination_subnets = 2;
  for (int i = 0, n = this->destination_subnets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination_subnets(i).data(), static_cast<int>(this->destination_subnets(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.TLSMatchAttributes.destination_subnets");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->destination_subnets(i), target);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // string source_subnet = 4;
  if (this->source_subnet().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_subnet().data(), static_cast<int>(this->source_subnet().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.TLSMatchAttributes.source_subnet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->source_subnet(), target);
  }

  // map<string, string> source_labels = 5;
  if (!this->source_labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.TLSMatchAttributes.SourceLabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.TLSMatchAttributes.SourceLabelsEntry.value");
      }
    };

    if (deterministic &&
        this->source_labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->source_labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->source_labels().begin();
          it != this->source_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<TLSMatchAttributes_SourceLabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(source_labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TLSMatchAttributes_SourceLabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->source_labels().begin();
          it != this->source_labels().end(); ++it) {
        entry.reset(source_labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string gateways = 6;
  for (int i = 0, n = this->gateways_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateways(i).data(), static_cast<int>(this->gateways(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.TLSMatchAttributes.gateways");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->gateways(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.TLSMatchAttributes)
  return target;
}

size_t TLSMatchAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.TLSMatchAttributes)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string sni_hosts = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sni_hosts_size());
  for (int i = 0, n = this->sni_hosts_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sni_hosts(i));
  }

  // repeated string destination_subnets = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->destination_subnets_size());
  for (int i = 0, n = this->destination_subnets_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->destination_subnets(i));
  }

  // map<string, string> source_labels = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->source_labels_size());
  {
    ::google::protobuf::scoped_ptr<TLSMatchAttributes_SourceLabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->source_labels().begin();
        it != this->source_labels().end(); ++it) {
      entry.reset(source_labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated string gateways = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->gateways_size());
  for (int i = 0, n = this->gateways_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->gateways(i));
  }

  // string source_subnet = 4;
  if (this->source_subnet().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_subnet());
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLSMatchAttributes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.TLSMatchAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  const TLSMatchAttributes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TLSMatchAttributes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.TLSMatchAttributes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.TLSMatchAttributes)
    MergeFrom(*source);
  }
}

void TLSMatchAttributes::MergeFrom(const TLSMatchAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.TLSMatchAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sni_hosts_.MergeFrom(from.sni_hosts_);
  destination_subnets_.MergeFrom(from.destination_subnets_);
  source_labels_.MergeFrom(from.source_labels_);
  gateways_.MergeFrom(from.gateways_);
  if (from.source_subnet().size() > 0) {

    source_subnet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_subnet_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void TLSMatchAttributes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.TLSMatchAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLSMatchAttributes::CopyFrom(const TLSMatchAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.TLSMatchAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLSMatchAttributes::IsInitialized() const {
  return true;
}

void TLSMatchAttributes::Swap(TLSMatchAttributes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TLSMatchAttributes::InternalSwap(TLSMatchAttributes* other) {
  using std::swap;
  sni_hosts_.InternalSwap(&other->sni_hosts_);
  destination_subnets_.InternalSwap(&other->destination_subnets_);
  source_labels_.Swap(&other->source_labels_);
  gateways_.InternalSwap(&other->gateways_);
  source_subnet_.Swap(&other->source_subnet_);
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TLSMatchAttributes::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HTTPRedirect::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HTTPRedirect::kUriFieldNumber;
const int HTTPRedirect::kAuthorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HTTPRedirect::HTTPRedirect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPRedirect();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.HTTPRedirect)
}
HTTPRedirect::HTTPRedirect(const HTTPRedirect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uri().size() > 0) {
    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  authority_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.authority().size() > 0) {
    authority_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authority_);
  }
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.HTTPRedirect)
}

void HTTPRedirect::SharedCtor() {
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authority_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

HTTPRedirect::~HTTPRedirect() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.HTTPRedirect)
  SharedDtor();
}

void HTTPRedirect::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authority_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HTTPRedirect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HTTPRedirect::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HTTPRedirect& HTTPRedirect::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPRedirect();
  return *internal_default_instance();
}

HTTPRedirect* HTTPRedirect::New(::google::protobuf::Arena* arena) const {
  HTTPRedirect* n = new HTTPRedirect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HTTPRedirect::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.HTTPRedirect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authority_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool HTTPRedirect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.HTTPRedirect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.HTTPRedirect.uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string authority = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authority()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->authority().data(), static_cast<int>(this->authority().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.HTTPRedirect.authority"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.HTTPRedirect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.HTTPRedirect)
  return false;
#undef DO_
}

void HTTPRedirect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.HTTPRedirect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.HTTPRedirect.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // string authority = 2;
  if (this->authority().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->authority().data(), static_cast<int>(this->authority().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.HTTPRedirect.authority");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->authority(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.HTTPRedirect)
}

::google::protobuf::uint8* HTTPRedirect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.HTTPRedirect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.HTTPRedirect.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // string authority = 2;
  if (this->authority().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->authority().data(), static_cast<int>(this->authority().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.HTTPRedirect.authority");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->authority(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.HTTPRedirect)
  return target;
}

size_t HTTPRedirect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.HTTPRedirect)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string uri = 1;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }

  // string authority = 2;
  if (this->authority().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->authority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HTTPRedirect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.HTTPRedirect)
  GOOGLE_DCHECK_NE(&from, this);
  const HTTPRedirect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HTTPRedirect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.HTTPRedirect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.HTTPRedirect)
    MergeFrom(*source);
  }
}

void HTTPRedirect::MergeFrom(const HTTPRedirect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.HTTPRedirect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uri().size() > 0) {

    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  if (from.authority().size() > 0) {

    authority_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authority_);
  }
}

void HTTPRedirect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.HTTPRedirect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPRedirect::CopyFrom(const HTTPRedirect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.HTTPRedirect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPRedirect::IsInitialized() const {
  return true;
}

void HTTPRedirect::Swap(HTTPRedirect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HTTPRedirect::InternalSwap(HTTPRedirect* other) {
  using std::swap;
  uri_.Swap(&other->uri_);
  authority_.Swap(&other->authority_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HTTPRedirect::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HTTPRewrite::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HTTPRewrite::kUriFieldNumber;
const int HTTPRewrite::kAuthorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HTTPRewrite::HTTPRewrite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPRewrite();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.HTTPRewrite)
}
HTTPRewrite::HTTPRewrite(const HTTPRewrite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uri().size() > 0) {
    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  authority_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.authority().size() > 0) {
    authority_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authority_);
  }
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.HTTPRewrite)
}

void HTTPRewrite::SharedCtor() {
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authority_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

HTTPRewrite::~HTTPRewrite() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.HTTPRewrite)
  SharedDtor();
}

void HTTPRewrite::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authority_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HTTPRewrite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HTTPRewrite::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HTTPRewrite& HTTPRewrite::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPRewrite();
  return *internal_default_instance();
}

HTTPRewrite* HTTPRewrite::New(::google::protobuf::Arena* arena) const {
  HTTPRewrite* n = new HTTPRewrite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HTTPRewrite::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.HTTPRewrite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authority_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool HTTPRewrite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.HTTPRewrite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.HTTPRewrite.uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string authority = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authority()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->authority().data(), static_cast<int>(this->authority().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.HTTPRewrite.authority"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.HTTPRewrite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.HTTPRewrite)
  return false;
#undef DO_
}

void HTTPRewrite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.HTTPRewrite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.HTTPRewrite.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // string authority = 2;
  if (this->authority().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->authority().data(), static_cast<int>(this->authority().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.HTTPRewrite.authority");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->authority(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.HTTPRewrite)
}

::google::protobuf::uint8* HTTPRewrite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.HTTPRewrite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.HTTPRewrite.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // string authority = 2;
  if (this->authority().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->authority().data(), static_cast<int>(this->authority().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.HTTPRewrite.authority");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->authority(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.HTTPRewrite)
  return target;
}

size_t HTTPRewrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.HTTPRewrite)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string uri = 1;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }

  // string authority = 2;
  if (this->authority().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->authority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HTTPRewrite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.HTTPRewrite)
  GOOGLE_DCHECK_NE(&from, this);
  const HTTPRewrite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HTTPRewrite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.HTTPRewrite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.HTTPRewrite)
    MergeFrom(*source);
  }
}

void HTTPRewrite::MergeFrom(const HTTPRewrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.HTTPRewrite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uri().size() > 0) {

    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  if (from.authority().size() > 0) {

    authority_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authority_);
  }
}

void HTTPRewrite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.HTTPRewrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPRewrite::CopyFrom(const HTTPRewrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.HTTPRewrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPRewrite::IsInitialized() const {
  return true;
}

void HTTPRewrite::Swap(HTTPRewrite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HTTPRewrite::InternalSwap(HTTPRewrite* other) {
  using std::swap;
  uri_.Swap(&other->uri_);
  authority_.Swap(&other->authority_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HTTPRewrite::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StringMatch::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_StringMatch_default_instance_.exact_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::istio::networking::v1alpha3::_StringMatch_default_instance_.prefix_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::istio::networking::v1alpha3::_StringMatch_default_instance_.regex_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringMatch::kExactFieldNumber;
const int StringMatch::kPrefixFieldNumber;
const int StringMatch::kRegexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringMatch::StringMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsStringMatch();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.StringMatch)
}
StringMatch::StringMatch(const StringMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_match_type();
  switch (from.match_type_case()) {
    case kExact: {
      set_exact(from.exact());
      break;
    }
    case kPrefix: {
      set_prefix(from.prefix());
      break;
    }
    case kRegex: {
      set_regex(from.regex());
      break;
    }
    case MATCH_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.StringMatch)
}

void StringMatch::SharedCtor() {
  clear_has_match_type();
  _cached_size_ = 0;
}

StringMatch::~StringMatch() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.StringMatch)
  SharedDtor();
}

void StringMatch::SharedDtor() {
  if (has_match_type()) {
    clear_match_type();
  }
}

void StringMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringMatch::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StringMatch& StringMatch::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsStringMatch();
  return *internal_default_instance();
}

StringMatch* StringMatch::New(::google::protobuf::Arena* arena) const {
  StringMatch* n = new StringMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StringMatch::clear_match_type() {
// @@protoc_insertion_point(one_of_clear_start:istio.networking.v1alpha3.StringMatch)
  switch (match_type_case()) {
    case kExact: {
      match_type_.exact_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kPrefix: {
      match_type_.prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRegex: {
      match_type_.regex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case MATCH_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MATCH_TYPE_NOT_SET;
}


void StringMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.StringMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_match_type();
  _internal_metadata_.Clear();
}

bool StringMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.StringMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string exact = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exact()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exact().data(), static_cast<int>(this->exact().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.StringMatch.exact"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prefix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prefix().data(), static_cast<int>(this->prefix().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.StringMatch.prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string regex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->regex().data(), static_cast<int>(this->regex().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.StringMatch.regex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.StringMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.StringMatch)
  return false;
#undef DO_
}

void StringMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.StringMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string exact = 1;
  if (has_exact()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exact().data(), static_cast<int>(this->exact().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.StringMatch.exact");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->exact(), output);
  }

  // string prefix = 2;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.StringMatch.prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->prefix(), output);
  }

  // string regex = 3;
  if (has_regex()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->regex().data(), static_cast<int>(this->regex().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.StringMatch.regex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->regex(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.StringMatch)
}

::google::protobuf::uint8* StringMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.StringMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string exact = 1;
  if (has_exact()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exact().data(), static_cast<int>(this->exact().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.StringMatch.exact");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->exact(), target);
  }

  // string prefix = 2;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.StringMatch.prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->prefix(), target);
  }

  // string regex = 3;
  if (has_regex()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->regex().data(), static_cast<int>(this->regex().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.StringMatch.regex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->regex(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.StringMatch)
  return target;
}

size_t StringMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.StringMatch)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (match_type_case()) {
    // string exact = 1;
    case kExact: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exact());
      break;
    }
    // string prefix = 2;
    case kPrefix: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefix());
      break;
    }
    // string regex = 3;
    case kRegex: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regex());
      break;
    }
    case MATCH_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.StringMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const StringMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StringMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.StringMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.StringMatch)
    MergeFrom(*source);
  }
}

void StringMatch::MergeFrom(const StringMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.StringMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.match_type_case()) {
    case kExact: {
      set_exact(from.exact());
      break;
    }
    case kPrefix: {
      set_prefix(from.prefix());
      break;
    }
    case kRegex: {
      set_regex(from.regex());
      break;
    }
    case MATCH_TYPE_NOT_SET: {
      break;
    }
  }
}

void StringMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.StringMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringMatch::CopyFrom(const StringMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.StringMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringMatch::IsInitialized() const {
  return true;
}

void StringMatch::Swap(StringMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringMatch::InternalSwap(StringMatch* other) {
  using std::swap;
  swap(match_type_, other->match_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StringMatch::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HTTPRetry::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_HTTPRetry_default_instance_._instance.get_mutable()->per_try_timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void HTTPRetry::clear_per_try_timeout() {
  if (GetArenaNoVirtual() == NULL && per_try_timeout_ != NULL) {
    delete per_try_timeout_;
  }
  per_try_timeout_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HTTPRetry::kAttemptsFieldNumber;
const int HTTPRetry::kPerTryTimeoutFieldNumber;
const int HTTPRetry::kRetryOnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HTTPRetry::HTTPRetry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPRetry();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.HTTPRetry)
}
HTTPRetry::HTTPRetry(const HTTPRetry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retry_on_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.retry_on().size() > 0) {
    retry_on_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.retry_on_);
  }
  if (from.has_per_try_timeout()) {
    per_try_timeout_ = new ::google::protobuf::Duration(*from.per_try_timeout_);
  } else {
    per_try_timeout_ = NULL;
  }
  attempts_ = from.attempts_;
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.HTTPRetry)
}

void HTTPRetry::SharedCtor() {
  retry_on_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&per_try_timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attempts_) -
      reinterpret_cast<char*>(&per_try_timeout_)) + sizeof(attempts_));
  _cached_size_ = 0;
}

HTTPRetry::~HTTPRetry() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.HTTPRetry)
  SharedDtor();
}

void HTTPRetry::SharedDtor() {
  retry_on_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete per_try_timeout_;
}

void HTTPRetry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HTTPRetry::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HTTPRetry& HTTPRetry::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPRetry();
  return *internal_default_instance();
}

HTTPRetry* HTTPRetry::New(::google::protobuf::Arena* arena) const {
  HTTPRetry* n = new HTTPRetry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HTTPRetry::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.HTTPRetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retry_on_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && per_try_timeout_ != NULL) {
    delete per_try_timeout_;
  }
  per_try_timeout_ = NULL;
  attempts_ = 0;
  _internal_metadata_.Clear();
}

bool HTTPRetry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.HTTPRetry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 attempts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attempts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration per_try_timeout = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_per_try_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string retry_on = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retry_on()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->retry_on().data(), static_cast<int>(this->retry_on().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.HTTPRetry.retry_on"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.HTTPRetry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.HTTPRetry)
  return false;
#undef DO_
}

void HTTPRetry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.HTTPRetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 attempts = 1;
  if (this->attempts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attempts(), output);
  }

  // .google.protobuf.Duration per_try_timeout = 2;
  if (this->has_per_try_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->per_try_timeout_, output);
  }

  // string retry_on = 3;
  if (this->retry_on().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->retry_on().data(), static_cast<int>(this->retry_on().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.HTTPRetry.retry_on");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->retry_on(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.HTTPRetry)
}

::google::protobuf::uint8* HTTPRetry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.HTTPRetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 attempts = 1;
  if (this->attempts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attempts(), target);
  }

  // .google.protobuf.Duration per_try_timeout = 2;
  if (this->has_per_try_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->per_try_timeout_, deterministic, target);
  }

  // string retry_on = 3;
  if (this->retry_on().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->retry_on().data(), static_cast<int>(this->retry_on().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.HTTPRetry.retry_on");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->retry_on(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.HTTPRetry)
  return target;
}

size_t HTTPRetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.HTTPRetry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string retry_on = 3;
  if (this->retry_on().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->retry_on());
  }

  // .google.protobuf.Duration per_try_timeout = 2;
  if (this->has_per_try_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->per_try_timeout_);
  }

  // int32 attempts = 1;
  if (this->attempts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attempts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HTTPRetry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.HTTPRetry)
  GOOGLE_DCHECK_NE(&from, this);
  const HTTPRetry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HTTPRetry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.HTTPRetry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.HTTPRetry)
    MergeFrom(*source);
  }
}

void HTTPRetry::MergeFrom(const HTTPRetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.HTTPRetry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retry_on().size() > 0) {

    retry_on_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.retry_on_);
  }
  if (from.has_per_try_timeout()) {
    mutable_per_try_timeout()->::google::protobuf::Duration::MergeFrom(from.per_try_timeout());
  }
  if (from.attempts() != 0) {
    set_attempts(from.attempts());
  }
}

void HTTPRetry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.HTTPRetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPRetry::CopyFrom(const HTTPRetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.HTTPRetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPRetry::IsInitialized() const {
  return true;
}

void HTTPRetry::Swap(HTTPRetry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HTTPRetry::InternalSwap(HTTPRetry* other) {
  using std::swap;
  retry_on_.Swap(&other->retry_on_);
  swap(per_try_timeout_, other->per_try_timeout_);
  swap(attempts_, other->attempts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HTTPRetry::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CorsPolicy::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_CorsPolicy_default_instance_._instance.get_mutable()->max_age_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::istio::networking::v1alpha3::_CorsPolicy_default_instance_._instance.get_mutable()->allow_credentials_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
}
void CorsPolicy::clear_max_age() {
  if (GetArenaNoVirtual() == NULL && max_age_ != NULL) {
    delete max_age_;
  }
  max_age_ = NULL;
}
void CorsPolicy::clear_allow_credentials() {
  if (GetArenaNoVirtual() == NULL && allow_credentials_ != NULL) {
    delete allow_credentials_;
  }
  allow_credentials_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CorsPolicy::kAllowOriginFieldNumber;
const int CorsPolicy::kAllowMethodsFieldNumber;
const int CorsPolicy::kAllowHeadersFieldNumber;
const int CorsPolicy::kExposeHeadersFieldNumber;
const int CorsPolicy::kMaxAgeFieldNumber;
const int CorsPolicy::kAllowCredentialsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CorsPolicy::CorsPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsCorsPolicy();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.CorsPolicy)
}
CorsPolicy::CorsPolicy(const CorsPolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      allow_origin_(from.allow_origin_),
      allow_methods_(from.allow_methods_),
      allow_headers_(from.allow_headers_),
      expose_headers_(from.expose_headers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_max_age()) {
    max_age_ = new ::google::protobuf::Duration(*from.max_age_);
  } else {
    max_age_ = NULL;
  }
  if (from.has_allow_credentials()) {
    allow_credentials_ = new ::google::protobuf::BoolValue(*from.allow_credentials_);
  } else {
    allow_credentials_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.CorsPolicy)
}

void CorsPolicy::SharedCtor() {
  ::memset(&max_age_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_credentials_) -
      reinterpret_cast<char*>(&max_age_)) + sizeof(allow_credentials_));
  _cached_size_ = 0;
}

CorsPolicy::~CorsPolicy() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.CorsPolicy)
  SharedDtor();
}

void CorsPolicy::SharedDtor() {
  if (this != internal_default_instance()) delete max_age_;
  if (this != internal_default_instance()) delete allow_credentials_;
}

void CorsPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CorsPolicy::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CorsPolicy& CorsPolicy::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsCorsPolicy();
  return *internal_default_instance();
}

CorsPolicy* CorsPolicy::New(::google::protobuf::Arena* arena) const {
  CorsPolicy* n = new CorsPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CorsPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.CorsPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allow_origin_.Clear();
  allow_methods_.Clear();
  allow_headers_.Clear();
  expose_headers_.Clear();
  if (GetArenaNoVirtual() == NULL && max_age_ != NULL) {
    delete max_age_;
  }
  max_age_ = NULL;
  if (GetArenaNoVirtual() == NULL && allow_credentials_ != NULL) {
    delete allow_credentials_;
  }
  allow_credentials_ = NULL;
  _internal_metadata_.Clear();
}

bool CorsPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.CorsPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string allow_origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_allow_origin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->allow_origin(this->allow_origin_size() - 1).data(),
            static_cast<int>(this->allow_origin(this->allow_origin_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.CorsPolicy.allow_origin"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string allow_methods = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_allow_methods()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->allow_methods(this->allow_methods_size() - 1).data(),
            static_cast<int>(this->allow_methods(this->allow_methods_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.CorsPolicy.allow_methods"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string allow_headers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_allow_headers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->allow_headers(this->allow_headers_size() - 1).data(),
            static_cast<int>(this->allow_headers(this->allow_headers_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.CorsPolicy.allow_headers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string expose_headers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_expose_headers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->expose_headers(this->expose_headers_size() - 1).data(),
            static_cast<int>(this->expose_headers(this->expose_headers_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.CorsPolicy.expose_headers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration max_age = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_age()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue allow_credentials = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_allow_credentials()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.CorsPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.CorsPolicy)
  return false;
#undef DO_
}

void CorsPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.CorsPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string allow_origin = 1;
  for (int i = 0, n = this->allow_origin_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allow_origin(i).data(), static_cast<int>(this->allow_origin(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.CorsPolicy.allow_origin");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->allow_origin(i), output);
  }

  // repeated string allow_methods = 2;
  for (int i = 0, n = this->allow_methods_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allow_methods(i).data(), static_cast<int>(this->allow_methods(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.CorsPolicy.allow_methods");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->allow_methods(i), output);
  }

  // repeated string allow_headers = 3;
  for (int i = 0, n = this->allow_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allow_headers(i).data(), static_cast<int>(this->allow_headers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.CorsPolicy.allow_headers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->allow_headers(i), output);
  }

  // repeated string expose_headers = 4;
  for (int i = 0, n = this->expose_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expose_headers(i).data(), static_cast<int>(this->expose_headers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.CorsPolicy.expose_headers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->expose_headers(i), output);
  }

  // .google.protobuf.Duration max_age = 5;
  if (this->has_max_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->max_age_, output);
  }

  // .google.protobuf.BoolValue allow_credentials = 6;
  if (this->has_allow_credentials()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->allow_credentials_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.CorsPolicy)
}

::google::protobuf::uint8* CorsPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.CorsPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string allow_origin = 1;
  for (int i = 0, n = this->allow_origin_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allow_origin(i).data(), static_cast<int>(this->allow_origin(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.CorsPolicy.allow_origin");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->allow_origin(i), target);
  }

  // repeated string allow_methods = 2;
  for (int i = 0, n = this->allow_methods_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allow_methods(i).data(), static_cast<int>(this->allow_methods(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.CorsPolicy.allow_methods");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->allow_methods(i), target);
  }

  // repeated string allow_headers = 3;
  for (int i = 0, n = this->allow_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allow_headers(i).data(), static_cast<int>(this->allow_headers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.CorsPolicy.allow_headers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->allow_headers(i), target);
  }

  // repeated string expose_headers = 4;
  for (int i = 0, n = this->expose_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expose_headers(i).data(), static_cast<int>(this->expose_headers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.CorsPolicy.expose_headers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->expose_headers(i), target);
  }

  // .google.protobuf.Duration max_age = 5;
  if (this->has_max_age()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->max_age_, deterministic, target);
  }

  // .google.protobuf.BoolValue allow_credentials = 6;
  if (this->has_allow_credentials()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->allow_credentials_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.CorsPolicy)
  return target;
}

size_t CorsPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.CorsPolicy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string allow_origin = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->allow_origin_size());
  for (int i = 0, n = this->allow_origin_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->allow_origin(i));
  }

  // repeated string allow_methods = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->allow_methods_size());
  for (int i = 0, n = this->allow_methods_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->allow_methods(i));
  }

  // repeated string allow_headers = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->allow_headers_size());
  for (int i = 0, n = this->allow_headers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->allow_headers(i));
  }

  // repeated string expose_headers = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->expose_headers_size());
  for (int i = 0, n = this->expose_headers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->expose_headers(i));
  }

  // .google.protobuf.Duration max_age = 5;
  if (this->has_max_age()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->max_age_);
  }

  // .google.protobuf.BoolValue allow_credentials = 6;
  if (this->has_allow_credentials()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->allow_credentials_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CorsPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.CorsPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const CorsPolicy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CorsPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.CorsPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.CorsPolicy)
    MergeFrom(*source);
  }
}

void CorsPolicy::MergeFrom(const CorsPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.CorsPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allow_origin_.MergeFrom(from.allow_origin_);
  allow_methods_.MergeFrom(from.allow_methods_);
  allow_headers_.MergeFrom(from.allow_headers_);
  expose_headers_.MergeFrom(from.expose_headers_);
  if (from.has_max_age()) {
    mutable_max_age()->::google::protobuf::Duration::MergeFrom(from.max_age());
  }
  if (from.has_allow_credentials()) {
    mutable_allow_credentials()->::google::protobuf::BoolValue::MergeFrom(from.allow_credentials());
  }
}

void CorsPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.CorsPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CorsPolicy::CopyFrom(const CorsPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.CorsPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CorsPolicy::IsInitialized() const {
  return true;
}

void CorsPolicy::Swap(CorsPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CorsPolicy::InternalSwap(CorsPolicy* other) {
  using std::swap;
  allow_origin_.InternalSwap(&other->allow_origin_);
  allow_methods_.InternalSwap(&other->allow_methods_);
  allow_headers_.InternalSwap(&other->allow_headers_);
  expose_headers_.InternalSwap(&other->expose_headers_);
  swap(max_age_, other->max_age_);
  swap(allow_credentials_, other->allow_credentials_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CorsPolicy::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HTTPFaultInjection_Delay::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_HTTPFaultInjection_Delay_default_instance_.fixed_delay_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::istio::networking::v1alpha3::_HTTPFaultInjection_Delay_default_instance_.exponential_delay_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::istio::networking::v1alpha3::_HTTPFaultInjection_Delay_default_instance_._instance.get_mutable()->percentage_ = const_cast< ::istio::networking::v1alpha3::Percent*>(
      ::istio::networking::v1alpha3::Percent::internal_default_instance());
}
void HTTPFaultInjection_Delay::set_allocated_fixed_delay(::google::protobuf::Duration* fixed_delay) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_http_delay_type();
  if (fixed_delay) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(fixed_delay)->GetArena();
    if (message_arena != submessage_arena) {
      fixed_delay = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fixed_delay, submessage_arena);
    }
    set_has_fixed_delay();
    http_delay_type_.fixed_delay_ = fixed_delay;
  }
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPFaultInjection.Delay.fixed_delay)
}
void HTTPFaultInjection_Delay::clear_fixed_delay() {
  if (has_fixed_delay()) {
    delete http_delay_type_.fixed_delay_;
    clear_has_http_delay_type();
  }
}
void HTTPFaultInjection_Delay::set_allocated_exponential_delay(::google::protobuf::Duration* exponential_delay) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_http_delay_type();
  if (exponential_delay) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(exponential_delay)->GetArena();
    if (message_arena != submessage_arena) {
      exponential_delay = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exponential_delay, submessage_arena);
    }
    set_has_exponential_delay();
    http_delay_type_.exponential_delay_ = exponential_delay;
  }
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPFaultInjection.Delay.exponential_delay)
}
void HTTPFaultInjection_Delay::clear_exponential_delay() {
  if (has_exponential_delay()) {
    delete http_delay_type_.exponential_delay_;
    clear_has_http_delay_type();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HTTPFaultInjection_Delay::kPercentFieldNumber;
const int HTTPFaultInjection_Delay::kFixedDelayFieldNumber;
const int HTTPFaultInjection_Delay::kExponentialDelayFieldNumber;
const int HTTPFaultInjection_Delay::kPercentageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HTTPFaultInjection_Delay::HTTPFaultInjection_Delay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPFaultInjection_Delay();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.HTTPFaultInjection.Delay)
}
HTTPFaultInjection_Delay::HTTPFaultInjection_Delay(const HTTPFaultInjection_Delay& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_percentage()) {
    percentage_ = new ::istio::networking::v1alpha3::Percent(*from.percentage_);
  } else {
    percentage_ = NULL;
  }
  percent_ = from.percent_;
  clear_has_http_delay_type();
  switch (from.http_delay_type_case()) {
    case kFixedDelay: {
      mutable_fixed_delay()->::google::protobuf::Duration::MergeFrom(from.fixed_delay());
      break;
    }
    case kExponentialDelay: {
      mutable_exponential_delay()->::google::protobuf::Duration::MergeFrom(from.exponential_delay());
      break;
    }
    case HTTP_DELAY_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.HTTPFaultInjection.Delay)
}

void HTTPFaultInjection_Delay::SharedCtor() {
  ::memset(&percentage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&percent_) -
      reinterpret_cast<char*>(&percentage_)) + sizeof(percent_));
  clear_has_http_delay_type();
  _cached_size_ = 0;
}

HTTPFaultInjection_Delay::~HTTPFaultInjection_Delay() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.HTTPFaultInjection.Delay)
  SharedDtor();
}

void HTTPFaultInjection_Delay::SharedDtor() {
  if (this != internal_default_instance()) delete percentage_;
  if (has_http_delay_type()) {
    clear_http_delay_type();
  }
}

void HTTPFaultInjection_Delay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HTTPFaultInjection_Delay::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HTTPFaultInjection_Delay& HTTPFaultInjection_Delay::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPFaultInjection_Delay();
  return *internal_default_instance();
}

HTTPFaultInjection_Delay* HTTPFaultInjection_Delay::New(::google::protobuf::Arena* arena) const {
  HTTPFaultInjection_Delay* n = new HTTPFaultInjection_Delay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HTTPFaultInjection_Delay::clear_http_delay_type() {
// @@protoc_insertion_point(one_of_clear_start:istio.networking.v1alpha3.HTTPFaultInjection.Delay)
  switch (http_delay_type_case()) {
    case kFixedDelay: {
      delete http_delay_type_.fixed_delay_;
      break;
    }
    case kExponentialDelay: {
      delete http_delay_type_.exponential_delay_;
      break;
    }
    case HTTP_DELAY_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HTTP_DELAY_TYPE_NOT_SET;
}


void HTTPFaultInjection_Delay::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.HTTPFaultInjection.Delay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && percentage_ != NULL) {
    delete percentage_;
  }
  percentage_ = NULL;
  percent_ = 0;
  clear_http_delay_type();
  _internal_metadata_.Clear();
}

bool HTTPFaultInjection_Delay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.HTTPFaultInjection.Delay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 percent = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration fixed_delay = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fixed_delay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration exponential_delay = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exponential_delay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.Percent percentage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_percentage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.HTTPFaultInjection.Delay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.HTTPFaultInjection.Delay)
  return false;
#undef DO_
}

void HTTPFaultInjection_Delay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.HTTPFaultInjection.Delay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 percent = 1 [deprecated = true];
  if (this->percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->percent(), output);
  }

  // .google.protobuf.Duration fixed_delay = 2;
  if (has_fixed_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *http_delay_type_.fixed_delay_, output);
  }

  // .google.protobuf.Duration exponential_delay = 3;
  if (has_exponential_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *http_delay_type_.exponential_delay_, output);
  }

  // .istio.networking.v1alpha3.Percent percentage = 5;
  if (this->has_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->percentage_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.HTTPFaultInjection.Delay)
}

::google::protobuf::uint8* HTTPFaultInjection_Delay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.HTTPFaultInjection.Delay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 percent = 1 [deprecated = true];
  if (this->percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->percent(), target);
  }

  // .google.protobuf.Duration fixed_delay = 2;
  if (has_fixed_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *http_delay_type_.fixed_delay_, deterministic, target);
  }

  // .google.protobuf.Duration exponential_delay = 3;
  if (has_exponential_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *http_delay_type_.exponential_delay_, deterministic, target);
  }

  // .istio.networking.v1alpha3.Percent percentage = 5;
  if (this->has_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->percentage_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.HTTPFaultInjection.Delay)
  return target;
}

size_t HTTPFaultInjection_Delay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.HTTPFaultInjection.Delay)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .istio.networking.v1alpha3.Percent percentage = 5;
  if (this->has_percentage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->percentage_);
  }

  // int32 percent = 1 [deprecated = true];
  if (this->percent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->percent());
  }

  switch (http_delay_type_case()) {
    // .google.protobuf.Duration fixed_delay = 2;
    case kFixedDelay: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *http_delay_type_.fixed_delay_);
      break;
    }
    // .google.protobuf.Duration exponential_delay = 3;
    case kExponentialDelay: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *http_delay_type_.exponential_delay_);
      break;
    }
    case HTTP_DELAY_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HTTPFaultInjection_Delay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.HTTPFaultInjection.Delay)
  GOOGLE_DCHECK_NE(&from, this);
  const HTTPFaultInjection_Delay* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HTTPFaultInjection_Delay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.HTTPFaultInjection.Delay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.HTTPFaultInjection.Delay)
    MergeFrom(*source);
  }
}

void HTTPFaultInjection_Delay::MergeFrom(const HTTPFaultInjection_Delay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.HTTPFaultInjection.Delay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_percentage()) {
    mutable_percentage()->::istio::networking::v1alpha3::Percent::MergeFrom(from.percentage());
  }
  if (from.percent() != 0) {
    set_percent(from.percent());
  }
  switch (from.http_delay_type_case()) {
    case kFixedDelay: {
      mutable_fixed_delay()->::google::protobuf::Duration::MergeFrom(from.fixed_delay());
      break;
    }
    case kExponentialDelay: {
      mutable_exponential_delay()->::google::protobuf::Duration::MergeFrom(from.exponential_delay());
      break;
    }
    case HTTP_DELAY_TYPE_NOT_SET: {
      break;
    }
  }
}

void HTTPFaultInjection_Delay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.HTTPFaultInjection.Delay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPFaultInjection_Delay::CopyFrom(const HTTPFaultInjection_Delay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.HTTPFaultInjection.Delay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPFaultInjection_Delay::IsInitialized() const {
  return true;
}

void HTTPFaultInjection_Delay::Swap(HTTPFaultInjection_Delay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HTTPFaultInjection_Delay::InternalSwap(HTTPFaultInjection_Delay* other) {
  using std::swap;
  swap(percentage_, other->percentage_);
  swap(percent_, other->percent_);
  swap(http_delay_type_, other->http_delay_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HTTPFaultInjection_Delay::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HTTPFaultInjection_Abort::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_HTTPFaultInjection_Abort_default_instance_.http_status_ = 0;
  ::istio::networking::v1alpha3::_HTTPFaultInjection_Abort_default_instance_.grpc_status_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::istio::networking::v1alpha3::_HTTPFaultInjection_Abort_default_instance_.http2_error_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::istio::networking::v1alpha3::_HTTPFaultInjection_Abort_default_instance_._instance.get_mutable()->percentage_ = const_cast< ::istio::networking::v1alpha3::Percent*>(
      ::istio::networking::v1alpha3::Percent::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HTTPFaultInjection_Abort::kPercentFieldNumber;
const int HTTPFaultInjection_Abort::kHttpStatusFieldNumber;
const int HTTPFaultInjection_Abort::kGrpcStatusFieldNumber;
const int HTTPFaultInjection_Abort::kHttp2ErrorFieldNumber;
const int HTTPFaultInjection_Abort::kPercentageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HTTPFaultInjection_Abort::HTTPFaultInjection_Abort()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPFaultInjection_Abort();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.HTTPFaultInjection.Abort)
}
HTTPFaultInjection_Abort::HTTPFaultInjection_Abort(const HTTPFaultInjection_Abort& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_percentage()) {
    percentage_ = new ::istio::networking::v1alpha3::Percent(*from.percentage_);
  } else {
    percentage_ = NULL;
  }
  percent_ = from.percent_;
  clear_has_error_type();
  switch (from.error_type_case()) {
    case kHttpStatus: {
      set_http_status(from.http_status());
      break;
    }
    case kGrpcStatus: {
      set_grpc_status(from.grpc_status());
      break;
    }
    case kHttp2Error: {
      set_http2_error(from.http2_error());
      break;
    }
    case ERROR_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.HTTPFaultInjection.Abort)
}

void HTTPFaultInjection_Abort::SharedCtor() {
  ::memset(&percentage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&percent_) -
      reinterpret_cast<char*>(&percentage_)) + sizeof(percent_));
  clear_has_error_type();
  _cached_size_ = 0;
}

HTTPFaultInjection_Abort::~HTTPFaultInjection_Abort() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.HTTPFaultInjection.Abort)
  SharedDtor();
}

void HTTPFaultInjection_Abort::SharedDtor() {
  if (this != internal_default_instance()) delete percentage_;
  if (has_error_type()) {
    clear_error_type();
  }
}

void HTTPFaultInjection_Abort::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HTTPFaultInjection_Abort::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HTTPFaultInjection_Abort& HTTPFaultInjection_Abort::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPFaultInjection_Abort();
  return *internal_default_instance();
}

HTTPFaultInjection_Abort* HTTPFaultInjection_Abort::New(::google::protobuf::Arena* arena) const {
  HTTPFaultInjection_Abort* n = new HTTPFaultInjection_Abort;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HTTPFaultInjection_Abort::clear_error_type() {
// @@protoc_insertion_point(one_of_clear_start:istio.networking.v1alpha3.HTTPFaultInjection.Abort)
  switch (error_type_case()) {
    case kHttpStatus: {
      // No need to clear
      break;
    }
    case kGrpcStatus: {
      error_type_.grpc_status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kHttp2Error: {
      error_type_.http2_error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case ERROR_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ERROR_TYPE_NOT_SET;
}


void HTTPFaultInjection_Abort::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.HTTPFaultInjection.Abort)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && percentage_ != NULL) {
    delete percentage_;
  }
  percentage_ = NULL;
  percent_ = 0;
  clear_error_type();
  _internal_metadata_.Clear();
}

bool HTTPFaultInjection_Abort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.HTTPFaultInjection.Abort)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 percent = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 http_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_error_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_type_.http_status_)));
          set_has_http_status();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string grpc_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grpc_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->grpc_status().data(), static_cast<int>(this->grpc_status().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.HTTPFaultInjection.Abort.grpc_status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string http2_error = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http2_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->http2_error().data(), static_cast<int>(this->http2_error().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.HTTPFaultInjection.Abort.http2_error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.Percent percentage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_percentage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.HTTPFaultInjection.Abort)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.HTTPFaultInjection.Abort)
  return false;
#undef DO_
}

void HTTPFaultInjection_Abort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.HTTPFaultInjection.Abort)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 percent = 1 [deprecated = true];
  if (this->percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->percent(), output);
  }

  // int32 http_status = 2;
  if (has_http_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->http_status(), output);
  }

  // string grpc_status = 3;
  if (has_grpc_status()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->grpc_status().data(), static_cast<int>(this->grpc_status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.HTTPFaultInjection.Abort.grpc_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->grpc_status(), output);
  }

  // string http2_error = 4;
  if (has_http2_error()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->http2_error().data(), static_cast<int>(this->http2_error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.HTTPFaultInjection.Abort.http2_error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->http2_error(), output);
  }

  // .istio.networking.v1alpha3.Percent percentage = 5;
  if (this->has_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->percentage_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.HTTPFaultInjection.Abort)
}

::google::protobuf::uint8* HTTPFaultInjection_Abort::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.HTTPFaultInjection.Abort)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 percent = 1 [deprecated = true];
  if (this->percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->percent(), target);
  }

  // int32 http_status = 2;
  if (has_http_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->http_status(), target);
  }

  // string grpc_status = 3;
  if (has_grpc_status()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->grpc_status().data(), static_cast<int>(this->grpc_status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.HTTPFaultInjection.Abort.grpc_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->grpc_status(), target);
  }

  // string http2_error = 4;
  if (has_http2_error()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->http2_error().data(), static_cast<int>(this->http2_error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.HTTPFaultInjection.Abort.http2_error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->http2_error(), target);
  }

  // .istio.networking.v1alpha3.Percent percentage = 5;
  if (this->has_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->percentage_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.HTTPFaultInjection.Abort)
  return target;
}

size_t HTTPFaultInjection_Abort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.HTTPFaultInjection.Abort)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .istio.networking.v1alpha3.Percent percentage = 5;
  if (this->has_percentage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->percentage_);
  }

  // int32 percent = 1 [deprecated = true];
  if (this->percent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->percent());
  }

  switch (error_type_case()) {
    // int32 http_status = 2;
    case kHttpStatus: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->http_status());
      break;
    }
    // string grpc_status = 3;
    case kGrpcStatus: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grpc_status());
      break;
    }
    // string http2_error = 4;
    case kHttp2Error: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->http2_error());
      break;
    }
    case ERROR_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HTTPFaultInjection_Abort::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.HTTPFaultInjection.Abort)
  GOOGLE_DCHECK_NE(&from, this);
  const HTTPFaultInjection_Abort* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HTTPFaultInjection_Abort>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.HTTPFaultInjection.Abort)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.HTTPFaultInjection.Abort)
    MergeFrom(*source);
  }
}

void HTTPFaultInjection_Abort::MergeFrom(const HTTPFaultInjection_Abort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.HTTPFaultInjection.Abort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_percentage()) {
    mutable_percentage()->::istio::networking::v1alpha3::Percent::MergeFrom(from.percentage());
  }
  if (from.percent() != 0) {
    set_percent(from.percent());
  }
  switch (from.error_type_case()) {
    case kHttpStatus: {
      set_http_status(from.http_status());
      break;
    }
    case kGrpcStatus: {
      set_grpc_status(from.grpc_status());
      break;
    }
    case kHttp2Error: {
      set_http2_error(from.http2_error());
      break;
    }
    case ERROR_TYPE_NOT_SET: {
      break;
    }
  }
}

void HTTPFaultInjection_Abort::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.HTTPFaultInjection.Abort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPFaultInjection_Abort::CopyFrom(const HTTPFaultInjection_Abort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.HTTPFaultInjection.Abort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPFaultInjection_Abort::IsInitialized() const {
  return true;
}

void HTTPFaultInjection_Abort::Swap(HTTPFaultInjection_Abort* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HTTPFaultInjection_Abort::InternalSwap(HTTPFaultInjection_Abort* other) {
  using std::swap;
  swap(percentage_, other->percentage_);
  swap(percent_, other->percent_);
  swap(error_type_, other->error_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HTTPFaultInjection_Abort::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HTTPFaultInjection::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_HTTPFaultInjection_default_instance_._instance.get_mutable()->delay_ = const_cast< ::istio::networking::v1alpha3::HTTPFaultInjection_Delay*>(
      ::istio::networking::v1alpha3::HTTPFaultInjection_Delay::internal_default_instance());
  ::istio::networking::v1alpha3::_HTTPFaultInjection_default_instance_._instance.get_mutable()->abort_ = const_cast< ::istio::networking::v1alpha3::HTTPFaultInjection_Abort*>(
      ::istio::networking::v1alpha3::HTTPFaultInjection_Abort::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HTTPFaultInjection::kDelayFieldNumber;
const int HTTPFaultInjection::kAbortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HTTPFaultInjection::HTTPFaultInjection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPFaultInjection();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.HTTPFaultInjection)
}
HTTPFaultInjection::HTTPFaultInjection(const HTTPFaultInjection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_delay()) {
    delay_ = new ::istio::networking::v1alpha3::HTTPFaultInjection_Delay(*from.delay_);
  } else {
    delay_ = NULL;
  }
  if (from.has_abort()) {
    abort_ = new ::istio::networking::v1alpha3::HTTPFaultInjection_Abort(*from.abort_);
  } else {
    abort_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.HTTPFaultInjection)
}

void HTTPFaultInjection::SharedCtor() {
  ::memset(&delay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&abort_) -
      reinterpret_cast<char*>(&delay_)) + sizeof(abort_));
  _cached_size_ = 0;
}

HTTPFaultInjection::~HTTPFaultInjection() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.HTTPFaultInjection)
  SharedDtor();
}

void HTTPFaultInjection::SharedDtor() {
  if (this != internal_default_instance()) delete delay_;
  if (this != internal_default_instance()) delete abort_;
}

void HTTPFaultInjection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HTTPFaultInjection::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HTTPFaultInjection& HTTPFaultInjection::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPFaultInjection();
  return *internal_default_instance();
}

HTTPFaultInjection* HTTPFaultInjection::New(::google::protobuf::Arena* arena) const {
  HTTPFaultInjection* n = new HTTPFaultInjection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HTTPFaultInjection::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.HTTPFaultInjection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && delay_ != NULL) {
    delete delay_;
  }
  delay_ = NULL;
  if (GetArenaNoVirtual() == NULL && abort_ != NULL) {
    delete abort_;
  }
  abort_ = NULL;
  _internal_metadata_.Clear();
}

bool HTTPFaultInjection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.HTTPFaultInjection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.networking.v1alpha3.HTTPFaultInjection.Delay delay = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.HTTPFaultInjection.Abort abort = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_abort()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.HTTPFaultInjection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.HTTPFaultInjection)
  return false;
#undef DO_
}

void HTTPFaultInjection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.HTTPFaultInjection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.HTTPFaultInjection.Delay delay = 1;
  if (this->has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->delay_, output);
  }

  // .istio.networking.v1alpha3.HTTPFaultInjection.Abort abort = 2;
  if (this->has_abort()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->abort_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.HTTPFaultInjection)
}

::google::protobuf::uint8* HTTPFaultInjection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.HTTPFaultInjection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.HTTPFaultInjection.Delay delay = 1;
  if (this->has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->delay_, deterministic, target);
  }

  // .istio.networking.v1alpha3.HTTPFaultInjection.Abort abort = 2;
  if (this->has_abort()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->abort_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.HTTPFaultInjection)
  return target;
}

size_t HTTPFaultInjection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.HTTPFaultInjection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .istio.networking.v1alpha3.HTTPFaultInjection.Delay delay = 1;
  if (this->has_delay()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->delay_);
  }

  // .istio.networking.v1alpha3.HTTPFaultInjection.Abort abort = 2;
  if (this->has_abort()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->abort_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HTTPFaultInjection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.HTTPFaultInjection)
  GOOGLE_DCHECK_NE(&from, this);
  const HTTPFaultInjection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HTTPFaultInjection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.HTTPFaultInjection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.HTTPFaultInjection)
    MergeFrom(*source);
  }
}

void HTTPFaultInjection::MergeFrom(const HTTPFaultInjection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.HTTPFaultInjection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_delay()) {
    mutable_delay()->::istio::networking::v1alpha3::HTTPFaultInjection_Delay::MergeFrom(from.delay());
  }
  if (from.has_abort()) {
    mutable_abort()->::istio::networking::v1alpha3::HTTPFaultInjection_Abort::MergeFrom(from.abort());
  }
}

void HTTPFaultInjection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.HTTPFaultInjection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPFaultInjection::CopyFrom(const HTTPFaultInjection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.HTTPFaultInjection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPFaultInjection::IsInitialized() const {
  return true;
}

void HTTPFaultInjection::Swap(HTTPFaultInjection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HTTPFaultInjection::InternalSwap(HTTPFaultInjection* other) {
  using std::swap;
  swap(delay_, other->delay_);
  swap(abort_, other->abort_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HTTPFaultInjection::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PortSelector::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_PortSelector_default_instance_.number_ = 0u;
  ::istio::networking::v1alpha3::_PortSelector_default_instance_.name_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PortSelector::kNumberFieldNumber;
const int PortSelector::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PortSelector::PortSelector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsPortSelector();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.PortSelector)
}
PortSelector::PortSelector(const PortSelector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_port();
  switch (from.port_case()) {
    case kNumber: {
      set_number(from.number());
      break;
    }
    case kName: {
      set_name(from.name());
      break;
    }
    case PORT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.PortSelector)
}

void PortSelector::SharedCtor() {
  clear_has_port();
  _cached_size_ = 0;
}

PortSelector::~PortSelector() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.PortSelector)
  SharedDtor();
}

void PortSelector::SharedDtor() {
  if (has_port()) {
    clear_port();
  }
}

void PortSelector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PortSelector::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PortSelector& PortSelector::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsPortSelector();
  return *internal_default_instance();
}

PortSelector* PortSelector::New(::google::protobuf::Arena* arena) const {
  PortSelector* n = new PortSelector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PortSelector::clear_port() {
// @@protoc_insertion_point(one_of_clear_start:istio.networking.v1alpha3.PortSelector)
  switch (port_case()) {
    case kNumber: {
      // No need to clear
      break;
    }
    case kName: {
      port_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case PORT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PORT_NOT_SET;
}


void PortSelector::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.PortSelector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_port();
  _internal_metadata_.Clear();
}

bool PortSelector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.PortSelector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_.number_)));
          set_has_number();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.PortSelector.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.PortSelector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.PortSelector)
  return false;
#undef DO_
}

void PortSelector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.PortSelector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number(), output);
  }

  // string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.PortSelector.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.PortSelector)
}

::google::protobuf::uint8* PortSelector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.PortSelector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->number(), target);
  }

  // string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.PortSelector.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.PortSelector)
  return target;
}

size_t PortSelector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.PortSelector)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (port_case()) {
    // uint32 number = 1;
    case kNumber: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
      break;
    }
    // string name = 2;
    case kName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    case PORT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PortSelector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.PortSelector)
  GOOGLE_DCHECK_NE(&from, this);
  const PortSelector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PortSelector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.PortSelector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.PortSelector)
    MergeFrom(*source);
  }
}

void PortSelector::MergeFrom(const PortSelector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.PortSelector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.port_case()) {
    case kNumber: {
      set_number(from.number());
      break;
    }
    case kName: {
      set_name(from.name());
      break;
    }
    case PORT_NOT_SET: {
      break;
    }
  }
}

void PortSelector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.PortSelector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortSelector::CopyFrom(const PortSelector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.PortSelector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortSelector::IsInitialized() const {
  return true;
}

void PortSelector::Swap(PortSelector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PortSelector::InternalSwap(PortSelector* other) {
  using std::swap;
  swap(port_, other->port_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PortSelector::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Percent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Percent::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Percent::Percent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsPercent();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.Percent)
}
Percent::Percent(const Percent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.Percent)
}

void Percent::SharedCtor() {
  value_ = 0;
  _cached_size_ = 0;
}

Percent::~Percent() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.Percent)
  SharedDtor();
}

void Percent::SharedDtor() {
}

void Percent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Percent::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Percent& Percent::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsPercent();
  return *internal_default_instance();
}

Percent* Percent::New(::google::protobuf::Arena* arena) const {
  Percent* n = new Percent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Percent::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.Percent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear();
}

bool Percent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.Percent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.Percent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.Percent)
  return false;
#undef DO_
}

void Percent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.Percent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.Percent)
}

::google::protobuf::uint8* Percent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.Percent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.Percent)
  return target;
}

size_t Percent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.Percent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double value = 1;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Percent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.Percent)
  GOOGLE_DCHECK_NE(&from, this);
  const Percent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Percent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.Percent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.Percent)
    MergeFrom(*source);
  }
}

void Percent::MergeFrom(const Percent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.Percent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Percent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.Percent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Percent::CopyFrom(const Percent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.Percent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Percent::IsInitialized() const {
  return true;
}

void Percent::Swap(Percent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Percent::InternalSwap(Percent* other) {
  using std::swap;
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Percent::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha3
}  // namespace networking
}  // namespace istio

// @@protoc_insertion_point(global_scope)
