// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networking/v1alpha3/virtual_service.proto

#ifndef PROTOBUF_networking_2fv1alpha3_2fvirtual_5fservice_2eproto__INCLUDED
#define PROTOBUF_networking_2fv1alpha3_2fvirtual_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[33];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsVirtualServiceImpl();
void InitDefaultsVirtualService();
void InitDefaultsDestinationImpl();
void InitDefaultsDestination();
void InitDefaultsHTTPRoute_AppendHeadersEntry_DoNotUseImpl();
void InitDefaultsHTTPRoute_AppendHeadersEntry_DoNotUse();
void InitDefaultsHTTPRoute_AppendResponseHeadersEntry_DoNotUseImpl();
void InitDefaultsHTTPRoute_AppendResponseHeadersEntry_DoNotUse();
void InitDefaultsHTTPRoute_AppendRequestHeadersEntry_DoNotUseImpl();
void InitDefaultsHTTPRoute_AppendRequestHeadersEntry_DoNotUse();
void InitDefaultsHTTPRouteImpl();
void InitDefaultsHTTPRoute();
void InitDefaultsHeaders_HeaderOperations_SetEntry_DoNotUseImpl();
void InitDefaultsHeaders_HeaderOperations_SetEntry_DoNotUse();
void InitDefaultsHeaders_HeaderOperations_AddEntry_DoNotUseImpl();
void InitDefaultsHeaders_HeaderOperations_AddEntry_DoNotUse();
void InitDefaultsHeaders_HeaderOperationsImpl();
void InitDefaultsHeaders_HeaderOperations();
void InitDefaultsHeadersImpl();
void InitDefaultsHeaders();
void InitDefaultsTLSRouteImpl();
void InitDefaultsTLSRoute();
void InitDefaultsTCPRouteImpl();
void InitDefaultsTCPRoute();
void InitDefaultsHTTPMatchRequest_HeadersEntry_DoNotUseImpl();
void InitDefaultsHTTPMatchRequest_HeadersEntry_DoNotUse();
void InitDefaultsHTTPMatchRequest_SourceLabelsEntry_DoNotUseImpl();
void InitDefaultsHTTPMatchRequest_SourceLabelsEntry_DoNotUse();
void InitDefaultsHTTPMatchRequestImpl();
void InitDefaultsHTTPMatchRequest();
void InitDefaultsHTTPRouteDestination_AppendResponseHeadersEntry_DoNotUseImpl();
void InitDefaultsHTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse();
void InitDefaultsHTTPRouteDestination_AppendRequestHeadersEntry_DoNotUseImpl();
void InitDefaultsHTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse();
void InitDefaultsHTTPRouteDestinationImpl();
void InitDefaultsHTTPRouteDestination();
void InitDefaultsRouteDestinationImpl();
void InitDefaultsRouteDestination();
void InitDefaultsL4MatchAttributes_SourceLabelsEntry_DoNotUseImpl();
void InitDefaultsL4MatchAttributes_SourceLabelsEntry_DoNotUse();
void InitDefaultsL4MatchAttributesImpl();
void InitDefaultsL4MatchAttributes();
void InitDefaultsTLSMatchAttributes_SourceLabelsEntry_DoNotUseImpl();
void InitDefaultsTLSMatchAttributes_SourceLabelsEntry_DoNotUse();
void InitDefaultsTLSMatchAttributesImpl();
void InitDefaultsTLSMatchAttributes();
void InitDefaultsHTTPRedirectImpl();
void InitDefaultsHTTPRedirect();
void InitDefaultsHTTPRewriteImpl();
void InitDefaultsHTTPRewrite();
void InitDefaultsStringMatchImpl();
void InitDefaultsStringMatch();
void InitDefaultsHTTPRetryImpl();
void InitDefaultsHTTPRetry();
void InitDefaultsCorsPolicyImpl();
void InitDefaultsCorsPolicy();
void InitDefaultsHTTPFaultInjection_DelayImpl();
void InitDefaultsHTTPFaultInjection_Delay();
void InitDefaultsHTTPFaultInjection_AbortImpl();
void InitDefaultsHTTPFaultInjection_Abort();
void InitDefaultsHTTPFaultInjectionImpl();
void InitDefaultsHTTPFaultInjection();
void InitDefaultsPortSelectorImpl();
void InitDefaultsPortSelector();
void InitDefaultsPercentImpl();
void InitDefaultsPercent();
inline void InitDefaults() {
  InitDefaultsVirtualService();
  InitDefaultsDestination();
  InitDefaultsHTTPRoute_AppendHeadersEntry_DoNotUse();
  InitDefaultsHTTPRoute_AppendResponseHeadersEntry_DoNotUse();
  InitDefaultsHTTPRoute_AppendRequestHeadersEntry_DoNotUse();
  InitDefaultsHTTPRoute();
  InitDefaultsHeaders_HeaderOperations_SetEntry_DoNotUse();
  InitDefaultsHeaders_HeaderOperations_AddEntry_DoNotUse();
  InitDefaultsHeaders_HeaderOperations();
  InitDefaultsHeaders();
  InitDefaultsTLSRoute();
  InitDefaultsTCPRoute();
  InitDefaultsHTTPMatchRequest_HeadersEntry_DoNotUse();
  InitDefaultsHTTPMatchRequest_SourceLabelsEntry_DoNotUse();
  InitDefaultsHTTPMatchRequest();
  InitDefaultsHTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse();
  InitDefaultsHTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse();
  InitDefaultsHTTPRouteDestination();
  InitDefaultsRouteDestination();
  InitDefaultsL4MatchAttributes_SourceLabelsEntry_DoNotUse();
  InitDefaultsL4MatchAttributes();
  InitDefaultsTLSMatchAttributes_SourceLabelsEntry_DoNotUse();
  InitDefaultsTLSMatchAttributes();
  InitDefaultsHTTPRedirect();
  InitDefaultsHTTPRewrite();
  InitDefaultsStringMatch();
  InitDefaultsHTTPRetry();
  InitDefaultsCorsPolicy();
  InitDefaultsHTTPFaultInjection_Delay();
  InitDefaultsHTTPFaultInjection_Abort();
  InitDefaultsHTTPFaultInjection();
  InitDefaultsPortSelector();
  InitDefaultsPercent();
}
}  // namespace protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto
namespace istio {
namespace networking {
namespace v1alpha3 {
class CorsPolicy;
class CorsPolicyDefaultTypeInternal;
extern CorsPolicyDefaultTypeInternal _CorsPolicy_default_instance_;
class Destination;
class DestinationDefaultTypeInternal;
extern DestinationDefaultTypeInternal _Destination_default_instance_;
class HTTPFaultInjection;
class HTTPFaultInjectionDefaultTypeInternal;
extern HTTPFaultInjectionDefaultTypeInternal _HTTPFaultInjection_default_instance_;
class HTTPFaultInjection_Abort;
class HTTPFaultInjection_AbortDefaultTypeInternal;
extern HTTPFaultInjection_AbortDefaultTypeInternal _HTTPFaultInjection_Abort_default_instance_;
class HTTPFaultInjection_Delay;
class HTTPFaultInjection_DelayDefaultTypeInternal;
extern HTTPFaultInjection_DelayDefaultTypeInternal _HTTPFaultInjection_Delay_default_instance_;
class HTTPMatchRequest;
class HTTPMatchRequestDefaultTypeInternal;
extern HTTPMatchRequestDefaultTypeInternal _HTTPMatchRequest_default_instance_;
class HTTPMatchRequest_HeadersEntry_DoNotUse;
class HTTPMatchRequest_HeadersEntry_DoNotUseDefaultTypeInternal;
extern HTTPMatchRequest_HeadersEntry_DoNotUseDefaultTypeInternal _HTTPMatchRequest_HeadersEntry_DoNotUse_default_instance_;
class HTTPMatchRequest_SourceLabelsEntry_DoNotUse;
class HTTPMatchRequest_SourceLabelsEntry_DoNotUseDefaultTypeInternal;
extern HTTPMatchRequest_SourceLabelsEntry_DoNotUseDefaultTypeInternal _HTTPMatchRequest_SourceLabelsEntry_DoNotUse_default_instance_;
class HTTPRedirect;
class HTTPRedirectDefaultTypeInternal;
extern HTTPRedirectDefaultTypeInternal _HTTPRedirect_default_instance_;
class HTTPRetry;
class HTTPRetryDefaultTypeInternal;
extern HTTPRetryDefaultTypeInternal _HTTPRetry_default_instance_;
class HTTPRewrite;
class HTTPRewriteDefaultTypeInternal;
extern HTTPRewriteDefaultTypeInternal _HTTPRewrite_default_instance_;
class HTTPRoute;
class HTTPRouteDefaultTypeInternal;
extern HTTPRouteDefaultTypeInternal _HTTPRoute_default_instance_;
class HTTPRouteDestination;
class HTTPRouteDestinationDefaultTypeInternal;
extern HTTPRouteDestinationDefaultTypeInternal _HTTPRouteDestination_default_instance_;
class HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse;
class HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUseDefaultTypeInternal;
extern HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUseDefaultTypeInternal _HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse_default_instance_;
class HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse;
class HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUseDefaultTypeInternal;
extern HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUseDefaultTypeInternal _HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse_default_instance_;
class HTTPRoute_AppendHeadersEntry_DoNotUse;
class HTTPRoute_AppendHeadersEntry_DoNotUseDefaultTypeInternal;
extern HTTPRoute_AppendHeadersEntry_DoNotUseDefaultTypeInternal _HTTPRoute_AppendHeadersEntry_DoNotUse_default_instance_;
class HTTPRoute_AppendRequestHeadersEntry_DoNotUse;
class HTTPRoute_AppendRequestHeadersEntry_DoNotUseDefaultTypeInternal;
extern HTTPRoute_AppendRequestHeadersEntry_DoNotUseDefaultTypeInternal _HTTPRoute_AppendRequestHeadersEntry_DoNotUse_default_instance_;
class HTTPRoute_AppendResponseHeadersEntry_DoNotUse;
class HTTPRoute_AppendResponseHeadersEntry_DoNotUseDefaultTypeInternal;
extern HTTPRoute_AppendResponseHeadersEntry_DoNotUseDefaultTypeInternal _HTTPRoute_AppendResponseHeadersEntry_DoNotUse_default_instance_;
class Headers;
class HeadersDefaultTypeInternal;
extern HeadersDefaultTypeInternal _Headers_default_instance_;
class Headers_HeaderOperations;
class Headers_HeaderOperationsDefaultTypeInternal;
extern Headers_HeaderOperationsDefaultTypeInternal _Headers_HeaderOperations_default_instance_;
class Headers_HeaderOperations_AddEntry_DoNotUse;
class Headers_HeaderOperations_AddEntry_DoNotUseDefaultTypeInternal;
extern Headers_HeaderOperations_AddEntry_DoNotUseDefaultTypeInternal _Headers_HeaderOperations_AddEntry_DoNotUse_default_instance_;
class Headers_HeaderOperations_SetEntry_DoNotUse;
class Headers_HeaderOperations_SetEntry_DoNotUseDefaultTypeInternal;
extern Headers_HeaderOperations_SetEntry_DoNotUseDefaultTypeInternal _Headers_HeaderOperations_SetEntry_DoNotUse_default_instance_;
class L4MatchAttributes;
class L4MatchAttributesDefaultTypeInternal;
extern L4MatchAttributesDefaultTypeInternal _L4MatchAttributes_default_instance_;
class L4MatchAttributes_SourceLabelsEntry_DoNotUse;
class L4MatchAttributes_SourceLabelsEntry_DoNotUseDefaultTypeInternal;
extern L4MatchAttributes_SourceLabelsEntry_DoNotUseDefaultTypeInternal _L4MatchAttributes_SourceLabelsEntry_DoNotUse_default_instance_;
class Percent;
class PercentDefaultTypeInternal;
extern PercentDefaultTypeInternal _Percent_default_instance_;
class PortSelector;
class PortSelectorDefaultTypeInternal;
extern PortSelectorDefaultTypeInternal _PortSelector_default_instance_;
class RouteDestination;
class RouteDestinationDefaultTypeInternal;
extern RouteDestinationDefaultTypeInternal _RouteDestination_default_instance_;
class StringMatch;
class StringMatchDefaultTypeInternal;
extern StringMatchDefaultTypeInternal _StringMatch_default_instance_;
class TCPRoute;
class TCPRouteDefaultTypeInternal;
extern TCPRouteDefaultTypeInternal _TCPRoute_default_instance_;
class TLSMatchAttributes;
class TLSMatchAttributesDefaultTypeInternal;
extern TLSMatchAttributesDefaultTypeInternal _TLSMatchAttributes_default_instance_;
class TLSMatchAttributes_SourceLabelsEntry_DoNotUse;
class TLSMatchAttributes_SourceLabelsEntry_DoNotUseDefaultTypeInternal;
extern TLSMatchAttributes_SourceLabelsEntry_DoNotUseDefaultTypeInternal _TLSMatchAttributes_SourceLabelsEntry_DoNotUse_default_instance_;
class TLSRoute;
class TLSRouteDefaultTypeInternal;
extern TLSRouteDefaultTypeInternal _TLSRoute_default_instance_;
class VirtualService;
class VirtualServiceDefaultTypeInternal;
extern VirtualServiceDefaultTypeInternal _VirtualService_default_instance_;
}  // namespace v1alpha3
}  // namespace networking
}  // namespace istio
namespace istio {
namespace networking {
namespace v1alpha3 {

// ===================================================================

class VirtualService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.VirtualService) */ {
 public:
  VirtualService();
  virtual ~VirtualService();

  VirtualService(const VirtualService& from);

  inline VirtualService& operator=(const VirtualService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VirtualService(VirtualService&& from) noexcept
    : VirtualService() {
    *this = ::std::move(from);
  }

  inline VirtualService& operator=(VirtualService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VirtualService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VirtualService* internal_default_instance() {
    return reinterpret_cast<const VirtualService*>(
               &_VirtualService_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(VirtualService* other);
  friend void swap(VirtualService& a, VirtualService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VirtualService* New() const PROTOBUF_FINAL { return New(NULL); }

  VirtualService* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VirtualService& from);
  void MergeFrom(const VirtualService& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VirtualService* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string hosts = 1;
  int hosts_size() const;
  void clear_hosts();
  static const int kHostsFieldNumber = 1;
  const ::std::string& hosts(int index) const;
  ::std::string* mutable_hosts(int index);
  void set_hosts(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_hosts(int index, ::std::string&& value);
  #endif
  void set_hosts(int index, const char* value);
  void set_hosts(int index, const char* value, size_t size);
  ::std::string* add_hosts();
  void add_hosts(const ::std::string& value);
  #if LANG_CXX11
  void add_hosts(::std::string&& value);
  #endif
  void add_hosts(const char* value);
  void add_hosts(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& hosts() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_hosts();

  // repeated string gateways = 2;
  int gateways_size() const;
  void clear_gateways();
  static const int kGatewaysFieldNumber = 2;
  const ::std::string& gateways(int index) const;
  ::std::string* mutable_gateways(int index);
  void set_gateways(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_gateways(int index, ::std::string&& value);
  #endif
  void set_gateways(int index, const char* value);
  void set_gateways(int index, const char* value, size_t size);
  ::std::string* add_gateways();
  void add_gateways(const ::std::string& value);
  #if LANG_CXX11
  void add_gateways(::std::string&& value);
  #endif
  void add_gateways(const char* value);
  void add_gateways(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& gateways() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_gateways();

  // repeated .istio.networking.v1alpha3.HTTPRoute http = 3;
  int http_size() const;
  void clear_http();
  static const int kHttpFieldNumber = 3;
  const ::istio::networking::v1alpha3::HTTPRoute& http(int index) const;
  ::istio::networking::v1alpha3::HTTPRoute* mutable_http(int index);
  ::istio::networking::v1alpha3::HTTPRoute* add_http();
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::HTTPRoute >*
      mutable_http();
  const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::HTTPRoute >&
      http() const;

  // repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;
  int tcp_size() const;
  void clear_tcp();
  static const int kTcpFieldNumber = 4;
  const ::istio::networking::v1alpha3::TCPRoute& tcp(int index) const;
  ::istio::networking::v1alpha3::TCPRoute* mutable_tcp(int index);
  ::istio::networking::v1alpha3::TCPRoute* add_tcp();
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::TCPRoute >*
      mutable_tcp();
  const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::TCPRoute >&
      tcp() const;

  // repeated .istio.networking.v1alpha3.TLSRoute tls = 5;
  int tls_size() const;
  void clear_tls();
  static const int kTlsFieldNumber = 5;
  const ::istio::networking::v1alpha3::TLSRoute& tls(int index) const;
  ::istio::networking::v1alpha3::TLSRoute* mutable_tls(int index);
  ::istio::networking::v1alpha3::TLSRoute* add_tls();
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::TLSRoute >*
      mutable_tls();
  const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::TLSRoute >&
      tls() const;

  // repeated string export_to = 6;
  int export_to_size() const;
  void clear_export_to();
  static const int kExportToFieldNumber = 6;
  const ::std::string& export_to(int index) const;
  ::std::string* mutable_export_to(int index);
  void set_export_to(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_export_to(int index, ::std::string&& value);
  #endif
  void set_export_to(int index, const char* value);
  void set_export_to(int index, const char* value, size_t size);
  ::std::string* add_export_to();
  void add_export_to(const ::std::string& value);
  #if LANG_CXX11
  void add_export_to(::std::string&& value);
  #endif
  void add_export_to(const char* value);
  void add_export_to(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& export_to() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_export_to();

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.VirtualService)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> hosts_;
  ::google::protobuf::RepeatedPtrField< ::std::string> gateways_;
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::HTTPRoute > http_;
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::TCPRoute > tcp_;
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::TLSRoute > tls_;
  ::google::protobuf::RepeatedPtrField< ::std::string> export_to_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsVirtualServiceImpl();
};
// -------------------------------------------------------------------

class Destination : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.Destination) */ {
 public:
  Destination();
  virtual ~Destination();

  Destination(const Destination& from);

  inline Destination& operator=(const Destination& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Destination(Destination&& from) noexcept
    : Destination() {
    *this = ::std::move(from);
  }

  inline Destination& operator=(Destination&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Destination& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Destination* internal_default_instance() {
    return reinterpret_cast<const Destination*>(
               &_Destination_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Destination* other);
  friend void swap(Destination& a, Destination& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Destination* New() const PROTOBUF_FINAL { return New(NULL); }

  Destination* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Destination& from);
  void MergeFrom(const Destination& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Destination* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host = 1;
  void clear_host();
  static const int kHostFieldNumber = 1;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // string subset = 2;
  void clear_subset();
  static const int kSubsetFieldNumber = 2;
  const ::std::string& subset() const;
  void set_subset(const ::std::string& value);
  #if LANG_CXX11
  void set_subset(::std::string&& value);
  #endif
  void set_subset(const char* value);
  void set_subset(const char* value, size_t size);
  ::std::string* mutable_subset();
  ::std::string* release_subset();
  void set_allocated_subset(::std::string* subset);

  // .istio.networking.v1alpha3.PortSelector port = 3;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 3;
  const ::istio::networking::v1alpha3::PortSelector& port() const;
  ::istio::networking::v1alpha3::PortSelector* release_port();
  ::istio::networking::v1alpha3::PortSelector* mutable_port();
  void set_allocated_port(::istio::networking::v1alpha3::PortSelector* port);

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.Destination)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr subset_;
  ::istio::networking::v1alpha3::PortSelector* port_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsDestinationImpl();
};
// -------------------------------------------------------------------

class HTTPRoute_AppendHeadersEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<HTTPRoute_AppendHeadersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<HTTPRoute_AppendHeadersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  HTTPRoute_AppendHeadersEntry_DoNotUse();
  HTTPRoute_AppendHeadersEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const HTTPRoute_AppendHeadersEntry_DoNotUse& other);
  static const HTTPRoute_AppendHeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HTTPRoute_AppendHeadersEntry_DoNotUse*>(&_HTTPRoute_AppendHeadersEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class HTTPRoute_AppendResponseHeadersEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<HTTPRoute_AppendResponseHeadersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<HTTPRoute_AppendResponseHeadersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  HTTPRoute_AppendResponseHeadersEntry_DoNotUse();
  HTTPRoute_AppendResponseHeadersEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const HTTPRoute_AppendResponseHeadersEntry_DoNotUse& other);
  static const HTTPRoute_AppendResponseHeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HTTPRoute_AppendResponseHeadersEntry_DoNotUse*>(&_HTTPRoute_AppendResponseHeadersEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class HTTPRoute_AppendRequestHeadersEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<HTTPRoute_AppendRequestHeadersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<HTTPRoute_AppendRequestHeadersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  HTTPRoute_AppendRequestHeadersEntry_DoNotUse();
  HTTPRoute_AppendRequestHeadersEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const HTTPRoute_AppendRequestHeadersEntry_DoNotUse& other);
  static const HTTPRoute_AppendRequestHeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HTTPRoute_AppendRequestHeadersEntry_DoNotUse*>(&_HTTPRoute_AppendRequestHeadersEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class HTTPRoute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.HTTPRoute) */ {
 public:
  HTTPRoute();
  virtual ~HTTPRoute();

  HTTPRoute(const HTTPRoute& from);

  inline HTTPRoute& operator=(const HTTPRoute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HTTPRoute(HTTPRoute&& from) noexcept
    : HTTPRoute() {
    *this = ::std::move(from);
  }

  inline HTTPRoute& operator=(HTTPRoute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HTTPRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HTTPRoute* internal_default_instance() {
    return reinterpret_cast<const HTTPRoute*>(
               &_HTTPRoute_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(HTTPRoute* other);
  friend void swap(HTTPRoute& a, HTTPRoute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HTTPRoute* New() const PROTOBUF_FINAL { return New(NULL); }

  HTTPRoute* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HTTPRoute& from);
  void MergeFrom(const HTTPRoute& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HTTPRoute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;
  int match_size() const;
  void clear_match();
  static const int kMatchFieldNumber = 1;
  const ::istio::networking::v1alpha3::HTTPMatchRequest& match(int index) const;
  ::istio::networking::v1alpha3::HTTPMatchRequest* mutable_match(int index);
  ::istio::networking::v1alpha3::HTTPMatchRequest* add_match();
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::HTTPMatchRequest >*
      mutable_match();
  const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::HTTPMatchRequest >&
      match() const;

  // repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;
  int route_size() const;
  void clear_route();
  static const int kRouteFieldNumber = 2;
  const ::istio::networking::v1alpha3::HTTPRouteDestination& route(int index) const;
  ::istio::networking::v1alpha3::HTTPRouteDestination* mutable_route(int index);
  ::istio::networking::v1alpha3::HTTPRouteDestination* add_route();
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::HTTPRouteDestination >*
      mutable_route();
  const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::HTTPRouteDestination >&
      route() const;

  // map<string, string> append_headers = 11 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int append_headers_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_append_headers();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kAppendHeadersFieldNumber = 11;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::Map< ::std::string, ::std::string >&
      append_headers() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_append_headers();

  // repeated string remove_response_headers = 12 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int remove_response_headers_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_remove_response_headers();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kRemoveResponseHeadersFieldNumber = 12;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::std::string& remove_response_headers(int index) const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* mutable_remove_response_headers(int index);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_remove_response_headers(int index, const ::std::string& value);
  #if LANG_CXX11
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_remove_response_headers(int index, ::std::string&& value);
  #endif
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_remove_response_headers(int index, const char* value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_remove_response_headers(int index, const char* value, size_t size);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* add_remove_response_headers();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_remove_response_headers(const ::std::string& value);
  #if LANG_CXX11
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_remove_response_headers(::std::string&& value);
  #endif
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_remove_response_headers(const char* value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_remove_response_headers(const char* value, size_t size);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::RepeatedPtrField< ::std::string>& remove_response_headers() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_remove_response_headers();

  // map<string, string> append_response_headers = 13 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int append_response_headers_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_append_response_headers();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kAppendResponseHeadersFieldNumber = 13;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::Map< ::std::string, ::std::string >&
      append_response_headers() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_append_response_headers();

  // repeated string remove_request_headers = 14 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int remove_request_headers_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_remove_request_headers();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kRemoveRequestHeadersFieldNumber = 14;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::std::string& remove_request_headers(int index) const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* mutable_remove_request_headers(int index);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_remove_request_headers(int index, const ::std::string& value);
  #if LANG_CXX11
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_remove_request_headers(int index, ::std::string&& value);
  #endif
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_remove_request_headers(int index, const char* value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_remove_request_headers(int index, const char* value, size_t size);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* add_remove_request_headers();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_remove_request_headers(const ::std::string& value);
  #if LANG_CXX11
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_remove_request_headers(::std::string&& value);
  #endif
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_remove_request_headers(const char* value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_remove_request_headers(const char* value, size_t size);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::RepeatedPtrField< ::std::string>& remove_request_headers() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_remove_request_headers();

  // map<string, string> append_request_headers = 15 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int append_request_headers_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_append_request_headers();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kAppendRequestHeadersFieldNumber = 15;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::Map< ::std::string, ::std::string >&
      append_request_headers() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_append_request_headers();

  // .istio.networking.v1alpha3.HTTPRedirect redirect = 3;
  bool has_redirect() const;
  void clear_redirect();
  static const int kRedirectFieldNumber = 3;
  const ::istio::networking::v1alpha3::HTTPRedirect& redirect() const;
  ::istio::networking::v1alpha3::HTTPRedirect* release_redirect();
  ::istio::networking::v1alpha3::HTTPRedirect* mutable_redirect();
  void set_allocated_redirect(::istio::networking::v1alpha3::HTTPRedirect* redirect);

  // .istio.networking.v1alpha3.HTTPRewrite rewrite = 4;
  bool has_rewrite() const;
  void clear_rewrite();
  static const int kRewriteFieldNumber = 4;
  const ::istio::networking::v1alpha3::HTTPRewrite& rewrite() const;
  ::istio::networking::v1alpha3::HTTPRewrite* release_rewrite();
  ::istio::networking::v1alpha3::HTTPRewrite* mutable_rewrite();
  void set_allocated_rewrite(::istio::networking::v1alpha3::HTTPRewrite* rewrite);

  // .google.protobuf.Duration timeout = 6;
  bool has_timeout() const;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 6;
  const ::google::protobuf::Duration& timeout() const;
  ::google::protobuf::Duration* release_timeout();
  ::google::protobuf::Duration* mutable_timeout();
  void set_allocated_timeout(::google::protobuf::Duration* timeout);

  // .istio.networking.v1alpha3.HTTPRetry retries = 7;
  bool has_retries() const;
  void clear_retries();
  static const int kRetriesFieldNumber = 7;
  const ::istio::networking::v1alpha3::HTTPRetry& retries() const;
  ::istio::networking::v1alpha3::HTTPRetry* release_retries();
  ::istio::networking::v1alpha3::HTTPRetry* mutable_retries();
  void set_allocated_retries(::istio::networking::v1alpha3::HTTPRetry* retries);

  // .istio.networking.v1alpha3.HTTPFaultInjection fault = 8;
  bool has_fault() const;
  void clear_fault();
  static const int kFaultFieldNumber = 8;
  const ::istio::networking::v1alpha3::HTTPFaultInjection& fault() const;
  ::istio::networking::v1alpha3::HTTPFaultInjection* release_fault();
  ::istio::networking::v1alpha3::HTTPFaultInjection* mutable_fault();
  void set_allocated_fault(::istio::networking::v1alpha3::HTTPFaultInjection* fault);

  // .istio.networking.v1alpha3.Destination mirror = 9;
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 9;
  const ::istio::networking::v1alpha3::Destination& mirror() const;
  ::istio::networking::v1alpha3::Destination* release_mirror();
  ::istio::networking::v1alpha3::Destination* mutable_mirror();
  void set_allocated_mirror(::istio::networking::v1alpha3::Destination* mirror);

  // .istio.networking.v1alpha3.CorsPolicy cors_policy = 10;
  bool has_cors_policy() const;
  void clear_cors_policy();
  static const int kCorsPolicyFieldNumber = 10;
  const ::istio::networking::v1alpha3::CorsPolicy& cors_policy() const;
  ::istio::networking::v1alpha3::CorsPolicy* release_cors_policy();
  ::istio::networking::v1alpha3::CorsPolicy* mutable_cors_policy();
  void set_allocated_cors_policy(::istio::networking::v1alpha3::CorsPolicy* cors_policy);

  // .istio.networking.v1alpha3.Headers headers = 16;
  bool has_headers() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 16;
  const ::istio::networking::v1alpha3::Headers& headers() const;
  ::istio::networking::v1alpha3::Headers* release_headers();
  ::istio::networking::v1alpha3::Headers* mutable_headers();
  void set_allocated_headers(::istio::networking::v1alpha3::Headers* headers);

  // bool websocket_upgrade = 5;
  void clear_websocket_upgrade();
  static const int kWebsocketUpgradeFieldNumber = 5;
  bool websocket_upgrade() const;
  void set_websocket_upgrade(bool value);

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.HTTPRoute)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::HTTPMatchRequest > match_;
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::HTTPRouteDestination > route_;
  ::google::protobuf::internal::MapField<
      HTTPRoute_AppendHeadersEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > append_headers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> remove_response_headers_;
  ::google::protobuf::internal::MapField<
      HTTPRoute_AppendResponseHeadersEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > append_response_headers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> remove_request_headers_;
  ::google::protobuf::internal::MapField<
      HTTPRoute_AppendRequestHeadersEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > append_request_headers_;
  ::istio::networking::v1alpha3::HTTPRedirect* redirect_;
  ::istio::networking::v1alpha3::HTTPRewrite* rewrite_;
  ::google::protobuf::Duration* timeout_;
  ::istio::networking::v1alpha3::HTTPRetry* retries_;
  ::istio::networking::v1alpha3::HTTPFaultInjection* fault_;
  ::istio::networking::v1alpha3::Destination* mirror_;
  ::istio::networking::v1alpha3::CorsPolicy* cors_policy_;
  ::istio::networking::v1alpha3::Headers* headers_;
  bool websocket_upgrade_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPRouteImpl();
};
// -------------------------------------------------------------------

class Headers_HeaderOperations_SetEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Headers_HeaderOperations_SetEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Headers_HeaderOperations_SetEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Headers_HeaderOperations_SetEntry_DoNotUse();
  Headers_HeaderOperations_SetEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Headers_HeaderOperations_SetEntry_DoNotUse& other);
  static const Headers_HeaderOperations_SetEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Headers_HeaderOperations_SetEntry_DoNotUse*>(&_Headers_HeaderOperations_SetEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Headers_HeaderOperations_AddEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Headers_HeaderOperations_AddEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Headers_HeaderOperations_AddEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Headers_HeaderOperations_AddEntry_DoNotUse();
  Headers_HeaderOperations_AddEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Headers_HeaderOperations_AddEntry_DoNotUse& other);
  static const Headers_HeaderOperations_AddEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Headers_HeaderOperations_AddEntry_DoNotUse*>(&_Headers_HeaderOperations_AddEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Headers_HeaderOperations : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.Headers.HeaderOperations) */ {
 public:
  Headers_HeaderOperations();
  virtual ~Headers_HeaderOperations();

  Headers_HeaderOperations(const Headers_HeaderOperations& from);

  inline Headers_HeaderOperations& operator=(const Headers_HeaderOperations& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Headers_HeaderOperations(Headers_HeaderOperations&& from) noexcept
    : Headers_HeaderOperations() {
    *this = ::std::move(from);
  }

  inline Headers_HeaderOperations& operator=(Headers_HeaderOperations&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Headers_HeaderOperations& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Headers_HeaderOperations* internal_default_instance() {
    return reinterpret_cast<const Headers_HeaderOperations*>(
               &_Headers_HeaderOperations_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Headers_HeaderOperations* other);
  friend void swap(Headers_HeaderOperations& a, Headers_HeaderOperations& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Headers_HeaderOperations* New() const PROTOBUF_FINAL { return New(NULL); }

  Headers_HeaderOperations* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Headers_HeaderOperations& from);
  void MergeFrom(const Headers_HeaderOperations& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Headers_HeaderOperations* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> set = 1;
  int set_size() const;
  void clear_set();
  static const int kSetFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      set() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_set();

  // map<string, string> add = 2;
  int add_size() const;
  void clear_add();
  static const int kAddFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      add() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_add();

  // repeated string remove = 3;
  int remove_size() const;
  void clear_remove();
  static const int kRemoveFieldNumber = 3;
  const ::std::string& remove(int index) const;
  ::std::string* mutable_remove(int index);
  void set_remove(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_remove(int index, ::std::string&& value);
  #endif
  void set_remove(int index, const char* value);
  void set_remove(int index, const char* value, size_t size);
  ::std::string* add_remove();
  void add_remove(const ::std::string& value);
  #if LANG_CXX11
  void add_remove(::std::string&& value);
  #endif
  void add_remove(const char* value);
  void add_remove(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& remove() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_remove();

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.Headers.HeaderOperations)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Headers_HeaderOperations_SetEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > set_;
  ::google::protobuf::internal::MapField<
      Headers_HeaderOperations_AddEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > add_;
  ::google::protobuf::RepeatedPtrField< ::std::string> remove_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHeaders_HeaderOperationsImpl();
};
// -------------------------------------------------------------------

class Headers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.Headers) */ {
 public:
  Headers();
  virtual ~Headers();

  Headers(const Headers& from);

  inline Headers& operator=(const Headers& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Headers(Headers&& from) noexcept
    : Headers() {
    *this = ::std::move(from);
  }

  inline Headers& operator=(Headers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Headers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Headers* internal_default_instance() {
    return reinterpret_cast<const Headers*>(
               &_Headers_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Headers* other);
  friend void swap(Headers& a, Headers& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Headers* New() const PROTOBUF_FINAL { return New(NULL); }

  Headers* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Headers& from);
  void MergeFrom(const Headers& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Headers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Headers_HeaderOperations HeaderOperations;

  // accessors -------------------------------------------------------

  // .istio.networking.v1alpha3.Headers.HeaderOperations request = 1;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  const ::istio::networking::v1alpha3::Headers_HeaderOperations& request() const;
  ::istio::networking::v1alpha3::Headers_HeaderOperations* release_request();
  ::istio::networking::v1alpha3::Headers_HeaderOperations* mutable_request();
  void set_allocated_request(::istio::networking::v1alpha3::Headers_HeaderOperations* request);

  // .istio.networking.v1alpha3.Headers.HeaderOperations response = 2;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  const ::istio::networking::v1alpha3::Headers_HeaderOperations& response() const;
  ::istio::networking::v1alpha3::Headers_HeaderOperations* release_response();
  ::istio::networking::v1alpha3::Headers_HeaderOperations* mutable_response();
  void set_allocated_response(::istio::networking::v1alpha3::Headers_HeaderOperations* response);

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.Headers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::istio::networking::v1alpha3::Headers_HeaderOperations* request_;
  ::istio::networking::v1alpha3::Headers_HeaderOperations* response_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHeadersImpl();
};
// -------------------------------------------------------------------

class TLSRoute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.TLSRoute) */ {
 public:
  TLSRoute();
  virtual ~TLSRoute();

  TLSRoute(const TLSRoute& from);

  inline TLSRoute& operator=(const TLSRoute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TLSRoute(TLSRoute&& from) noexcept
    : TLSRoute() {
    *this = ::std::move(from);
  }

  inline TLSRoute& operator=(TLSRoute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TLSRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TLSRoute* internal_default_instance() {
    return reinterpret_cast<const TLSRoute*>(
               &_TLSRoute_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(TLSRoute* other);
  friend void swap(TLSRoute& a, TLSRoute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TLSRoute* New() const PROTOBUF_FINAL { return New(NULL); }

  TLSRoute* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TLSRoute& from);
  void MergeFrom(const TLSRoute& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TLSRoute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .istio.networking.v1alpha3.TLSMatchAttributes match = 1;
  int match_size() const;
  void clear_match();
  static const int kMatchFieldNumber = 1;
  const ::istio::networking::v1alpha3::TLSMatchAttributes& match(int index) const;
  ::istio::networking::v1alpha3::TLSMatchAttributes* mutable_match(int index);
  ::istio::networking::v1alpha3::TLSMatchAttributes* add_match();
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::TLSMatchAttributes >*
      mutable_match();
  const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::TLSMatchAttributes >&
      match() const;

  // repeated .istio.networking.v1alpha3.RouteDestination route = 2;
  int route_size() const;
  void clear_route();
  static const int kRouteFieldNumber = 2;
  const ::istio::networking::v1alpha3::RouteDestination& route(int index) const;
  ::istio::networking::v1alpha3::RouteDestination* mutable_route(int index);
  ::istio::networking::v1alpha3::RouteDestination* add_route();
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::RouteDestination >*
      mutable_route();
  const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::RouteDestination >&
      route() const;

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.TLSRoute)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::TLSMatchAttributes > match_;
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::RouteDestination > route_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsTLSRouteImpl();
};
// -------------------------------------------------------------------

class TCPRoute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.TCPRoute) */ {
 public:
  TCPRoute();
  virtual ~TCPRoute();

  TCPRoute(const TCPRoute& from);

  inline TCPRoute& operator=(const TCPRoute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TCPRoute(TCPRoute&& from) noexcept
    : TCPRoute() {
    *this = ::std::move(from);
  }

  inline TCPRoute& operator=(TCPRoute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TCPRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TCPRoute* internal_default_instance() {
    return reinterpret_cast<const TCPRoute*>(
               &_TCPRoute_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(TCPRoute* other);
  friend void swap(TCPRoute& a, TCPRoute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TCPRoute* New() const PROTOBUF_FINAL { return New(NULL); }

  TCPRoute* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TCPRoute& from);
  void MergeFrom(const TCPRoute& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TCPRoute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .istio.networking.v1alpha3.L4MatchAttributes match = 1;
  int match_size() const;
  void clear_match();
  static const int kMatchFieldNumber = 1;
  const ::istio::networking::v1alpha3::L4MatchAttributes& match(int index) const;
  ::istio::networking::v1alpha3::L4MatchAttributes* mutable_match(int index);
  ::istio::networking::v1alpha3::L4MatchAttributes* add_match();
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::L4MatchAttributes >*
      mutable_match();
  const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::L4MatchAttributes >&
      match() const;

  // repeated .istio.networking.v1alpha3.RouteDestination route = 2;
  int route_size() const;
  void clear_route();
  static const int kRouteFieldNumber = 2;
  const ::istio::networking::v1alpha3::RouteDestination& route(int index) const;
  ::istio::networking::v1alpha3::RouteDestination* mutable_route(int index);
  ::istio::networking::v1alpha3::RouteDestination* add_route();
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::RouteDestination >*
      mutable_route();
  const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::RouteDestination >&
      route() const;

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.TCPRoute)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::L4MatchAttributes > match_;
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::RouteDestination > route_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsTCPRouteImpl();
};
// -------------------------------------------------------------------

class HTTPMatchRequest_HeadersEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<HTTPMatchRequest_HeadersEntry_DoNotUse, 
    ::std::string, ::istio::networking::v1alpha3::StringMatch,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<HTTPMatchRequest_HeadersEntry_DoNotUse, 
    ::std::string, ::istio::networking::v1alpha3::StringMatch,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  HTTPMatchRequest_HeadersEntry_DoNotUse();
  HTTPMatchRequest_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const HTTPMatchRequest_HeadersEntry_DoNotUse& other);
  static const HTTPMatchRequest_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HTTPMatchRequest_HeadersEntry_DoNotUse*>(&_HTTPMatchRequest_HeadersEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class HTTPMatchRequest_SourceLabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<HTTPMatchRequest_SourceLabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<HTTPMatchRequest_SourceLabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  HTTPMatchRequest_SourceLabelsEntry_DoNotUse();
  HTTPMatchRequest_SourceLabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const HTTPMatchRequest_SourceLabelsEntry_DoNotUse& other);
  static const HTTPMatchRequest_SourceLabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HTTPMatchRequest_SourceLabelsEntry_DoNotUse*>(&_HTTPMatchRequest_SourceLabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class HTTPMatchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.HTTPMatchRequest) */ {
 public:
  HTTPMatchRequest();
  virtual ~HTTPMatchRequest();

  HTTPMatchRequest(const HTTPMatchRequest& from);

  inline HTTPMatchRequest& operator=(const HTTPMatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HTTPMatchRequest(HTTPMatchRequest&& from) noexcept
    : HTTPMatchRequest() {
    *this = ::std::move(from);
  }

  inline HTTPMatchRequest& operator=(HTTPMatchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HTTPMatchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HTTPMatchRequest* internal_default_instance() {
    return reinterpret_cast<const HTTPMatchRequest*>(
               &_HTTPMatchRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(HTTPMatchRequest* other);
  friend void swap(HTTPMatchRequest& a, HTTPMatchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HTTPMatchRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  HTTPMatchRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HTTPMatchRequest& from);
  void MergeFrom(const HTTPMatchRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HTTPMatchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .istio.networking.v1alpha3.StringMatch> headers = 5;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::istio::networking::v1alpha3::StringMatch >&
      headers() const;
  ::google::protobuf::Map< ::std::string, ::istio::networking::v1alpha3::StringMatch >*
      mutable_headers();

  // map<string, string> source_labels = 7;
  int source_labels_size() const;
  void clear_source_labels();
  static const int kSourceLabelsFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      source_labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_source_labels();

  // repeated string gateways = 8;
  int gateways_size() const;
  void clear_gateways();
  static const int kGatewaysFieldNumber = 8;
  const ::std::string& gateways(int index) const;
  ::std::string* mutable_gateways(int index);
  void set_gateways(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_gateways(int index, ::std::string&& value);
  #endif
  void set_gateways(int index, const char* value);
  void set_gateways(int index, const char* value, size_t size);
  ::std::string* add_gateways();
  void add_gateways(const ::std::string& value);
  #if LANG_CXX11
  void add_gateways(::std::string&& value);
  #endif
  void add_gateways(const char* value);
  void add_gateways(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& gateways() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_gateways();

  // .istio.networking.v1alpha3.StringMatch uri = 1;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::istio::networking::v1alpha3::StringMatch& uri() const;
  ::istio::networking::v1alpha3::StringMatch* release_uri();
  ::istio::networking::v1alpha3::StringMatch* mutable_uri();
  void set_allocated_uri(::istio::networking::v1alpha3::StringMatch* uri);

  // .istio.networking.v1alpha3.StringMatch scheme = 2;
  bool has_scheme() const;
  void clear_scheme();
  static const int kSchemeFieldNumber = 2;
  const ::istio::networking::v1alpha3::StringMatch& scheme() const;
  ::istio::networking::v1alpha3::StringMatch* release_scheme();
  ::istio::networking::v1alpha3::StringMatch* mutable_scheme();
  void set_allocated_scheme(::istio::networking::v1alpha3::StringMatch* scheme);

  // .istio.networking.v1alpha3.StringMatch method = 3;
  bool has_method() const;
  void clear_method();
  static const int kMethodFieldNumber = 3;
  const ::istio::networking::v1alpha3::StringMatch& method() const;
  ::istio::networking::v1alpha3::StringMatch* release_method();
  ::istio::networking::v1alpha3::StringMatch* mutable_method();
  void set_allocated_method(::istio::networking::v1alpha3::StringMatch* method);

  // .istio.networking.v1alpha3.StringMatch authority = 4;
  bool has_authority() const;
  void clear_authority();
  static const int kAuthorityFieldNumber = 4;
  const ::istio::networking::v1alpha3::StringMatch& authority() const;
  ::istio::networking::v1alpha3::StringMatch* release_authority();
  ::istio::networking::v1alpha3::StringMatch* mutable_authority();
  void set_allocated_authority(::istio::networking::v1alpha3::StringMatch* authority);

  // uint32 port = 6;
  void clear_port();
  static const int kPortFieldNumber = 6;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.HTTPMatchRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      HTTPMatchRequest_HeadersEntry_DoNotUse,
      ::std::string, ::istio::networking::v1alpha3::StringMatch,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > headers_;
  ::google::protobuf::internal::MapField<
      HTTPMatchRequest_SourceLabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > source_labels_;
  ::google::protobuf::RepeatedPtrField< ::std::string> gateways_;
  ::istio::networking::v1alpha3::StringMatch* uri_;
  ::istio::networking::v1alpha3::StringMatch* scheme_;
  ::istio::networking::v1alpha3::StringMatch* method_;
  ::istio::networking::v1alpha3::StringMatch* authority_;
  ::google::protobuf::uint32 port_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPMatchRequestImpl();
};
// -------------------------------------------------------------------

class HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse();
  HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse& other);
  static const HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse*>(&_HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse();
  HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse& other);
  static const HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse*>(&_HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class HTTPRouteDestination : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.HTTPRouteDestination) */ {
 public:
  HTTPRouteDestination();
  virtual ~HTTPRouteDestination();

  HTTPRouteDestination(const HTTPRouteDestination& from);

  inline HTTPRouteDestination& operator=(const HTTPRouteDestination& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HTTPRouteDestination(HTTPRouteDestination&& from) noexcept
    : HTTPRouteDestination() {
    *this = ::std::move(from);
  }

  inline HTTPRouteDestination& operator=(HTTPRouteDestination&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HTTPRouteDestination& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HTTPRouteDestination* internal_default_instance() {
    return reinterpret_cast<const HTTPRouteDestination*>(
               &_HTTPRouteDestination_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(HTTPRouteDestination* other);
  friend void swap(HTTPRouteDestination& a, HTTPRouteDestination& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HTTPRouteDestination* New() const PROTOBUF_FINAL { return New(NULL); }

  HTTPRouteDestination* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HTTPRouteDestination& from);
  void MergeFrom(const HTTPRouteDestination& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HTTPRouteDestination* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string remove_response_headers = 3 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int remove_response_headers_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_remove_response_headers();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kRemoveResponseHeadersFieldNumber = 3;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::std::string& remove_response_headers(int index) const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* mutable_remove_response_headers(int index);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_remove_response_headers(int index, const ::std::string& value);
  #if LANG_CXX11
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_remove_response_headers(int index, ::std::string&& value);
  #endif
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_remove_response_headers(int index, const char* value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_remove_response_headers(int index, const char* value, size_t size);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* add_remove_response_headers();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_remove_response_headers(const ::std::string& value);
  #if LANG_CXX11
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_remove_response_headers(::std::string&& value);
  #endif
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_remove_response_headers(const char* value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_remove_response_headers(const char* value, size_t size);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::RepeatedPtrField< ::std::string>& remove_response_headers() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_remove_response_headers();

  // map<string, string> append_response_headers = 4 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int append_response_headers_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_append_response_headers();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kAppendResponseHeadersFieldNumber = 4;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::Map< ::std::string, ::std::string >&
      append_response_headers() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_append_response_headers();

  // repeated string remove_request_headers = 5 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int remove_request_headers_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_remove_request_headers();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kRemoveRequestHeadersFieldNumber = 5;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::std::string& remove_request_headers(int index) const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* mutable_remove_request_headers(int index);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_remove_request_headers(int index, const ::std::string& value);
  #if LANG_CXX11
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_remove_request_headers(int index, ::std::string&& value);
  #endif
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_remove_request_headers(int index, const char* value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_remove_request_headers(int index, const char* value, size_t size);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* add_remove_request_headers();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_remove_request_headers(const ::std::string& value);
  #if LANG_CXX11
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_remove_request_headers(::std::string&& value);
  #endif
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_remove_request_headers(const char* value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void add_remove_request_headers(const char* value, size_t size);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::RepeatedPtrField< ::std::string>& remove_request_headers() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_remove_request_headers();

  // map<string, string> append_request_headers = 6 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int append_request_headers_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_append_request_headers();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kAppendRequestHeadersFieldNumber = 6;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::Map< ::std::string, ::std::string >&
      append_request_headers() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_append_request_headers();

  // .istio.networking.v1alpha3.Destination destination = 1;
  bool has_destination() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 1;
  const ::istio::networking::v1alpha3::Destination& destination() const;
  ::istio::networking::v1alpha3::Destination* release_destination();
  ::istio::networking::v1alpha3::Destination* mutable_destination();
  void set_allocated_destination(::istio::networking::v1alpha3::Destination* destination);

  // .istio.networking.v1alpha3.Headers headers = 7;
  bool has_headers() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 7;
  const ::istio::networking::v1alpha3::Headers& headers() const;
  ::istio::networking::v1alpha3::Headers* release_headers();
  ::istio::networking::v1alpha3::Headers* mutable_headers();
  void set_allocated_headers(::istio::networking::v1alpha3::Headers* headers);

  // int32 weight = 2;
  void clear_weight();
  static const int kWeightFieldNumber = 2;
  ::google::protobuf::int32 weight() const;
  void set_weight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.HTTPRouteDestination)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> remove_response_headers_;
  ::google::protobuf::internal::MapField<
      HTTPRouteDestination_AppendResponseHeadersEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > append_response_headers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> remove_request_headers_;
  ::google::protobuf::internal::MapField<
      HTTPRouteDestination_AppendRequestHeadersEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > append_request_headers_;
  ::istio::networking::v1alpha3::Destination* destination_;
  ::istio::networking::v1alpha3::Headers* headers_;
  ::google::protobuf::int32 weight_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPRouteDestinationImpl();
};
// -------------------------------------------------------------------

class RouteDestination : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.RouteDestination) */ {
 public:
  RouteDestination();
  virtual ~RouteDestination();

  RouteDestination(const RouteDestination& from);

  inline RouteDestination& operator=(const RouteDestination& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RouteDestination(RouteDestination&& from) noexcept
    : RouteDestination() {
    *this = ::std::move(from);
  }

  inline RouteDestination& operator=(RouteDestination&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RouteDestination& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteDestination* internal_default_instance() {
    return reinterpret_cast<const RouteDestination*>(
               &_RouteDestination_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(RouteDestination* other);
  friend void swap(RouteDestination& a, RouteDestination& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RouteDestination* New() const PROTOBUF_FINAL { return New(NULL); }

  RouteDestination* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RouteDestination& from);
  void MergeFrom(const RouteDestination& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RouteDestination* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .istio.networking.v1alpha3.Destination destination = 1;
  bool has_destination() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 1;
  const ::istio::networking::v1alpha3::Destination& destination() const;
  ::istio::networking::v1alpha3::Destination* release_destination();
  ::istio::networking::v1alpha3::Destination* mutable_destination();
  void set_allocated_destination(::istio::networking::v1alpha3::Destination* destination);

  // int32 weight = 2;
  void clear_weight();
  static const int kWeightFieldNumber = 2;
  ::google::protobuf::int32 weight() const;
  void set_weight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.RouteDestination)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::istio::networking::v1alpha3::Destination* destination_;
  ::google::protobuf::int32 weight_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsRouteDestinationImpl();
};
// -------------------------------------------------------------------

class L4MatchAttributes_SourceLabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<L4MatchAttributes_SourceLabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<L4MatchAttributes_SourceLabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  L4MatchAttributes_SourceLabelsEntry_DoNotUse();
  L4MatchAttributes_SourceLabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const L4MatchAttributes_SourceLabelsEntry_DoNotUse& other);
  static const L4MatchAttributes_SourceLabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const L4MatchAttributes_SourceLabelsEntry_DoNotUse*>(&_L4MatchAttributes_SourceLabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class L4MatchAttributes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.L4MatchAttributes) */ {
 public:
  L4MatchAttributes();
  virtual ~L4MatchAttributes();

  L4MatchAttributes(const L4MatchAttributes& from);

  inline L4MatchAttributes& operator=(const L4MatchAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  L4MatchAttributes(L4MatchAttributes&& from) noexcept
    : L4MatchAttributes() {
    *this = ::std::move(from);
  }

  inline L4MatchAttributes& operator=(L4MatchAttributes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const L4MatchAttributes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const L4MatchAttributes* internal_default_instance() {
    return reinterpret_cast<const L4MatchAttributes*>(
               &_L4MatchAttributes_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(L4MatchAttributes* other);
  friend void swap(L4MatchAttributes& a, L4MatchAttributes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline L4MatchAttributes* New() const PROTOBUF_FINAL { return New(NULL); }

  L4MatchAttributes* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const L4MatchAttributes& from);
  void MergeFrom(const L4MatchAttributes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(L4MatchAttributes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string destination_subnets = 1;
  int destination_subnets_size() const;
  void clear_destination_subnets();
  static const int kDestinationSubnetsFieldNumber = 1;
  const ::std::string& destination_subnets(int index) const;
  ::std::string* mutable_destination_subnets(int index);
  void set_destination_subnets(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_destination_subnets(int index, ::std::string&& value);
  #endif
  void set_destination_subnets(int index, const char* value);
  void set_destination_subnets(int index, const char* value, size_t size);
  ::std::string* add_destination_subnets();
  void add_destination_subnets(const ::std::string& value);
  #if LANG_CXX11
  void add_destination_subnets(::std::string&& value);
  #endif
  void add_destination_subnets(const char* value);
  void add_destination_subnets(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& destination_subnets() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_destination_subnets();

  // map<string, string> source_labels = 4;
  int source_labels_size() const;
  void clear_source_labels();
  static const int kSourceLabelsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      source_labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_source_labels();

  // repeated string gateways = 5;
  int gateways_size() const;
  void clear_gateways();
  static const int kGatewaysFieldNumber = 5;
  const ::std::string& gateways(int index) const;
  ::std::string* mutable_gateways(int index);
  void set_gateways(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_gateways(int index, ::std::string&& value);
  #endif
  void set_gateways(int index, const char* value);
  void set_gateways(int index, const char* value, size_t size);
  ::std::string* add_gateways();
  void add_gateways(const ::std::string& value);
  #if LANG_CXX11
  void add_gateways(::std::string&& value);
  #endif
  void add_gateways(const char* value);
  void add_gateways(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& gateways() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_gateways();

  // string source_subnet = 3;
  void clear_source_subnet();
  static const int kSourceSubnetFieldNumber = 3;
  const ::std::string& source_subnet() const;
  void set_source_subnet(const ::std::string& value);
  #if LANG_CXX11
  void set_source_subnet(::std::string&& value);
  #endif
  void set_source_subnet(const char* value);
  void set_source_subnet(const char* value, size_t size);
  ::std::string* mutable_source_subnet();
  ::std::string* release_source_subnet();
  void set_allocated_source_subnet(::std::string* source_subnet);

  // uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.L4MatchAttributes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> destination_subnets_;
  ::google::protobuf::internal::MapField<
      L4MatchAttributes_SourceLabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > source_labels_;
  ::google::protobuf::RepeatedPtrField< ::std::string> gateways_;
  ::google::protobuf::internal::ArenaStringPtr source_subnet_;
  ::google::protobuf::uint32 port_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsL4MatchAttributesImpl();
};
// -------------------------------------------------------------------

class TLSMatchAttributes_SourceLabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<TLSMatchAttributes_SourceLabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<TLSMatchAttributes_SourceLabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  TLSMatchAttributes_SourceLabelsEntry_DoNotUse();
  TLSMatchAttributes_SourceLabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const TLSMatchAttributes_SourceLabelsEntry_DoNotUse& other);
  static const TLSMatchAttributes_SourceLabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TLSMatchAttributes_SourceLabelsEntry_DoNotUse*>(&_TLSMatchAttributes_SourceLabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class TLSMatchAttributes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.TLSMatchAttributes) */ {
 public:
  TLSMatchAttributes();
  virtual ~TLSMatchAttributes();

  TLSMatchAttributes(const TLSMatchAttributes& from);

  inline TLSMatchAttributes& operator=(const TLSMatchAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TLSMatchAttributes(TLSMatchAttributes&& from) noexcept
    : TLSMatchAttributes() {
    *this = ::std::move(from);
  }

  inline TLSMatchAttributes& operator=(TLSMatchAttributes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TLSMatchAttributes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TLSMatchAttributes* internal_default_instance() {
    return reinterpret_cast<const TLSMatchAttributes*>(
               &_TLSMatchAttributes_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(TLSMatchAttributes* other);
  friend void swap(TLSMatchAttributes& a, TLSMatchAttributes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TLSMatchAttributes* New() const PROTOBUF_FINAL { return New(NULL); }

  TLSMatchAttributes* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TLSMatchAttributes& from);
  void MergeFrom(const TLSMatchAttributes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TLSMatchAttributes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string sni_hosts = 1;
  int sni_hosts_size() const;
  void clear_sni_hosts();
  static const int kSniHostsFieldNumber = 1;
  const ::std::string& sni_hosts(int index) const;
  ::std::string* mutable_sni_hosts(int index);
  void set_sni_hosts(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_sni_hosts(int index, ::std::string&& value);
  #endif
  void set_sni_hosts(int index, const char* value);
  void set_sni_hosts(int index, const char* value, size_t size);
  ::std::string* add_sni_hosts();
  void add_sni_hosts(const ::std::string& value);
  #if LANG_CXX11
  void add_sni_hosts(::std::string&& value);
  #endif
  void add_sni_hosts(const char* value);
  void add_sni_hosts(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& sni_hosts() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sni_hosts();

  // repeated string destination_subnets = 2;
  int destination_subnets_size() const;
  void clear_destination_subnets();
  static const int kDestinationSubnetsFieldNumber = 2;
  const ::std::string& destination_subnets(int index) const;
  ::std::string* mutable_destination_subnets(int index);
  void set_destination_subnets(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_destination_subnets(int index, ::std::string&& value);
  #endif
  void set_destination_subnets(int index, const char* value);
  void set_destination_subnets(int index, const char* value, size_t size);
  ::std::string* add_destination_subnets();
  void add_destination_subnets(const ::std::string& value);
  #if LANG_CXX11
  void add_destination_subnets(::std::string&& value);
  #endif
  void add_destination_subnets(const char* value);
  void add_destination_subnets(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& destination_subnets() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_destination_subnets();

  // map<string, string> source_labels = 5;
  int source_labels_size() const;
  void clear_source_labels();
  static const int kSourceLabelsFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      source_labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_source_labels();

  // repeated string gateways = 6;
  int gateways_size() const;
  void clear_gateways();
  static const int kGatewaysFieldNumber = 6;
  const ::std::string& gateways(int index) const;
  ::std::string* mutable_gateways(int index);
  void set_gateways(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_gateways(int index, ::std::string&& value);
  #endif
  void set_gateways(int index, const char* value);
  void set_gateways(int index, const char* value, size_t size);
  ::std::string* add_gateways();
  void add_gateways(const ::std::string& value);
  #if LANG_CXX11
  void add_gateways(::std::string&& value);
  #endif
  void add_gateways(const char* value);
  void add_gateways(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& gateways() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_gateways();

  // string source_subnet = 4;
  void clear_source_subnet();
  static const int kSourceSubnetFieldNumber = 4;
  const ::std::string& source_subnet() const;
  void set_source_subnet(const ::std::string& value);
  #if LANG_CXX11
  void set_source_subnet(::std::string&& value);
  #endif
  void set_source_subnet(const char* value);
  void set_source_subnet(const char* value, size_t size);
  ::std::string* mutable_source_subnet();
  ::std::string* release_source_subnet();
  void set_allocated_source_subnet(::std::string* source_subnet);

  // uint32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.TLSMatchAttributes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sni_hosts_;
  ::google::protobuf::RepeatedPtrField< ::std::string> destination_subnets_;
  ::google::protobuf::internal::MapField<
      TLSMatchAttributes_SourceLabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > source_labels_;
  ::google::protobuf::RepeatedPtrField< ::std::string> gateways_;
  ::google::protobuf::internal::ArenaStringPtr source_subnet_;
  ::google::protobuf::uint32 port_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsTLSMatchAttributesImpl();
};
// -------------------------------------------------------------------

class HTTPRedirect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.HTTPRedirect) */ {
 public:
  HTTPRedirect();
  virtual ~HTTPRedirect();

  HTTPRedirect(const HTTPRedirect& from);

  inline HTTPRedirect& operator=(const HTTPRedirect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HTTPRedirect(HTTPRedirect&& from) noexcept
    : HTTPRedirect() {
    *this = ::std::move(from);
  }

  inline HTTPRedirect& operator=(HTTPRedirect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HTTPRedirect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HTTPRedirect* internal_default_instance() {
    return reinterpret_cast<const HTTPRedirect*>(
               &_HTTPRedirect_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(HTTPRedirect* other);
  friend void swap(HTTPRedirect& a, HTTPRedirect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HTTPRedirect* New() const PROTOBUF_FINAL { return New(NULL); }

  HTTPRedirect* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HTTPRedirect& from);
  void MergeFrom(const HTTPRedirect& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HTTPRedirect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uri = 1;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // string authority = 2;
  void clear_authority();
  static const int kAuthorityFieldNumber = 2;
  const ::std::string& authority() const;
  void set_authority(const ::std::string& value);
  #if LANG_CXX11
  void set_authority(::std::string&& value);
  #endif
  void set_authority(const char* value);
  void set_authority(const char* value, size_t size);
  ::std::string* mutable_authority();
  ::std::string* release_authority();
  void set_allocated_authority(::std::string* authority);

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.HTTPRedirect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr authority_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPRedirectImpl();
};
// -------------------------------------------------------------------

class HTTPRewrite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.HTTPRewrite) */ {
 public:
  HTTPRewrite();
  virtual ~HTTPRewrite();

  HTTPRewrite(const HTTPRewrite& from);

  inline HTTPRewrite& operator=(const HTTPRewrite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HTTPRewrite(HTTPRewrite&& from) noexcept
    : HTTPRewrite() {
    *this = ::std::move(from);
  }

  inline HTTPRewrite& operator=(HTTPRewrite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HTTPRewrite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HTTPRewrite* internal_default_instance() {
    return reinterpret_cast<const HTTPRewrite*>(
               &_HTTPRewrite_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(HTTPRewrite* other);
  friend void swap(HTTPRewrite& a, HTTPRewrite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HTTPRewrite* New() const PROTOBUF_FINAL { return New(NULL); }

  HTTPRewrite* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HTTPRewrite& from);
  void MergeFrom(const HTTPRewrite& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HTTPRewrite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uri = 1;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // string authority = 2;
  void clear_authority();
  static const int kAuthorityFieldNumber = 2;
  const ::std::string& authority() const;
  void set_authority(const ::std::string& value);
  #if LANG_CXX11
  void set_authority(::std::string&& value);
  #endif
  void set_authority(const char* value);
  void set_authority(const char* value, size_t size);
  ::std::string* mutable_authority();
  ::std::string* release_authority();
  void set_allocated_authority(::std::string* authority);

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.HTTPRewrite)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr authority_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPRewriteImpl();
};
// -------------------------------------------------------------------

class StringMatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.StringMatch) */ {
 public:
  StringMatch();
  virtual ~StringMatch();

  StringMatch(const StringMatch& from);

  inline StringMatch& operator=(const StringMatch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StringMatch(StringMatch&& from) noexcept
    : StringMatch() {
    *this = ::std::move(from);
  }

  inline StringMatch& operator=(StringMatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StringMatch& default_instance();

  enum MatchTypeCase {
    kExact = 1,
    kPrefix = 2,
    kRegex = 3,
    MATCH_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringMatch* internal_default_instance() {
    return reinterpret_cast<const StringMatch*>(
               &_StringMatch_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(StringMatch* other);
  friend void swap(StringMatch& a, StringMatch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StringMatch* New() const PROTOBUF_FINAL { return New(NULL); }

  StringMatch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StringMatch& from);
  void MergeFrom(const StringMatch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StringMatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string exact = 1;
  private:
  bool has_exact() const;
  public:
  void clear_exact();
  static const int kExactFieldNumber = 1;
  const ::std::string& exact() const;
  void set_exact(const ::std::string& value);
  #if LANG_CXX11
  void set_exact(::std::string&& value);
  #endif
  void set_exact(const char* value);
  void set_exact(const char* value, size_t size);
  ::std::string* mutable_exact();
  ::std::string* release_exact();
  void set_allocated_exact(::std::string* exact);

  // string prefix = 2;
  private:
  bool has_prefix() const;
  public:
  void clear_prefix();
  static const int kPrefixFieldNumber = 2;
  const ::std::string& prefix() const;
  void set_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_prefix(::std::string&& value);
  #endif
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  ::std::string* mutable_prefix();
  ::std::string* release_prefix();
  void set_allocated_prefix(::std::string* prefix);

  // string regex = 3;
  private:
  bool has_regex() const;
  public:
  void clear_regex();
  static const int kRegexFieldNumber = 3;
  const ::std::string& regex() const;
  void set_regex(const ::std::string& value);
  #if LANG_CXX11
  void set_regex(::std::string&& value);
  #endif
  void set_regex(const char* value);
  void set_regex(const char* value, size_t size);
  ::std::string* mutable_regex();
  ::std::string* release_regex();
  void set_allocated_regex(::std::string* regex);

  MatchTypeCase match_type_case() const;
  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.StringMatch)
 private:
  void set_has_exact();
  void set_has_prefix();
  void set_has_regex();

  inline bool has_match_type() const;
  void clear_match_type();
  inline void clear_has_match_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union MatchTypeUnion {
    MatchTypeUnion() {}
    ::google::protobuf::internal::ArenaStringPtr exact_;
    ::google::protobuf::internal::ArenaStringPtr prefix_;
    ::google::protobuf::internal::ArenaStringPtr regex_;
  } match_type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsStringMatchImpl();
};
// -------------------------------------------------------------------

class HTTPRetry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.HTTPRetry) */ {
 public:
  HTTPRetry();
  virtual ~HTTPRetry();

  HTTPRetry(const HTTPRetry& from);

  inline HTTPRetry& operator=(const HTTPRetry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HTTPRetry(HTTPRetry&& from) noexcept
    : HTTPRetry() {
    *this = ::std::move(from);
  }

  inline HTTPRetry& operator=(HTTPRetry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HTTPRetry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HTTPRetry* internal_default_instance() {
    return reinterpret_cast<const HTTPRetry*>(
               &_HTTPRetry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(HTTPRetry* other);
  friend void swap(HTTPRetry& a, HTTPRetry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HTTPRetry* New() const PROTOBUF_FINAL { return New(NULL); }

  HTTPRetry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HTTPRetry& from);
  void MergeFrom(const HTTPRetry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HTTPRetry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string retry_on = 3;
  void clear_retry_on();
  static const int kRetryOnFieldNumber = 3;
  const ::std::string& retry_on() const;
  void set_retry_on(const ::std::string& value);
  #if LANG_CXX11
  void set_retry_on(::std::string&& value);
  #endif
  void set_retry_on(const char* value);
  void set_retry_on(const char* value, size_t size);
  ::std::string* mutable_retry_on();
  ::std::string* release_retry_on();
  void set_allocated_retry_on(::std::string* retry_on);

  // .google.protobuf.Duration per_try_timeout = 2;
  bool has_per_try_timeout() const;
  void clear_per_try_timeout();
  static const int kPerTryTimeoutFieldNumber = 2;
  const ::google::protobuf::Duration& per_try_timeout() const;
  ::google::protobuf::Duration* release_per_try_timeout();
  ::google::protobuf::Duration* mutable_per_try_timeout();
  void set_allocated_per_try_timeout(::google::protobuf::Duration* per_try_timeout);

  // int32 attempts = 1;
  void clear_attempts();
  static const int kAttemptsFieldNumber = 1;
  ::google::protobuf::int32 attempts() const;
  void set_attempts(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.HTTPRetry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr retry_on_;
  ::google::protobuf::Duration* per_try_timeout_;
  ::google::protobuf::int32 attempts_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPRetryImpl();
};
// -------------------------------------------------------------------

class CorsPolicy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.CorsPolicy) */ {
 public:
  CorsPolicy();
  virtual ~CorsPolicy();

  CorsPolicy(const CorsPolicy& from);

  inline CorsPolicy& operator=(const CorsPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CorsPolicy(CorsPolicy&& from) noexcept
    : CorsPolicy() {
    *this = ::std::move(from);
  }

  inline CorsPolicy& operator=(CorsPolicy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CorsPolicy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CorsPolicy* internal_default_instance() {
    return reinterpret_cast<const CorsPolicy*>(
               &_CorsPolicy_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(CorsPolicy* other);
  friend void swap(CorsPolicy& a, CorsPolicy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CorsPolicy* New() const PROTOBUF_FINAL { return New(NULL); }

  CorsPolicy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CorsPolicy& from);
  void MergeFrom(const CorsPolicy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CorsPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string allow_origin = 1;
  int allow_origin_size() const;
  void clear_allow_origin();
  static const int kAllowOriginFieldNumber = 1;
  const ::std::string& allow_origin(int index) const;
  ::std::string* mutable_allow_origin(int index);
  void set_allow_origin(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_allow_origin(int index, ::std::string&& value);
  #endif
  void set_allow_origin(int index, const char* value);
  void set_allow_origin(int index, const char* value, size_t size);
  ::std::string* add_allow_origin();
  void add_allow_origin(const ::std::string& value);
  #if LANG_CXX11
  void add_allow_origin(::std::string&& value);
  #endif
  void add_allow_origin(const char* value);
  void add_allow_origin(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& allow_origin() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_allow_origin();

  // repeated string allow_methods = 2;
  int allow_methods_size() const;
  void clear_allow_methods();
  static const int kAllowMethodsFieldNumber = 2;
  const ::std::string& allow_methods(int index) const;
  ::std::string* mutable_allow_methods(int index);
  void set_allow_methods(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_allow_methods(int index, ::std::string&& value);
  #endif
  void set_allow_methods(int index, const char* value);
  void set_allow_methods(int index, const char* value, size_t size);
  ::std::string* add_allow_methods();
  void add_allow_methods(const ::std::string& value);
  #if LANG_CXX11
  void add_allow_methods(::std::string&& value);
  #endif
  void add_allow_methods(const char* value);
  void add_allow_methods(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& allow_methods() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_allow_methods();

  // repeated string allow_headers = 3;
  int allow_headers_size() const;
  void clear_allow_headers();
  static const int kAllowHeadersFieldNumber = 3;
  const ::std::string& allow_headers(int index) const;
  ::std::string* mutable_allow_headers(int index);
  void set_allow_headers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_allow_headers(int index, ::std::string&& value);
  #endif
  void set_allow_headers(int index, const char* value);
  void set_allow_headers(int index, const char* value, size_t size);
  ::std::string* add_allow_headers();
  void add_allow_headers(const ::std::string& value);
  #if LANG_CXX11
  void add_allow_headers(::std::string&& value);
  #endif
  void add_allow_headers(const char* value);
  void add_allow_headers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& allow_headers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_allow_headers();

  // repeated string expose_headers = 4;
  int expose_headers_size() const;
  void clear_expose_headers();
  static const int kExposeHeadersFieldNumber = 4;
  const ::std::string& expose_headers(int index) const;
  ::std::string* mutable_expose_headers(int index);
  void set_expose_headers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_expose_headers(int index, ::std::string&& value);
  #endif
  void set_expose_headers(int index, const char* value);
  void set_expose_headers(int index, const char* value, size_t size);
  ::std::string* add_expose_headers();
  void add_expose_headers(const ::std::string& value);
  #if LANG_CXX11
  void add_expose_headers(::std::string&& value);
  #endif
  void add_expose_headers(const char* value);
  void add_expose_headers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& expose_headers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_expose_headers();

  // .google.protobuf.Duration max_age = 5;
  bool has_max_age() const;
  void clear_max_age();
  static const int kMaxAgeFieldNumber = 5;
  const ::google::protobuf::Duration& max_age() const;
  ::google::protobuf::Duration* release_max_age();
  ::google::protobuf::Duration* mutable_max_age();
  void set_allocated_max_age(::google::protobuf::Duration* max_age);

  // .google.protobuf.BoolValue allow_credentials = 6;
  bool has_allow_credentials() const;
  void clear_allow_credentials();
  static const int kAllowCredentialsFieldNumber = 6;
  const ::google::protobuf::BoolValue& allow_credentials() const;
  ::google::protobuf::BoolValue* release_allow_credentials();
  ::google::protobuf::BoolValue* mutable_allow_credentials();
  void set_allocated_allow_credentials(::google::protobuf::BoolValue* allow_credentials);

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.CorsPolicy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> allow_origin_;
  ::google::protobuf::RepeatedPtrField< ::std::string> allow_methods_;
  ::google::protobuf::RepeatedPtrField< ::std::string> allow_headers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> expose_headers_;
  ::google::protobuf::Duration* max_age_;
  ::google::protobuf::BoolValue* allow_credentials_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsCorsPolicyImpl();
};
// -------------------------------------------------------------------

class HTTPFaultInjection_Delay : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.HTTPFaultInjection.Delay) */ {
 public:
  HTTPFaultInjection_Delay();
  virtual ~HTTPFaultInjection_Delay();

  HTTPFaultInjection_Delay(const HTTPFaultInjection_Delay& from);

  inline HTTPFaultInjection_Delay& operator=(const HTTPFaultInjection_Delay& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HTTPFaultInjection_Delay(HTTPFaultInjection_Delay&& from) noexcept
    : HTTPFaultInjection_Delay() {
    *this = ::std::move(from);
  }

  inline HTTPFaultInjection_Delay& operator=(HTTPFaultInjection_Delay&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HTTPFaultInjection_Delay& default_instance();

  enum HttpDelayTypeCase {
    kFixedDelay = 2,
    kExponentialDelay = 3,
    HTTP_DELAY_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HTTPFaultInjection_Delay* internal_default_instance() {
    return reinterpret_cast<const HTTPFaultInjection_Delay*>(
               &_HTTPFaultInjection_Delay_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(HTTPFaultInjection_Delay* other);
  friend void swap(HTTPFaultInjection_Delay& a, HTTPFaultInjection_Delay& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HTTPFaultInjection_Delay* New() const PROTOBUF_FINAL { return New(NULL); }

  HTTPFaultInjection_Delay* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HTTPFaultInjection_Delay& from);
  void MergeFrom(const HTTPFaultInjection_Delay& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HTTPFaultInjection_Delay* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .istio.networking.v1alpha3.Percent percentage = 5;
  bool has_percentage() const;
  void clear_percentage();
  static const int kPercentageFieldNumber = 5;
  const ::istio::networking::v1alpha3::Percent& percentage() const;
  ::istio::networking::v1alpha3::Percent* release_percentage();
  ::istio::networking::v1alpha3::Percent* mutable_percentage();
  void set_allocated_percentage(::istio::networking::v1alpha3::Percent* percentage);

  // int32 percent = 1 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_percent();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kPercentFieldNumber = 1;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::int32 percent() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_percent(::google::protobuf::int32 value);

  // .google.protobuf.Duration fixed_delay = 2;
  bool has_fixed_delay() const;
  void clear_fixed_delay();
  static const int kFixedDelayFieldNumber = 2;
  const ::google::protobuf::Duration& fixed_delay() const;
  ::google::protobuf::Duration* release_fixed_delay();
  ::google::protobuf::Duration* mutable_fixed_delay();
  void set_allocated_fixed_delay(::google::protobuf::Duration* fixed_delay);

  // .google.protobuf.Duration exponential_delay = 3;
  bool has_exponential_delay() const;
  void clear_exponential_delay();
  static const int kExponentialDelayFieldNumber = 3;
  const ::google::protobuf::Duration& exponential_delay() const;
  ::google::protobuf::Duration* release_exponential_delay();
  ::google::protobuf::Duration* mutable_exponential_delay();
  void set_allocated_exponential_delay(::google::protobuf::Duration* exponential_delay);

  HttpDelayTypeCase http_delay_type_case() const;
  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.HTTPFaultInjection.Delay)
 private:
  void set_has_fixed_delay();
  void set_has_exponential_delay();

  inline bool has_http_delay_type() const;
  void clear_http_delay_type();
  inline void clear_has_http_delay_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::istio::networking::v1alpha3::Percent* percentage_;
  ::google::protobuf::int32 percent_;
  union HttpDelayTypeUnion {
    HttpDelayTypeUnion() {}
    ::google::protobuf::Duration* fixed_delay_;
    ::google::protobuf::Duration* exponential_delay_;
  } http_delay_type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPFaultInjection_DelayImpl();
};
// -------------------------------------------------------------------

class HTTPFaultInjection_Abort : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.HTTPFaultInjection.Abort) */ {
 public:
  HTTPFaultInjection_Abort();
  virtual ~HTTPFaultInjection_Abort();

  HTTPFaultInjection_Abort(const HTTPFaultInjection_Abort& from);

  inline HTTPFaultInjection_Abort& operator=(const HTTPFaultInjection_Abort& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HTTPFaultInjection_Abort(HTTPFaultInjection_Abort&& from) noexcept
    : HTTPFaultInjection_Abort() {
    *this = ::std::move(from);
  }

  inline HTTPFaultInjection_Abort& operator=(HTTPFaultInjection_Abort&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HTTPFaultInjection_Abort& default_instance();

  enum ErrorTypeCase {
    kHttpStatus = 2,
    kGrpcStatus = 3,
    kHttp2Error = 4,
    ERROR_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HTTPFaultInjection_Abort* internal_default_instance() {
    return reinterpret_cast<const HTTPFaultInjection_Abort*>(
               &_HTTPFaultInjection_Abort_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(HTTPFaultInjection_Abort* other);
  friend void swap(HTTPFaultInjection_Abort& a, HTTPFaultInjection_Abort& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HTTPFaultInjection_Abort* New() const PROTOBUF_FINAL { return New(NULL); }

  HTTPFaultInjection_Abort* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HTTPFaultInjection_Abort& from);
  void MergeFrom(const HTTPFaultInjection_Abort& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HTTPFaultInjection_Abort* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .istio.networking.v1alpha3.Percent percentage = 5;
  bool has_percentage() const;
  void clear_percentage();
  static const int kPercentageFieldNumber = 5;
  const ::istio::networking::v1alpha3::Percent& percentage() const;
  ::istio::networking::v1alpha3::Percent* release_percentage();
  ::istio::networking::v1alpha3::Percent* mutable_percentage();
  void set_allocated_percentage(::istio::networking::v1alpha3::Percent* percentage);

  // int32 percent = 1 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_percent();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kPercentFieldNumber = 1;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::int32 percent() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_percent(::google::protobuf::int32 value);

  // int32 http_status = 2;
  private:
  bool has_http_status() const;
  public:
  void clear_http_status();
  static const int kHttpStatusFieldNumber = 2;
  ::google::protobuf::int32 http_status() const;
  void set_http_status(::google::protobuf::int32 value);

  // string grpc_status = 3;
  private:
  bool has_grpc_status() const;
  public:
  void clear_grpc_status();
  static const int kGrpcStatusFieldNumber = 3;
  const ::std::string& grpc_status() const;
  void set_grpc_status(const ::std::string& value);
  #if LANG_CXX11
  void set_grpc_status(::std::string&& value);
  #endif
  void set_grpc_status(const char* value);
  void set_grpc_status(const char* value, size_t size);
  ::std::string* mutable_grpc_status();
  ::std::string* release_grpc_status();
  void set_allocated_grpc_status(::std::string* grpc_status);

  // string http2_error = 4;
  private:
  bool has_http2_error() const;
  public:
  void clear_http2_error();
  static const int kHttp2ErrorFieldNumber = 4;
  const ::std::string& http2_error() const;
  void set_http2_error(const ::std::string& value);
  #if LANG_CXX11
  void set_http2_error(::std::string&& value);
  #endif
  void set_http2_error(const char* value);
  void set_http2_error(const char* value, size_t size);
  ::std::string* mutable_http2_error();
  ::std::string* release_http2_error();
  void set_allocated_http2_error(::std::string* http2_error);

  ErrorTypeCase error_type_case() const;
  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.HTTPFaultInjection.Abort)
 private:
  void set_has_http_status();
  void set_has_grpc_status();
  void set_has_http2_error();

  inline bool has_error_type() const;
  void clear_error_type();
  inline void clear_has_error_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::istio::networking::v1alpha3::Percent* percentage_;
  ::google::protobuf::int32 percent_;
  union ErrorTypeUnion {
    ErrorTypeUnion() {}
    ::google::protobuf::int32 http_status_;
    ::google::protobuf::internal::ArenaStringPtr grpc_status_;
    ::google::protobuf::internal::ArenaStringPtr http2_error_;
  } error_type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPFaultInjection_AbortImpl();
};
// -------------------------------------------------------------------

class HTTPFaultInjection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.HTTPFaultInjection) */ {
 public:
  HTTPFaultInjection();
  virtual ~HTTPFaultInjection();

  HTTPFaultInjection(const HTTPFaultInjection& from);

  inline HTTPFaultInjection& operator=(const HTTPFaultInjection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HTTPFaultInjection(HTTPFaultInjection&& from) noexcept
    : HTTPFaultInjection() {
    *this = ::std::move(from);
  }

  inline HTTPFaultInjection& operator=(HTTPFaultInjection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HTTPFaultInjection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HTTPFaultInjection* internal_default_instance() {
    return reinterpret_cast<const HTTPFaultInjection*>(
               &_HTTPFaultInjection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(HTTPFaultInjection* other);
  friend void swap(HTTPFaultInjection& a, HTTPFaultInjection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HTTPFaultInjection* New() const PROTOBUF_FINAL { return New(NULL); }

  HTTPFaultInjection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HTTPFaultInjection& from);
  void MergeFrom(const HTTPFaultInjection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HTTPFaultInjection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HTTPFaultInjection_Delay Delay;
  typedef HTTPFaultInjection_Abort Abort;

  // accessors -------------------------------------------------------

  // .istio.networking.v1alpha3.HTTPFaultInjection.Delay delay = 1;
  bool has_delay() const;
  void clear_delay();
  static const int kDelayFieldNumber = 1;
  const ::istio::networking::v1alpha3::HTTPFaultInjection_Delay& delay() const;
  ::istio::networking::v1alpha3::HTTPFaultInjection_Delay* release_delay();
  ::istio::networking::v1alpha3::HTTPFaultInjection_Delay* mutable_delay();
  void set_allocated_delay(::istio::networking::v1alpha3::HTTPFaultInjection_Delay* delay);

  // .istio.networking.v1alpha3.HTTPFaultInjection.Abort abort = 2;
  bool has_abort() const;
  void clear_abort();
  static const int kAbortFieldNumber = 2;
  const ::istio::networking::v1alpha3::HTTPFaultInjection_Abort& abort() const;
  ::istio::networking::v1alpha3::HTTPFaultInjection_Abort* release_abort();
  ::istio::networking::v1alpha3::HTTPFaultInjection_Abort* mutable_abort();
  void set_allocated_abort(::istio::networking::v1alpha3::HTTPFaultInjection_Abort* abort);

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.HTTPFaultInjection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::istio::networking::v1alpha3::HTTPFaultInjection_Delay* delay_;
  ::istio::networking::v1alpha3::HTTPFaultInjection_Abort* abort_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsHTTPFaultInjectionImpl();
};
// -------------------------------------------------------------------

class PortSelector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.PortSelector) */ {
 public:
  PortSelector();
  virtual ~PortSelector();

  PortSelector(const PortSelector& from);

  inline PortSelector& operator=(const PortSelector& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PortSelector(PortSelector&& from) noexcept
    : PortSelector() {
    *this = ::std::move(from);
  }

  inline PortSelector& operator=(PortSelector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PortSelector& default_instance();

  enum PortCase {
    kNumber = 1,
    kName = 2,
    PORT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PortSelector* internal_default_instance() {
    return reinterpret_cast<const PortSelector*>(
               &_PortSelector_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(PortSelector* other);
  friend void swap(PortSelector& a, PortSelector& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PortSelector* New() const PROTOBUF_FINAL { return New(NULL); }

  PortSelector* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PortSelector& from);
  void MergeFrom(const PortSelector& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PortSelector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 number = 1;
  private:
  bool has_number() const;
  public:
  void clear_number();
  static const int kNumberFieldNumber = 1;
  ::google::protobuf::uint32 number() const;
  void set_number(::google::protobuf::uint32 value);

  // string name = 2;
  private:
  bool has_name() const;
  public:
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  PortCase port_case() const;
  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.PortSelector)
 private:
  void set_has_number();
  void set_has_name();

  inline bool has_port() const;
  void clear_port();
  inline void clear_has_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union PortUnion {
    PortUnion() {}
    ::google::protobuf::uint32 number_;
    ::google::protobuf::internal::ArenaStringPtr name_;
  } port_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsPortSelectorImpl();
};
// -------------------------------------------------------------------

class Percent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.Percent) */ {
 public:
  Percent();
  virtual ~Percent();

  Percent(const Percent& from);

  inline Percent& operator=(const Percent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Percent(Percent&& from) noexcept
    : Percent() {
    *this = ::std::move(from);
  }

  inline Percent& operator=(Percent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Percent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Percent* internal_default_instance() {
    return reinterpret_cast<const Percent*>(
               &_Percent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(Percent* other);
  friend void swap(Percent& a, Percent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Percent* New() const PROTOBUF_FINAL { return New(NULL); }

  Percent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Percent& from);
  void MergeFrom(const Percent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Percent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  double value() const;
  void set_value(double value);

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.Percent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double value_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fvirtual_5fservice_2eproto::InitDefaultsPercentImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VirtualService

// repeated string hosts = 1;
inline int VirtualService::hosts_size() const {
  return hosts_.size();
}
inline void VirtualService::clear_hosts() {
  hosts_.Clear();
}
inline const ::std::string& VirtualService::hosts(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.VirtualService.hosts)
  return hosts_.Get(index);
}
inline ::std::string* VirtualService::mutable_hosts(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.VirtualService.hosts)
  return hosts_.Mutable(index);
}
inline void VirtualService::set_hosts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.VirtualService.hosts)
  hosts_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VirtualService::set_hosts(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.VirtualService.hosts)
  hosts_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VirtualService::set_hosts(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hosts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.VirtualService.hosts)
}
inline void VirtualService::set_hosts(int index, const char* value, size_t size) {
  hosts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.VirtualService.hosts)
}
inline ::std::string* VirtualService::add_hosts() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.VirtualService.hosts)
  return hosts_.Add();
}
inline void VirtualService::add_hosts(const ::std::string& value) {
  hosts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.VirtualService.hosts)
}
#if LANG_CXX11
inline void VirtualService::add_hosts(::std::string&& value) {
  hosts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.VirtualService.hosts)
}
#endif
inline void VirtualService::add_hosts(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hosts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.VirtualService.hosts)
}
inline void VirtualService::add_hosts(const char* value, size_t size) {
  hosts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.VirtualService.hosts)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VirtualService::hosts() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.VirtualService.hosts)
  return hosts_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VirtualService::mutable_hosts() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.VirtualService.hosts)
  return &hosts_;
}

// repeated string gateways = 2;
inline int VirtualService::gateways_size() const {
  return gateways_.size();
}
inline void VirtualService::clear_gateways() {
  gateways_.Clear();
}
inline const ::std::string& VirtualService::gateways(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.VirtualService.gateways)
  return gateways_.Get(index);
}
inline ::std::string* VirtualService::mutable_gateways(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.VirtualService.gateways)
  return gateways_.Mutable(index);
}
inline void VirtualService::set_gateways(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.VirtualService.gateways)
  gateways_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VirtualService::set_gateways(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.VirtualService.gateways)
  gateways_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VirtualService::set_gateways(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  gateways_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.VirtualService.gateways)
}
inline void VirtualService::set_gateways(int index, const char* value, size_t size) {
  gateways_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.VirtualService.gateways)
}
inline ::std::string* VirtualService::add_gateways() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.VirtualService.gateways)
  return gateways_.Add();
}
inline void VirtualService::add_gateways(const ::std::string& value) {
  gateways_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.VirtualService.gateways)
}
#if LANG_CXX11
inline void VirtualService::add_gateways(::std::string&& value) {
  gateways_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.VirtualService.gateways)
}
#endif
inline void VirtualService::add_gateways(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  gateways_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.VirtualService.gateways)
}
inline void VirtualService::add_gateways(const char* value, size_t size) {
  gateways_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.VirtualService.gateways)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VirtualService::gateways() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.VirtualService.gateways)
  return gateways_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VirtualService::mutable_gateways() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.VirtualService.gateways)
  return &gateways_;
}

// repeated .istio.networking.v1alpha3.HTTPRoute http = 3;
inline int VirtualService::http_size() const {
  return http_.size();
}
inline void VirtualService::clear_http() {
  http_.Clear();
}
inline const ::istio::networking::v1alpha3::HTTPRoute& VirtualService::http(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.VirtualService.http)
  return http_.Get(index);
}
inline ::istio::networking::v1alpha3::HTTPRoute* VirtualService::mutable_http(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.VirtualService.http)
  return http_.Mutable(index);
}
inline ::istio::networking::v1alpha3::HTTPRoute* VirtualService::add_http() {
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.VirtualService.http)
  return http_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::HTTPRoute >*
VirtualService::mutable_http() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.VirtualService.http)
  return &http_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::HTTPRoute >&
VirtualService::http() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.VirtualService.http)
  return http_;
}

// repeated .istio.networking.v1alpha3.TLSRoute tls = 5;
inline int VirtualService::tls_size() const {
  return tls_.size();
}
inline void VirtualService::clear_tls() {
  tls_.Clear();
}
inline const ::istio::networking::v1alpha3::TLSRoute& VirtualService::tls(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.VirtualService.tls)
  return tls_.Get(index);
}
inline ::istio::networking::v1alpha3::TLSRoute* VirtualService::mutable_tls(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.VirtualService.tls)
  return tls_.Mutable(index);
}
inline ::istio::networking::v1alpha3::TLSRoute* VirtualService::add_tls() {
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.VirtualService.tls)
  return tls_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::TLSRoute >*
VirtualService::mutable_tls() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.VirtualService.tls)
  return &tls_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::TLSRoute >&
VirtualService::tls() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.VirtualService.tls)
  return tls_;
}

// repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;
inline int VirtualService::tcp_size() const {
  return tcp_.size();
}
inline void VirtualService::clear_tcp() {
  tcp_.Clear();
}
inline const ::istio::networking::v1alpha3::TCPRoute& VirtualService::tcp(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.VirtualService.tcp)
  return tcp_.Get(index);
}
inline ::istio::networking::v1alpha3::TCPRoute* VirtualService::mutable_tcp(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.VirtualService.tcp)
  return tcp_.Mutable(index);
}
inline ::istio::networking::v1alpha3::TCPRoute* VirtualService::add_tcp() {
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.VirtualService.tcp)
  return tcp_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::TCPRoute >*
VirtualService::mutable_tcp() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.VirtualService.tcp)
  return &tcp_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::TCPRoute >&
VirtualService::tcp() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.VirtualService.tcp)
  return tcp_;
}

// repeated string export_to = 6;
inline int VirtualService::export_to_size() const {
  return export_to_.size();
}
inline void VirtualService::clear_export_to() {
  export_to_.Clear();
}
inline const ::std::string& VirtualService::export_to(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.VirtualService.export_to)
  return export_to_.Get(index);
}
inline ::std::string* VirtualService::mutable_export_to(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.VirtualService.export_to)
  return export_to_.Mutable(index);
}
inline void VirtualService::set_export_to(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.VirtualService.export_to)
  export_to_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VirtualService::set_export_to(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.VirtualService.export_to)
  export_to_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VirtualService::set_export_to(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  export_to_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.VirtualService.export_to)
}
inline void VirtualService::set_export_to(int index, const char* value, size_t size) {
  export_to_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.VirtualService.export_to)
}
inline ::std::string* VirtualService::add_export_to() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.VirtualService.export_to)
  return export_to_.Add();
}
inline void VirtualService::add_export_to(const ::std::string& value) {
  export_to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.VirtualService.export_to)
}
#if LANG_CXX11
inline void VirtualService::add_export_to(::std::string&& value) {
  export_to_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.VirtualService.export_to)
}
#endif
inline void VirtualService::add_export_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  export_to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.VirtualService.export_to)
}
inline void VirtualService::add_export_to(const char* value, size_t size) {
  export_to_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.VirtualService.export_to)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VirtualService::export_to() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.VirtualService.export_to)
  return export_to_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VirtualService::mutable_export_to() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.VirtualService.export_to)
  return &export_to_;
}

// -------------------------------------------------------------------

// Destination

// string host = 1;
inline void Destination::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Destination::host() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Destination.host)
  return host_.GetNoArena();
}
inline void Destination::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.Destination.host)
}
#if LANG_CXX11
inline void Destination::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.Destination.host)
}
#endif
inline void Destination::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.Destination.host)
}
inline void Destination::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.Destination.host)
}
inline ::std::string* Destination::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.Destination.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Destination::release_host() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.Destination.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Destination::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.Destination.host)
}

// string subset = 2;
inline void Destination::clear_subset() {
  subset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Destination::subset() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Destination.subset)
  return subset_.GetNoArena();
}
inline void Destination::set_subset(const ::std::string& value) {
  
  subset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.Destination.subset)
}
#if LANG_CXX11
inline void Destination::set_subset(::std::string&& value) {
  
  subset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.Destination.subset)
}
#endif
inline void Destination::set_subset(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.Destination.subset)
}
inline void Destination::set_subset(const char* value, size_t size) {
  
  subset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.Destination.subset)
}
inline ::std::string* Destination::mutable_subset() {
  
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.Destination.subset)
  return subset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Destination::release_subset() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.Destination.subset)
  
  return subset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Destination::set_allocated_subset(::std::string* subset) {
  if (subset != NULL) {
    
  } else {
    
  }
  subset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subset);
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.Destination.subset)
}

// .istio.networking.v1alpha3.PortSelector port = 3;
inline bool Destination::has_port() const {
  return this != internal_default_instance() && port_ != NULL;
}
inline void Destination::clear_port() {
  if (GetArenaNoVirtual() == NULL && port_ != NULL) {
    delete port_;
  }
  port_ = NULL;
}
inline const ::istio::networking::v1alpha3::PortSelector& Destination::port() const {
  const ::istio::networking::v1alpha3::PortSelector* p = port_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Destination.port)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::networking::v1alpha3::PortSelector*>(
      &::istio::networking::v1alpha3::_PortSelector_default_instance_);
}
inline ::istio::networking::v1alpha3::PortSelector* Destination::release_port() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.Destination.port)
  
  ::istio::networking::v1alpha3::PortSelector* temp = port_;
  port_ = NULL;
  return temp;
}
inline ::istio::networking::v1alpha3::PortSelector* Destination::mutable_port() {
  
  if (port_ == NULL) {
    port_ = new ::istio::networking::v1alpha3::PortSelector;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.Destination.port)
  return port_;
}
inline void Destination::set_allocated_port(::istio::networking::v1alpha3::PortSelector* port) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete port_;
  }
  if (port) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      port = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, port, submessage_arena);
    }
    
  } else {
    
  }
  port_ = port;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.Destination.port)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HTTPRoute

// repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;
inline int HTTPRoute::match_size() const {
  return match_.size();
}
inline void HTTPRoute::clear_match() {
  match_.Clear();
}
inline const ::istio::networking::v1alpha3::HTTPMatchRequest& HTTPRoute::match(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPRoute.match)
  return match_.Get(index);
}
inline ::istio::networking::v1alpha3::HTTPMatchRequest* HTTPRoute::mutable_match(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPRoute.match)
  return match_.Mutable(index);
}
inline ::istio::networking::v1alpha3::HTTPMatchRequest* HTTPRoute::add_match() {
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.HTTPRoute.match)
  return match_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::HTTPMatchRequest >*
HTTPRoute::mutable_match() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.HTTPRoute.match)
  return &match_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::HTTPMatchRequest >&
HTTPRoute::match() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.HTTPRoute.match)
  return match_;
}

// repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;
inline int HTTPRoute::route_size() const {
  return route_.size();
}
inline void HTTPRoute::clear_route() {
  route_.Clear();
}
inline const ::istio::networking::v1alpha3::HTTPRouteDestination& HTTPRoute::route(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPRoute.route)
  return route_.Get(index);
}
inline ::istio::networking::v1alpha3::HTTPRouteDestination* HTTPRoute::mutable_route(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPRoute.route)
  return route_.Mutable(index);
}
inline ::istio::networking::v1alpha3::HTTPRouteDestination* HTTPRoute::add_route() {
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.HTTPRoute.route)
  return route_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::HTTPRouteDestination >*
HTTPRoute::mutable_route() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.HTTPRoute.route)
  return &route_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::HTTPRouteDestination >&
HTTPRoute::route() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.HTTPRoute.route)
  return route_;
}

// .istio.networking.v1alpha3.HTTPRedirect redirect = 3;
inline bool HTTPRoute::has_redirect() const {
  return this != internal_default_instance() && redirect_ != NULL;
}
inline void HTTPRoute::clear_redirect() {
  if (GetArenaNoVirtual() == NULL && redirect_ != NULL) {
    delete redirect_;
  }
  redirect_ = NULL;
}
inline const ::istio::networking::v1alpha3::HTTPRedirect& HTTPRoute::redirect() const {
  const ::istio::networking::v1alpha3::HTTPRedirect* p = redirect_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPRoute.redirect)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::networking::v1alpha3::HTTPRedirect*>(
      &::istio::networking::v1alpha3::_HTTPRedirect_default_instance_);
}
inline ::istio::networking::v1alpha3::HTTPRedirect* HTTPRoute::release_redirect() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPRoute.redirect)
  
  ::istio::networking::v1alpha3::HTTPRedirect* temp = redirect_;
  redirect_ = NULL;
  return temp;
}
inline ::istio::networking::v1alpha3::HTTPRedirect* HTTPRoute::mutable_redirect() {
  
  if (redirect_ == NULL) {
    redirect_ = new ::istio::networking::v1alpha3::HTTPRedirect;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPRoute.redirect)
  return redirect_;
}
inline void HTTPRoute::set_allocated_redirect(::istio::networking::v1alpha3::HTTPRedirect* redirect) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete redirect_;
  }
  if (redirect) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      redirect = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, redirect, submessage_arena);
    }
    
  } else {
    
  }
  redirect_ = redirect;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPRoute.redirect)
}

// .istio.networking.v1alpha3.HTTPRewrite rewrite = 4;
inline bool HTTPRoute::has_rewrite() const {
  return this != internal_default_instance() && rewrite_ != NULL;
}
inline void HTTPRoute::clear_rewrite() {
  if (GetArenaNoVirtual() == NULL && rewrite_ != NULL) {
    delete rewrite_;
  }
  rewrite_ = NULL;
}
inline const ::istio::networking::v1alpha3::HTTPRewrite& HTTPRoute::rewrite() const {
  const ::istio::networking::v1alpha3::HTTPRewrite* p = rewrite_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPRoute.rewrite)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::networking::v1alpha3::HTTPRewrite*>(
      &::istio::networking::v1alpha3::_HTTPRewrite_default_instance_);
}
inline ::istio::networking::v1alpha3::HTTPRewrite* HTTPRoute::release_rewrite() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPRoute.rewrite)
  
  ::istio::networking::v1alpha3::HTTPRewrite* temp = rewrite_;
  rewrite_ = NULL;
  return temp;
}
inline ::istio::networking::v1alpha3::HTTPRewrite* HTTPRoute::mutable_rewrite() {
  
  if (rewrite_ == NULL) {
    rewrite_ = new ::istio::networking::v1alpha3::HTTPRewrite;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPRoute.rewrite)
  return rewrite_;
}
inline void HTTPRoute::set_allocated_rewrite(::istio::networking::v1alpha3::HTTPRewrite* rewrite) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rewrite_;
  }
  if (rewrite) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rewrite = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rewrite, submessage_arena);
    }
    
  } else {
    
  }
  rewrite_ = rewrite;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPRoute.rewrite)
}

// bool websocket_upgrade = 5;
inline void HTTPRoute::clear_websocket_upgrade() {
  websocket_upgrade_ = false;
}
inline bool HTTPRoute::websocket_upgrade() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPRoute.websocket_upgrade)
  return websocket_upgrade_;
}
inline void HTTPRoute::set_websocket_upgrade(bool value) {
  
  websocket_upgrade_ = value;
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPRoute.websocket_upgrade)
}

// .google.protobuf.Duration timeout = 6;
inline bool HTTPRoute::has_timeout() const {
  return this != internal_default_instance() && timeout_ != NULL;
}
inline const ::google::protobuf::Duration& HTTPRoute::timeout() const {
  const ::google::protobuf::Duration* p = timeout_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPRoute.timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* HTTPRoute::release_timeout() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPRoute.timeout)
  
  ::google::protobuf::Duration* temp = timeout_;
  timeout_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* HTTPRoute::mutable_timeout() {
  
  if (timeout_ == NULL) {
    timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPRoute.timeout)
  return timeout_;
}
inline void HTTPRoute::set_allocated_timeout(::google::protobuf::Duration* timeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timeout_);
  }
  if (timeout) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(timeout)->GetArena();
    if (message_arena != submessage_arena) {
      timeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timeout, submessage_arena);
    }
    
  } else {
    
  }
  timeout_ = timeout;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPRoute.timeout)
}

// .istio.networking.v1alpha3.HTTPRetry retries = 7;
inline bool HTTPRoute::has_retries() const {
  return this != internal_default_instance() && retries_ != NULL;
}
inline void HTTPRoute::clear_retries() {
  if (GetArenaNoVirtual() == NULL && retries_ != NULL) {
    delete retries_;
  }
  retries_ = NULL;
}
inline const ::istio::networking::v1alpha3::HTTPRetry& HTTPRoute::retries() const {
  const ::istio::networking::v1alpha3::HTTPRetry* p = retries_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPRoute.retries)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::networking::v1alpha3::HTTPRetry*>(
      &::istio::networking::v1alpha3::_HTTPRetry_default_instance_);
}
inline ::istio::networking::v1alpha3::HTTPRetry* HTTPRoute::release_retries() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPRoute.retries)
  
  ::istio::networking::v1alpha3::HTTPRetry* temp = retries_;
  retries_ = NULL;
  return temp;
}
inline ::istio::networking::v1alpha3::HTTPRetry* HTTPRoute::mutable_retries() {
  
  if (retries_ == NULL) {
    retries_ = new ::istio::networking::v1alpha3::HTTPRetry;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPRoute.retries)
  return retries_;
}
inline void HTTPRoute::set_allocated_retries(::istio::networking::v1alpha3::HTTPRetry* retries) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete retries_;
  }
  if (retries) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      retries = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, retries, submessage_arena);
    }
    
  } else {
    
  }
  retries_ = retries;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPRoute.retries)
}

// .istio.networking.v1alpha3.HTTPFaultInjection fault = 8;
inline bool HTTPRoute::has_fault() const {
  return this != internal_default_instance() && fault_ != NULL;
}
inline void HTTPRoute::clear_fault() {
  if (GetArenaNoVirtual() == NULL && fault_ != NULL) {
    delete fault_;
  }
  fault_ = NULL;
}
inline const ::istio::networking::v1alpha3::HTTPFaultInjection& HTTPRoute::fault() const {
  const ::istio::networking::v1alpha3::HTTPFaultInjection* p = fault_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPRoute.fault)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::networking::v1alpha3::HTTPFaultInjection*>(
      &::istio::networking::v1alpha3::_HTTPFaultInjection_default_instance_);
}
inline ::istio::networking::v1alpha3::HTTPFaultInjection* HTTPRoute::release_fault() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPRoute.fault)
  
  ::istio::networking::v1alpha3::HTTPFaultInjection* temp = fault_;
  fault_ = NULL;
  return temp;
}
inline ::istio::networking::v1alpha3::HTTPFaultInjection* HTTPRoute::mutable_fault() {
  
  if (fault_ == NULL) {
    fault_ = new ::istio::networking::v1alpha3::HTTPFaultInjection;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPRoute.fault)
  return fault_;
}
inline void HTTPRoute::set_allocated_fault(::istio::networking::v1alpha3::HTTPFaultInjection* fault) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fault_;
  }
  if (fault) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fault = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fault, submessage_arena);
    }
    
  } else {
    
  }
  fault_ = fault;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPRoute.fault)
}

// .istio.networking.v1alpha3.Destination mirror = 9;
inline bool HTTPRoute::has_mirror() const {
  return this != internal_default_instance() && mirror_ != NULL;
}
inline void HTTPRoute::clear_mirror() {
  if (GetArenaNoVirtual() == NULL && mirror_ != NULL) {
    delete mirror_;
  }
  mirror_ = NULL;
}
inline const ::istio::networking::v1alpha3::Destination& HTTPRoute::mirror() const {
  const ::istio::networking::v1alpha3::Destination* p = mirror_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPRoute.mirror)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::networking::v1alpha3::Destination*>(
      &::istio::networking::v1alpha3::_Destination_default_instance_);
}
inline ::istio::networking::v1alpha3::Destination* HTTPRoute::release_mirror() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPRoute.mirror)
  
  ::istio::networking::v1alpha3::Destination* temp = mirror_;
  mirror_ = NULL;
  return temp;
}
inline ::istio::networking::v1alpha3::Destination* HTTPRoute::mutable_mirror() {
  
  if (mirror_ == NULL) {
    mirror_ = new ::istio::networking::v1alpha3::Destination;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPRoute.mirror)
  return mirror_;
}
inline void HTTPRoute::set_allocated_mirror(::istio::networking::v1alpha3::Destination* mirror) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mirror_;
  }
  if (mirror) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mirror = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mirror, submessage_arena);
    }
    
  } else {
    
  }
  mirror_ = mirror;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPRoute.mirror)
}

// .istio.networking.v1alpha3.CorsPolicy cors_policy = 10;
inline bool HTTPRoute::has_cors_policy() const {
  return this != internal_default_instance() && cors_policy_ != NULL;
}
inline void HTTPRoute::clear_cors_policy() {
  if (GetArenaNoVirtual() == NULL && cors_policy_ != NULL) {
    delete cors_policy_;
  }
  cors_policy_ = NULL;
}
inline const ::istio::networking::v1alpha3::CorsPolicy& HTTPRoute::cors_policy() const {
  const ::istio::networking::v1alpha3::CorsPolicy* p = cors_policy_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPRoute.cors_policy)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::networking::v1alpha3::CorsPolicy*>(
      &::istio::networking::v1alpha3::_CorsPolicy_default_instance_);
}
inline ::istio::networking::v1alpha3::CorsPolicy* HTTPRoute::release_cors_policy() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPRoute.cors_policy)
  
  ::istio::networking::v1alpha3::CorsPolicy* temp = cors_policy_;
  cors_policy_ = NULL;
  return temp;
}
inline ::istio::networking::v1alpha3::CorsPolicy* HTTPRoute::mutable_cors_policy() {
  
  if (cors_policy_ == NULL) {
    cors_policy_ = new ::istio::networking::v1alpha3::CorsPolicy;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPRoute.cors_policy)
  return cors_policy_;
}
inline void HTTPRoute::set_allocated_cors_policy(::istio::networking::v1alpha3::CorsPolicy* cors_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cors_policy_;
  }
  if (cors_policy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cors_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cors_policy, submessage_arena);
    }
    
  } else {
    
  }
  cors_policy_ = cors_policy;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPRoute.cors_policy)
}

// map<string, string> append_headers = 11 [deprecated = true];
inline int HTTPRoute::append_headers_size() const {
  return append_headers_.size();
}
inline void HTTPRoute::clear_append_headers() {
  append_headers_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
HTTPRoute::append_headers() const {
  // @@protoc_insertion_point(field_map:istio.networking.v1alpha3.HTTPRoute.append_headers)
  return append_headers_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
HTTPRoute::mutable_append_headers() {
  // @@protoc_insertion_point(field_mutable_map:istio.networking.v1alpha3.HTTPRoute.append_headers)
  return append_headers_.MutableMap();
}

// repeated string remove_response_headers = 12 [deprecated = true];
inline int HTTPRoute::remove_response_headers_size() const {
  return remove_response_headers_.size();
}
inline void HTTPRoute::clear_remove_response_headers() {
  remove_response_headers_.Clear();
}
inline const ::std::string& HTTPRoute::remove_response_headers(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPRoute.remove_response_headers)
  return remove_response_headers_.Get(index);
}
inline ::std::string* HTTPRoute::mutable_remove_response_headers(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPRoute.remove_response_headers)
  return remove_response_headers_.Mutable(index);
}
inline void HTTPRoute::set_remove_response_headers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPRoute.remove_response_headers)
  remove_response_headers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HTTPRoute::set_remove_response_headers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPRoute.remove_response_headers)
  remove_response_headers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HTTPRoute::set_remove_response_headers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  remove_response_headers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.HTTPRoute.remove_response_headers)
}
inline void HTTPRoute::set_remove_response_headers(int index, const char* value, size_t size) {
  remove_response_headers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.HTTPRoute.remove_response_headers)
}
inline ::std::string* HTTPRoute::add_remove_response_headers() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.HTTPRoute.remove_response_headers)
  return remove_response_headers_.Add();
}
inline void HTTPRoute::add_remove_response_headers(const ::std::string& value) {
  remove_response_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.HTTPRoute.remove_response_headers)
}
#if LANG_CXX11
inline void HTTPRoute::add_remove_response_headers(::std::string&& value) {
  remove_response_headers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.HTTPRoute.remove_response_headers)
}
#endif
inline void HTTPRoute::add_remove_response_headers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  remove_response_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.HTTPRoute.remove_response_headers)
}
inline void HTTPRoute::add_remove_response_headers(const char* value, size_t size) {
  remove_response_headers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.HTTPRoute.remove_response_headers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HTTPRoute::remove_response_headers() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.HTTPRoute.remove_response_headers)
  return remove_response_headers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HTTPRoute::mutable_remove_response_headers() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.HTTPRoute.remove_response_headers)
  return &remove_response_headers_;
}

// map<string, string> append_response_headers = 13 [deprecated = true];
inline int HTTPRoute::append_response_headers_size() const {
  return append_response_headers_.size();
}
inline void HTTPRoute::clear_append_response_headers() {
  append_response_headers_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
HTTPRoute::append_response_headers() const {
  // @@protoc_insertion_point(field_map:istio.networking.v1alpha3.HTTPRoute.append_response_headers)
  return append_response_headers_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
HTTPRoute::mutable_append_response_headers() {
  // @@protoc_insertion_point(field_mutable_map:istio.networking.v1alpha3.HTTPRoute.append_response_headers)
  return append_response_headers_.MutableMap();
}

// repeated string remove_request_headers = 14 [deprecated = true];
inline int HTTPRoute::remove_request_headers_size() const {
  return remove_request_headers_.size();
}
inline void HTTPRoute::clear_remove_request_headers() {
  remove_request_headers_.Clear();
}
inline const ::std::string& HTTPRoute::remove_request_headers(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPRoute.remove_request_headers)
  return remove_request_headers_.Get(index);
}
inline ::std::string* HTTPRoute::mutable_remove_request_headers(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPRoute.remove_request_headers)
  return remove_request_headers_.Mutable(index);
}
inline void HTTPRoute::set_remove_request_headers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPRoute.remove_request_headers)
  remove_request_headers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HTTPRoute::set_remove_request_headers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPRoute.remove_request_headers)
  remove_request_headers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HTTPRoute::set_remove_request_headers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  remove_request_headers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.HTTPRoute.remove_request_headers)
}
inline void HTTPRoute::set_remove_request_headers(int index, const char* value, size_t size) {
  remove_request_headers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.HTTPRoute.remove_request_headers)
}
inline ::std::string* HTTPRoute::add_remove_request_headers() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.HTTPRoute.remove_request_headers)
  return remove_request_headers_.Add();
}
inline void HTTPRoute::add_remove_request_headers(const ::std::string& value) {
  remove_request_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.HTTPRoute.remove_request_headers)
}
#if LANG_CXX11
inline void HTTPRoute::add_remove_request_headers(::std::string&& value) {
  remove_request_headers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.HTTPRoute.remove_request_headers)
}
#endif
inline void HTTPRoute::add_remove_request_headers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  remove_request_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.HTTPRoute.remove_request_headers)
}
inline void HTTPRoute::add_remove_request_headers(const char* value, size_t size) {
  remove_request_headers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.HTTPRoute.remove_request_headers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HTTPRoute::remove_request_headers() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.HTTPRoute.remove_request_headers)
  return remove_request_headers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HTTPRoute::mutable_remove_request_headers() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.HTTPRoute.remove_request_headers)
  return &remove_request_headers_;
}

// map<string, string> append_request_headers = 15 [deprecated = true];
inline int HTTPRoute::append_request_headers_size() const {
  return append_request_headers_.size();
}
inline void HTTPRoute::clear_append_request_headers() {
  append_request_headers_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
HTTPRoute::append_request_headers() const {
  // @@protoc_insertion_point(field_map:istio.networking.v1alpha3.HTTPRoute.append_request_headers)
  return append_request_headers_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
HTTPRoute::mutable_append_request_headers() {
  // @@protoc_insertion_point(field_mutable_map:istio.networking.v1alpha3.HTTPRoute.append_request_headers)
  return append_request_headers_.MutableMap();
}

// .istio.networking.v1alpha3.Headers headers = 16;
inline bool HTTPRoute::has_headers() const {
  return this != internal_default_instance() && headers_ != NULL;
}
inline void HTTPRoute::clear_headers() {
  if (GetArenaNoVirtual() == NULL && headers_ != NULL) {
    delete headers_;
  }
  headers_ = NULL;
}
inline const ::istio::networking::v1alpha3::Headers& HTTPRoute::headers() const {
  const ::istio::networking::v1alpha3::Headers* p = headers_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPRoute.headers)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::networking::v1alpha3::Headers*>(
      &::istio::networking::v1alpha3::_Headers_default_instance_);
}
inline ::istio::networking::v1alpha3::Headers* HTTPRoute::release_headers() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPRoute.headers)
  
  ::istio::networking::v1alpha3::Headers* temp = headers_;
  headers_ = NULL;
  return temp;
}
inline ::istio::networking::v1alpha3::Headers* HTTPRoute::mutable_headers() {
  
  if (headers_ == NULL) {
    headers_ = new ::istio::networking::v1alpha3::Headers;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPRoute.headers)
  return headers_;
}
inline void HTTPRoute::set_allocated_headers(::istio::networking::v1alpha3::Headers* headers) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete headers_;
  }
  if (headers) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      headers = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, headers, submessage_arena);
    }
    
  } else {
    
  }
  headers_ = headers;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPRoute.headers)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Headers_HeaderOperations

// map<string, string> set = 1;
inline int Headers_HeaderOperations::set_size() const {
  return set_.size();
}
inline void Headers_HeaderOperations::clear_set() {
  set_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Headers_HeaderOperations::set() const {
  // @@protoc_insertion_point(field_map:istio.networking.v1alpha3.Headers.HeaderOperations.set)
  return set_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Headers_HeaderOperations::mutable_set() {
  // @@protoc_insertion_point(field_mutable_map:istio.networking.v1alpha3.Headers.HeaderOperations.set)
  return set_.MutableMap();
}

// map<string, string> add = 2;
inline int Headers_HeaderOperations::add_size() const {
  return add_.size();
}
inline void Headers_HeaderOperations::clear_add() {
  add_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Headers_HeaderOperations::add() const {
  // @@protoc_insertion_point(field_map:istio.networking.v1alpha3.Headers.HeaderOperations.add)
  return add_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Headers_HeaderOperations::mutable_add() {
  // @@protoc_insertion_point(field_mutable_map:istio.networking.v1alpha3.Headers.HeaderOperations.add)
  return add_.MutableMap();
}

// repeated string remove = 3;
inline int Headers_HeaderOperations::remove_size() const {
  return remove_.size();
}
inline void Headers_HeaderOperations::clear_remove() {
  remove_.Clear();
}
inline const ::std::string& Headers_HeaderOperations::remove(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Headers.HeaderOperations.remove)
  return remove_.Get(index);
}
inline ::std::string* Headers_HeaderOperations::mutable_remove(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.Headers.HeaderOperations.remove)
  return remove_.Mutable(index);
}
inline void Headers_HeaderOperations::set_remove(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.Headers.HeaderOperations.remove)
  remove_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Headers_HeaderOperations::set_remove(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.Headers.HeaderOperations.remove)
  remove_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Headers_HeaderOperations::set_remove(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  remove_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.Headers.HeaderOperations.remove)
}
inline void Headers_HeaderOperations::set_remove(int index, const char* value, size_t size) {
  remove_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.Headers.HeaderOperations.remove)
}
inline ::std::string* Headers_HeaderOperations::add_remove() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.Headers.HeaderOperations.remove)
  return remove_.Add();
}
inline void Headers_HeaderOperations::add_remove(const ::std::string& value) {
  remove_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.Headers.HeaderOperations.remove)
}
#if LANG_CXX11
inline void Headers_HeaderOperations::add_remove(::std::string&& value) {
  remove_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.Headers.HeaderOperations.remove)
}
#endif
inline void Headers_HeaderOperations::add_remove(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  remove_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.Headers.HeaderOperations.remove)
}
inline void Headers_HeaderOperations::add_remove(const char* value, size_t size) {
  remove_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.Headers.HeaderOperations.remove)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Headers_HeaderOperations::remove() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.Headers.HeaderOperations.remove)
  return remove_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Headers_HeaderOperations::mutable_remove() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.Headers.HeaderOperations.remove)
  return &remove_;
}

// -------------------------------------------------------------------

// Headers

// .istio.networking.v1alpha3.Headers.HeaderOperations request = 1;
inline bool Headers::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
inline void Headers::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) {
    delete request_;
  }
  request_ = NULL;
}
inline const ::istio::networking::v1alpha3::Headers_HeaderOperations& Headers::request() const {
  const ::istio::networking::v1alpha3::Headers_HeaderOperations* p = request_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Headers.request)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::networking::v1alpha3::Headers_HeaderOperations*>(
      &::istio::networking::v1alpha3::_Headers_HeaderOperations_default_instance_);
}
inline ::istio::networking::v1alpha3::Headers_HeaderOperations* Headers::release_request() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.Headers.request)
  
  ::istio::networking::v1alpha3::Headers_HeaderOperations* temp = request_;
  request_ = NULL;
  return temp;
}
inline ::istio::networking::v1alpha3::Headers_HeaderOperations* Headers::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::istio::networking::v1alpha3::Headers_HeaderOperations;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.Headers.request)
  return request_;
}
inline void Headers::set_allocated_request(::istio::networking::v1alpha3::Headers_HeaderOperations* request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete request_;
  }
  if (request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.Headers.request)
}

// .istio.networking.v1alpha3.Headers.HeaderOperations response = 2;
inline bool Headers::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void Headers::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}
inline const ::istio::networking::v1alpha3::Headers_HeaderOperations& Headers::response() const {
  const ::istio::networking::v1alpha3::Headers_HeaderOperations* p = response_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Headers.response)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::networking::v1alpha3::Headers_HeaderOperations*>(
      &::istio::networking::v1alpha3::_Headers_HeaderOperations_default_instance_);
}
inline ::istio::networking::v1alpha3::Headers_HeaderOperations* Headers::release_response() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.Headers.response)
  
  ::istio::networking::v1alpha3::Headers_HeaderOperations* temp = response_;
  response_ = NULL;
  return temp;
}
inline ::istio::networking::v1alpha3::Headers_HeaderOperations* Headers::mutable_response() {
  
  if (response_ == NULL) {
    response_ = new ::istio::networking::v1alpha3::Headers_HeaderOperations;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.Headers.response)
  return response_;
}
inline void Headers::set_allocated_response(::istio::networking::v1alpha3::Headers_HeaderOperations* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.Headers.response)
}

// -------------------------------------------------------------------

// TLSRoute

// repeated .istio.networking.v1alpha3.TLSMatchAttributes match = 1;
inline int TLSRoute::match_size() const {
  return match_.size();
}
inline void TLSRoute::clear_match() {
  match_.Clear();
}
inline const ::istio::networking::v1alpha3::TLSMatchAttributes& TLSRoute::match(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.TLSRoute.match)
  return match_.Get(index);
}
inline ::istio::networking::v1alpha3::TLSMatchAttributes* TLSRoute::mutable_match(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.TLSRoute.match)
  return match_.Mutable(index);
}
inline ::istio::networking::v1alpha3::TLSMatchAttributes* TLSRoute::add_match() {
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.TLSRoute.match)
  return match_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::TLSMatchAttributes >*
TLSRoute::mutable_match() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.TLSRoute.match)
  return &match_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::TLSMatchAttributes >&
TLSRoute::match() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.TLSRoute.match)
  return match_;
}

// repeated .istio.networking.v1alpha3.RouteDestination route = 2;
inline int TLSRoute::route_size() const {
  return route_.size();
}
inline void TLSRoute::clear_route() {
  route_.Clear();
}
inline const ::istio::networking::v1alpha3::RouteDestination& TLSRoute::route(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.TLSRoute.route)
  return route_.Get(index);
}
inline ::istio::networking::v1alpha3::RouteDestination* TLSRoute::mutable_route(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.TLSRoute.route)
  return route_.Mutable(index);
}
inline ::istio::networking::v1alpha3::RouteDestination* TLSRoute::add_route() {
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.TLSRoute.route)
  return route_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::RouteDestination >*
TLSRoute::mutable_route() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.TLSRoute.route)
  return &route_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::RouteDestination >&
TLSRoute::route() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.TLSRoute.route)
  return route_;
}

// -------------------------------------------------------------------

// TCPRoute

// repeated .istio.networking.v1alpha3.L4MatchAttributes match = 1;
inline int TCPRoute::match_size() const {
  return match_.size();
}
inline void TCPRoute::clear_match() {
  match_.Clear();
}
inline const ::istio::networking::v1alpha3::L4MatchAttributes& TCPRoute::match(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.TCPRoute.match)
  return match_.Get(index);
}
inline ::istio::networking::v1alpha3::L4MatchAttributes* TCPRoute::mutable_match(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.TCPRoute.match)
  return match_.Mutable(index);
}
inline ::istio::networking::v1alpha3::L4MatchAttributes* TCPRoute::add_match() {
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.TCPRoute.match)
  return match_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::L4MatchAttributes >*
TCPRoute::mutable_match() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.TCPRoute.match)
  return &match_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::L4MatchAttributes >&
TCPRoute::match() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.TCPRoute.match)
  return match_;
}

// repeated .istio.networking.v1alpha3.RouteDestination route = 2;
inline int TCPRoute::route_size() const {
  return route_.size();
}
inline void TCPRoute::clear_route() {
  route_.Clear();
}
inline const ::istio::networking::v1alpha3::RouteDestination& TCPRoute::route(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.TCPRoute.route)
  return route_.Get(index);
}
inline ::istio::networking::v1alpha3::RouteDestination* TCPRoute::mutable_route(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.TCPRoute.route)
  return route_.Mutable(index);
}
inline ::istio::networking::v1alpha3::RouteDestination* TCPRoute::add_route() {
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.TCPRoute.route)
  return route_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::RouteDestination >*
TCPRoute::mutable_route() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.TCPRoute.route)
  return &route_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::RouteDestination >&
TCPRoute::route() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.TCPRoute.route)
  return route_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HTTPMatchRequest

// .istio.networking.v1alpha3.StringMatch uri = 1;
inline bool HTTPMatchRequest::has_uri() const {
  return this != internal_default_instance() && uri_ != NULL;
}
inline void HTTPMatchRequest::clear_uri() {
  if (GetArenaNoVirtual() == NULL && uri_ != NULL) {
    delete uri_;
  }
  uri_ = NULL;
}
inline const ::istio::networking::v1alpha3::StringMatch& HTTPMatchRequest::uri() const {
  const ::istio::networking::v1alpha3::StringMatch* p = uri_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPMatchRequest.uri)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::networking::v1alpha3::StringMatch*>(
      &::istio::networking::v1alpha3::_StringMatch_default_instance_);
}
inline ::istio::networking::v1alpha3::StringMatch* HTTPMatchRequest::release_uri() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPMatchRequest.uri)
  
  ::istio::networking::v1alpha3::StringMatch* temp = uri_;
  uri_ = NULL;
  return temp;
}
inline ::istio::networking::v1alpha3::StringMatch* HTTPMatchRequest::mutable_uri() {
  
  if (uri_ == NULL) {
    uri_ = new ::istio::networking::v1alpha3::StringMatch;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPMatchRequest.uri)
  return uri_;
}
inline void HTTPMatchRequest::set_allocated_uri(::istio::networking::v1alpha3::StringMatch* uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete uri_;
  }
  if (uri) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uri, submessage_arena);
    }
    
  } else {
    
  }
  uri_ = uri;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPMatchRequest.uri)
}

// .istio.networking.v1alpha3.StringMatch scheme = 2;
inline bool HTTPMatchRequest::has_scheme() const {
  return this != internal_default_instance() && scheme_ != NULL;
}
inline void HTTPMatchRequest::clear_scheme() {
  if (GetArenaNoVirtual() == NULL && scheme_ != NULL) {
    delete scheme_;
  }
  scheme_ = NULL;
}
inline const ::istio::networking::v1alpha3::StringMatch& HTTPMatchRequest::scheme() const {
  const ::istio::networking::v1alpha3::StringMatch* p = scheme_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPMatchRequest.scheme)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::networking::v1alpha3::StringMatch*>(
      &::istio::networking::v1alpha3::_StringMatch_default_instance_);
}
inline ::istio::networking::v1alpha3::StringMatch* HTTPMatchRequest::release_scheme() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPMatchRequest.scheme)
  
  ::istio::networking::v1alpha3::StringMatch* temp = scheme_;
  scheme_ = NULL;
  return temp;
}
inline ::istio::networking::v1alpha3::StringMatch* HTTPMatchRequest::mutable_scheme() {
  
  if (scheme_ == NULL) {
    scheme_ = new ::istio::networking::v1alpha3::StringMatch;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPMatchRequest.scheme)
  return scheme_;
}
inline void HTTPMatchRequest::set_allocated_scheme(::istio::networking::v1alpha3::StringMatch* scheme) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scheme_;
  }
  if (scheme) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scheme = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scheme, submessage_arena);
    }
    
  } else {
    
  }
  scheme_ = scheme;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPMatchRequest.scheme)
}

// .istio.networking.v1alpha3.StringMatch method = 3;
inline bool HTTPMatchRequest::has_method() const {
  return this != internal_default_instance() && method_ != NULL;
}
inline void HTTPMatchRequest::clear_method() {
  if (GetArenaNoVirtual() == NULL && method_ != NULL) {
    delete method_;
  }
  method_ = NULL;
}
inline const ::istio::networking::v1alpha3::StringMatch& HTTPMatchRequest::method() const {
  const ::istio::networking::v1alpha3::StringMatch* p = method_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPMatchRequest.method)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::networking::v1alpha3::StringMatch*>(
      &::istio::networking::v1alpha3::_StringMatch_default_instance_);
}
inline ::istio::networking::v1alpha3::StringMatch* HTTPMatchRequest::release_method() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPMatchRequest.method)
  
  ::istio::networking::v1alpha3::StringMatch* temp = method_;
  method_ = NULL;
  return temp;
}
inline ::istio::networking::v1alpha3::StringMatch* HTTPMatchRequest::mutable_method() {
  
  if (method_ == NULL) {
    method_ = new ::istio::networking::v1alpha3::StringMatch;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPMatchRequest.method)
  return method_;
}
inline void HTTPMatchRequest::set_allocated_method(::istio::networking::v1alpha3::StringMatch* method) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete method_;
  }
  if (method) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      method = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, method, submessage_arena);
    }
    
  } else {
    
  }
  method_ = method;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPMatchRequest.method)
}

// .istio.networking.v1alpha3.StringMatch authority = 4;
inline bool HTTPMatchRequest::has_authority() const {
  return this != internal_default_instance() && authority_ != NULL;
}
inline void HTTPMatchRequest::clear_authority() {
  if (GetArenaNoVirtual() == NULL && authority_ != NULL) {
    delete authority_;
  }
  authority_ = NULL;
}
inline const ::istio::networking::v1alpha3::StringMatch& HTTPMatchRequest::authority() const {
  const ::istio::networking::v1alpha3::StringMatch* p = authority_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPMatchRequest.authority)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::networking::v1alpha3::StringMatch*>(
      &::istio::networking::v1alpha3::_StringMatch_default_instance_);
}
inline ::istio::networking::v1alpha3::StringMatch* HTTPMatchRequest::release_authority() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPMatchRequest.authority)
  
  ::istio::networking::v1alpha3::StringMatch* temp = authority_;
  authority_ = NULL;
  return temp;
}
inline ::istio::networking::v1alpha3::StringMatch* HTTPMatchRequest::mutable_authority() {
  
  if (authority_ == NULL) {
    authority_ = new ::istio::networking::v1alpha3::StringMatch;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPMatchRequest.authority)
  return authority_;
}
inline void HTTPMatchRequest::set_allocated_authority(::istio::networking::v1alpha3::StringMatch* authority) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete authority_;
  }
  if (authority) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      authority = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, authority, submessage_arena);
    }
    
  } else {
    
  }
  authority_ = authority;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPMatchRequest.authority)
}

// map<string, .istio.networking.v1alpha3.StringMatch> headers = 5;
inline int HTTPMatchRequest::headers_size() const {
  return headers_.size();
}
inline void HTTPMatchRequest::clear_headers() {
  headers_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::istio::networking::v1alpha3::StringMatch >&
HTTPMatchRequest::headers() const {
  // @@protoc_insertion_point(field_map:istio.networking.v1alpha3.HTTPMatchRequest.headers)
  return headers_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::istio::networking::v1alpha3::StringMatch >*
HTTPMatchRequest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:istio.networking.v1alpha3.HTTPMatchRequest.headers)
  return headers_.MutableMap();
}

// uint32 port = 6;
inline void HTTPMatchRequest::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 HTTPMatchRequest::port() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPMatchRequest.port)
  return port_;
}
inline void HTTPMatchRequest::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPMatchRequest.port)
}

// map<string, string> source_labels = 7;
inline int HTTPMatchRequest::source_labels_size() const {
  return source_labels_.size();
}
inline void HTTPMatchRequest::clear_source_labels() {
  source_labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
HTTPMatchRequest::source_labels() const {
  // @@protoc_insertion_point(field_map:istio.networking.v1alpha3.HTTPMatchRequest.source_labels)
  return source_labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
HTTPMatchRequest::mutable_source_labels() {
  // @@protoc_insertion_point(field_mutable_map:istio.networking.v1alpha3.HTTPMatchRequest.source_labels)
  return source_labels_.MutableMap();
}

// repeated string gateways = 8;
inline int HTTPMatchRequest::gateways_size() const {
  return gateways_.size();
}
inline void HTTPMatchRequest::clear_gateways() {
  gateways_.Clear();
}
inline const ::std::string& HTTPMatchRequest::gateways(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPMatchRequest.gateways)
  return gateways_.Get(index);
}
inline ::std::string* HTTPMatchRequest::mutable_gateways(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPMatchRequest.gateways)
  return gateways_.Mutable(index);
}
inline void HTTPMatchRequest::set_gateways(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPMatchRequest.gateways)
  gateways_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HTTPMatchRequest::set_gateways(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPMatchRequest.gateways)
  gateways_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HTTPMatchRequest::set_gateways(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  gateways_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.HTTPMatchRequest.gateways)
}
inline void HTTPMatchRequest::set_gateways(int index, const char* value, size_t size) {
  gateways_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.HTTPMatchRequest.gateways)
}
inline ::std::string* HTTPMatchRequest::add_gateways() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.HTTPMatchRequest.gateways)
  return gateways_.Add();
}
inline void HTTPMatchRequest::add_gateways(const ::std::string& value) {
  gateways_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.HTTPMatchRequest.gateways)
}
#if LANG_CXX11
inline void HTTPMatchRequest::add_gateways(::std::string&& value) {
  gateways_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.HTTPMatchRequest.gateways)
}
#endif
inline void HTTPMatchRequest::add_gateways(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  gateways_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.HTTPMatchRequest.gateways)
}
inline void HTTPMatchRequest::add_gateways(const char* value, size_t size) {
  gateways_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.HTTPMatchRequest.gateways)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HTTPMatchRequest::gateways() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.HTTPMatchRequest.gateways)
  return gateways_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HTTPMatchRequest::mutable_gateways() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.HTTPMatchRequest.gateways)
  return &gateways_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HTTPRouteDestination

// .istio.networking.v1alpha3.Destination destination = 1;
inline bool HTTPRouteDestination::has_destination() const {
  return this != internal_default_instance() && destination_ != NULL;
}
inline void HTTPRouteDestination::clear_destination() {
  if (GetArenaNoVirtual() == NULL && destination_ != NULL) {
    delete destination_;
  }
  destination_ = NULL;
}
inline const ::istio::networking::v1alpha3::Destination& HTTPRouteDestination::destination() const {
  const ::istio::networking::v1alpha3::Destination* p = destination_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPRouteDestination.destination)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::networking::v1alpha3::Destination*>(
      &::istio::networking::v1alpha3::_Destination_default_instance_);
}
inline ::istio::networking::v1alpha3::Destination* HTTPRouteDestination::release_destination() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPRouteDestination.destination)
  
  ::istio::networking::v1alpha3::Destination* temp = destination_;
  destination_ = NULL;
  return temp;
}
inline ::istio::networking::v1alpha3::Destination* HTTPRouteDestination::mutable_destination() {
  
  if (destination_ == NULL) {
    destination_ = new ::istio::networking::v1alpha3::Destination;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPRouteDestination.destination)
  return destination_;
}
inline void HTTPRouteDestination::set_allocated_destination(::istio::networking::v1alpha3::Destination* destination) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete destination_;
  }
  if (destination) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      destination = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    
  } else {
    
  }
  destination_ = destination;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPRouteDestination.destination)
}

// int32 weight = 2;
inline void HTTPRouteDestination::clear_weight() {
  weight_ = 0;
}
inline ::google::protobuf::int32 HTTPRouteDestination::weight() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPRouteDestination.weight)
  return weight_;
}
inline void HTTPRouteDestination::set_weight(::google::protobuf::int32 value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPRouteDestination.weight)
}

// repeated string remove_response_headers = 3 [deprecated = true];
inline int HTTPRouteDestination::remove_response_headers_size() const {
  return remove_response_headers_.size();
}
inline void HTTPRouteDestination::clear_remove_response_headers() {
  remove_response_headers_.Clear();
}
inline const ::std::string& HTTPRouteDestination::remove_response_headers(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPRouteDestination.remove_response_headers)
  return remove_response_headers_.Get(index);
}
inline ::std::string* HTTPRouteDestination::mutable_remove_response_headers(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPRouteDestination.remove_response_headers)
  return remove_response_headers_.Mutable(index);
}
inline void HTTPRouteDestination::set_remove_response_headers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPRouteDestination.remove_response_headers)
  remove_response_headers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HTTPRouteDestination::set_remove_response_headers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPRouteDestination.remove_response_headers)
  remove_response_headers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HTTPRouteDestination::set_remove_response_headers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  remove_response_headers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.HTTPRouteDestination.remove_response_headers)
}
inline void HTTPRouteDestination::set_remove_response_headers(int index, const char* value, size_t size) {
  remove_response_headers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.HTTPRouteDestination.remove_response_headers)
}
inline ::std::string* HTTPRouteDestination::add_remove_response_headers() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.HTTPRouteDestination.remove_response_headers)
  return remove_response_headers_.Add();
}
inline void HTTPRouteDestination::add_remove_response_headers(const ::std::string& value) {
  remove_response_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.HTTPRouteDestination.remove_response_headers)
}
#if LANG_CXX11
inline void HTTPRouteDestination::add_remove_response_headers(::std::string&& value) {
  remove_response_headers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.HTTPRouteDestination.remove_response_headers)
}
#endif
inline void HTTPRouteDestination::add_remove_response_headers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  remove_response_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.HTTPRouteDestination.remove_response_headers)
}
inline void HTTPRouteDestination::add_remove_response_headers(const char* value, size_t size) {
  remove_response_headers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.HTTPRouteDestination.remove_response_headers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HTTPRouteDestination::remove_response_headers() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.HTTPRouteDestination.remove_response_headers)
  return remove_response_headers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HTTPRouteDestination::mutable_remove_response_headers() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.HTTPRouteDestination.remove_response_headers)
  return &remove_response_headers_;
}

// map<string, string> append_response_headers = 4 [deprecated = true];
inline int HTTPRouteDestination::append_response_headers_size() const {
  return append_response_headers_.size();
}
inline void HTTPRouteDestination::clear_append_response_headers() {
  append_response_headers_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
HTTPRouteDestination::append_response_headers() const {
  // @@protoc_insertion_point(field_map:istio.networking.v1alpha3.HTTPRouteDestination.append_response_headers)
  return append_response_headers_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
HTTPRouteDestination::mutable_append_response_headers() {
  // @@protoc_insertion_point(field_mutable_map:istio.networking.v1alpha3.HTTPRouteDestination.append_response_headers)
  return append_response_headers_.MutableMap();
}

// repeated string remove_request_headers = 5 [deprecated = true];
inline int HTTPRouteDestination::remove_request_headers_size() const {
  return remove_request_headers_.size();
}
inline void HTTPRouteDestination::clear_remove_request_headers() {
  remove_request_headers_.Clear();
}
inline const ::std::string& HTTPRouteDestination::remove_request_headers(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPRouteDestination.remove_request_headers)
  return remove_request_headers_.Get(index);
}
inline ::std::string* HTTPRouteDestination::mutable_remove_request_headers(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPRouteDestination.remove_request_headers)
  return remove_request_headers_.Mutable(index);
}
inline void HTTPRouteDestination::set_remove_request_headers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPRouteDestination.remove_request_headers)
  remove_request_headers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HTTPRouteDestination::set_remove_request_headers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPRouteDestination.remove_request_headers)
  remove_request_headers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HTTPRouteDestination::set_remove_request_headers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  remove_request_headers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.HTTPRouteDestination.remove_request_headers)
}
inline void HTTPRouteDestination::set_remove_request_headers(int index, const char* value, size_t size) {
  remove_request_headers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.HTTPRouteDestination.remove_request_headers)
}
inline ::std::string* HTTPRouteDestination::add_remove_request_headers() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.HTTPRouteDestination.remove_request_headers)
  return remove_request_headers_.Add();
}
inline void HTTPRouteDestination::add_remove_request_headers(const ::std::string& value) {
  remove_request_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.HTTPRouteDestination.remove_request_headers)
}
#if LANG_CXX11
inline void HTTPRouteDestination::add_remove_request_headers(::std::string&& value) {
  remove_request_headers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.HTTPRouteDestination.remove_request_headers)
}
#endif
inline void HTTPRouteDestination::add_remove_request_headers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  remove_request_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.HTTPRouteDestination.remove_request_headers)
}
inline void HTTPRouteDestination::add_remove_request_headers(const char* value, size_t size) {
  remove_request_headers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.HTTPRouteDestination.remove_request_headers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HTTPRouteDestination::remove_request_headers() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.HTTPRouteDestination.remove_request_headers)
  return remove_request_headers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HTTPRouteDestination::mutable_remove_request_headers() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.HTTPRouteDestination.remove_request_headers)
  return &remove_request_headers_;
}

// map<string, string> append_request_headers = 6 [deprecated = true];
inline int HTTPRouteDestination::append_request_headers_size() const {
  return append_request_headers_.size();
}
inline void HTTPRouteDestination::clear_append_request_headers() {
  append_request_headers_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
HTTPRouteDestination::append_request_headers() const {
  // @@protoc_insertion_point(field_map:istio.networking.v1alpha3.HTTPRouteDestination.append_request_headers)
  return append_request_headers_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
HTTPRouteDestination::mutable_append_request_headers() {
  // @@protoc_insertion_point(field_mutable_map:istio.networking.v1alpha3.HTTPRouteDestination.append_request_headers)
  return append_request_headers_.MutableMap();
}

// .istio.networking.v1alpha3.Headers headers = 7;
inline bool HTTPRouteDestination::has_headers() const {
  return this != internal_default_instance() && headers_ != NULL;
}
inline void HTTPRouteDestination::clear_headers() {
  if (GetArenaNoVirtual() == NULL && headers_ != NULL) {
    delete headers_;
  }
  headers_ = NULL;
}
inline const ::istio::networking::v1alpha3::Headers& HTTPRouteDestination::headers() const {
  const ::istio::networking::v1alpha3::Headers* p = headers_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPRouteDestination.headers)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::networking::v1alpha3::Headers*>(
      &::istio::networking::v1alpha3::_Headers_default_instance_);
}
inline ::istio::networking::v1alpha3::Headers* HTTPRouteDestination::release_headers() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPRouteDestination.headers)
  
  ::istio::networking::v1alpha3::Headers* temp = headers_;
  headers_ = NULL;
  return temp;
}
inline ::istio::networking::v1alpha3::Headers* HTTPRouteDestination::mutable_headers() {
  
  if (headers_ == NULL) {
    headers_ = new ::istio::networking::v1alpha3::Headers;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPRouteDestination.headers)
  return headers_;
}
inline void HTTPRouteDestination::set_allocated_headers(::istio::networking::v1alpha3::Headers* headers) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete headers_;
  }
  if (headers) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      headers = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, headers, submessage_arena);
    }
    
  } else {
    
  }
  headers_ = headers;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPRouteDestination.headers)
}

// -------------------------------------------------------------------

// RouteDestination

// .istio.networking.v1alpha3.Destination destination = 1;
inline bool RouteDestination::has_destination() const {
  return this != internal_default_instance() && destination_ != NULL;
}
inline void RouteDestination::clear_destination() {
  if (GetArenaNoVirtual() == NULL && destination_ != NULL) {
    delete destination_;
  }
  destination_ = NULL;
}
inline const ::istio::networking::v1alpha3::Destination& RouteDestination::destination() const {
  const ::istio::networking::v1alpha3::Destination* p = destination_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.RouteDestination.destination)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::networking::v1alpha3::Destination*>(
      &::istio::networking::v1alpha3::_Destination_default_instance_);
}
inline ::istio::networking::v1alpha3::Destination* RouteDestination::release_destination() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.RouteDestination.destination)
  
  ::istio::networking::v1alpha3::Destination* temp = destination_;
  destination_ = NULL;
  return temp;
}
inline ::istio::networking::v1alpha3::Destination* RouteDestination::mutable_destination() {
  
  if (destination_ == NULL) {
    destination_ = new ::istio::networking::v1alpha3::Destination;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.RouteDestination.destination)
  return destination_;
}
inline void RouteDestination::set_allocated_destination(::istio::networking::v1alpha3::Destination* destination) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete destination_;
  }
  if (destination) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      destination = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    
  } else {
    
  }
  destination_ = destination;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.RouteDestination.destination)
}

// int32 weight = 2;
inline void RouteDestination::clear_weight() {
  weight_ = 0;
}
inline ::google::protobuf::int32 RouteDestination::weight() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.RouteDestination.weight)
  return weight_;
}
inline void RouteDestination::set_weight(::google::protobuf::int32 value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.RouteDestination.weight)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// L4MatchAttributes

// repeated string destination_subnets = 1;
inline int L4MatchAttributes::destination_subnets_size() const {
  return destination_subnets_.size();
}
inline void L4MatchAttributes::clear_destination_subnets() {
  destination_subnets_.Clear();
}
inline const ::std::string& L4MatchAttributes::destination_subnets(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.L4MatchAttributes.destination_subnets)
  return destination_subnets_.Get(index);
}
inline ::std::string* L4MatchAttributes::mutable_destination_subnets(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.L4MatchAttributes.destination_subnets)
  return destination_subnets_.Mutable(index);
}
inline void L4MatchAttributes::set_destination_subnets(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.L4MatchAttributes.destination_subnets)
  destination_subnets_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void L4MatchAttributes::set_destination_subnets(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.L4MatchAttributes.destination_subnets)
  destination_subnets_.Mutable(index)->assign(std::move(value));
}
#endif
inline void L4MatchAttributes::set_destination_subnets(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  destination_subnets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.L4MatchAttributes.destination_subnets)
}
inline void L4MatchAttributes::set_destination_subnets(int index, const char* value, size_t size) {
  destination_subnets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.L4MatchAttributes.destination_subnets)
}
inline ::std::string* L4MatchAttributes::add_destination_subnets() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.L4MatchAttributes.destination_subnets)
  return destination_subnets_.Add();
}
inline void L4MatchAttributes::add_destination_subnets(const ::std::string& value) {
  destination_subnets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.L4MatchAttributes.destination_subnets)
}
#if LANG_CXX11
inline void L4MatchAttributes::add_destination_subnets(::std::string&& value) {
  destination_subnets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.L4MatchAttributes.destination_subnets)
}
#endif
inline void L4MatchAttributes::add_destination_subnets(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  destination_subnets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.L4MatchAttributes.destination_subnets)
}
inline void L4MatchAttributes::add_destination_subnets(const char* value, size_t size) {
  destination_subnets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.L4MatchAttributes.destination_subnets)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
L4MatchAttributes::destination_subnets() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.L4MatchAttributes.destination_subnets)
  return destination_subnets_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
L4MatchAttributes::mutable_destination_subnets() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.L4MatchAttributes.destination_subnets)
  return &destination_subnets_;
}

// uint32 port = 2;
inline void L4MatchAttributes::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 L4MatchAttributes::port() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.L4MatchAttributes.port)
  return port_;
}
inline void L4MatchAttributes::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.L4MatchAttributes.port)
}

// string source_subnet = 3;
inline void L4MatchAttributes::clear_source_subnet() {
  source_subnet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& L4MatchAttributes::source_subnet() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.L4MatchAttributes.source_subnet)
  return source_subnet_.GetNoArena();
}
inline void L4MatchAttributes::set_source_subnet(const ::std::string& value) {
  
  source_subnet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.L4MatchAttributes.source_subnet)
}
#if LANG_CXX11
inline void L4MatchAttributes::set_source_subnet(::std::string&& value) {
  
  source_subnet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.L4MatchAttributes.source_subnet)
}
#endif
inline void L4MatchAttributes::set_source_subnet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_subnet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.L4MatchAttributes.source_subnet)
}
inline void L4MatchAttributes::set_source_subnet(const char* value, size_t size) {
  
  source_subnet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.L4MatchAttributes.source_subnet)
}
inline ::std::string* L4MatchAttributes::mutable_source_subnet() {
  
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.L4MatchAttributes.source_subnet)
  return source_subnet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* L4MatchAttributes::release_source_subnet() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.L4MatchAttributes.source_subnet)
  
  return source_subnet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void L4MatchAttributes::set_allocated_source_subnet(::std::string* source_subnet) {
  if (source_subnet != NULL) {
    
  } else {
    
  }
  source_subnet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_subnet);
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.L4MatchAttributes.source_subnet)
}

// map<string, string> source_labels = 4;
inline int L4MatchAttributes::source_labels_size() const {
  return source_labels_.size();
}
inline void L4MatchAttributes::clear_source_labels() {
  source_labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
L4MatchAttributes::source_labels() const {
  // @@protoc_insertion_point(field_map:istio.networking.v1alpha3.L4MatchAttributes.source_labels)
  return source_labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
L4MatchAttributes::mutable_source_labels() {
  // @@protoc_insertion_point(field_mutable_map:istio.networking.v1alpha3.L4MatchAttributes.source_labels)
  return source_labels_.MutableMap();
}

// repeated string gateways = 5;
inline int L4MatchAttributes::gateways_size() const {
  return gateways_.size();
}
inline void L4MatchAttributes::clear_gateways() {
  gateways_.Clear();
}
inline const ::std::string& L4MatchAttributes::gateways(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.L4MatchAttributes.gateways)
  return gateways_.Get(index);
}
inline ::std::string* L4MatchAttributes::mutable_gateways(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.L4MatchAttributes.gateways)
  return gateways_.Mutable(index);
}
inline void L4MatchAttributes::set_gateways(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.L4MatchAttributes.gateways)
  gateways_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void L4MatchAttributes::set_gateways(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.L4MatchAttributes.gateways)
  gateways_.Mutable(index)->assign(std::move(value));
}
#endif
inline void L4MatchAttributes::set_gateways(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  gateways_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.L4MatchAttributes.gateways)
}
inline void L4MatchAttributes::set_gateways(int index, const char* value, size_t size) {
  gateways_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.L4MatchAttributes.gateways)
}
inline ::std::string* L4MatchAttributes::add_gateways() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.L4MatchAttributes.gateways)
  return gateways_.Add();
}
inline void L4MatchAttributes::add_gateways(const ::std::string& value) {
  gateways_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.L4MatchAttributes.gateways)
}
#if LANG_CXX11
inline void L4MatchAttributes::add_gateways(::std::string&& value) {
  gateways_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.L4MatchAttributes.gateways)
}
#endif
inline void L4MatchAttributes::add_gateways(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  gateways_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.L4MatchAttributes.gateways)
}
inline void L4MatchAttributes::add_gateways(const char* value, size_t size) {
  gateways_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.L4MatchAttributes.gateways)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
L4MatchAttributes::gateways() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.L4MatchAttributes.gateways)
  return gateways_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
L4MatchAttributes::mutable_gateways() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.L4MatchAttributes.gateways)
  return &gateways_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TLSMatchAttributes

// repeated string sni_hosts = 1;
inline int TLSMatchAttributes::sni_hosts_size() const {
  return sni_hosts_.size();
}
inline void TLSMatchAttributes::clear_sni_hosts() {
  sni_hosts_.Clear();
}
inline const ::std::string& TLSMatchAttributes::sni_hosts(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.TLSMatchAttributes.sni_hosts)
  return sni_hosts_.Get(index);
}
inline ::std::string* TLSMatchAttributes::mutable_sni_hosts(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.TLSMatchAttributes.sni_hosts)
  return sni_hosts_.Mutable(index);
}
inline void TLSMatchAttributes::set_sni_hosts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.TLSMatchAttributes.sni_hosts)
  sni_hosts_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TLSMatchAttributes::set_sni_hosts(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.TLSMatchAttributes.sni_hosts)
  sni_hosts_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TLSMatchAttributes::set_sni_hosts(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sni_hosts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.TLSMatchAttributes.sni_hosts)
}
inline void TLSMatchAttributes::set_sni_hosts(int index, const char* value, size_t size) {
  sni_hosts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.TLSMatchAttributes.sni_hosts)
}
inline ::std::string* TLSMatchAttributes::add_sni_hosts() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.TLSMatchAttributes.sni_hosts)
  return sni_hosts_.Add();
}
inline void TLSMatchAttributes::add_sni_hosts(const ::std::string& value) {
  sni_hosts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.TLSMatchAttributes.sni_hosts)
}
#if LANG_CXX11
inline void TLSMatchAttributes::add_sni_hosts(::std::string&& value) {
  sni_hosts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.TLSMatchAttributes.sni_hosts)
}
#endif
inline void TLSMatchAttributes::add_sni_hosts(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sni_hosts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.TLSMatchAttributes.sni_hosts)
}
inline void TLSMatchAttributes::add_sni_hosts(const char* value, size_t size) {
  sni_hosts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.TLSMatchAttributes.sni_hosts)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TLSMatchAttributes::sni_hosts() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.TLSMatchAttributes.sni_hosts)
  return sni_hosts_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TLSMatchAttributes::mutable_sni_hosts() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.TLSMatchAttributes.sni_hosts)
  return &sni_hosts_;
}

// repeated string destination_subnets = 2;
inline int TLSMatchAttributes::destination_subnets_size() const {
  return destination_subnets_.size();
}
inline void TLSMatchAttributes::clear_destination_subnets() {
  destination_subnets_.Clear();
}
inline const ::std::string& TLSMatchAttributes::destination_subnets(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.TLSMatchAttributes.destination_subnets)
  return destination_subnets_.Get(index);
}
inline ::std::string* TLSMatchAttributes::mutable_destination_subnets(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.TLSMatchAttributes.destination_subnets)
  return destination_subnets_.Mutable(index);
}
inline void TLSMatchAttributes::set_destination_subnets(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.TLSMatchAttributes.destination_subnets)
  destination_subnets_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TLSMatchAttributes::set_destination_subnets(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.TLSMatchAttributes.destination_subnets)
  destination_subnets_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TLSMatchAttributes::set_destination_subnets(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  destination_subnets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.TLSMatchAttributes.destination_subnets)
}
inline void TLSMatchAttributes::set_destination_subnets(int index, const char* value, size_t size) {
  destination_subnets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.TLSMatchAttributes.destination_subnets)
}
inline ::std::string* TLSMatchAttributes::add_destination_subnets() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.TLSMatchAttributes.destination_subnets)
  return destination_subnets_.Add();
}
inline void TLSMatchAttributes::add_destination_subnets(const ::std::string& value) {
  destination_subnets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.TLSMatchAttributes.destination_subnets)
}
#if LANG_CXX11
inline void TLSMatchAttributes::add_destination_subnets(::std::string&& value) {
  destination_subnets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.TLSMatchAttributes.destination_subnets)
}
#endif
inline void TLSMatchAttributes::add_destination_subnets(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  destination_subnets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.TLSMatchAttributes.destination_subnets)
}
inline void TLSMatchAttributes::add_destination_subnets(const char* value, size_t size) {
  destination_subnets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.TLSMatchAttributes.destination_subnets)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TLSMatchAttributes::destination_subnets() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.TLSMatchAttributes.destination_subnets)
  return destination_subnets_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TLSMatchAttributes::mutable_destination_subnets() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.TLSMatchAttributes.destination_subnets)
  return &destination_subnets_;
}

// uint32 port = 3;
inline void TLSMatchAttributes::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 TLSMatchAttributes::port() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.TLSMatchAttributes.port)
  return port_;
}
inline void TLSMatchAttributes::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.TLSMatchAttributes.port)
}

// string source_subnet = 4;
inline void TLSMatchAttributes::clear_source_subnet() {
  source_subnet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TLSMatchAttributes::source_subnet() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.TLSMatchAttributes.source_subnet)
  return source_subnet_.GetNoArena();
}
inline void TLSMatchAttributes::set_source_subnet(const ::std::string& value) {
  
  source_subnet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.TLSMatchAttributes.source_subnet)
}
#if LANG_CXX11
inline void TLSMatchAttributes::set_source_subnet(::std::string&& value) {
  
  source_subnet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.TLSMatchAttributes.source_subnet)
}
#endif
inline void TLSMatchAttributes::set_source_subnet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_subnet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.TLSMatchAttributes.source_subnet)
}
inline void TLSMatchAttributes::set_source_subnet(const char* value, size_t size) {
  
  source_subnet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.TLSMatchAttributes.source_subnet)
}
inline ::std::string* TLSMatchAttributes::mutable_source_subnet() {
  
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.TLSMatchAttributes.source_subnet)
  return source_subnet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TLSMatchAttributes::release_source_subnet() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.TLSMatchAttributes.source_subnet)
  
  return source_subnet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TLSMatchAttributes::set_allocated_source_subnet(::std::string* source_subnet) {
  if (source_subnet != NULL) {
    
  } else {
    
  }
  source_subnet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_subnet);
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.TLSMatchAttributes.source_subnet)
}

// map<string, string> source_labels = 5;
inline int TLSMatchAttributes::source_labels_size() const {
  return source_labels_.size();
}
inline void TLSMatchAttributes::clear_source_labels() {
  source_labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
TLSMatchAttributes::source_labels() const {
  // @@protoc_insertion_point(field_map:istio.networking.v1alpha3.TLSMatchAttributes.source_labels)
  return source_labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
TLSMatchAttributes::mutable_source_labels() {
  // @@protoc_insertion_point(field_mutable_map:istio.networking.v1alpha3.TLSMatchAttributes.source_labels)
  return source_labels_.MutableMap();
}

// repeated string gateways = 6;
inline int TLSMatchAttributes::gateways_size() const {
  return gateways_.size();
}
inline void TLSMatchAttributes::clear_gateways() {
  gateways_.Clear();
}
inline const ::std::string& TLSMatchAttributes::gateways(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.TLSMatchAttributes.gateways)
  return gateways_.Get(index);
}
inline ::std::string* TLSMatchAttributes::mutable_gateways(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.TLSMatchAttributes.gateways)
  return gateways_.Mutable(index);
}
inline void TLSMatchAttributes::set_gateways(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.TLSMatchAttributes.gateways)
  gateways_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TLSMatchAttributes::set_gateways(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.TLSMatchAttributes.gateways)
  gateways_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TLSMatchAttributes::set_gateways(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  gateways_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.TLSMatchAttributes.gateways)
}
inline void TLSMatchAttributes::set_gateways(int index, const char* value, size_t size) {
  gateways_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.TLSMatchAttributes.gateways)
}
inline ::std::string* TLSMatchAttributes::add_gateways() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.TLSMatchAttributes.gateways)
  return gateways_.Add();
}
inline void TLSMatchAttributes::add_gateways(const ::std::string& value) {
  gateways_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.TLSMatchAttributes.gateways)
}
#if LANG_CXX11
inline void TLSMatchAttributes::add_gateways(::std::string&& value) {
  gateways_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.TLSMatchAttributes.gateways)
}
#endif
inline void TLSMatchAttributes::add_gateways(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  gateways_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.TLSMatchAttributes.gateways)
}
inline void TLSMatchAttributes::add_gateways(const char* value, size_t size) {
  gateways_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.TLSMatchAttributes.gateways)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TLSMatchAttributes::gateways() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.TLSMatchAttributes.gateways)
  return gateways_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TLSMatchAttributes::mutable_gateways() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.TLSMatchAttributes.gateways)
  return &gateways_;
}

// -------------------------------------------------------------------

// HTTPRedirect

// string uri = 1;
inline void HTTPRedirect::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HTTPRedirect::uri() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPRedirect.uri)
  return uri_.GetNoArena();
}
inline void HTTPRedirect::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPRedirect.uri)
}
#if LANG_CXX11
inline void HTTPRedirect::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.HTTPRedirect.uri)
}
#endif
inline void HTTPRedirect::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.HTTPRedirect.uri)
}
inline void HTTPRedirect::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.HTTPRedirect.uri)
}
inline ::std::string* HTTPRedirect::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPRedirect.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HTTPRedirect::release_uri() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPRedirect.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HTTPRedirect::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPRedirect.uri)
}

// string authority = 2;
inline void HTTPRedirect::clear_authority() {
  authority_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HTTPRedirect::authority() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPRedirect.authority)
  return authority_.GetNoArena();
}
inline void HTTPRedirect::set_authority(const ::std::string& value) {
  
  authority_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPRedirect.authority)
}
#if LANG_CXX11
inline void HTTPRedirect::set_authority(::std::string&& value) {
  
  authority_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.HTTPRedirect.authority)
}
#endif
inline void HTTPRedirect::set_authority(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  authority_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.HTTPRedirect.authority)
}
inline void HTTPRedirect::set_authority(const char* value, size_t size) {
  
  authority_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.HTTPRedirect.authority)
}
inline ::std::string* HTTPRedirect::mutable_authority() {
  
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPRedirect.authority)
  return authority_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HTTPRedirect::release_authority() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPRedirect.authority)
  
  return authority_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HTTPRedirect::set_allocated_authority(::std::string* authority) {
  if (authority != NULL) {
    
  } else {
    
  }
  authority_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authority);
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPRedirect.authority)
}

// -------------------------------------------------------------------

// HTTPRewrite

// string uri = 1;
inline void HTTPRewrite::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HTTPRewrite::uri() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPRewrite.uri)
  return uri_.GetNoArena();
}
inline void HTTPRewrite::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPRewrite.uri)
}
#if LANG_CXX11
inline void HTTPRewrite::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.HTTPRewrite.uri)
}
#endif
inline void HTTPRewrite::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.HTTPRewrite.uri)
}
inline void HTTPRewrite::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.HTTPRewrite.uri)
}
inline ::std::string* HTTPRewrite::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPRewrite.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HTTPRewrite::release_uri() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPRewrite.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HTTPRewrite::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPRewrite.uri)
}

// string authority = 2;
inline void HTTPRewrite::clear_authority() {
  authority_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HTTPRewrite::authority() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPRewrite.authority)
  return authority_.GetNoArena();
}
inline void HTTPRewrite::set_authority(const ::std::string& value) {
  
  authority_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPRewrite.authority)
}
#if LANG_CXX11
inline void HTTPRewrite::set_authority(::std::string&& value) {
  
  authority_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.HTTPRewrite.authority)
}
#endif
inline void HTTPRewrite::set_authority(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  authority_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.HTTPRewrite.authority)
}
inline void HTTPRewrite::set_authority(const char* value, size_t size) {
  
  authority_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.HTTPRewrite.authority)
}
inline ::std::string* HTTPRewrite::mutable_authority() {
  
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPRewrite.authority)
  return authority_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HTTPRewrite::release_authority() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPRewrite.authority)
  
  return authority_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HTTPRewrite::set_allocated_authority(::std::string* authority) {
  if (authority != NULL) {
    
  } else {
    
  }
  authority_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authority);
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPRewrite.authority)
}

// -------------------------------------------------------------------

// StringMatch

// string exact = 1;
inline bool StringMatch::has_exact() const {
  return match_type_case() == kExact;
}
inline void StringMatch::set_has_exact() {
  _oneof_case_[0] = kExact;
}
inline void StringMatch::clear_exact() {
  if (has_exact()) {
    match_type_.exact_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_match_type();
  }
}
inline const ::std::string& StringMatch::exact() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.StringMatch.exact)
  if (has_exact()) {
    return match_type_.exact_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void StringMatch::set_exact(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.StringMatch.exact)
  if (!has_exact()) {
    clear_match_type();
    set_has_exact();
    match_type_.exact_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.exact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.StringMatch.exact)
}
#if LANG_CXX11
inline void StringMatch::set_exact(::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.StringMatch.exact)
  if (!has_exact()) {
    clear_match_type();
    set_has_exact();
    match_type_.exact_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.exact_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.StringMatch.exact)
}
#endif
inline void StringMatch::set_exact(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_exact()) {
    clear_match_type();
    set_has_exact();
    match_type_.exact_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.exact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.StringMatch.exact)
}
inline void StringMatch::set_exact(const char* value, size_t size) {
  if (!has_exact()) {
    clear_match_type();
    set_has_exact();
    match_type_.exact_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.exact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.StringMatch.exact)
}
inline ::std::string* StringMatch::mutable_exact() {
  if (!has_exact()) {
    clear_match_type();
    set_has_exact();
    match_type_.exact_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.StringMatch.exact)
  return match_type_.exact_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StringMatch::release_exact() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.StringMatch.exact)
  if (has_exact()) {
    clear_has_match_type();
    return match_type_.exact_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void StringMatch::set_allocated_exact(::std::string* exact) {
  if (!has_exact()) {
    match_type_.exact_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_match_type();
  if (exact != NULL) {
    set_has_exact();
    match_type_.exact_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        exact);
  }
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.StringMatch.exact)
}

// string prefix = 2;
inline bool StringMatch::has_prefix() const {
  return match_type_case() == kPrefix;
}
inline void StringMatch::set_has_prefix() {
  _oneof_case_[0] = kPrefix;
}
inline void StringMatch::clear_prefix() {
  if (has_prefix()) {
    match_type_.prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_match_type();
  }
}
inline const ::std::string& StringMatch::prefix() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.StringMatch.prefix)
  if (has_prefix()) {
    return match_type_.prefix_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void StringMatch::set_prefix(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.StringMatch.prefix)
  if (!has_prefix()) {
    clear_match_type();
    set_has_prefix();
    match_type_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.StringMatch.prefix)
}
#if LANG_CXX11
inline void StringMatch::set_prefix(::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.StringMatch.prefix)
  if (!has_prefix()) {
    clear_match_type();
    set_has_prefix();
    match_type_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.StringMatch.prefix)
}
#endif
inline void StringMatch::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_prefix()) {
    clear_match_type();
    set_has_prefix();
    match_type_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.StringMatch.prefix)
}
inline void StringMatch::set_prefix(const char* value, size_t size) {
  if (!has_prefix()) {
    clear_match_type();
    set_has_prefix();
    match_type_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.StringMatch.prefix)
}
inline ::std::string* StringMatch::mutable_prefix() {
  if (!has_prefix()) {
    clear_match_type();
    set_has_prefix();
    match_type_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.StringMatch.prefix)
  return match_type_.prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StringMatch::release_prefix() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.StringMatch.prefix)
  if (has_prefix()) {
    clear_has_match_type();
    return match_type_.prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void StringMatch::set_allocated_prefix(::std::string* prefix) {
  if (!has_prefix()) {
    match_type_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_match_type();
  if (prefix != NULL) {
    set_has_prefix();
    match_type_.prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        prefix);
  }
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.StringMatch.prefix)
}

// string regex = 3;
inline bool StringMatch::has_regex() const {
  return match_type_case() == kRegex;
}
inline void StringMatch::set_has_regex() {
  _oneof_case_[0] = kRegex;
}
inline void StringMatch::clear_regex() {
  if (has_regex()) {
    match_type_.regex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_match_type();
  }
}
inline const ::std::string& StringMatch::regex() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.StringMatch.regex)
  if (has_regex()) {
    return match_type_.regex_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void StringMatch::set_regex(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.StringMatch.regex)
  if (!has_regex()) {
    clear_match_type();
    set_has_regex();
    match_type_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.StringMatch.regex)
}
#if LANG_CXX11
inline void StringMatch::set_regex(::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.StringMatch.regex)
  if (!has_regex()) {
    clear_match_type();
    set_has_regex();
    match_type_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.regex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.StringMatch.regex)
}
#endif
inline void StringMatch::set_regex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_regex()) {
    clear_match_type();
    set_has_regex();
    match_type_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.StringMatch.regex)
}
inline void StringMatch::set_regex(const char* value, size_t size) {
  if (!has_regex()) {
    clear_match_type();
    set_has_regex();
    match_type_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  match_type_.regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.StringMatch.regex)
}
inline ::std::string* StringMatch::mutable_regex() {
  if (!has_regex()) {
    clear_match_type();
    set_has_regex();
    match_type_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.StringMatch.regex)
  return match_type_.regex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StringMatch::release_regex() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.StringMatch.regex)
  if (has_regex()) {
    clear_has_match_type();
    return match_type_.regex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void StringMatch::set_allocated_regex(::std::string* regex) {
  if (!has_regex()) {
    match_type_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_match_type();
  if (regex != NULL) {
    set_has_regex();
    match_type_.regex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        regex);
  }
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.StringMatch.regex)
}

inline bool StringMatch::has_match_type() const {
  return match_type_case() != MATCH_TYPE_NOT_SET;
}
inline void StringMatch::clear_has_match_type() {
  _oneof_case_[0] = MATCH_TYPE_NOT_SET;
}
inline StringMatch::MatchTypeCase StringMatch::match_type_case() const {
  return StringMatch::MatchTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// HTTPRetry

// int32 attempts = 1;
inline void HTTPRetry::clear_attempts() {
  attempts_ = 0;
}
inline ::google::protobuf::int32 HTTPRetry::attempts() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPRetry.attempts)
  return attempts_;
}
inline void HTTPRetry::set_attempts(::google::protobuf::int32 value) {
  
  attempts_ = value;
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPRetry.attempts)
}

// .google.protobuf.Duration per_try_timeout = 2;
inline bool HTTPRetry::has_per_try_timeout() const {
  return this != internal_default_instance() && per_try_timeout_ != NULL;
}
inline const ::google::protobuf::Duration& HTTPRetry::per_try_timeout() const {
  const ::google::protobuf::Duration* p = per_try_timeout_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPRetry.per_try_timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* HTTPRetry::release_per_try_timeout() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPRetry.per_try_timeout)
  
  ::google::protobuf::Duration* temp = per_try_timeout_;
  per_try_timeout_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* HTTPRetry::mutable_per_try_timeout() {
  
  if (per_try_timeout_ == NULL) {
    per_try_timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPRetry.per_try_timeout)
  return per_try_timeout_;
}
inline void HTTPRetry::set_allocated_per_try_timeout(::google::protobuf::Duration* per_try_timeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(per_try_timeout_);
  }
  if (per_try_timeout) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(per_try_timeout)->GetArena();
    if (message_arena != submessage_arena) {
      per_try_timeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, per_try_timeout, submessage_arena);
    }
    
  } else {
    
  }
  per_try_timeout_ = per_try_timeout;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPRetry.per_try_timeout)
}

// string retry_on = 3;
inline void HTTPRetry::clear_retry_on() {
  retry_on_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HTTPRetry::retry_on() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPRetry.retry_on)
  return retry_on_.GetNoArena();
}
inline void HTTPRetry::set_retry_on(const ::std::string& value) {
  
  retry_on_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPRetry.retry_on)
}
#if LANG_CXX11
inline void HTTPRetry::set_retry_on(::std::string&& value) {
  
  retry_on_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.HTTPRetry.retry_on)
}
#endif
inline void HTTPRetry::set_retry_on(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  retry_on_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.HTTPRetry.retry_on)
}
inline void HTTPRetry::set_retry_on(const char* value, size_t size) {
  
  retry_on_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.HTTPRetry.retry_on)
}
inline ::std::string* HTTPRetry::mutable_retry_on() {
  
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPRetry.retry_on)
  return retry_on_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HTTPRetry::release_retry_on() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPRetry.retry_on)
  
  return retry_on_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HTTPRetry::set_allocated_retry_on(::std::string* retry_on) {
  if (retry_on != NULL) {
    
  } else {
    
  }
  retry_on_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), retry_on);
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPRetry.retry_on)
}

// -------------------------------------------------------------------

// CorsPolicy

// repeated string allow_origin = 1;
inline int CorsPolicy::allow_origin_size() const {
  return allow_origin_.size();
}
inline void CorsPolicy::clear_allow_origin() {
  allow_origin_.Clear();
}
inline const ::std::string& CorsPolicy::allow_origin(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.CorsPolicy.allow_origin)
  return allow_origin_.Get(index);
}
inline ::std::string* CorsPolicy::mutable_allow_origin(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.CorsPolicy.allow_origin)
  return allow_origin_.Mutable(index);
}
inline void CorsPolicy::set_allow_origin(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.CorsPolicy.allow_origin)
  allow_origin_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CorsPolicy::set_allow_origin(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.CorsPolicy.allow_origin)
  allow_origin_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CorsPolicy::set_allow_origin(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  allow_origin_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.CorsPolicy.allow_origin)
}
inline void CorsPolicy::set_allow_origin(int index, const char* value, size_t size) {
  allow_origin_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.CorsPolicy.allow_origin)
}
inline ::std::string* CorsPolicy::add_allow_origin() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.CorsPolicy.allow_origin)
  return allow_origin_.Add();
}
inline void CorsPolicy::add_allow_origin(const ::std::string& value) {
  allow_origin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.CorsPolicy.allow_origin)
}
#if LANG_CXX11
inline void CorsPolicy::add_allow_origin(::std::string&& value) {
  allow_origin_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.CorsPolicy.allow_origin)
}
#endif
inline void CorsPolicy::add_allow_origin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  allow_origin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.CorsPolicy.allow_origin)
}
inline void CorsPolicy::add_allow_origin(const char* value, size_t size) {
  allow_origin_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.CorsPolicy.allow_origin)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CorsPolicy::allow_origin() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.CorsPolicy.allow_origin)
  return allow_origin_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CorsPolicy::mutable_allow_origin() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.CorsPolicy.allow_origin)
  return &allow_origin_;
}

// repeated string allow_methods = 2;
inline int CorsPolicy::allow_methods_size() const {
  return allow_methods_.size();
}
inline void CorsPolicy::clear_allow_methods() {
  allow_methods_.Clear();
}
inline const ::std::string& CorsPolicy::allow_methods(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.CorsPolicy.allow_methods)
  return allow_methods_.Get(index);
}
inline ::std::string* CorsPolicy::mutable_allow_methods(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.CorsPolicy.allow_methods)
  return allow_methods_.Mutable(index);
}
inline void CorsPolicy::set_allow_methods(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.CorsPolicy.allow_methods)
  allow_methods_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CorsPolicy::set_allow_methods(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.CorsPolicy.allow_methods)
  allow_methods_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CorsPolicy::set_allow_methods(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  allow_methods_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.CorsPolicy.allow_methods)
}
inline void CorsPolicy::set_allow_methods(int index, const char* value, size_t size) {
  allow_methods_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.CorsPolicy.allow_methods)
}
inline ::std::string* CorsPolicy::add_allow_methods() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.CorsPolicy.allow_methods)
  return allow_methods_.Add();
}
inline void CorsPolicy::add_allow_methods(const ::std::string& value) {
  allow_methods_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.CorsPolicy.allow_methods)
}
#if LANG_CXX11
inline void CorsPolicy::add_allow_methods(::std::string&& value) {
  allow_methods_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.CorsPolicy.allow_methods)
}
#endif
inline void CorsPolicy::add_allow_methods(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  allow_methods_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.CorsPolicy.allow_methods)
}
inline void CorsPolicy::add_allow_methods(const char* value, size_t size) {
  allow_methods_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.CorsPolicy.allow_methods)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CorsPolicy::allow_methods() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.CorsPolicy.allow_methods)
  return allow_methods_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CorsPolicy::mutable_allow_methods() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.CorsPolicy.allow_methods)
  return &allow_methods_;
}

// repeated string allow_headers = 3;
inline int CorsPolicy::allow_headers_size() const {
  return allow_headers_.size();
}
inline void CorsPolicy::clear_allow_headers() {
  allow_headers_.Clear();
}
inline const ::std::string& CorsPolicy::allow_headers(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.CorsPolicy.allow_headers)
  return allow_headers_.Get(index);
}
inline ::std::string* CorsPolicy::mutable_allow_headers(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.CorsPolicy.allow_headers)
  return allow_headers_.Mutable(index);
}
inline void CorsPolicy::set_allow_headers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.CorsPolicy.allow_headers)
  allow_headers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CorsPolicy::set_allow_headers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.CorsPolicy.allow_headers)
  allow_headers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CorsPolicy::set_allow_headers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  allow_headers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.CorsPolicy.allow_headers)
}
inline void CorsPolicy::set_allow_headers(int index, const char* value, size_t size) {
  allow_headers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.CorsPolicy.allow_headers)
}
inline ::std::string* CorsPolicy::add_allow_headers() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.CorsPolicy.allow_headers)
  return allow_headers_.Add();
}
inline void CorsPolicy::add_allow_headers(const ::std::string& value) {
  allow_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.CorsPolicy.allow_headers)
}
#if LANG_CXX11
inline void CorsPolicy::add_allow_headers(::std::string&& value) {
  allow_headers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.CorsPolicy.allow_headers)
}
#endif
inline void CorsPolicy::add_allow_headers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  allow_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.CorsPolicy.allow_headers)
}
inline void CorsPolicy::add_allow_headers(const char* value, size_t size) {
  allow_headers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.CorsPolicy.allow_headers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CorsPolicy::allow_headers() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.CorsPolicy.allow_headers)
  return allow_headers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CorsPolicy::mutable_allow_headers() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.CorsPolicy.allow_headers)
  return &allow_headers_;
}

// repeated string expose_headers = 4;
inline int CorsPolicy::expose_headers_size() const {
  return expose_headers_.size();
}
inline void CorsPolicy::clear_expose_headers() {
  expose_headers_.Clear();
}
inline const ::std::string& CorsPolicy::expose_headers(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.CorsPolicy.expose_headers)
  return expose_headers_.Get(index);
}
inline ::std::string* CorsPolicy::mutable_expose_headers(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.CorsPolicy.expose_headers)
  return expose_headers_.Mutable(index);
}
inline void CorsPolicy::set_expose_headers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.CorsPolicy.expose_headers)
  expose_headers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CorsPolicy::set_expose_headers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.CorsPolicy.expose_headers)
  expose_headers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CorsPolicy::set_expose_headers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  expose_headers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.CorsPolicy.expose_headers)
}
inline void CorsPolicy::set_expose_headers(int index, const char* value, size_t size) {
  expose_headers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.CorsPolicy.expose_headers)
}
inline ::std::string* CorsPolicy::add_expose_headers() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.CorsPolicy.expose_headers)
  return expose_headers_.Add();
}
inline void CorsPolicy::add_expose_headers(const ::std::string& value) {
  expose_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.CorsPolicy.expose_headers)
}
#if LANG_CXX11
inline void CorsPolicy::add_expose_headers(::std::string&& value) {
  expose_headers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.CorsPolicy.expose_headers)
}
#endif
inline void CorsPolicy::add_expose_headers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  expose_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.CorsPolicy.expose_headers)
}
inline void CorsPolicy::add_expose_headers(const char* value, size_t size) {
  expose_headers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.CorsPolicy.expose_headers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CorsPolicy::expose_headers() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.CorsPolicy.expose_headers)
  return expose_headers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CorsPolicy::mutable_expose_headers() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.CorsPolicy.expose_headers)
  return &expose_headers_;
}

// .google.protobuf.Duration max_age = 5;
inline bool CorsPolicy::has_max_age() const {
  return this != internal_default_instance() && max_age_ != NULL;
}
inline const ::google::protobuf::Duration& CorsPolicy::max_age() const {
  const ::google::protobuf::Duration* p = max_age_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.CorsPolicy.max_age)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* CorsPolicy::release_max_age() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.CorsPolicy.max_age)
  
  ::google::protobuf::Duration* temp = max_age_;
  max_age_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* CorsPolicy::mutable_max_age() {
  
  if (max_age_ == NULL) {
    max_age_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.CorsPolicy.max_age)
  return max_age_;
}
inline void CorsPolicy::set_allocated_max_age(::google::protobuf::Duration* max_age) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_age_);
  }
  if (max_age) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(max_age)->GetArena();
    if (message_arena != submessage_arena) {
      max_age = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_age, submessage_arena);
    }
    
  } else {
    
  }
  max_age_ = max_age;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.CorsPolicy.max_age)
}

// .google.protobuf.BoolValue allow_credentials = 6;
inline bool CorsPolicy::has_allow_credentials() const {
  return this != internal_default_instance() && allow_credentials_ != NULL;
}
inline const ::google::protobuf::BoolValue& CorsPolicy::allow_credentials() const {
  const ::google::protobuf::BoolValue* p = allow_credentials_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.CorsPolicy.allow_credentials)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* CorsPolicy::release_allow_credentials() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.CorsPolicy.allow_credentials)
  
  ::google::protobuf::BoolValue* temp = allow_credentials_;
  allow_credentials_ = NULL;
  return temp;
}
inline ::google::protobuf::BoolValue* CorsPolicy::mutable_allow_credentials() {
  
  if (allow_credentials_ == NULL) {
    allow_credentials_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.CorsPolicy.allow_credentials)
  return allow_credentials_;
}
inline void CorsPolicy::set_allocated_allow_credentials(::google::protobuf::BoolValue* allow_credentials) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(allow_credentials_);
  }
  if (allow_credentials) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(allow_credentials)->GetArena();
    if (message_arena != submessage_arena) {
      allow_credentials = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, allow_credentials, submessage_arena);
    }
    
  } else {
    
  }
  allow_credentials_ = allow_credentials;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.CorsPolicy.allow_credentials)
}

// -------------------------------------------------------------------

// HTTPFaultInjection_Delay

// int32 percent = 1 [deprecated = true];
inline void HTTPFaultInjection_Delay::clear_percent() {
  percent_ = 0;
}
inline ::google::protobuf::int32 HTTPFaultInjection_Delay::percent() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPFaultInjection.Delay.percent)
  return percent_;
}
inline void HTTPFaultInjection_Delay::set_percent(::google::protobuf::int32 value) {
  
  percent_ = value;
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPFaultInjection.Delay.percent)
}

// .google.protobuf.Duration fixed_delay = 2;
inline bool HTTPFaultInjection_Delay::has_fixed_delay() const {
  return http_delay_type_case() == kFixedDelay;
}
inline void HTTPFaultInjection_Delay::set_has_fixed_delay() {
  _oneof_case_[0] = kFixedDelay;
}
inline ::google::protobuf::Duration* HTTPFaultInjection_Delay::release_fixed_delay() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPFaultInjection.Delay.fixed_delay)
  if (has_fixed_delay()) {
    clear_has_http_delay_type();
      ::google::protobuf::Duration* temp = http_delay_type_.fixed_delay_;
    http_delay_type_.fixed_delay_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::protobuf::Duration& HTTPFaultInjection_Delay::fixed_delay() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPFaultInjection.Delay.fixed_delay)
  return has_fixed_delay()
      ? *http_delay_type_.fixed_delay_
      : *reinterpret_cast< ::google::protobuf::Duration*>(&::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* HTTPFaultInjection_Delay::mutable_fixed_delay() {
  if (!has_fixed_delay()) {
    clear_http_delay_type();
    set_has_fixed_delay();
    http_delay_type_.fixed_delay_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPFaultInjection.Delay.fixed_delay)
  return http_delay_type_.fixed_delay_;
}

// .google.protobuf.Duration exponential_delay = 3;
inline bool HTTPFaultInjection_Delay::has_exponential_delay() const {
  return http_delay_type_case() == kExponentialDelay;
}
inline void HTTPFaultInjection_Delay::set_has_exponential_delay() {
  _oneof_case_[0] = kExponentialDelay;
}
inline ::google::protobuf::Duration* HTTPFaultInjection_Delay::release_exponential_delay() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPFaultInjection.Delay.exponential_delay)
  if (has_exponential_delay()) {
    clear_has_http_delay_type();
      ::google::protobuf::Duration* temp = http_delay_type_.exponential_delay_;
    http_delay_type_.exponential_delay_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::protobuf::Duration& HTTPFaultInjection_Delay::exponential_delay() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPFaultInjection.Delay.exponential_delay)
  return has_exponential_delay()
      ? *http_delay_type_.exponential_delay_
      : *reinterpret_cast< ::google::protobuf::Duration*>(&::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* HTTPFaultInjection_Delay::mutable_exponential_delay() {
  if (!has_exponential_delay()) {
    clear_http_delay_type();
    set_has_exponential_delay();
    http_delay_type_.exponential_delay_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPFaultInjection.Delay.exponential_delay)
  return http_delay_type_.exponential_delay_;
}

// .istio.networking.v1alpha3.Percent percentage = 5;
inline bool HTTPFaultInjection_Delay::has_percentage() const {
  return this != internal_default_instance() && percentage_ != NULL;
}
inline void HTTPFaultInjection_Delay::clear_percentage() {
  if (GetArenaNoVirtual() == NULL && percentage_ != NULL) {
    delete percentage_;
  }
  percentage_ = NULL;
}
inline const ::istio::networking::v1alpha3::Percent& HTTPFaultInjection_Delay::percentage() const {
  const ::istio::networking::v1alpha3::Percent* p = percentage_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPFaultInjection.Delay.percentage)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::networking::v1alpha3::Percent*>(
      &::istio::networking::v1alpha3::_Percent_default_instance_);
}
inline ::istio::networking::v1alpha3::Percent* HTTPFaultInjection_Delay::release_percentage() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPFaultInjection.Delay.percentage)
  
  ::istio::networking::v1alpha3::Percent* temp = percentage_;
  percentage_ = NULL;
  return temp;
}
inline ::istio::networking::v1alpha3::Percent* HTTPFaultInjection_Delay::mutable_percentage() {
  
  if (percentage_ == NULL) {
    percentage_ = new ::istio::networking::v1alpha3::Percent;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPFaultInjection.Delay.percentage)
  return percentage_;
}
inline void HTTPFaultInjection_Delay::set_allocated_percentage(::istio::networking::v1alpha3::Percent* percentage) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete percentage_;
  }
  if (percentage) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      percentage = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, percentage, submessage_arena);
    }
    
  } else {
    
  }
  percentage_ = percentage;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPFaultInjection.Delay.percentage)
}

inline bool HTTPFaultInjection_Delay::has_http_delay_type() const {
  return http_delay_type_case() != HTTP_DELAY_TYPE_NOT_SET;
}
inline void HTTPFaultInjection_Delay::clear_has_http_delay_type() {
  _oneof_case_[0] = HTTP_DELAY_TYPE_NOT_SET;
}
inline HTTPFaultInjection_Delay::HttpDelayTypeCase HTTPFaultInjection_Delay::http_delay_type_case() const {
  return HTTPFaultInjection_Delay::HttpDelayTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// HTTPFaultInjection_Abort

// int32 percent = 1 [deprecated = true];
inline void HTTPFaultInjection_Abort::clear_percent() {
  percent_ = 0;
}
inline ::google::protobuf::int32 HTTPFaultInjection_Abort::percent() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPFaultInjection.Abort.percent)
  return percent_;
}
inline void HTTPFaultInjection_Abort::set_percent(::google::protobuf::int32 value) {
  
  percent_ = value;
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPFaultInjection.Abort.percent)
}

// int32 http_status = 2;
inline bool HTTPFaultInjection_Abort::has_http_status() const {
  return error_type_case() == kHttpStatus;
}
inline void HTTPFaultInjection_Abort::set_has_http_status() {
  _oneof_case_[0] = kHttpStatus;
}
inline void HTTPFaultInjection_Abort::clear_http_status() {
  if (has_http_status()) {
    error_type_.http_status_ = 0;
    clear_has_error_type();
  }
}
inline ::google::protobuf::int32 HTTPFaultInjection_Abort::http_status() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPFaultInjection.Abort.http_status)
  if (has_http_status()) {
    return error_type_.http_status_;
  }
  return 0;
}
inline void HTTPFaultInjection_Abort::set_http_status(::google::protobuf::int32 value) {
  if (!has_http_status()) {
    clear_error_type();
    set_has_http_status();
  }
  error_type_.http_status_ = value;
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPFaultInjection.Abort.http_status)
}

// string grpc_status = 3;
inline bool HTTPFaultInjection_Abort::has_grpc_status() const {
  return error_type_case() == kGrpcStatus;
}
inline void HTTPFaultInjection_Abort::set_has_grpc_status() {
  _oneof_case_[0] = kGrpcStatus;
}
inline void HTTPFaultInjection_Abort::clear_grpc_status() {
  if (has_grpc_status()) {
    error_type_.grpc_status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_error_type();
  }
}
inline const ::std::string& HTTPFaultInjection_Abort::grpc_status() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPFaultInjection.Abort.grpc_status)
  if (has_grpc_status()) {
    return error_type_.grpc_status_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void HTTPFaultInjection_Abort::set_grpc_status(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPFaultInjection.Abort.grpc_status)
  if (!has_grpc_status()) {
    clear_error_type();
    set_has_grpc_status();
    error_type_.grpc_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  error_type_.grpc_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPFaultInjection.Abort.grpc_status)
}
#if LANG_CXX11
inline void HTTPFaultInjection_Abort::set_grpc_status(::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPFaultInjection.Abort.grpc_status)
  if (!has_grpc_status()) {
    clear_error_type();
    set_has_grpc_status();
    error_type_.grpc_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  error_type_.grpc_status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.HTTPFaultInjection.Abort.grpc_status)
}
#endif
inline void HTTPFaultInjection_Abort::set_grpc_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_grpc_status()) {
    clear_error_type();
    set_has_grpc_status();
    error_type_.grpc_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  error_type_.grpc_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.HTTPFaultInjection.Abort.grpc_status)
}
inline void HTTPFaultInjection_Abort::set_grpc_status(const char* value, size_t size) {
  if (!has_grpc_status()) {
    clear_error_type();
    set_has_grpc_status();
    error_type_.grpc_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  error_type_.grpc_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.HTTPFaultInjection.Abort.grpc_status)
}
inline ::std::string* HTTPFaultInjection_Abort::mutable_grpc_status() {
  if (!has_grpc_status()) {
    clear_error_type();
    set_has_grpc_status();
    error_type_.grpc_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPFaultInjection.Abort.grpc_status)
  return error_type_.grpc_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HTTPFaultInjection_Abort::release_grpc_status() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPFaultInjection.Abort.grpc_status)
  if (has_grpc_status()) {
    clear_has_error_type();
    return error_type_.grpc_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void HTTPFaultInjection_Abort::set_allocated_grpc_status(::std::string* grpc_status) {
  if (!has_grpc_status()) {
    error_type_.grpc_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_error_type();
  if (grpc_status != NULL) {
    set_has_grpc_status();
    error_type_.grpc_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        grpc_status);
  }
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPFaultInjection.Abort.grpc_status)
}

// string http2_error = 4;
inline bool HTTPFaultInjection_Abort::has_http2_error() const {
  return error_type_case() == kHttp2Error;
}
inline void HTTPFaultInjection_Abort::set_has_http2_error() {
  _oneof_case_[0] = kHttp2Error;
}
inline void HTTPFaultInjection_Abort::clear_http2_error() {
  if (has_http2_error()) {
    error_type_.http2_error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_error_type();
  }
}
inline const ::std::string& HTTPFaultInjection_Abort::http2_error() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPFaultInjection.Abort.http2_error)
  if (has_http2_error()) {
    return error_type_.http2_error_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void HTTPFaultInjection_Abort::set_http2_error(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPFaultInjection.Abort.http2_error)
  if (!has_http2_error()) {
    clear_error_type();
    set_has_http2_error();
    error_type_.http2_error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  error_type_.http2_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPFaultInjection.Abort.http2_error)
}
#if LANG_CXX11
inline void HTTPFaultInjection_Abort::set_http2_error(::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.HTTPFaultInjection.Abort.http2_error)
  if (!has_http2_error()) {
    clear_error_type();
    set_has_http2_error();
    error_type_.http2_error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  error_type_.http2_error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.HTTPFaultInjection.Abort.http2_error)
}
#endif
inline void HTTPFaultInjection_Abort::set_http2_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_http2_error()) {
    clear_error_type();
    set_has_http2_error();
    error_type_.http2_error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  error_type_.http2_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.HTTPFaultInjection.Abort.http2_error)
}
inline void HTTPFaultInjection_Abort::set_http2_error(const char* value, size_t size) {
  if (!has_http2_error()) {
    clear_error_type();
    set_has_http2_error();
    error_type_.http2_error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  error_type_.http2_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.HTTPFaultInjection.Abort.http2_error)
}
inline ::std::string* HTTPFaultInjection_Abort::mutable_http2_error() {
  if (!has_http2_error()) {
    clear_error_type();
    set_has_http2_error();
    error_type_.http2_error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPFaultInjection.Abort.http2_error)
  return error_type_.http2_error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HTTPFaultInjection_Abort::release_http2_error() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPFaultInjection.Abort.http2_error)
  if (has_http2_error()) {
    clear_has_error_type();
    return error_type_.http2_error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void HTTPFaultInjection_Abort::set_allocated_http2_error(::std::string* http2_error) {
  if (!has_http2_error()) {
    error_type_.http2_error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_error_type();
  if (http2_error != NULL) {
    set_has_http2_error();
    error_type_.http2_error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        http2_error);
  }
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPFaultInjection.Abort.http2_error)
}

// .istio.networking.v1alpha3.Percent percentage = 5;
inline bool HTTPFaultInjection_Abort::has_percentage() const {
  return this != internal_default_instance() && percentage_ != NULL;
}
inline void HTTPFaultInjection_Abort::clear_percentage() {
  if (GetArenaNoVirtual() == NULL && percentage_ != NULL) {
    delete percentage_;
  }
  percentage_ = NULL;
}
inline const ::istio::networking::v1alpha3::Percent& HTTPFaultInjection_Abort::percentage() const {
  const ::istio::networking::v1alpha3::Percent* p = percentage_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPFaultInjection.Abort.percentage)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::networking::v1alpha3::Percent*>(
      &::istio::networking::v1alpha3::_Percent_default_instance_);
}
inline ::istio::networking::v1alpha3::Percent* HTTPFaultInjection_Abort::release_percentage() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPFaultInjection.Abort.percentage)
  
  ::istio::networking::v1alpha3::Percent* temp = percentage_;
  percentage_ = NULL;
  return temp;
}
inline ::istio::networking::v1alpha3::Percent* HTTPFaultInjection_Abort::mutable_percentage() {
  
  if (percentage_ == NULL) {
    percentage_ = new ::istio::networking::v1alpha3::Percent;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPFaultInjection.Abort.percentage)
  return percentage_;
}
inline void HTTPFaultInjection_Abort::set_allocated_percentage(::istio::networking::v1alpha3::Percent* percentage) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete percentage_;
  }
  if (percentage) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      percentage = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, percentage, submessage_arena);
    }
    
  } else {
    
  }
  percentage_ = percentage;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPFaultInjection.Abort.percentage)
}

inline bool HTTPFaultInjection_Abort::has_error_type() const {
  return error_type_case() != ERROR_TYPE_NOT_SET;
}
inline void HTTPFaultInjection_Abort::clear_has_error_type() {
  _oneof_case_[0] = ERROR_TYPE_NOT_SET;
}
inline HTTPFaultInjection_Abort::ErrorTypeCase HTTPFaultInjection_Abort::error_type_case() const {
  return HTTPFaultInjection_Abort::ErrorTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// HTTPFaultInjection

// .istio.networking.v1alpha3.HTTPFaultInjection.Delay delay = 1;
inline bool HTTPFaultInjection::has_delay() const {
  return this != internal_default_instance() && delay_ != NULL;
}
inline void HTTPFaultInjection::clear_delay() {
  if (GetArenaNoVirtual() == NULL && delay_ != NULL) {
    delete delay_;
  }
  delay_ = NULL;
}
inline const ::istio::networking::v1alpha3::HTTPFaultInjection_Delay& HTTPFaultInjection::delay() const {
  const ::istio::networking::v1alpha3::HTTPFaultInjection_Delay* p = delay_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPFaultInjection.delay)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::networking::v1alpha3::HTTPFaultInjection_Delay*>(
      &::istio::networking::v1alpha3::_HTTPFaultInjection_Delay_default_instance_);
}
inline ::istio::networking::v1alpha3::HTTPFaultInjection_Delay* HTTPFaultInjection::release_delay() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPFaultInjection.delay)
  
  ::istio::networking::v1alpha3::HTTPFaultInjection_Delay* temp = delay_;
  delay_ = NULL;
  return temp;
}
inline ::istio::networking::v1alpha3::HTTPFaultInjection_Delay* HTTPFaultInjection::mutable_delay() {
  
  if (delay_ == NULL) {
    delay_ = new ::istio::networking::v1alpha3::HTTPFaultInjection_Delay;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPFaultInjection.delay)
  return delay_;
}
inline void HTTPFaultInjection::set_allocated_delay(::istio::networking::v1alpha3::HTTPFaultInjection_Delay* delay) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete delay_;
  }
  if (delay) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      delay = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, delay, submessage_arena);
    }
    
  } else {
    
  }
  delay_ = delay;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPFaultInjection.delay)
}

// .istio.networking.v1alpha3.HTTPFaultInjection.Abort abort = 2;
inline bool HTTPFaultInjection::has_abort() const {
  return this != internal_default_instance() && abort_ != NULL;
}
inline void HTTPFaultInjection::clear_abort() {
  if (GetArenaNoVirtual() == NULL && abort_ != NULL) {
    delete abort_;
  }
  abort_ = NULL;
}
inline const ::istio::networking::v1alpha3::HTTPFaultInjection_Abort& HTTPFaultInjection::abort() const {
  const ::istio::networking::v1alpha3::HTTPFaultInjection_Abort* p = abort_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.HTTPFaultInjection.abort)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::networking::v1alpha3::HTTPFaultInjection_Abort*>(
      &::istio::networking::v1alpha3::_HTTPFaultInjection_Abort_default_instance_);
}
inline ::istio::networking::v1alpha3::HTTPFaultInjection_Abort* HTTPFaultInjection::release_abort() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.HTTPFaultInjection.abort)
  
  ::istio::networking::v1alpha3::HTTPFaultInjection_Abort* temp = abort_;
  abort_ = NULL;
  return temp;
}
inline ::istio::networking::v1alpha3::HTTPFaultInjection_Abort* HTTPFaultInjection::mutable_abort() {
  
  if (abort_ == NULL) {
    abort_ = new ::istio::networking::v1alpha3::HTTPFaultInjection_Abort;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.HTTPFaultInjection.abort)
  return abort_;
}
inline void HTTPFaultInjection::set_allocated_abort(::istio::networking::v1alpha3::HTTPFaultInjection_Abort* abort) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete abort_;
  }
  if (abort) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      abort = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, abort, submessage_arena);
    }
    
  } else {
    
  }
  abort_ = abort;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.HTTPFaultInjection.abort)
}

// -------------------------------------------------------------------

// PortSelector

// uint32 number = 1;
inline bool PortSelector::has_number() const {
  return port_case() == kNumber;
}
inline void PortSelector::set_has_number() {
  _oneof_case_[0] = kNumber;
}
inline void PortSelector::clear_number() {
  if (has_number()) {
    port_.number_ = 0u;
    clear_has_port();
  }
}
inline ::google::protobuf::uint32 PortSelector::number() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.PortSelector.number)
  if (has_number()) {
    return port_.number_;
  }
  return 0u;
}
inline void PortSelector::set_number(::google::protobuf::uint32 value) {
  if (!has_number()) {
    clear_port();
    set_has_number();
  }
  port_.number_ = value;
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.PortSelector.number)
}

// string name = 2;
inline bool PortSelector::has_name() const {
  return port_case() == kName;
}
inline void PortSelector::set_has_name() {
  _oneof_case_[0] = kName;
}
inline void PortSelector::clear_name() {
  if (has_name()) {
    port_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_port();
  }
}
inline const ::std::string& PortSelector::name() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.PortSelector.name)
  if (has_name()) {
    return port_.name_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void PortSelector::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.PortSelector.name)
  if (!has_name()) {
    clear_port();
    set_has_name();
    port_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  port_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.PortSelector.name)
}
#if LANG_CXX11
inline void PortSelector::set_name(::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.PortSelector.name)
  if (!has_name()) {
    clear_port();
    set_has_name();
    port_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  port_.name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.PortSelector.name)
}
#endif
inline void PortSelector::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_name()) {
    clear_port();
    set_has_name();
    port_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  port_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.PortSelector.name)
}
inline void PortSelector::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_port();
    set_has_name();
    port_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  port_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.PortSelector.name)
}
inline ::std::string* PortSelector::mutable_name() {
  if (!has_name()) {
    clear_port();
    set_has_name();
    port_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.PortSelector.name)
  return port_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PortSelector::release_name() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.PortSelector.name)
  if (has_name()) {
    clear_has_port();
    return port_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void PortSelector::set_allocated_name(::std::string* name) {
  if (!has_name()) {
    port_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_port();
  if (name != NULL) {
    set_has_name();
    port_.name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        name);
  }
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.PortSelector.name)
}

inline bool PortSelector::has_port() const {
  return port_case() != PORT_NOT_SET;
}
inline void PortSelector::clear_has_port() {
  _oneof_case_[0] = PORT_NOT_SET;
}
inline PortSelector::PortCase PortSelector::port_case() const {
  return PortSelector::PortCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Percent

// double value = 1;
inline void Percent::clear_value() {
  value_ = 0;
}
inline double Percent::value() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Percent.value)
  return value_;
}
inline void Percent::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.Percent.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha3
}  // namespace networking
}  // namespace istio

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_networking_2fv1alpha3_2fvirtual_5fservice_2eproto__INCLUDED
