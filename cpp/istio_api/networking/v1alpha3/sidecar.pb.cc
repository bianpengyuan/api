// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networking/v1alpha3/sidecar.proto

#include "networking/v1alpha3/sidecar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace istio {
namespace networking {
namespace v1alpha3 {
class SidecarDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sidecar>
      _instance;
} _Sidecar_default_instance_;
class IstioIngressListenerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IstioIngressListener>
      _instance;
} _IstioIngressListener_default_instance_;
class IstioEgressListenerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IstioEgressListener>
      _instance;
} _IstioEgressListener_default_instance_;
class WorkloadSelector_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkloadSelector_LabelsEntry_DoNotUse>
      _instance;
} _WorkloadSelector_LabelsEntry_DoNotUse_default_instance_;
class WorkloadSelectorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkloadSelector>
      _instance;
} _WorkloadSelector_default_instance_;
}  // namespace v1alpha3
}  // namespace networking
}  // namespace istio
namespace protobuf_networking_2fv1alpha3_2fsidecar_2eproto {
void InitDefaultsSidecarImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fsidecar_2eproto::InitDefaultsWorkloadSelector();
  protobuf_networking_2fv1alpha3_2fsidecar_2eproto::InitDefaultsIstioIngressListener();
  protobuf_networking_2fv1alpha3_2fsidecar_2eproto::InitDefaultsIstioEgressListener();
  {
    void* ptr = &::istio::networking::v1alpha3::_Sidecar_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::Sidecar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::Sidecar::InitAsDefaultInstance();
}

void InitDefaultsSidecar() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSidecarImpl);
}

void InitDefaultsIstioIngressListenerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fgateway_2eproto::InitDefaultsPort();
  {
    void* ptr = &::istio::networking::v1alpha3::_IstioIngressListener_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::IstioIngressListener();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::IstioIngressListener::InitAsDefaultInstance();
}

void InitDefaultsIstioIngressListener() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIstioIngressListenerImpl);
}

void InitDefaultsIstioEgressListenerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fgateway_2eproto::InitDefaultsPort();
  {
    void* ptr = &::istio::networking::v1alpha3::_IstioEgressListener_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::IstioEgressListener();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::IstioEgressListener::InitAsDefaultInstance();
}

void InitDefaultsIstioEgressListener() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIstioEgressListenerImpl);
}

void InitDefaultsWorkloadSelector_LabelsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_WorkloadSelector_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::WorkloadSelector_LabelsEntry_DoNotUse();
  }
  ::istio::networking::v1alpha3::WorkloadSelector_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsWorkloadSelector_LabelsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWorkloadSelector_LabelsEntry_DoNotUseImpl);
}

void InitDefaultsWorkloadSelectorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fsidecar_2eproto::InitDefaultsWorkloadSelector_LabelsEntry_DoNotUse();
  {
    void* ptr = &::istio::networking::v1alpha3::_WorkloadSelector_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::WorkloadSelector();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::WorkloadSelector::InitAsDefaultInstance();
}

void InitDefaultsWorkloadSelector() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWorkloadSelectorImpl);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Sidecar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Sidecar, workload_selector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Sidecar, ingress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Sidecar, egress_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::IstioIngressListener, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::IstioIngressListener, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::IstioIngressListener, bind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::IstioIngressListener, capture_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::IstioIngressListener, default_endpoint_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::IstioEgressListener, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::IstioEgressListener, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::IstioEgressListener, bind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::IstioEgressListener, capture_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::IstioEgressListener, hosts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::WorkloadSelector_LabelsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::WorkloadSelector_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::WorkloadSelector_LabelsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::WorkloadSelector_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::WorkloadSelector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::WorkloadSelector, labels_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::istio::networking::v1alpha3::Sidecar)},
  { 8, -1, sizeof(::istio::networking::v1alpha3::IstioIngressListener)},
  { 17, -1, sizeof(::istio::networking::v1alpha3::IstioEgressListener)},
  { 26, 33, sizeof(::istio::networking::v1alpha3::WorkloadSelector_LabelsEntry_DoNotUse)},
  { 35, -1, sizeof(::istio::networking::v1alpha3::WorkloadSelector)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_Sidecar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_IstioIngressListener_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_IstioEgressListener_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_WorkloadSelector_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_WorkloadSelector_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "networking/v1alpha3/sidecar.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n!networking/v1alpha3/sidecar.proto\022\031ist"
      "io.networking.v1alpha3\032!networking/v1alp"
      "ha3/gateway.proto\"\323\001\n\007Sidecar\022F\n\021workloa"
      "d_selector\030\001 \001(\0132+.istio.networking.v1al"
      "pha3.WorkloadSelector\022@\n\007ingress\030\002 \003(\0132/"
      ".istio.networking.v1alpha3.IstioIngressL"
      "istener\022>\n\006egress\030\003 \003(\0132..istio.networki"
      "ng.v1alpha3.IstioEgressListener\"\253\001\n\024Isti"
      "oIngressListener\022-\n\004port\030\001 \001(\0132\037.istio.n"
      "etworking.v1alpha3.Port\022\014\n\004bind\030\002 \001(\t\022<\n"
      "\014capture_mode\030\003 \001(\0162&.istio.networking.v"
      "1alpha3.CaptureMode\022\030\n\020default_endpoint\030"
      "\004 \001(\t\"\237\001\n\023IstioEgressListener\022-\n\004port\030\001 "
      "\001(\0132\037.istio.networking.v1alpha3.Port\022\014\n\004"
      "bind\030\002 \001(\t\022<\n\014capture_mode\030\003 \001(\0162&.istio"
      ".networking.v1alpha3.CaptureMode\022\r\n\005host"
      "s\030\004 \003(\t\"\212\001\n\020WorkloadSelector\022G\n\006labels\030\001"
      " \003(\01327.istio.networking.v1alpha3.Workloa"
      "dSelector.LabelsEntry\032-\n\013LabelsEntry\022\013\n\003"
      "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001*2\n\013CaptureM"
      "ode\022\013\n\007DEFAULT\020\000\022\014\n\010IPTABLES\020\001\022\010\n\004NONE\020\002"
      "B\"Z istio.io/api/networking/v1alpha3b\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 884);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "networking/v1alpha3/sidecar.proto", &protobuf_RegisterTypes);
  ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_networking_2fv1alpha3_2fsidecar_2eproto
namespace istio {
namespace networking {
namespace v1alpha3 {
const ::google::protobuf::EnumDescriptor* CaptureMode_descriptor() {
  protobuf_networking_2fv1alpha3_2fsidecar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_networking_2fv1alpha3_2fsidecar_2eproto::file_level_enum_descriptors[0];
}
bool CaptureMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Sidecar::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_Sidecar_default_instance_._instance.get_mutable()->workload_selector_ = const_cast< ::istio::networking::v1alpha3::WorkloadSelector*>(
      ::istio::networking::v1alpha3::WorkloadSelector::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sidecar::kWorkloadSelectorFieldNumber;
const int Sidecar::kIngressFieldNumber;
const int Sidecar::kEgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sidecar::Sidecar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fsidecar_2eproto::InitDefaultsSidecar();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.Sidecar)
}
Sidecar::Sidecar(const Sidecar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ingress_(from.ingress_),
      egress_(from.egress_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_workload_selector()) {
    workload_selector_ = new ::istio::networking::v1alpha3::WorkloadSelector(*from.workload_selector_);
  } else {
    workload_selector_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.Sidecar)
}

void Sidecar::SharedCtor() {
  workload_selector_ = NULL;
  _cached_size_ = 0;
}

Sidecar::~Sidecar() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.Sidecar)
  SharedDtor();
}

void Sidecar::SharedDtor() {
  if (this != internal_default_instance()) delete workload_selector_;
}

void Sidecar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sidecar::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fsidecar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fsidecar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sidecar& Sidecar::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fsidecar_2eproto::InitDefaultsSidecar();
  return *internal_default_instance();
}

Sidecar* Sidecar::New(::google::protobuf::Arena* arena) const {
  Sidecar* n = new Sidecar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sidecar::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.Sidecar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ingress_.Clear();
  egress_.Clear();
  if (GetArenaNoVirtual() == NULL && workload_selector_ != NULL) {
    delete workload_selector_;
  }
  workload_selector_ = NULL;
  _internal_metadata_.Clear();
}

bool Sidecar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.Sidecar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.networking.v1alpha3.WorkloadSelector workload_selector = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_workload_selector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.networking.v1alpha3.IstioIngressListener ingress = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_ingress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.networking.v1alpha3.IstioEgressListener egress = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_egress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.Sidecar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.Sidecar)
  return false;
#undef DO_
}

void Sidecar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.Sidecar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.WorkloadSelector workload_selector = 1;
  if (this->has_workload_selector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->workload_selector_, output);
  }

  // repeated .istio.networking.v1alpha3.IstioIngressListener ingress = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ingress_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ingress(static_cast<int>(i)), output);
  }

  // repeated .istio.networking.v1alpha3.IstioEgressListener egress = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->egress_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->egress(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.Sidecar)
}

::google::protobuf::uint8* Sidecar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.Sidecar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.WorkloadSelector workload_selector = 1;
  if (this->has_workload_selector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->workload_selector_, deterministic, target);
  }

  // repeated .istio.networking.v1alpha3.IstioIngressListener ingress = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ingress_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->ingress(static_cast<int>(i)), deterministic, target);
  }

  // repeated .istio.networking.v1alpha3.IstioEgressListener egress = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->egress_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->egress(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.Sidecar)
  return target;
}

size_t Sidecar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.Sidecar)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .istio.networking.v1alpha3.IstioIngressListener ingress = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->ingress_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ingress(static_cast<int>(i)));
    }
  }

  // repeated .istio.networking.v1alpha3.IstioEgressListener egress = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->egress_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->egress(static_cast<int>(i)));
    }
  }

  // .istio.networking.v1alpha3.WorkloadSelector workload_selector = 1;
  if (this->has_workload_selector()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->workload_selector_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sidecar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.Sidecar)
  GOOGLE_DCHECK_NE(&from, this);
  const Sidecar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sidecar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.Sidecar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.Sidecar)
    MergeFrom(*source);
  }
}

void Sidecar::MergeFrom(const Sidecar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.Sidecar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ingress_.MergeFrom(from.ingress_);
  egress_.MergeFrom(from.egress_);
  if (from.has_workload_selector()) {
    mutable_workload_selector()->::istio::networking::v1alpha3::WorkloadSelector::MergeFrom(from.workload_selector());
  }
}

void Sidecar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.Sidecar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sidecar::CopyFrom(const Sidecar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.Sidecar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sidecar::IsInitialized() const {
  return true;
}

void Sidecar::Swap(Sidecar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sidecar::InternalSwap(Sidecar* other) {
  using std::swap;
  ingress_.InternalSwap(&other->ingress_);
  egress_.InternalSwap(&other->egress_);
  swap(workload_selector_, other->workload_selector_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sidecar::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fsidecar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fsidecar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IstioIngressListener::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_IstioIngressListener_default_instance_._instance.get_mutable()->port_ = const_cast< ::istio::networking::v1alpha3::Port*>(
      ::istio::networking::v1alpha3::Port::internal_default_instance());
}
void IstioIngressListener::clear_port() {
  if (GetArenaNoVirtual() == NULL && port_ != NULL) {
    delete port_;
  }
  port_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IstioIngressListener::kPortFieldNumber;
const int IstioIngressListener::kBindFieldNumber;
const int IstioIngressListener::kCaptureModeFieldNumber;
const int IstioIngressListener::kDefaultEndpointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IstioIngressListener::IstioIngressListener()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fsidecar_2eproto::InitDefaultsIstioIngressListener();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.IstioIngressListener)
}
IstioIngressListener::IstioIngressListener(const IstioIngressListener& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bind().size() > 0) {
    bind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bind_);
  }
  default_endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.default_endpoint().size() > 0) {
    default_endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_endpoint_);
  }
  if (from.has_port()) {
    port_ = new ::istio::networking::v1alpha3::Port(*from.port_);
  } else {
    port_ = NULL;
  }
  capture_mode_ = from.capture_mode_;
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.IstioIngressListener)
}

void IstioIngressListener::SharedCtor() {
  bind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capture_mode_) -
      reinterpret_cast<char*>(&port_)) + sizeof(capture_mode_));
  _cached_size_ = 0;
}

IstioIngressListener::~IstioIngressListener() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.IstioIngressListener)
  SharedDtor();
}

void IstioIngressListener::SharedDtor() {
  bind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_endpoint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete port_;
}

void IstioIngressListener::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IstioIngressListener::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fsidecar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fsidecar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IstioIngressListener& IstioIngressListener::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fsidecar_2eproto::InitDefaultsIstioIngressListener();
  return *internal_default_instance();
}

IstioIngressListener* IstioIngressListener::New(::google::protobuf::Arena* arena) const {
  IstioIngressListener* n = new IstioIngressListener;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IstioIngressListener::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.IstioIngressListener)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && port_ != NULL) {
    delete port_;
  }
  port_ = NULL;
  capture_mode_ = 0;
  _internal_metadata_.Clear();
}

bool IstioIngressListener::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.IstioIngressListener)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.networking.v1alpha3.Port port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_port()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bind = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bind()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bind().data(), static_cast<int>(this->bind().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.IstioIngressListener.bind"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.CaptureMode capture_mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_capture_mode(static_cast< ::istio::networking::v1alpha3::CaptureMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string default_endpoint = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_endpoint()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->default_endpoint().data(), static_cast<int>(this->default_endpoint().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.IstioIngressListener.default_endpoint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.IstioIngressListener)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.IstioIngressListener)
  return false;
#undef DO_
}

void IstioIngressListener::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.IstioIngressListener)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.Port port = 1;
  if (this->has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->port_, output);
  }

  // string bind = 2;
  if (this->bind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bind().data(), static_cast<int>(this->bind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.IstioIngressListener.bind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bind(), output);
  }

  // .istio.networking.v1alpha3.CaptureMode capture_mode = 3;
  if (this->capture_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->capture_mode(), output);
  }

  // string default_endpoint = 4;
  if (this->default_endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->default_endpoint().data(), static_cast<int>(this->default_endpoint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.IstioIngressListener.default_endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->default_endpoint(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.IstioIngressListener)
}

::google::protobuf::uint8* IstioIngressListener::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.IstioIngressListener)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.Port port = 1;
  if (this->has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->port_, deterministic, target);
  }

  // string bind = 2;
  if (this->bind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bind().data(), static_cast<int>(this->bind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.IstioIngressListener.bind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bind(), target);
  }

  // .istio.networking.v1alpha3.CaptureMode capture_mode = 3;
  if (this->capture_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->capture_mode(), target);
  }

  // string default_endpoint = 4;
  if (this->default_endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->default_endpoint().data(), static_cast<int>(this->default_endpoint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.IstioIngressListener.default_endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->default_endpoint(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.IstioIngressListener)
  return target;
}

size_t IstioIngressListener::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.IstioIngressListener)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string bind = 2;
  if (this->bind().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bind());
  }

  // string default_endpoint = 4;
  if (this->default_endpoint().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->default_endpoint());
  }

  // .istio.networking.v1alpha3.Port port = 1;
  if (this->has_port()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->port_);
  }

  // .istio.networking.v1alpha3.CaptureMode capture_mode = 3;
  if (this->capture_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->capture_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IstioIngressListener::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.IstioIngressListener)
  GOOGLE_DCHECK_NE(&from, this);
  const IstioIngressListener* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IstioIngressListener>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.IstioIngressListener)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.IstioIngressListener)
    MergeFrom(*source);
  }
}

void IstioIngressListener::MergeFrom(const IstioIngressListener& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.IstioIngressListener)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bind().size() > 0) {

    bind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bind_);
  }
  if (from.default_endpoint().size() > 0) {

    default_endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_endpoint_);
  }
  if (from.has_port()) {
    mutable_port()->::istio::networking::v1alpha3::Port::MergeFrom(from.port());
  }
  if (from.capture_mode() != 0) {
    set_capture_mode(from.capture_mode());
  }
}

void IstioIngressListener::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.IstioIngressListener)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IstioIngressListener::CopyFrom(const IstioIngressListener& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.IstioIngressListener)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IstioIngressListener::IsInitialized() const {
  return true;
}

void IstioIngressListener::Swap(IstioIngressListener* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IstioIngressListener::InternalSwap(IstioIngressListener* other) {
  using std::swap;
  bind_.Swap(&other->bind_);
  default_endpoint_.Swap(&other->default_endpoint_);
  swap(port_, other->port_);
  swap(capture_mode_, other->capture_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IstioIngressListener::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fsidecar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fsidecar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IstioEgressListener::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_IstioEgressListener_default_instance_._instance.get_mutable()->port_ = const_cast< ::istio::networking::v1alpha3::Port*>(
      ::istio::networking::v1alpha3::Port::internal_default_instance());
}
void IstioEgressListener::clear_port() {
  if (GetArenaNoVirtual() == NULL && port_ != NULL) {
    delete port_;
  }
  port_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IstioEgressListener::kPortFieldNumber;
const int IstioEgressListener::kBindFieldNumber;
const int IstioEgressListener::kCaptureModeFieldNumber;
const int IstioEgressListener::kHostsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IstioEgressListener::IstioEgressListener()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fsidecar_2eproto::InitDefaultsIstioEgressListener();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.IstioEgressListener)
}
IstioEgressListener::IstioEgressListener(const IstioEgressListener& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      hosts_(from.hosts_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bind().size() > 0) {
    bind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bind_);
  }
  if (from.has_port()) {
    port_ = new ::istio::networking::v1alpha3::Port(*from.port_);
  } else {
    port_ = NULL;
  }
  capture_mode_ = from.capture_mode_;
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.IstioEgressListener)
}

void IstioEgressListener::SharedCtor() {
  bind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capture_mode_) -
      reinterpret_cast<char*>(&port_)) + sizeof(capture_mode_));
  _cached_size_ = 0;
}

IstioEgressListener::~IstioEgressListener() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.IstioEgressListener)
  SharedDtor();
}

void IstioEgressListener::SharedDtor() {
  bind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete port_;
}

void IstioEgressListener::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IstioEgressListener::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fsidecar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fsidecar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IstioEgressListener& IstioEgressListener::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fsidecar_2eproto::InitDefaultsIstioEgressListener();
  return *internal_default_instance();
}

IstioEgressListener* IstioEgressListener::New(::google::protobuf::Arena* arena) const {
  IstioEgressListener* n = new IstioEgressListener;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IstioEgressListener::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.IstioEgressListener)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hosts_.Clear();
  bind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && port_ != NULL) {
    delete port_;
  }
  port_ = NULL;
  capture_mode_ = 0;
  _internal_metadata_.Clear();
}

bool IstioEgressListener::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.IstioEgressListener)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.networking.v1alpha3.Port port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_port()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bind = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bind()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bind().data(), static_cast<int>(this->bind().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.IstioEgressListener.bind"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.CaptureMode capture_mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_capture_mode(static_cast< ::istio::networking::v1alpha3::CaptureMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string hosts = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hosts()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hosts(this->hosts_size() - 1).data(),
            static_cast<int>(this->hosts(this->hosts_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.IstioEgressListener.hosts"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.IstioEgressListener)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.IstioEgressListener)
  return false;
#undef DO_
}

void IstioEgressListener::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.IstioEgressListener)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.Port port = 1;
  if (this->has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->port_, output);
  }

  // string bind = 2;
  if (this->bind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bind().data(), static_cast<int>(this->bind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.IstioEgressListener.bind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bind(), output);
  }

  // .istio.networking.v1alpha3.CaptureMode capture_mode = 3;
  if (this->capture_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->capture_mode(), output);
  }

  // repeated string hosts = 4;
  for (int i = 0, n = this->hosts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hosts(i).data(), static_cast<int>(this->hosts(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.IstioEgressListener.hosts");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->hosts(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.IstioEgressListener)
}

::google::protobuf::uint8* IstioEgressListener::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.IstioEgressListener)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.Port port = 1;
  if (this->has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->port_, deterministic, target);
  }

  // string bind = 2;
  if (this->bind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bind().data(), static_cast<int>(this->bind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.IstioEgressListener.bind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bind(), target);
  }

  // .istio.networking.v1alpha3.CaptureMode capture_mode = 3;
  if (this->capture_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->capture_mode(), target);
  }

  // repeated string hosts = 4;
  for (int i = 0, n = this->hosts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hosts(i).data(), static_cast<int>(this->hosts(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.IstioEgressListener.hosts");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->hosts(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.IstioEgressListener)
  return target;
}

size_t IstioEgressListener::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.IstioEgressListener)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string hosts = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->hosts_size());
  for (int i = 0, n = this->hosts_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hosts(i));
  }

  // string bind = 2;
  if (this->bind().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bind());
  }

  // .istio.networking.v1alpha3.Port port = 1;
  if (this->has_port()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->port_);
  }

  // .istio.networking.v1alpha3.CaptureMode capture_mode = 3;
  if (this->capture_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->capture_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IstioEgressListener::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.IstioEgressListener)
  GOOGLE_DCHECK_NE(&from, this);
  const IstioEgressListener* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IstioEgressListener>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.IstioEgressListener)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.IstioEgressListener)
    MergeFrom(*source);
  }
}

void IstioEgressListener::MergeFrom(const IstioEgressListener& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.IstioEgressListener)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hosts_.MergeFrom(from.hosts_);
  if (from.bind().size() > 0) {

    bind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bind_);
  }
  if (from.has_port()) {
    mutable_port()->::istio::networking::v1alpha3::Port::MergeFrom(from.port());
  }
  if (from.capture_mode() != 0) {
    set_capture_mode(from.capture_mode());
  }
}

void IstioEgressListener::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.IstioEgressListener)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IstioEgressListener::CopyFrom(const IstioEgressListener& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.IstioEgressListener)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IstioEgressListener::IsInitialized() const {
  return true;
}

void IstioEgressListener::Swap(IstioEgressListener* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IstioEgressListener::InternalSwap(IstioEgressListener* other) {
  using std::swap;
  hosts_.InternalSwap(&other->hosts_);
  bind_.Swap(&other->bind_);
  swap(port_, other->port_);
  swap(capture_mode_, other->capture_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IstioEgressListener::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fsidecar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fsidecar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

WorkloadSelector_LabelsEntry_DoNotUse::WorkloadSelector_LabelsEntry_DoNotUse() {}
WorkloadSelector_LabelsEntry_DoNotUse::WorkloadSelector_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void WorkloadSelector_LabelsEntry_DoNotUse::MergeFrom(const WorkloadSelector_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata WorkloadSelector_LabelsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_networking_2fv1alpha3_2fsidecar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fsidecar_2eproto::file_level_metadata[3];
}
void WorkloadSelector_LabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void WorkloadSelector::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkloadSelector::kLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkloadSelector::WorkloadSelector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fsidecar_2eproto::InitDefaultsWorkloadSelector();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.WorkloadSelector)
}
WorkloadSelector::WorkloadSelector(const WorkloadSelector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.WorkloadSelector)
}

void WorkloadSelector::SharedCtor() {
  _cached_size_ = 0;
}

WorkloadSelector::~WorkloadSelector() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.WorkloadSelector)
  SharedDtor();
}

void WorkloadSelector::SharedDtor() {
}

void WorkloadSelector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkloadSelector::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fsidecar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fsidecar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WorkloadSelector& WorkloadSelector::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fsidecar_2eproto::InitDefaultsWorkloadSelector();
  return *internal_default_instance();
}

WorkloadSelector* WorkloadSelector::New(::google::protobuf::Arena* arena) const {
  WorkloadSelector* n = new WorkloadSelector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorkloadSelector::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.WorkloadSelector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  _internal_metadata_.Clear();
}

bool WorkloadSelector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.WorkloadSelector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> labels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          WorkloadSelector_LabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              WorkloadSelector_LabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.WorkloadSelector.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.WorkloadSelector.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.WorkloadSelector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.WorkloadSelector)
  return false;
#undef DO_
}

void WorkloadSelector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.WorkloadSelector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> labels = 1;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.WorkloadSelector.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.WorkloadSelector.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<WorkloadSelector_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<WorkloadSelector_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.WorkloadSelector)
}

::google::protobuf::uint8* WorkloadSelector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.WorkloadSelector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> labels = 1;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.WorkloadSelector.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.WorkloadSelector.LabelsEntry.value");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<WorkloadSelector_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<WorkloadSelector_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.WorkloadSelector)
  return target;
}

size_t WorkloadSelector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.WorkloadSelector)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> labels = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::google::protobuf::scoped_ptr<WorkloadSelector_LabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkloadSelector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.WorkloadSelector)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkloadSelector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkloadSelector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.WorkloadSelector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.WorkloadSelector)
    MergeFrom(*source);
  }
}

void WorkloadSelector::MergeFrom(const WorkloadSelector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.WorkloadSelector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
}

void WorkloadSelector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.WorkloadSelector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkloadSelector::CopyFrom(const WorkloadSelector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.WorkloadSelector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkloadSelector::IsInitialized() const {
  return true;
}

void WorkloadSelector::Swap(WorkloadSelector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkloadSelector::InternalSwap(WorkloadSelector* other) {
  using std::swap;
  labels_.Swap(&other->labels_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorkloadSelector::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fsidecar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fsidecar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha3
}  // namespace networking
}  // namespace istio

// @@protoc_insertion_point(global_scope)
