// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networking/v1alpha3/envoy_filter.proto

#ifndef PROTOBUF_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto__INCLUDED
#define PROTOBUF_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsEnvoyFilter_WorkloadLabelsEntry_DoNotUseImpl();
void InitDefaultsEnvoyFilter_WorkloadLabelsEntry_DoNotUse();
void InitDefaultsEnvoyFilter_ListenerMatchImpl();
void InitDefaultsEnvoyFilter_ListenerMatch();
void InitDefaultsEnvoyFilter_InsertPositionImpl();
void InitDefaultsEnvoyFilter_InsertPosition();
void InitDefaultsEnvoyFilter_FilterImpl();
void InitDefaultsEnvoyFilter_Filter();
void InitDefaultsEnvoyFilterImpl();
void InitDefaultsEnvoyFilter();
inline void InitDefaults() {
  InitDefaultsEnvoyFilter_WorkloadLabelsEntry_DoNotUse();
  InitDefaultsEnvoyFilter_ListenerMatch();
  InitDefaultsEnvoyFilter_InsertPosition();
  InitDefaultsEnvoyFilter_Filter();
  InitDefaultsEnvoyFilter();
}
}  // namespace protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto
namespace istio {
namespace networking {
namespace v1alpha3 {
class EnvoyFilter;
class EnvoyFilterDefaultTypeInternal;
extern EnvoyFilterDefaultTypeInternal _EnvoyFilter_default_instance_;
class EnvoyFilter_Filter;
class EnvoyFilter_FilterDefaultTypeInternal;
extern EnvoyFilter_FilterDefaultTypeInternal _EnvoyFilter_Filter_default_instance_;
class EnvoyFilter_InsertPosition;
class EnvoyFilter_InsertPositionDefaultTypeInternal;
extern EnvoyFilter_InsertPositionDefaultTypeInternal _EnvoyFilter_InsertPosition_default_instance_;
class EnvoyFilter_ListenerMatch;
class EnvoyFilter_ListenerMatchDefaultTypeInternal;
extern EnvoyFilter_ListenerMatchDefaultTypeInternal _EnvoyFilter_ListenerMatch_default_instance_;
class EnvoyFilter_WorkloadLabelsEntry_DoNotUse;
class EnvoyFilter_WorkloadLabelsEntry_DoNotUseDefaultTypeInternal;
extern EnvoyFilter_WorkloadLabelsEntry_DoNotUseDefaultTypeInternal _EnvoyFilter_WorkloadLabelsEntry_DoNotUse_default_instance_;
}  // namespace v1alpha3
}  // namespace networking
}  // namespace istio
namespace istio {
namespace networking {
namespace v1alpha3 {

enum EnvoyFilter_ListenerMatch_ListenerType {
  EnvoyFilter_ListenerMatch_ListenerType_ANY = 0,
  EnvoyFilter_ListenerMatch_ListenerType_SIDECAR_INBOUND = 1,
  EnvoyFilter_ListenerMatch_ListenerType_SIDECAR_OUTBOUND = 2,
  EnvoyFilter_ListenerMatch_ListenerType_GATEWAY = 3,
  EnvoyFilter_ListenerMatch_ListenerType_EnvoyFilter_ListenerMatch_ListenerType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EnvoyFilter_ListenerMatch_ListenerType_EnvoyFilter_ListenerMatch_ListenerType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EnvoyFilter_ListenerMatch_ListenerType_IsValid(int value);
const EnvoyFilter_ListenerMatch_ListenerType EnvoyFilter_ListenerMatch_ListenerType_ListenerType_MIN = EnvoyFilter_ListenerMatch_ListenerType_ANY;
const EnvoyFilter_ListenerMatch_ListenerType EnvoyFilter_ListenerMatch_ListenerType_ListenerType_MAX = EnvoyFilter_ListenerMatch_ListenerType_GATEWAY;
const int EnvoyFilter_ListenerMatch_ListenerType_ListenerType_ARRAYSIZE = EnvoyFilter_ListenerMatch_ListenerType_ListenerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnvoyFilter_ListenerMatch_ListenerType_descriptor();
inline const ::std::string& EnvoyFilter_ListenerMatch_ListenerType_Name(EnvoyFilter_ListenerMatch_ListenerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnvoyFilter_ListenerMatch_ListenerType_descriptor(), value);
}
inline bool EnvoyFilter_ListenerMatch_ListenerType_Parse(
    const ::std::string& name, EnvoyFilter_ListenerMatch_ListenerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnvoyFilter_ListenerMatch_ListenerType>(
    EnvoyFilter_ListenerMatch_ListenerType_descriptor(), name, value);
}
enum EnvoyFilter_ListenerMatch_ListenerProtocol {
  EnvoyFilter_ListenerMatch_ListenerProtocol_ALL = 0,
  EnvoyFilter_ListenerMatch_ListenerProtocol_HTTP = 1,
  EnvoyFilter_ListenerMatch_ListenerProtocol_TCP = 2,
  EnvoyFilter_ListenerMatch_ListenerProtocol_EnvoyFilter_ListenerMatch_ListenerProtocol_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EnvoyFilter_ListenerMatch_ListenerProtocol_EnvoyFilter_ListenerMatch_ListenerProtocol_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EnvoyFilter_ListenerMatch_ListenerProtocol_IsValid(int value);
const EnvoyFilter_ListenerMatch_ListenerProtocol EnvoyFilter_ListenerMatch_ListenerProtocol_ListenerProtocol_MIN = EnvoyFilter_ListenerMatch_ListenerProtocol_ALL;
const EnvoyFilter_ListenerMatch_ListenerProtocol EnvoyFilter_ListenerMatch_ListenerProtocol_ListenerProtocol_MAX = EnvoyFilter_ListenerMatch_ListenerProtocol_TCP;
const int EnvoyFilter_ListenerMatch_ListenerProtocol_ListenerProtocol_ARRAYSIZE = EnvoyFilter_ListenerMatch_ListenerProtocol_ListenerProtocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnvoyFilter_ListenerMatch_ListenerProtocol_descriptor();
inline const ::std::string& EnvoyFilter_ListenerMatch_ListenerProtocol_Name(EnvoyFilter_ListenerMatch_ListenerProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnvoyFilter_ListenerMatch_ListenerProtocol_descriptor(), value);
}
inline bool EnvoyFilter_ListenerMatch_ListenerProtocol_Parse(
    const ::std::string& name, EnvoyFilter_ListenerMatch_ListenerProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnvoyFilter_ListenerMatch_ListenerProtocol>(
    EnvoyFilter_ListenerMatch_ListenerProtocol_descriptor(), name, value);
}
enum EnvoyFilter_InsertPosition_Index {
  EnvoyFilter_InsertPosition_Index_FIRST = 0,
  EnvoyFilter_InsertPosition_Index_LAST = 1,
  EnvoyFilter_InsertPosition_Index_BEFORE = 2,
  EnvoyFilter_InsertPosition_Index_AFTER = 3,
  EnvoyFilter_InsertPosition_Index_EnvoyFilter_InsertPosition_Index_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EnvoyFilter_InsertPosition_Index_EnvoyFilter_InsertPosition_Index_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EnvoyFilter_InsertPosition_Index_IsValid(int value);
const EnvoyFilter_InsertPosition_Index EnvoyFilter_InsertPosition_Index_Index_MIN = EnvoyFilter_InsertPosition_Index_FIRST;
const EnvoyFilter_InsertPosition_Index EnvoyFilter_InsertPosition_Index_Index_MAX = EnvoyFilter_InsertPosition_Index_AFTER;
const int EnvoyFilter_InsertPosition_Index_Index_ARRAYSIZE = EnvoyFilter_InsertPosition_Index_Index_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnvoyFilter_InsertPosition_Index_descriptor();
inline const ::std::string& EnvoyFilter_InsertPosition_Index_Name(EnvoyFilter_InsertPosition_Index value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnvoyFilter_InsertPosition_Index_descriptor(), value);
}
inline bool EnvoyFilter_InsertPosition_Index_Parse(
    const ::std::string& name, EnvoyFilter_InsertPosition_Index* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnvoyFilter_InsertPosition_Index>(
    EnvoyFilter_InsertPosition_Index_descriptor(), name, value);
}
enum EnvoyFilter_Filter_FilterType {
  EnvoyFilter_Filter_FilterType_INVALID = 0,
  EnvoyFilter_Filter_FilterType_HTTP = 1,
  EnvoyFilter_Filter_FilterType_NETWORK = 2,
  EnvoyFilter_Filter_FilterType_EnvoyFilter_Filter_FilterType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EnvoyFilter_Filter_FilterType_EnvoyFilter_Filter_FilterType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EnvoyFilter_Filter_FilterType_IsValid(int value);
const EnvoyFilter_Filter_FilterType EnvoyFilter_Filter_FilterType_FilterType_MIN = EnvoyFilter_Filter_FilterType_INVALID;
const EnvoyFilter_Filter_FilterType EnvoyFilter_Filter_FilterType_FilterType_MAX = EnvoyFilter_Filter_FilterType_NETWORK;
const int EnvoyFilter_Filter_FilterType_FilterType_ARRAYSIZE = EnvoyFilter_Filter_FilterType_FilterType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnvoyFilter_Filter_FilterType_descriptor();
inline const ::std::string& EnvoyFilter_Filter_FilterType_Name(EnvoyFilter_Filter_FilterType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnvoyFilter_Filter_FilterType_descriptor(), value);
}
inline bool EnvoyFilter_Filter_FilterType_Parse(
    const ::std::string& name, EnvoyFilter_Filter_FilterType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnvoyFilter_Filter_FilterType>(
    EnvoyFilter_Filter_FilterType_descriptor(), name, value);
}
// ===================================================================

class EnvoyFilter_WorkloadLabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<EnvoyFilter_WorkloadLabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<EnvoyFilter_WorkloadLabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  EnvoyFilter_WorkloadLabelsEntry_DoNotUse();
  EnvoyFilter_WorkloadLabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const EnvoyFilter_WorkloadLabelsEntry_DoNotUse& other);
  static const EnvoyFilter_WorkloadLabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const EnvoyFilter_WorkloadLabelsEntry_DoNotUse*>(&_EnvoyFilter_WorkloadLabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class EnvoyFilter_ListenerMatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch) */ {
 public:
  EnvoyFilter_ListenerMatch();
  virtual ~EnvoyFilter_ListenerMatch();

  EnvoyFilter_ListenerMatch(const EnvoyFilter_ListenerMatch& from);

  inline EnvoyFilter_ListenerMatch& operator=(const EnvoyFilter_ListenerMatch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnvoyFilter_ListenerMatch(EnvoyFilter_ListenerMatch&& from) noexcept
    : EnvoyFilter_ListenerMatch() {
    *this = ::std::move(from);
  }

  inline EnvoyFilter_ListenerMatch& operator=(EnvoyFilter_ListenerMatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnvoyFilter_ListenerMatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnvoyFilter_ListenerMatch* internal_default_instance() {
    return reinterpret_cast<const EnvoyFilter_ListenerMatch*>(
               &_EnvoyFilter_ListenerMatch_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(EnvoyFilter_ListenerMatch* other);
  friend void swap(EnvoyFilter_ListenerMatch& a, EnvoyFilter_ListenerMatch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnvoyFilter_ListenerMatch* New() const PROTOBUF_FINAL { return New(NULL); }

  EnvoyFilter_ListenerMatch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnvoyFilter_ListenerMatch& from);
  void MergeFrom(const EnvoyFilter_ListenerMatch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnvoyFilter_ListenerMatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef EnvoyFilter_ListenerMatch_ListenerType ListenerType;
  static const ListenerType ANY =
    EnvoyFilter_ListenerMatch_ListenerType_ANY;
  static const ListenerType SIDECAR_INBOUND =
    EnvoyFilter_ListenerMatch_ListenerType_SIDECAR_INBOUND;
  static const ListenerType SIDECAR_OUTBOUND =
    EnvoyFilter_ListenerMatch_ListenerType_SIDECAR_OUTBOUND;
  static const ListenerType GATEWAY =
    EnvoyFilter_ListenerMatch_ListenerType_GATEWAY;
  static inline bool ListenerType_IsValid(int value) {
    return EnvoyFilter_ListenerMatch_ListenerType_IsValid(value);
  }
  static const ListenerType ListenerType_MIN =
    EnvoyFilter_ListenerMatch_ListenerType_ListenerType_MIN;
  static const ListenerType ListenerType_MAX =
    EnvoyFilter_ListenerMatch_ListenerType_ListenerType_MAX;
  static const int ListenerType_ARRAYSIZE =
    EnvoyFilter_ListenerMatch_ListenerType_ListenerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ListenerType_descriptor() {
    return EnvoyFilter_ListenerMatch_ListenerType_descriptor();
  }
  static inline const ::std::string& ListenerType_Name(ListenerType value) {
    return EnvoyFilter_ListenerMatch_ListenerType_Name(value);
  }
  static inline bool ListenerType_Parse(const ::std::string& name,
      ListenerType* value) {
    return EnvoyFilter_ListenerMatch_ListenerType_Parse(name, value);
  }

  typedef EnvoyFilter_ListenerMatch_ListenerProtocol ListenerProtocol;
  static const ListenerProtocol ALL =
    EnvoyFilter_ListenerMatch_ListenerProtocol_ALL;
  static const ListenerProtocol HTTP =
    EnvoyFilter_ListenerMatch_ListenerProtocol_HTTP;
  static const ListenerProtocol TCP =
    EnvoyFilter_ListenerMatch_ListenerProtocol_TCP;
  static inline bool ListenerProtocol_IsValid(int value) {
    return EnvoyFilter_ListenerMatch_ListenerProtocol_IsValid(value);
  }
  static const ListenerProtocol ListenerProtocol_MIN =
    EnvoyFilter_ListenerMatch_ListenerProtocol_ListenerProtocol_MIN;
  static const ListenerProtocol ListenerProtocol_MAX =
    EnvoyFilter_ListenerMatch_ListenerProtocol_ListenerProtocol_MAX;
  static const int ListenerProtocol_ARRAYSIZE =
    EnvoyFilter_ListenerMatch_ListenerProtocol_ListenerProtocol_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ListenerProtocol_descriptor() {
    return EnvoyFilter_ListenerMatch_ListenerProtocol_descriptor();
  }
  static inline const ::std::string& ListenerProtocol_Name(ListenerProtocol value) {
    return EnvoyFilter_ListenerMatch_ListenerProtocol_Name(value);
  }
  static inline bool ListenerProtocol_Parse(const ::std::string& name,
      ListenerProtocol* value) {
    return EnvoyFilter_ListenerMatch_ListenerProtocol_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string address = 5;
  int address_size() const;
  void clear_address();
  static const int kAddressFieldNumber = 5;
  const ::std::string& address(int index) const;
  ::std::string* mutable_address(int index);
  void set_address(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_address(int index, ::std::string&& value);
  #endif
  void set_address(int index, const char* value);
  void set_address(int index, const char* value, size_t size);
  ::std::string* add_address();
  void add_address(const ::std::string& value);
  #if LANG_CXX11
  void add_address(::std::string&& value);
  #endif
  void add_address(const char* value);
  void add_address(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& address() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_address();

  // string port_name_prefix = 2;
  void clear_port_name_prefix();
  static const int kPortNamePrefixFieldNumber = 2;
  const ::std::string& port_name_prefix() const;
  void set_port_name_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_port_name_prefix(::std::string&& value);
  #endif
  void set_port_name_prefix(const char* value);
  void set_port_name_prefix(const char* value, size_t size);
  ::std::string* mutable_port_name_prefix();
  ::std::string* release_port_name_prefix();
  void set_allocated_port_name_prefix(::std::string* port_name_prefix);

  // uint32 port_number = 1;
  void clear_port_number();
  static const int kPortNumberFieldNumber = 1;
  ::google::protobuf::uint32 port_number() const;
  void set_port_number(::google::protobuf::uint32 value);

  // .istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.ListenerType listener_type = 3;
  void clear_listener_type();
  static const int kListenerTypeFieldNumber = 3;
  ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch_ListenerType listener_type() const;
  void set_listener_type(::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch_ListenerType value);

  // .istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.ListenerProtocol listener_protocol = 4;
  void clear_listener_protocol();
  static const int kListenerProtocolFieldNumber = 4;
  ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch_ListenerProtocol listener_protocol() const;
  void set_listener_protocol(::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch_ListenerProtocol value);

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> address_;
  ::google::protobuf::internal::ArenaStringPtr port_name_prefix_;
  ::google::protobuf::uint32 port_number_;
  int listener_type_;
  int listener_protocol_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::InitDefaultsEnvoyFilter_ListenerMatchImpl();
};
// -------------------------------------------------------------------

class EnvoyFilter_InsertPosition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.EnvoyFilter.InsertPosition) */ {
 public:
  EnvoyFilter_InsertPosition();
  virtual ~EnvoyFilter_InsertPosition();

  EnvoyFilter_InsertPosition(const EnvoyFilter_InsertPosition& from);

  inline EnvoyFilter_InsertPosition& operator=(const EnvoyFilter_InsertPosition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnvoyFilter_InsertPosition(EnvoyFilter_InsertPosition&& from) noexcept
    : EnvoyFilter_InsertPosition() {
    *this = ::std::move(from);
  }

  inline EnvoyFilter_InsertPosition& operator=(EnvoyFilter_InsertPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnvoyFilter_InsertPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnvoyFilter_InsertPosition* internal_default_instance() {
    return reinterpret_cast<const EnvoyFilter_InsertPosition*>(
               &_EnvoyFilter_InsertPosition_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(EnvoyFilter_InsertPosition* other);
  friend void swap(EnvoyFilter_InsertPosition& a, EnvoyFilter_InsertPosition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnvoyFilter_InsertPosition* New() const PROTOBUF_FINAL { return New(NULL); }

  EnvoyFilter_InsertPosition* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnvoyFilter_InsertPosition& from);
  void MergeFrom(const EnvoyFilter_InsertPosition& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnvoyFilter_InsertPosition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef EnvoyFilter_InsertPosition_Index Index;
  static const Index FIRST =
    EnvoyFilter_InsertPosition_Index_FIRST;
  static const Index LAST =
    EnvoyFilter_InsertPosition_Index_LAST;
  static const Index BEFORE =
    EnvoyFilter_InsertPosition_Index_BEFORE;
  static const Index AFTER =
    EnvoyFilter_InsertPosition_Index_AFTER;
  static inline bool Index_IsValid(int value) {
    return EnvoyFilter_InsertPosition_Index_IsValid(value);
  }
  static const Index Index_MIN =
    EnvoyFilter_InsertPosition_Index_Index_MIN;
  static const Index Index_MAX =
    EnvoyFilter_InsertPosition_Index_Index_MAX;
  static const int Index_ARRAYSIZE =
    EnvoyFilter_InsertPosition_Index_Index_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Index_descriptor() {
    return EnvoyFilter_InsertPosition_Index_descriptor();
  }
  static inline const ::std::string& Index_Name(Index value) {
    return EnvoyFilter_InsertPosition_Index_Name(value);
  }
  static inline bool Index_Parse(const ::std::string& name,
      Index* value) {
    return EnvoyFilter_InsertPosition_Index_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string relative_to = 2;
  void clear_relative_to();
  static const int kRelativeToFieldNumber = 2;
  const ::std::string& relative_to() const;
  void set_relative_to(const ::std::string& value);
  #if LANG_CXX11
  void set_relative_to(::std::string&& value);
  #endif
  void set_relative_to(const char* value);
  void set_relative_to(const char* value, size_t size);
  ::std::string* mutable_relative_to();
  ::std::string* release_relative_to();
  void set_allocated_relative_to(::std::string* relative_to);

  // .istio.networking.v1alpha3.EnvoyFilter.InsertPosition.Index index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::istio::networking::v1alpha3::EnvoyFilter_InsertPosition_Index index() const;
  void set_index(::istio::networking::v1alpha3::EnvoyFilter_InsertPosition_Index value);

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.EnvoyFilter.InsertPosition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr relative_to_;
  int index_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::InitDefaultsEnvoyFilter_InsertPositionImpl();
};
// -------------------------------------------------------------------

class EnvoyFilter_Filter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.EnvoyFilter.Filter) */ {
 public:
  EnvoyFilter_Filter();
  virtual ~EnvoyFilter_Filter();

  EnvoyFilter_Filter(const EnvoyFilter_Filter& from);

  inline EnvoyFilter_Filter& operator=(const EnvoyFilter_Filter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnvoyFilter_Filter(EnvoyFilter_Filter&& from) noexcept
    : EnvoyFilter_Filter() {
    *this = ::std::move(from);
  }

  inline EnvoyFilter_Filter& operator=(EnvoyFilter_Filter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnvoyFilter_Filter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnvoyFilter_Filter* internal_default_instance() {
    return reinterpret_cast<const EnvoyFilter_Filter*>(
               &_EnvoyFilter_Filter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(EnvoyFilter_Filter* other);
  friend void swap(EnvoyFilter_Filter& a, EnvoyFilter_Filter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnvoyFilter_Filter* New() const PROTOBUF_FINAL { return New(NULL); }

  EnvoyFilter_Filter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnvoyFilter_Filter& from);
  void MergeFrom(const EnvoyFilter_Filter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnvoyFilter_Filter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef EnvoyFilter_Filter_FilterType FilterType;
  static const FilterType INVALID =
    EnvoyFilter_Filter_FilterType_INVALID;
  static const FilterType HTTP =
    EnvoyFilter_Filter_FilterType_HTTP;
  static const FilterType NETWORK =
    EnvoyFilter_Filter_FilterType_NETWORK;
  static inline bool FilterType_IsValid(int value) {
    return EnvoyFilter_Filter_FilterType_IsValid(value);
  }
  static const FilterType FilterType_MIN =
    EnvoyFilter_Filter_FilterType_FilterType_MIN;
  static const FilterType FilterType_MAX =
    EnvoyFilter_Filter_FilterType_FilterType_MAX;
  static const int FilterType_ARRAYSIZE =
    EnvoyFilter_Filter_FilterType_FilterType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FilterType_descriptor() {
    return EnvoyFilter_Filter_FilterType_descriptor();
  }
  static inline const ::std::string& FilterType_Name(FilterType value) {
    return EnvoyFilter_Filter_FilterType_Name(value);
  }
  static inline bool FilterType_Parse(const ::std::string& name,
      FilterType* value) {
    return EnvoyFilter_Filter_FilterType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string filter_name = 4;
  void clear_filter_name();
  static const int kFilterNameFieldNumber = 4;
  const ::std::string& filter_name() const;
  void set_filter_name(const ::std::string& value);
  #if LANG_CXX11
  void set_filter_name(::std::string&& value);
  #endif
  void set_filter_name(const char* value);
  void set_filter_name(const char* value, size_t size);
  ::std::string* mutable_filter_name();
  ::std::string* release_filter_name();
  void set_allocated_filter_name(::std::string* filter_name);

  // .istio.networking.v1alpha3.EnvoyFilter.ListenerMatch listener_match = 1;
  bool has_listener_match() const;
  void clear_listener_match();
  static const int kListenerMatchFieldNumber = 1;
  const ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch& listener_match() const;
  ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch* release_listener_match();
  ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch* mutable_listener_match();
  void set_allocated_listener_match(::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch* listener_match);

  // .istio.networking.v1alpha3.EnvoyFilter.InsertPosition insert_position = 2;
  bool has_insert_position() const;
  void clear_insert_position();
  static const int kInsertPositionFieldNumber = 2;
  const ::istio::networking::v1alpha3::EnvoyFilter_InsertPosition& insert_position() const;
  ::istio::networking::v1alpha3::EnvoyFilter_InsertPosition* release_insert_position();
  ::istio::networking::v1alpha3::EnvoyFilter_InsertPosition* mutable_insert_position();
  void set_allocated_insert_position(::istio::networking::v1alpha3::EnvoyFilter_InsertPosition* insert_position);

  // .google.protobuf.Struct filter_config = 5;
  bool has_filter_config() const;
  void clear_filter_config();
  static const int kFilterConfigFieldNumber = 5;
  const ::google::protobuf::Struct& filter_config() const;
  ::google::protobuf::Struct* release_filter_config();
  ::google::protobuf::Struct* mutable_filter_config();
  void set_allocated_filter_config(::google::protobuf::Struct* filter_config);

  // .istio.networking.v1alpha3.EnvoyFilter.Filter.FilterType filter_type = 3;
  void clear_filter_type();
  static const int kFilterTypeFieldNumber = 3;
  ::istio::networking::v1alpha3::EnvoyFilter_Filter_FilterType filter_type() const;
  void set_filter_type(::istio::networking::v1alpha3::EnvoyFilter_Filter_FilterType value);

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.EnvoyFilter.Filter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filter_name_;
  ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch* listener_match_;
  ::istio::networking::v1alpha3::EnvoyFilter_InsertPosition* insert_position_;
  ::google::protobuf::Struct* filter_config_;
  int filter_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::InitDefaultsEnvoyFilter_FilterImpl();
};
// -------------------------------------------------------------------

class EnvoyFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.EnvoyFilter) */ {
 public:
  EnvoyFilter();
  virtual ~EnvoyFilter();

  EnvoyFilter(const EnvoyFilter& from);

  inline EnvoyFilter& operator=(const EnvoyFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnvoyFilter(EnvoyFilter&& from) noexcept
    : EnvoyFilter() {
    *this = ::std::move(from);
  }

  inline EnvoyFilter& operator=(EnvoyFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnvoyFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnvoyFilter* internal_default_instance() {
    return reinterpret_cast<const EnvoyFilter*>(
               &_EnvoyFilter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(EnvoyFilter* other);
  friend void swap(EnvoyFilter& a, EnvoyFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnvoyFilter* New() const PROTOBUF_FINAL { return New(NULL); }

  EnvoyFilter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnvoyFilter& from);
  void MergeFrom(const EnvoyFilter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnvoyFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef EnvoyFilter_ListenerMatch ListenerMatch;
  typedef EnvoyFilter_InsertPosition InsertPosition;
  typedef EnvoyFilter_Filter Filter;

  // accessors -------------------------------------------------------

  // map<string, string> workload_labels = 1;
  int workload_labels_size() const;
  void clear_workload_labels();
  static const int kWorkloadLabelsFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      workload_labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_workload_labels();

  // repeated .istio.networking.v1alpha3.EnvoyFilter.Filter filters = 2;
  int filters_size() const;
  void clear_filters();
  static const int kFiltersFieldNumber = 2;
  const ::istio::networking::v1alpha3::EnvoyFilter_Filter& filters(int index) const;
  ::istio::networking::v1alpha3::EnvoyFilter_Filter* mutable_filters(int index);
  ::istio::networking::v1alpha3::EnvoyFilter_Filter* add_filters();
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::EnvoyFilter_Filter >*
      mutable_filters();
  const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::EnvoyFilter_Filter >&
      filters() const;

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.EnvoyFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      EnvoyFilter_WorkloadLabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > workload_labels_;
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::EnvoyFilter_Filter > filters_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto::InitDefaultsEnvoyFilterImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EnvoyFilter_ListenerMatch

// uint32 port_number = 1;
inline void EnvoyFilter_ListenerMatch::clear_port_number() {
  port_number_ = 0u;
}
inline ::google::protobuf::uint32 EnvoyFilter_ListenerMatch::port_number() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.port_number)
  return port_number_;
}
inline void EnvoyFilter_ListenerMatch::set_port_number(::google::protobuf::uint32 value) {
  
  port_number_ = value;
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.port_number)
}

// string port_name_prefix = 2;
inline void EnvoyFilter_ListenerMatch::clear_port_name_prefix() {
  port_name_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnvoyFilter_ListenerMatch::port_name_prefix() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.port_name_prefix)
  return port_name_prefix_.GetNoArena();
}
inline void EnvoyFilter_ListenerMatch::set_port_name_prefix(const ::std::string& value) {
  
  port_name_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.port_name_prefix)
}
#if LANG_CXX11
inline void EnvoyFilter_ListenerMatch::set_port_name_prefix(::std::string&& value) {
  
  port_name_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.port_name_prefix)
}
#endif
inline void EnvoyFilter_ListenerMatch::set_port_name_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  port_name_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.port_name_prefix)
}
inline void EnvoyFilter_ListenerMatch::set_port_name_prefix(const char* value, size_t size) {
  
  port_name_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.port_name_prefix)
}
inline ::std::string* EnvoyFilter_ListenerMatch::mutable_port_name_prefix() {
  
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.port_name_prefix)
  return port_name_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnvoyFilter_ListenerMatch::release_port_name_prefix() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.port_name_prefix)
  
  return port_name_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnvoyFilter_ListenerMatch::set_allocated_port_name_prefix(::std::string* port_name_prefix) {
  if (port_name_prefix != NULL) {
    
  } else {
    
  }
  port_name_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port_name_prefix);
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.port_name_prefix)
}

// .istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.ListenerType listener_type = 3;
inline void EnvoyFilter_ListenerMatch::clear_listener_type() {
  listener_type_ = 0;
}
inline ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch_ListenerType EnvoyFilter_ListenerMatch::listener_type() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.listener_type)
  return static_cast< ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch_ListenerType >(listener_type_);
}
inline void EnvoyFilter_ListenerMatch::set_listener_type(::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch_ListenerType value) {
  
  listener_type_ = value;
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.listener_type)
}

// .istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.ListenerProtocol listener_protocol = 4;
inline void EnvoyFilter_ListenerMatch::clear_listener_protocol() {
  listener_protocol_ = 0;
}
inline ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch_ListenerProtocol EnvoyFilter_ListenerMatch::listener_protocol() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.listener_protocol)
  return static_cast< ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch_ListenerProtocol >(listener_protocol_);
}
inline void EnvoyFilter_ListenerMatch::set_listener_protocol(::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch_ListenerProtocol value) {
  
  listener_protocol_ = value;
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.listener_protocol)
}

// repeated string address = 5;
inline int EnvoyFilter_ListenerMatch::address_size() const {
  return address_.size();
}
inline void EnvoyFilter_ListenerMatch::clear_address() {
  address_.Clear();
}
inline const ::std::string& EnvoyFilter_ListenerMatch::address(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.address)
  return address_.Get(index);
}
inline ::std::string* EnvoyFilter_ListenerMatch::mutable_address(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.address)
  return address_.Mutable(index);
}
inline void EnvoyFilter_ListenerMatch::set_address(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.address)
  address_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void EnvoyFilter_ListenerMatch::set_address(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.address)
  address_.Mutable(index)->assign(std::move(value));
}
#endif
inline void EnvoyFilter_ListenerMatch::set_address(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.address)
}
inline void EnvoyFilter_ListenerMatch::set_address(int index, const char* value, size_t size) {
  address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.address)
}
inline ::std::string* EnvoyFilter_ListenerMatch::add_address() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.address)
  return address_.Add();
}
inline void EnvoyFilter_ListenerMatch::add_address(const ::std::string& value) {
  address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.address)
}
#if LANG_CXX11
inline void EnvoyFilter_ListenerMatch::add_address(::std::string&& value) {
  address_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.address)
}
#endif
inline void EnvoyFilter_ListenerMatch::add_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.address)
}
inline void EnvoyFilter_ListenerMatch::add_address(const char* value, size_t size) {
  address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.address)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EnvoyFilter_ListenerMatch::address() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.address)
  return address_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EnvoyFilter_ListenerMatch::mutable_address() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.EnvoyFilter.ListenerMatch.address)
  return &address_;
}

// -------------------------------------------------------------------

// EnvoyFilter_InsertPosition

// .istio.networking.v1alpha3.EnvoyFilter.InsertPosition.Index index = 1;
inline void EnvoyFilter_InsertPosition::clear_index() {
  index_ = 0;
}
inline ::istio::networking::v1alpha3::EnvoyFilter_InsertPosition_Index EnvoyFilter_InsertPosition::index() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.EnvoyFilter.InsertPosition.index)
  return static_cast< ::istio::networking::v1alpha3::EnvoyFilter_InsertPosition_Index >(index_);
}
inline void EnvoyFilter_InsertPosition::set_index(::istio::networking::v1alpha3::EnvoyFilter_InsertPosition_Index value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.EnvoyFilter.InsertPosition.index)
}

// string relative_to = 2;
inline void EnvoyFilter_InsertPosition::clear_relative_to() {
  relative_to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnvoyFilter_InsertPosition::relative_to() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.EnvoyFilter.InsertPosition.relative_to)
  return relative_to_.GetNoArena();
}
inline void EnvoyFilter_InsertPosition::set_relative_to(const ::std::string& value) {
  
  relative_to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.EnvoyFilter.InsertPosition.relative_to)
}
#if LANG_CXX11
inline void EnvoyFilter_InsertPosition::set_relative_to(::std::string&& value) {
  
  relative_to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.EnvoyFilter.InsertPosition.relative_to)
}
#endif
inline void EnvoyFilter_InsertPosition::set_relative_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  relative_to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.EnvoyFilter.InsertPosition.relative_to)
}
inline void EnvoyFilter_InsertPosition::set_relative_to(const char* value, size_t size) {
  
  relative_to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.EnvoyFilter.InsertPosition.relative_to)
}
inline ::std::string* EnvoyFilter_InsertPosition::mutable_relative_to() {
  
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.EnvoyFilter.InsertPosition.relative_to)
  return relative_to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnvoyFilter_InsertPosition::release_relative_to() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.EnvoyFilter.InsertPosition.relative_to)
  
  return relative_to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnvoyFilter_InsertPosition::set_allocated_relative_to(::std::string* relative_to) {
  if (relative_to != NULL) {
    
  } else {
    
  }
  relative_to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), relative_to);
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.EnvoyFilter.InsertPosition.relative_to)
}

// -------------------------------------------------------------------

// EnvoyFilter_Filter

// .istio.networking.v1alpha3.EnvoyFilter.ListenerMatch listener_match = 1;
inline bool EnvoyFilter_Filter::has_listener_match() const {
  return this != internal_default_instance() && listener_match_ != NULL;
}
inline void EnvoyFilter_Filter::clear_listener_match() {
  if (GetArenaNoVirtual() == NULL && listener_match_ != NULL) {
    delete listener_match_;
  }
  listener_match_ = NULL;
}
inline const ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch& EnvoyFilter_Filter::listener_match() const {
  const ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch* p = listener_match_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.EnvoyFilter.Filter.listener_match)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch*>(
      &::istio::networking::v1alpha3::_EnvoyFilter_ListenerMatch_default_instance_);
}
inline ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch* EnvoyFilter_Filter::release_listener_match() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.EnvoyFilter.Filter.listener_match)
  
  ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch* temp = listener_match_;
  listener_match_ = NULL;
  return temp;
}
inline ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch* EnvoyFilter_Filter::mutable_listener_match() {
  
  if (listener_match_ == NULL) {
    listener_match_ = new ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.EnvoyFilter.Filter.listener_match)
  return listener_match_;
}
inline void EnvoyFilter_Filter::set_allocated_listener_match(::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch* listener_match) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete listener_match_;
  }
  if (listener_match) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      listener_match = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, listener_match, submessage_arena);
    }
    
  } else {
    
  }
  listener_match_ = listener_match;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.EnvoyFilter.Filter.listener_match)
}

// .istio.networking.v1alpha3.EnvoyFilter.InsertPosition insert_position = 2;
inline bool EnvoyFilter_Filter::has_insert_position() const {
  return this != internal_default_instance() && insert_position_ != NULL;
}
inline void EnvoyFilter_Filter::clear_insert_position() {
  if (GetArenaNoVirtual() == NULL && insert_position_ != NULL) {
    delete insert_position_;
  }
  insert_position_ = NULL;
}
inline const ::istio::networking::v1alpha3::EnvoyFilter_InsertPosition& EnvoyFilter_Filter::insert_position() const {
  const ::istio::networking::v1alpha3::EnvoyFilter_InsertPosition* p = insert_position_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.EnvoyFilter.Filter.insert_position)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::networking::v1alpha3::EnvoyFilter_InsertPosition*>(
      &::istio::networking::v1alpha3::_EnvoyFilter_InsertPosition_default_instance_);
}
inline ::istio::networking::v1alpha3::EnvoyFilter_InsertPosition* EnvoyFilter_Filter::release_insert_position() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.EnvoyFilter.Filter.insert_position)
  
  ::istio::networking::v1alpha3::EnvoyFilter_InsertPosition* temp = insert_position_;
  insert_position_ = NULL;
  return temp;
}
inline ::istio::networking::v1alpha3::EnvoyFilter_InsertPosition* EnvoyFilter_Filter::mutable_insert_position() {
  
  if (insert_position_ == NULL) {
    insert_position_ = new ::istio::networking::v1alpha3::EnvoyFilter_InsertPosition;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.EnvoyFilter.Filter.insert_position)
  return insert_position_;
}
inline void EnvoyFilter_Filter::set_allocated_insert_position(::istio::networking::v1alpha3::EnvoyFilter_InsertPosition* insert_position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete insert_position_;
  }
  if (insert_position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      insert_position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, insert_position, submessage_arena);
    }
    
  } else {
    
  }
  insert_position_ = insert_position;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.EnvoyFilter.Filter.insert_position)
}

// .istio.networking.v1alpha3.EnvoyFilter.Filter.FilterType filter_type = 3;
inline void EnvoyFilter_Filter::clear_filter_type() {
  filter_type_ = 0;
}
inline ::istio::networking::v1alpha3::EnvoyFilter_Filter_FilterType EnvoyFilter_Filter::filter_type() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.EnvoyFilter.Filter.filter_type)
  return static_cast< ::istio::networking::v1alpha3::EnvoyFilter_Filter_FilterType >(filter_type_);
}
inline void EnvoyFilter_Filter::set_filter_type(::istio::networking::v1alpha3::EnvoyFilter_Filter_FilterType value) {
  
  filter_type_ = value;
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.EnvoyFilter.Filter.filter_type)
}

// string filter_name = 4;
inline void EnvoyFilter_Filter::clear_filter_name() {
  filter_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnvoyFilter_Filter::filter_name() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.EnvoyFilter.Filter.filter_name)
  return filter_name_.GetNoArena();
}
inline void EnvoyFilter_Filter::set_filter_name(const ::std::string& value) {
  
  filter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.EnvoyFilter.Filter.filter_name)
}
#if LANG_CXX11
inline void EnvoyFilter_Filter::set_filter_name(::std::string&& value) {
  
  filter_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.EnvoyFilter.Filter.filter_name)
}
#endif
inline void EnvoyFilter_Filter::set_filter_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.EnvoyFilter.Filter.filter_name)
}
inline void EnvoyFilter_Filter::set_filter_name(const char* value, size_t size) {
  
  filter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.EnvoyFilter.Filter.filter_name)
}
inline ::std::string* EnvoyFilter_Filter::mutable_filter_name() {
  
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.EnvoyFilter.Filter.filter_name)
  return filter_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnvoyFilter_Filter::release_filter_name() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.EnvoyFilter.Filter.filter_name)
  
  return filter_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnvoyFilter_Filter::set_allocated_filter_name(::std::string* filter_name) {
  if (filter_name != NULL) {
    
  } else {
    
  }
  filter_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter_name);
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.EnvoyFilter.Filter.filter_name)
}

// .google.protobuf.Struct filter_config = 5;
inline bool EnvoyFilter_Filter::has_filter_config() const {
  return this != internal_default_instance() && filter_config_ != NULL;
}
inline const ::google::protobuf::Struct& EnvoyFilter_Filter::filter_config() const {
  const ::google::protobuf::Struct* p = filter_config_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.EnvoyFilter.Filter.filter_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* EnvoyFilter_Filter::release_filter_config() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.EnvoyFilter.Filter.filter_config)
  
  ::google::protobuf::Struct* temp = filter_config_;
  filter_config_ = NULL;
  return temp;
}
inline ::google::protobuf::Struct* EnvoyFilter_Filter::mutable_filter_config() {
  
  if (filter_config_ == NULL) {
    filter_config_ = new ::google::protobuf::Struct;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.EnvoyFilter.Filter.filter_config)
  return filter_config_;
}
inline void EnvoyFilter_Filter::set_allocated_filter_config(::google::protobuf::Struct* filter_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(filter_config_);
  }
  if (filter_config) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(filter_config)->GetArena();
    if (message_arena != submessage_arena) {
      filter_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, filter_config, submessage_arena);
    }
    
  } else {
    
  }
  filter_config_ = filter_config;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.EnvoyFilter.Filter.filter_config)
}

// -------------------------------------------------------------------

// EnvoyFilter

// map<string, string> workload_labels = 1;
inline int EnvoyFilter::workload_labels_size() const {
  return workload_labels_.size();
}
inline void EnvoyFilter::clear_workload_labels() {
  workload_labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
EnvoyFilter::workload_labels() const {
  // @@protoc_insertion_point(field_map:istio.networking.v1alpha3.EnvoyFilter.workload_labels)
  return workload_labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
EnvoyFilter::mutable_workload_labels() {
  // @@protoc_insertion_point(field_mutable_map:istio.networking.v1alpha3.EnvoyFilter.workload_labels)
  return workload_labels_.MutableMap();
}

// repeated .istio.networking.v1alpha3.EnvoyFilter.Filter filters = 2;
inline int EnvoyFilter::filters_size() const {
  return filters_.size();
}
inline void EnvoyFilter::clear_filters() {
  filters_.Clear();
}
inline const ::istio::networking::v1alpha3::EnvoyFilter_Filter& EnvoyFilter::filters(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.EnvoyFilter.filters)
  return filters_.Get(index);
}
inline ::istio::networking::v1alpha3::EnvoyFilter_Filter* EnvoyFilter::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.EnvoyFilter.filters)
  return filters_.Mutable(index);
}
inline ::istio::networking::v1alpha3::EnvoyFilter_Filter* EnvoyFilter::add_filters() {
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.EnvoyFilter.filters)
  return filters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::EnvoyFilter_Filter >*
EnvoyFilter::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.EnvoyFilter.filters)
  return &filters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::EnvoyFilter_Filter >&
EnvoyFilter::filters() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.EnvoyFilter.filters)
  return filters_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha3
}  // namespace networking
}  // namespace istio

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch_ListenerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch_ListenerType>() {
  return ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch_ListenerType_descriptor();
}
template <> struct is_proto_enum< ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch_ListenerProtocol> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch_ListenerProtocol>() {
  return ::istio::networking::v1alpha3::EnvoyFilter_ListenerMatch_ListenerProtocol_descriptor();
}
template <> struct is_proto_enum< ::istio::networking::v1alpha3::EnvoyFilter_InsertPosition_Index> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::istio::networking::v1alpha3::EnvoyFilter_InsertPosition_Index>() {
  return ::istio::networking::v1alpha3::EnvoyFilter_InsertPosition_Index_descriptor();
}
template <> struct is_proto_enum< ::istio::networking::v1alpha3::EnvoyFilter_Filter_FilterType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::istio::networking::v1alpha3::EnvoyFilter_Filter_FilterType>() {
  return ::istio::networking::v1alpha3::EnvoyFilter_Filter_FilterType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_networking_2fv1alpha3_2fenvoy_5ffilter_2eproto__INCLUDED
