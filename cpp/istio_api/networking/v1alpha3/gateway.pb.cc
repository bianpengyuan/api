// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networking/v1alpha3/gateway.proto

#include "networking/v1alpha3/gateway.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace istio {
namespace networking {
namespace v1alpha3 {
class Gateway_SelectorEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Gateway_SelectorEntry_DoNotUse>
      _instance;
} _Gateway_SelectorEntry_DoNotUse_default_instance_;
class GatewayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Gateway>
      _instance;
} _Gateway_default_instance_;
class Server_TLSOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Server_TLSOptions>
      _instance;
} _Server_TLSOptions_default_instance_;
class ServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Server>
      _instance;
} _Server_default_instance_;
class PortDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Port>
      _instance;
} _Port_default_instance_;
}  // namespace v1alpha3
}  // namespace networking
}  // namespace istio
namespace protobuf_networking_2fv1alpha3_2fgateway_2eproto {
void InitDefaultsGateway_SelectorEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_Gateway_SelectorEntry_DoNotUse_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::Gateway_SelectorEntry_DoNotUse();
  }
  ::istio::networking::v1alpha3::Gateway_SelectorEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsGateway_SelectorEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGateway_SelectorEntry_DoNotUseImpl);
}

void InitDefaultsGatewayImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fgateway_2eproto::InitDefaultsServer();
  protobuf_networking_2fv1alpha3_2fgateway_2eproto::InitDefaultsGateway_SelectorEntry_DoNotUse();
  {
    void* ptr = &::istio::networking::v1alpha3::_Gateway_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::Gateway();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::Gateway::InitAsDefaultInstance();
}

void InitDefaultsGateway() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGatewayImpl);
}

void InitDefaultsServer_TLSOptionsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_Server_TLSOptions_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::Server_TLSOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::Server_TLSOptions::InitAsDefaultInstance();
}

void InitDefaultsServer_TLSOptions() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServer_TLSOptionsImpl);
}

void InitDefaultsServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_networking_2fv1alpha3_2fgateway_2eproto::InitDefaultsPort();
  protobuf_networking_2fv1alpha3_2fgateway_2eproto::InitDefaultsServer_TLSOptions();
  {
    void* ptr = &::istio::networking::v1alpha3::_Server_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::Server();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::Server::InitAsDefaultInstance();
}

void InitDefaultsServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServerImpl);
}

void InitDefaultsPortImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::networking::v1alpha3::_Port_default_instance_;
    new (ptr) ::istio::networking::v1alpha3::Port();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::networking::v1alpha3::Port::InitAsDefaultInstance();
}

void InitDefaultsPort() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPortImpl);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Gateway_SelectorEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Gateway_SelectorEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Gateway_SelectorEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Gateway_SelectorEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Gateway, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Gateway, servers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Gateway, selector_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Server_TLSOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Server_TLSOptions, https_redirect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Server_TLSOptions, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Server_TLSOptions, server_certificate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Server_TLSOptions, private_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Server_TLSOptions, ca_certificates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Server_TLSOptions, credential_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Server_TLSOptions, subject_alt_names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Server_TLSOptions, min_protocol_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Server_TLSOptions, max_protocol_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Server_TLSOptions, cipher_suites_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Server, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Server, bind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Server, hosts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Server, tls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Server, default_endpoint_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Port, number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Port, protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::networking::v1alpha3::Port, name_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::istio::networking::v1alpha3::Gateway_SelectorEntry_DoNotUse)},
  { 9, -1, sizeof(::istio::networking::v1alpha3::Gateway)},
  { 16, -1, sizeof(::istio::networking::v1alpha3::Server_TLSOptions)},
  { 31, -1, sizeof(::istio::networking::v1alpha3::Server)},
  { 41, -1, sizeof(::istio::networking::v1alpha3::Port)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_Gateway_SelectorEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_Gateway_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_Server_TLSOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_Server_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::networking::v1alpha3::_Port_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "networking/v1alpha3/gateway.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n!networking/v1alpha3/gateway.proto\022\031ist"
      "io.networking.v1alpha3\"\262\001\n\007Gateway\0222\n\007se"
      "rvers\030\001 \003(\0132!.istio.networking.v1alpha3."
      "Server\022B\n\010selector\030\002 \003(\01320.istio.network"
      "ing.v1alpha3.Gateway.SelectorEntry\032/\n\rSe"
      "lectorEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:"
      "\0028\001\"\364\005\n\006Server\022-\n\004port\030\001 \001(\0132\037.istio.net"
      "working.v1alpha3.Port\022\014\n\004bind\030\004 \001(\t\022\r\n\005h"
      "osts\030\002 \003(\t\0229\n\003tls\030\003 \001(\0132,.istio.networki"
      "ng.v1alpha3.Server.TLSOptions\022\030\n\020default"
      "_endpoint\030\005 \001(\t\032\310\004\n\nTLSOptions\022\026\n\016https_"
      "redirect\030\001 \001(\010\022B\n\004mode\030\002 \001(\01624.istio.net"
      "working.v1alpha3.Server.TLSOptions.TLSmo"
      "de\022\032\n\022server_certificate\030\003 \001(\t\022\023\n\013privat"
      "e_key\030\004 \001(\t\022\027\n\017ca_certificates\030\005 \001(\t\022\027\n\017"
      "credential_name\030\n \001(\t\022\031\n\021subject_alt_nam"
      "es\030\006 \003(\t\022V\n\024min_protocol_version\030\007 \001(\01628"
      ".istio.networking.v1alpha3.Server.TLSOpt"
      "ions.TLSProtocol\022V\n\024max_protocol_version"
      "\030\010 \001(\01628.istio.networking.v1alpha3.Serve"
      "r.TLSOptions.TLSProtocol\022\025\n\rcipher_suite"
      "s\030\t \003(\t\"H\n\007TLSmode\022\017\n\013PASSTHROUGH\020\000\022\n\n\006S"
      "IMPLE\020\001\022\n\n\006MUTUAL\020\002\022\024\n\020AUTO_PASSTHROUGH\020"
      "\003\"O\n\013TLSProtocol\022\014\n\010TLS_AUTO\020\000\022\013\n\007TLSV1_"
      "0\020\001\022\013\n\007TLSV1_1\020\002\022\013\n\007TLSV1_2\020\003\022\013\n\007TLSV1_3"
      "\020\004\"6\n\004Port\022\016\n\006number\030\001 \001(\r\022\020\n\010protocol\030\002"
      " \001(\t\022\014\n\004name\030\003 \001(\tB\"Z istio.io/api/netwo"
      "rking/v1alpha3b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1102);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "networking/v1alpha3/gateway.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_networking_2fv1alpha3_2fgateway_2eproto
namespace istio {
namespace networking {
namespace v1alpha3 {
const ::google::protobuf::EnumDescriptor* Server_TLSOptions_TLSmode_descriptor() {
  protobuf_networking_2fv1alpha3_2fgateway_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_networking_2fv1alpha3_2fgateway_2eproto::file_level_enum_descriptors[0];
}
bool Server_TLSOptions_TLSmode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Server_TLSOptions_TLSmode Server_TLSOptions::PASSTHROUGH;
const Server_TLSOptions_TLSmode Server_TLSOptions::SIMPLE;
const Server_TLSOptions_TLSmode Server_TLSOptions::MUTUAL;
const Server_TLSOptions_TLSmode Server_TLSOptions::AUTO_PASSTHROUGH;
const Server_TLSOptions_TLSmode Server_TLSOptions::TLSmode_MIN;
const Server_TLSOptions_TLSmode Server_TLSOptions::TLSmode_MAX;
const int Server_TLSOptions::TLSmode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Server_TLSOptions_TLSProtocol_descriptor() {
  protobuf_networking_2fv1alpha3_2fgateway_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_networking_2fv1alpha3_2fgateway_2eproto::file_level_enum_descriptors[1];
}
bool Server_TLSOptions_TLSProtocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Server_TLSOptions_TLSProtocol Server_TLSOptions::TLS_AUTO;
const Server_TLSOptions_TLSProtocol Server_TLSOptions::TLSV1_0;
const Server_TLSOptions_TLSProtocol Server_TLSOptions::TLSV1_1;
const Server_TLSOptions_TLSProtocol Server_TLSOptions::TLSV1_2;
const Server_TLSOptions_TLSProtocol Server_TLSOptions::TLSV1_3;
const Server_TLSOptions_TLSProtocol Server_TLSOptions::TLSProtocol_MIN;
const Server_TLSOptions_TLSProtocol Server_TLSOptions::TLSProtocol_MAX;
const int Server_TLSOptions::TLSProtocol_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

Gateway_SelectorEntry_DoNotUse::Gateway_SelectorEntry_DoNotUse() {}
Gateway_SelectorEntry_DoNotUse::Gateway_SelectorEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Gateway_SelectorEntry_DoNotUse::MergeFrom(const Gateway_SelectorEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Gateway_SelectorEntry_DoNotUse::GetMetadata() const {
  ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::file_level_metadata[0];
}
void Gateway_SelectorEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Gateway::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gateway::kServersFieldNumber;
const int Gateway::kSelectorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gateway::Gateway()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::InitDefaultsGateway();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.Gateway)
}
Gateway::Gateway(const Gateway& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      servers_(from.servers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  selector_.MergeFrom(from.selector_);
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.Gateway)
}

void Gateway::SharedCtor() {
  _cached_size_ = 0;
}

Gateway::~Gateway() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.Gateway)
  SharedDtor();
}

void Gateway::SharedDtor() {
}

void Gateway::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gateway::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gateway& Gateway::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::InitDefaultsGateway();
  return *internal_default_instance();
}

Gateway* Gateway::New(::google::protobuf::Arena* arena) const {
  Gateway* n = new Gateway;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gateway::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.Gateway)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servers_.Clear();
  selector_.Clear();
  _internal_metadata_.Clear();
}

bool Gateway::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.Gateway)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .istio.networking.v1alpha3.Server servers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_servers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> selector = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          Gateway_SelectorEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Gateway_SelectorEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&selector_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.Gateway.SelectorEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.Gateway.SelectorEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.Gateway)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.Gateway)
  return false;
#undef DO_
}

void Gateway::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.Gateway)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .istio.networking.v1alpha3.Server servers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->servers(static_cast<int>(i)), output);
  }

  // map<string, string> selector = 2;
  if (!this->selector().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.Gateway.SelectorEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.Gateway.SelectorEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->selector().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->selector().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->selector().begin();
          it != this->selector().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Gateway_SelectorEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(selector_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Gateway_SelectorEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->selector().begin();
          it != this->selector().end(); ++it) {
        entry.reset(selector_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.Gateway)
}

::google::protobuf::uint8* Gateway::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.Gateway)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .istio.networking.v1alpha3.Server servers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->servers(static_cast<int>(i)), deterministic, target);
  }

  // map<string, string> selector = 2;
  if (!this->selector().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.Gateway.SelectorEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.networking.v1alpha3.Gateway.SelectorEntry.value");
      }
    };

    if (deterministic &&
        this->selector().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->selector().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->selector().begin();
          it != this->selector().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Gateway_SelectorEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(selector_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Gateway_SelectorEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->selector().begin();
          it != this->selector().end(); ++it) {
        entry.reset(selector_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.Gateway)
  return target;
}

size_t Gateway::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.Gateway)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .istio.networking.v1alpha3.Server servers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->servers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->servers(static_cast<int>(i)));
    }
  }

  // map<string, string> selector = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->selector_size());
  {
    ::google::protobuf::scoped_ptr<Gateway_SelectorEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->selector().begin();
        it != this->selector().end(); ++it) {
      entry.reset(selector_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gateway::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.Gateway)
  GOOGLE_DCHECK_NE(&from, this);
  const Gateway* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gateway>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.Gateway)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.Gateway)
    MergeFrom(*source);
  }
}

void Gateway::MergeFrom(const Gateway& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.Gateway)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
  selector_.MergeFrom(from.selector_);
}

void Gateway::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.Gateway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gateway::CopyFrom(const Gateway& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.Gateway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gateway::IsInitialized() const {
  return true;
}

void Gateway::Swap(Gateway* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gateway::InternalSwap(Gateway* other) {
  using std::swap;
  servers_.InternalSwap(&other->servers_);
  selector_.Swap(&other->selector_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gateway::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fgateway_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Server_TLSOptions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Server_TLSOptions::kHttpsRedirectFieldNumber;
const int Server_TLSOptions::kModeFieldNumber;
const int Server_TLSOptions::kServerCertificateFieldNumber;
const int Server_TLSOptions::kPrivateKeyFieldNumber;
const int Server_TLSOptions::kCaCertificatesFieldNumber;
const int Server_TLSOptions::kCredentialNameFieldNumber;
const int Server_TLSOptions::kSubjectAltNamesFieldNumber;
const int Server_TLSOptions::kMinProtocolVersionFieldNumber;
const int Server_TLSOptions::kMaxProtocolVersionFieldNumber;
const int Server_TLSOptions::kCipherSuitesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Server_TLSOptions::Server_TLSOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::InitDefaultsServer_TLSOptions();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.Server.TLSOptions)
}
Server_TLSOptions::Server_TLSOptions(const Server_TLSOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      subject_alt_names_(from.subject_alt_names_),
      cipher_suites_(from.cipher_suites_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_certificate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_certificate().size() > 0) {
    server_certificate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_certificate_);
  }
  private_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.private_key().size() > 0) {
    private_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_key_);
  }
  ca_certificates_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ca_certificates().size() > 0) {
    ca_certificates_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ca_certificates_);
  }
  credential_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.credential_name().size() > 0) {
    credential_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.credential_name_);
  }
  ::memcpy(&https_redirect_, &from.https_redirect_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_protocol_version_) -
    reinterpret_cast<char*>(&https_redirect_)) + sizeof(max_protocol_version_));
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.Server.TLSOptions)
}

void Server_TLSOptions::SharedCtor() {
  server_certificate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ca_certificates_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  credential_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&https_redirect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_protocol_version_) -
      reinterpret_cast<char*>(&https_redirect_)) + sizeof(max_protocol_version_));
  _cached_size_ = 0;
}

Server_TLSOptions::~Server_TLSOptions() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.Server.TLSOptions)
  SharedDtor();
}

void Server_TLSOptions::SharedDtor() {
  server_certificate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ca_certificates_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  credential_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Server_TLSOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Server_TLSOptions::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Server_TLSOptions& Server_TLSOptions::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::InitDefaultsServer_TLSOptions();
  return *internal_default_instance();
}

Server_TLSOptions* Server_TLSOptions::New(::google::protobuf::Arena* arena) const {
  Server_TLSOptions* n = new Server_TLSOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Server_TLSOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.Server.TLSOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subject_alt_names_.Clear();
  cipher_suites_.Clear();
  server_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ca_certificates_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  credential_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&https_redirect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_protocol_version_) -
      reinterpret_cast<char*>(&https_redirect_)) + sizeof(max_protocol_version_));
  _internal_metadata_.Clear();
}

bool Server_TLSOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.Server.TLSOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool https_redirect = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &https_redirect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.Server.TLSOptions.TLSmode mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::istio::networking::v1alpha3::Server_TLSOptions_TLSmode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_certificate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_certificate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_certificate().data(), static_cast<int>(this->server_certificate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.Server.TLSOptions.server_certificate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string private_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->private_key().data(), static_cast<int>(this->private_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.Server.TLSOptions.private_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ca_certificates = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ca_certificates()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ca_certificates().data(), static_cast<int>(this->ca_certificates().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.Server.TLSOptions.ca_certificates"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string subject_alt_names = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_subject_alt_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subject_alt_names(this->subject_alt_names_size() - 1).data(),
            static_cast<int>(this->subject_alt_names(this->subject_alt_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.Server.TLSOptions.subject_alt_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.Server.TLSOptions.TLSProtocol min_protocol_version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_min_protocol_version(static_cast< ::istio::networking::v1alpha3::Server_TLSOptions_TLSProtocol >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.Server.TLSOptions.TLSProtocol max_protocol_version = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_max_protocol_version(static_cast< ::istio::networking::v1alpha3::Server_TLSOptions_TLSProtocol >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string cipher_suites = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cipher_suites()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cipher_suites(this->cipher_suites_size() - 1).data(),
            static_cast<int>(this->cipher_suites(this->cipher_suites_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.Server.TLSOptions.cipher_suites"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string credential_name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_credential_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->credential_name().data(), static_cast<int>(this->credential_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.Server.TLSOptions.credential_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.Server.TLSOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.Server.TLSOptions)
  return false;
#undef DO_
}

void Server_TLSOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.Server.TLSOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool https_redirect = 1;
  if (this->https_redirect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->https_redirect(), output);
  }

  // .istio.networking.v1alpha3.Server.TLSOptions.TLSmode mode = 2;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  // string server_certificate = 3;
  if (this->server_certificate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_certificate().data(), static_cast<int>(this->server_certificate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Server.TLSOptions.server_certificate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->server_certificate(), output);
  }

  // string private_key = 4;
  if (this->private_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->private_key().data(), static_cast<int>(this->private_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Server.TLSOptions.private_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->private_key(), output);
  }

  // string ca_certificates = 5;
  if (this->ca_certificates().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ca_certificates().data(), static_cast<int>(this->ca_certificates().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Server.TLSOptions.ca_certificates");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ca_certificates(), output);
  }

  // repeated string subject_alt_names = 6;
  for (int i = 0, n = this->subject_alt_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subject_alt_names(i).data(), static_cast<int>(this->subject_alt_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Server.TLSOptions.subject_alt_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->subject_alt_names(i), output);
  }

  // .istio.networking.v1alpha3.Server.TLSOptions.TLSProtocol min_protocol_version = 7;
  if (this->min_protocol_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->min_protocol_version(), output);
  }

  // .istio.networking.v1alpha3.Server.TLSOptions.TLSProtocol max_protocol_version = 8;
  if (this->max_protocol_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->max_protocol_version(), output);
  }

  // repeated string cipher_suites = 9;
  for (int i = 0, n = this->cipher_suites_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cipher_suites(i).data(), static_cast<int>(this->cipher_suites(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Server.TLSOptions.cipher_suites");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->cipher_suites(i), output);
  }

  // string credential_name = 10;
  if (this->credential_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->credential_name().data(), static_cast<int>(this->credential_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Server.TLSOptions.credential_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->credential_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.Server.TLSOptions)
}

::google::protobuf::uint8* Server_TLSOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.Server.TLSOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool https_redirect = 1;
  if (this->https_redirect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->https_redirect(), target);
  }

  // .istio.networking.v1alpha3.Server.TLSOptions.TLSmode mode = 2;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  // string server_certificate = 3;
  if (this->server_certificate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_certificate().data(), static_cast<int>(this->server_certificate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Server.TLSOptions.server_certificate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_certificate(), target);
  }

  // string private_key = 4;
  if (this->private_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->private_key().data(), static_cast<int>(this->private_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Server.TLSOptions.private_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->private_key(), target);
  }

  // string ca_certificates = 5;
  if (this->ca_certificates().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ca_certificates().data(), static_cast<int>(this->ca_certificates().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Server.TLSOptions.ca_certificates");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ca_certificates(), target);
  }

  // repeated string subject_alt_names = 6;
  for (int i = 0, n = this->subject_alt_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subject_alt_names(i).data(), static_cast<int>(this->subject_alt_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Server.TLSOptions.subject_alt_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->subject_alt_names(i), target);
  }

  // .istio.networking.v1alpha3.Server.TLSOptions.TLSProtocol min_protocol_version = 7;
  if (this->min_protocol_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->min_protocol_version(), target);
  }

  // .istio.networking.v1alpha3.Server.TLSOptions.TLSProtocol max_protocol_version = 8;
  if (this->max_protocol_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->max_protocol_version(), target);
  }

  // repeated string cipher_suites = 9;
  for (int i = 0, n = this->cipher_suites_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cipher_suites(i).data(), static_cast<int>(this->cipher_suites(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Server.TLSOptions.cipher_suites");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->cipher_suites(i), target);
  }

  // string credential_name = 10;
  if (this->credential_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->credential_name().data(), static_cast<int>(this->credential_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Server.TLSOptions.credential_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->credential_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.Server.TLSOptions)
  return target;
}

size_t Server_TLSOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.Server.TLSOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string subject_alt_names = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->subject_alt_names_size());
  for (int i = 0, n = this->subject_alt_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->subject_alt_names(i));
  }

  // repeated string cipher_suites = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->cipher_suites_size());
  for (int i = 0, n = this->cipher_suites_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cipher_suites(i));
  }

  // string server_certificate = 3;
  if (this->server_certificate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_certificate());
  }

  // string private_key = 4;
  if (this->private_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->private_key());
  }

  // string ca_certificates = 5;
  if (this->ca_certificates().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ca_certificates());
  }

  // string credential_name = 10;
  if (this->credential_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->credential_name());
  }

  // bool https_redirect = 1;
  if (this->https_redirect() != 0) {
    total_size += 1 + 1;
  }

  // .istio.networking.v1alpha3.Server.TLSOptions.TLSmode mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  // .istio.networking.v1alpha3.Server.TLSOptions.TLSProtocol min_protocol_version = 7;
  if (this->min_protocol_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->min_protocol_version());
  }

  // .istio.networking.v1alpha3.Server.TLSOptions.TLSProtocol max_protocol_version = 8;
  if (this->max_protocol_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->max_protocol_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Server_TLSOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.Server.TLSOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const Server_TLSOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Server_TLSOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.Server.TLSOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.Server.TLSOptions)
    MergeFrom(*source);
  }
}

void Server_TLSOptions::MergeFrom(const Server_TLSOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.Server.TLSOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subject_alt_names_.MergeFrom(from.subject_alt_names_);
  cipher_suites_.MergeFrom(from.cipher_suites_);
  if (from.server_certificate().size() > 0) {

    server_certificate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_certificate_);
  }
  if (from.private_key().size() > 0) {

    private_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_key_);
  }
  if (from.ca_certificates().size() > 0) {

    ca_certificates_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ca_certificates_);
  }
  if (from.credential_name().size() > 0) {

    credential_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.credential_name_);
  }
  if (from.https_redirect() != 0) {
    set_https_redirect(from.https_redirect());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.min_protocol_version() != 0) {
    set_min_protocol_version(from.min_protocol_version());
  }
  if (from.max_protocol_version() != 0) {
    set_max_protocol_version(from.max_protocol_version());
  }
}

void Server_TLSOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.Server.TLSOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Server_TLSOptions::CopyFrom(const Server_TLSOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.Server.TLSOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server_TLSOptions::IsInitialized() const {
  return true;
}

void Server_TLSOptions::Swap(Server_TLSOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Server_TLSOptions::InternalSwap(Server_TLSOptions* other) {
  using std::swap;
  subject_alt_names_.InternalSwap(&other->subject_alt_names_);
  cipher_suites_.InternalSwap(&other->cipher_suites_);
  server_certificate_.Swap(&other->server_certificate_);
  private_key_.Swap(&other->private_key_);
  ca_certificates_.Swap(&other->ca_certificates_);
  credential_name_.Swap(&other->credential_name_);
  swap(https_redirect_, other->https_redirect_);
  swap(mode_, other->mode_);
  swap(min_protocol_version_, other->min_protocol_version_);
  swap(max_protocol_version_, other->max_protocol_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Server_TLSOptions::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fgateway_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Server::InitAsDefaultInstance() {
  ::istio::networking::v1alpha3::_Server_default_instance_._instance.get_mutable()->port_ = const_cast< ::istio::networking::v1alpha3::Port*>(
      ::istio::networking::v1alpha3::Port::internal_default_instance());
  ::istio::networking::v1alpha3::_Server_default_instance_._instance.get_mutable()->tls_ = const_cast< ::istio::networking::v1alpha3::Server_TLSOptions*>(
      ::istio::networking::v1alpha3::Server_TLSOptions::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Server::kPortFieldNumber;
const int Server::kBindFieldNumber;
const int Server::kHostsFieldNumber;
const int Server::kTlsFieldNumber;
const int Server::kDefaultEndpointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Server::Server()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::InitDefaultsServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.Server)
}
Server::Server(const Server& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      hosts_(from.hosts_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bind().size() > 0) {
    bind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bind_);
  }
  default_endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.default_endpoint().size() > 0) {
    default_endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_endpoint_);
  }
  if (from.has_port()) {
    port_ = new ::istio::networking::v1alpha3::Port(*from.port_);
  } else {
    port_ = NULL;
  }
  if (from.has_tls()) {
    tls_ = new ::istio::networking::v1alpha3::Server_TLSOptions(*from.tls_);
  } else {
    tls_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.Server)
}

void Server::SharedCtor() {
  bind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tls_) -
      reinterpret_cast<char*>(&port_)) + sizeof(tls_));
  _cached_size_ = 0;
}

Server::~Server() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.Server)
  SharedDtor();
}

void Server::SharedDtor() {
  bind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_endpoint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete port_;
  if (this != internal_default_instance()) delete tls_;
}

void Server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Server::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Server& Server::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::InitDefaultsServer();
  return *internal_default_instance();
}

Server* Server::New(::google::protobuf::Arena* arena) const {
  Server* n = new Server;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Server::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hosts_.Clear();
  bind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && port_ != NULL) {
    delete port_;
  }
  port_ = NULL;
  if (GetArenaNoVirtual() == NULL && tls_ != NULL) {
    delete tls_;
  }
  tls_ = NULL;
  _internal_metadata_.Clear();
}

bool Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.Server)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.networking.v1alpha3.Port port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_port()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string hosts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hosts()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hosts(this->hosts_size() - 1).data(),
            static_cast<int>(this->hosts(this->hosts_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.Server.hosts"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.networking.v1alpha3.Server.TLSOptions tls = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bind = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bind()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bind().data(), static_cast<int>(this->bind().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.Server.bind"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string default_endpoint = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_endpoint()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->default_endpoint().data(), static_cast<int>(this->default_endpoint().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.Server.default_endpoint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.Server)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.Server)
  return false;
#undef DO_
}

void Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.Port port = 1;
  if (this->has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->port_, output);
  }

  // repeated string hosts = 2;
  for (int i = 0, n = this->hosts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hosts(i).data(), static_cast<int>(this->hosts(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Server.hosts");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hosts(i), output);
  }

  // .istio.networking.v1alpha3.Server.TLSOptions tls = 3;
  if (this->has_tls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->tls_, output);
  }

  // string bind = 4;
  if (this->bind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bind().data(), static_cast<int>(this->bind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Server.bind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bind(), output);
  }

  // string default_endpoint = 5;
  if (this->default_endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->default_endpoint().data(), static_cast<int>(this->default_endpoint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Server.default_endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->default_endpoint(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.Server)
}

::google::protobuf::uint8* Server::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.networking.v1alpha3.Port port = 1;
  if (this->has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->port_, deterministic, target);
  }

  // repeated string hosts = 2;
  for (int i = 0, n = this->hosts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hosts(i).data(), static_cast<int>(this->hosts(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Server.hosts");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->hosts(i), target);
  }

  // .istio.networking.v1alpha3.Server.TLSOptions tls = 3;
  if (this->has_tls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->tls_, deterministic, target);
  }

  // string bind = 4;
  if (this->bind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bind().data(), static_cast<int>(this->bind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Server.bind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bind(), target);
  }

  // string default_endpoint = 5;
  if (this->default_endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->default_endpoint().data(), static_cast<int>(this->default_endpoint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Server.default_endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->default_endpoint(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.Server)
  return target;
}

size_t Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.Server)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string hosts = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->hosts_size());
  for (int i = 0, n = this->hosts_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hosts(i));
  }

  // string bind = 4;
  if (this->bind().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bind());
  }

  // string default_endpoint = 5;
  if (this->default_endpoint().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->default_endpoint());
  }

  // .istio.networking.v1alpha3.Port port = 1;
  if (this->has_port()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->port_);
  }

  // .istio.networking.v1alpha3.Server.TLSOptions tls = 3;
  if (this->has_tls()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tls_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Server::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.Server)
  GOOGLE_DCHECK_NE(&from, this);
  const Server* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Server>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.Server)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.Server)
    MergeFrom(*source);
  }
}

void Server::MergeFrom(const Server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.Server)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hosts_.MergeFrom(from.hosts_);
  if (from.bind().size() > 0) {

    bind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bind_);
  }
  if (from.default_endpoint().size() > 0) {

    default_endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_endpoint_);
  }
  if (from.has_port()) {
    mutable_port()->::istio::networking::v1alpha3::Port::MergeFrom(from.port());
  }
  if (from.has_tls()) {
    mutable_tls()->::istio::networking::v1alpha3::Server_TLSOptions::MergeFrom(from.tls());
  }
}

void Server::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Server::CopyFrom(const Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server::IsInitialized() const {
  return true;
}

void Server::Swap(Server* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Server::InternalSwap(Server* other) {
  using std::swap;
  hosts_.InternalSwap(&other->hosts_);
  bind_.Swap(&other->bind_);
  default_endpoint_.Swap(&other->default_endpoint_);
  swap(port_, other->port_);
  swap(tls_, other->tls_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Server::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fgateway_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Port::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Port::kNumberFieldNumber;
const int Port::kProtocolFieldNumber;
const int Port::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Port::Port()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::InitDefaultsPort();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.networking.v1alpha3.Port)
}
Port::Port(const Port& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protocol().size() > 0) {
    protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  number_ = from.number_;
  // @@protoc_insertion_point(copy_constructor:istio.networking.v1alpha3.Port)
}

void Port::SharedCtor() {
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_ = 0u;
  _cached_size_ = 0;
}

Port::~Port() {
  // @@protoc_insertion_point(destructor:istio.networking.v1alpha3.Port)
  SharedDtor();
}

void Port::SharedDtor() {
  protocol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Port::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Port::descriptor() {
  ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Port& Port::default_instance() {
  ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::InitDefaultsPort();
  return *internal_default_instance();
}

Port* Port::New(::google::protobuf::Arena* arena) const {
  Port* n = new Port;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Port::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.networking.v1alpha3.Port)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_ = 0u;
  _internal_metadata_.Clear();
}

bool Port::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.networking.v1alpha3.Port)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string protocol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocol().data(), static_cast<int>(this->protocol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.Port.protocol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.networking.v1alpha3.Port.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.networking.v1alpha3.Port)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.networking.v1alpha3.Port)
  return false;
#undef DO_
}

void Port::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.networking.v1alpha3.Port)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number = 1;
  if (this->number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number(), output);
  }

  // string protocol = 2;
  if (this->protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), static_cast<int>(this->protocol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Port.protocol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->protocol(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Port.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.networking.v1alpha3.Port)
}

::google::protobuf::uint8* Port::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.networking.v1alpha3.Port)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number = 1;
  if (this->number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->number(), target);
  }

  // string protocol = 2;
  if (this->protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), static_cast<int>(this->protocol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Port.protocol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->protocol(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.networking.v1alpha3.Port.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.networking.v1alpha3.Port)
  return target;
}

size_t Port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.networking.v1alpha3.Port)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string protocol = 2;
  if (this->protocol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocol());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint32 number = 1;
  if (this->number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Port::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.networking.v1alpha3.Port)
  GOOGLE_DCHECK_NE(&from, this);
  const Port* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Port>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.networking.v1alpha3.Port)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.networking.v1alpha3.Port)
    MergeFrom(*source);
  }
}

void Port::MergeFrom(const Port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.networking.v1alpha3.Port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocol().size() > 0) {

    protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.number() != 0) {
    set_number(from.number());
  }
}

void Port::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.networking.v1alpha3.Port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Port::CopyFrom(const Port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.networking.v1alpha3.Port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Port::IsInitialized() const {
  return true;
}

void Port::Swap(Port* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Port::InternalSwap(Port* other) {
  using std::swap;
  protocol_.Swap(&other->protocol_);
  name_.Swap(&other->name_);
  swap(number_, other->number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Port::GetMetadata() const {
  protobuf_networking_2fv1alpha3_2fgateway_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha3
}  // namespace networking
}  // namespace istio

// @@protoc_insertion_point(global_scope)
