// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networking/v1alpha3/gateway.proto

#ifndef PROTOBUF_networking_2fv1alpha3_2fgateway_2eproto__INCLUDED
#define PROTOBUF_networking_2fv1alpha3_2fgateway_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_networking_2fv1alpha3_2fgateway_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsGateway_SelectorEntry_DoNotUseImpl();
void InitDefaultsGateway_SelectorEntry_DoNotUse();
void InitDefaultsGatewayImpl();
void InitDefaultsGateway();
void InitDefaultsServer_TLSOptionsImpl();
void InitDefaultsServer_TLSOptions();
void InitDefaultsServerImpl();
void InitDefaultsServer();
void InitDefaultsPortImpl();
void InitDefaultsPort();
inline void InitDefaults() {
  InitDefaultsGateway_SelectorEntry_DoNotUse();
  InitDefaultsGateway();
  InitDefaultsServer_TLSOptions();
  InitDefaultsServer();
  InitDefaultsPort();
}
}  // namespace protobuf_networking_2fv1alpha3_2fgateway_2eproto
namespace istio {
namespace networking {
namespace v1alpha3 {
class Gateway;
class GatewayDefaultTypeInternal;
extern GatewayDefaultTypeInternal _Gateway_default_instance_;
class Gateway_SelectorEntry_DoNotUse;
class Gateway_SelectorEntry_DoNotUseDefaultTypeInternal;
extern Gateway_SelectorEntry_DoNotUseDefaultTypeInternal _Gateway_SelectorEntry_DoNotUse_default_instance_;
class Port;
class PortDefaultTypeInternal;
extern PortDefaultTypeInternal _Port_default_instance_;
class Server;
class ServerDefaultTypeInternal;
extern ServerDefaultTypeInternal _Server_default_instance_;
class Server_TLSOptions;
class Server_TLSOptionsDefaultTypeInternal;
extern Server_TLSOptionsDefaultTypeInternal _Server_TLSOptions_default_instance_;
}  // namespace v1alpha3
}  // namespace networking
}  // namespace istio
namespace istio {
namespace networking {
namespace v1alpha3 {

enum Server_TLSOptions_TLSmode {
  Server_TLSOptions_TLSmode_PASSTHROUGH = 0,
  Server_TLSOptions_TLSmode_SIMPLE = 1,
  Server_TLSOptions_TLSmode_MUTUAL = 2,
  Server_TLSOptions_TLSmode_AUTO_PASSTHROUGH = 3,
  Server_TLSOptions_TLSmode_Server_TLSOptions_TLSmode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Server_TLSOptions_TLSmode_Server_TLSOptions_TLSmode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Server_TLSOptions_TLSmode_IsValid(int value);
const Server_TLSOptions_TLSmode Server_TLSOptions_TLSmode_TLSmode_MIN = Server_TLSOptions_TLSmode_PASSTHROUGH;
const Server_TLSOptions_TLSmode Server_TLSOptions_TLSmode_TLSmode_MAX = Server_TLSOptions_TLSmode_AUTO_PASSTHROUGH;
const int Server_TLSOptions_TLSmode_TLSmode_ARRAYSIZE = Server_TLSOptions_TLSmode_TLSmode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Server_TLSOptions_TLSmode_descriptor();
inline const ::std::string& Server_TLSOptions_TLSmode_Name(Server_TLSOptions_TLSmode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Server_TLSOptions_TLSmode_descriptor(), value);
}
inline bool Server_TLSOptions_TLSmode_Parse(
    const ::std::string& name, Server_TLSOptions_TLSmode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Server_TLSOptions_TLSmode>(
    Server_TLSOptions_TLSmode_descriptor(), name, value);
}
enum Server_TLSOptions_TLSProtocol {
  Server_TLSOptions_TLSProtocol_TLS_AUTO = 0,
  Server_TLSOptions_TLSProtocol_TLSV1_0 = 1,
  Server_TLSOptions_TLSProtocol_TLSV1_1 = 2,
  Server_TLSOptions_TLSProtocol_TLSV1_2 = 3,
  Server_TLSOptions_TLSProtocol_TLSV1_3 = 4,
  Server_TLSOptions_TLSProtocol_Server_TLSOptions_TLSProtocol_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Server_TLSOptions_TLSProtocol_Server_TLSOptions_TLSProtocol_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Server_TLSOptions_TLSProtocol_IsValid(int value);
const Server_TLSOptions_TLSProtocol Server_TLSOptions_TLSProtocol_TLSProtocol_MIN = Server_TLSOptions_TLSProtocol_TLS_AUTO;
const Server_TLSOptions_TLSProtocol Server_TLSOptions_TLSProtocol_TLSProtocol_MAX = Server_TLSOptions_TLSProtocol_TLSV1_3;
const int Server_TLSOptions_TLSProtocol_TLSProtocol_ARRAYSIZE = Server_TLSOptions_TLSProtocol_TLSProtocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* Server_TLSOptions_TLSProtocol_descriptor();
inline const ::std::string& Server_TLSOptions_TLSProtocol_Name(Server_TLSOptions_TLSProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    Server_TLSOptions_TLSProtocol_descriptor(), value);
}
inline bool Server_TLSOptions_TLSProtocol_Parse(
    const ::std::string& name, Server_TLSOptions_TLSProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Server_TLSOptions_TLSProtocol>(
    Server_TLSOptions_TLSProtocol_descriptor(), name, value);
}
// ===================================================================

class Gateway_SelectorEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Gateway_SelectorEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Gateway_SelectorEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Gateway_SelectorEntry_DoNotUse();
  Gateway_SelectorEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Gateway_SelectorEntry_DoNotUse& other);
  static const Gateway_SelectorEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Gateway_SelectorEntry_DoNotUse*>(&_Gateway_SelectorEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Gateway : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.Gateway) */ {
 public:
  Gateway();
  virtual ~Gateway();

  Gateway(const Gateway& from);

  inline Gateway& operator=(const Gateway& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Gateway(Gateway&& from) noexcept
    : Gateway() {
    *this = ::std::move(from);
  }

  inline Gateway& operator=(Gateway&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Gateway& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gateway* internal_default_instance() {
    return reinterpret_cast<const Gateway*>(
               &_Gateway_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Gateway* other);
  friend void swap(Gateway& a, Gateway& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Gateway* New() const PROTOBUF_FINAL { return New(NULL); }

  Gateway* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gateway& from);
  void MergeFrom(const Gateway& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gateway* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .istio.networking.v1alpha3.Server servers = 1;
  int servers_size() const;
  void clear_servers();
  static const int kServersFieldNumber = 1;
  const ::istio::networking::v1alpha3::Server& servers(int index) const;
  ::istio::networking::v1alpha3::Server* mutable_servers(int index);
  ::istio::networking::v1alpha3::Server* add_servers();
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::Server >*
      mutable_servers();
  const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::Server >&
      servers() const;

  // map<string, string> selector = 2;
  int selector_size() const;
  void clear_selector();
  static const int kSelectorFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      selector() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_selector();

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.Gateway)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::Server > servers_;
  ::google::protobuf::internal::MapField<
      Gateway_SelectorEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > selector_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::InitDefaultsGatewayImpl();
};
// -------------------------------------------------------------------

class Server_TLSOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.Server.TLSOptions) */ {
 public:
  Server_TLSOptions();
  virtual ~Server_TLSOptions();

  Server_TLSOptions(const Server_TLSOptions& from);

  inline Server_TLSOptions& operator=(const Server_TLSOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Server_TLSOptions(Server_TLSOptions&& from) noexcept
    : Server_TLSOptions() {
    *this = ::std::move(from);
  }

  inline Server_TLSOptions& operator=(Server_TLSOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Server_TLSOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Server_TLSOptions* internal_default_instance() {
    return reinterpret_cast<const Server_TLSOptions*>(
               &_Server_TLSOptions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Server_TLSOptions* other);
  friend void swap(Server_TLSOptions& a, Server_TLSOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Server_TLSOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  Server_TLSOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Server_TLSOptions& from);
  void MergeFrom(const Server_TLSOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Server_TLSOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Server_TLSOptions_TLSmode TLSmode;
  static const TLSmode PASSTHROUGH =
    Server_TLSOptions_TLSmode_PASSTHROUGH;
  static const TLSmode SIMPLE =
    Server_TLSOptions_TLSmode_SIMPLE;
  static const TLSmode MUTUAL =
    Server_TLSOptions_TLSmode_MUTUAL;
  static const TLSmode AUTO_PASSTHROUGH =
    Server_TLSOptions_TLSmode_AUTO_PASSTHROUGH;
  static inline bool TLSmode_IsValid(int value) {
    return Server_TLSOptions_TLSmode_IsValid(value);
  }
  static const TLSmode TLSmode_MIN =
    Server_TLSOptions_TLSmode_TLSmode_MIN;
  static const TLSmode TLSmode_MAX =
    Server_TLSOptions_TLSmode_TLSmode_MAX;
  static const int TLSmode_ARRAYSIZE =
    Server_TLSOptions_TLSmode_TLSmode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TLSmode_descriptor() {
    return Server_TLSOptions_TLSmode_descriptor();
  }
  static inline const ::std::string& TLSmode_Name(TLSmode value) {
    return Server_TLSOptions_TLSmode_Name(value);
  }
  static inline bool TLSmode_Parse(const ::std::string& name,
      TLSmode* value) {
    return Server_TLSOptions_TLSmode_Parse(name, value);
  }

  typedef Server_TLSOptions_TLSProtocol TLSProtocol;
  static const TLSProtocol TLS_AUTO =
    Server_TLSOptions_TLSProtocol_TLS_AUTO;
  static const TLSProtocol TLSV1_0 =
    Server_TLSOptions_TLSProtocol_TLSV1_0;
  static const TLSProtocol TLSV1_1 =
    Server_TLSOptions_TLSProtocol_TLSV1_1;
  static const TLSProtocol TLSV1_2 =
    Server_TLSOptions_TLSProtocol_TLSV1_2;
  static const TLSProtocol TLSV1_3 =
    Server_TLSOptions_TLSProtocol_TLSV1_3;
  static inline bool TLSProtocol_IsValid(int value) {
    return Server_TLSOptions_TLSProtocol_IsValid(value);
  }
  static const TLSProtocol TLSProtocol_MIN =
    Server_TLSOptions_TLSProtocol_TLSProtocol_MIN;
  static const TLSProtocol TLSProtocol_MAX =
    Server_TLSOptions_TLSProtocol_TLSProtocol_MAX;
  static const int TLSProtocol_ARRAYSIZE =
    Server_TLSOptions_TLSProtocol_TLSProtocol_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TLSProtocol_descriptor() {
    return Server_TLSOptions_TLSProtocol_descriptor();
  }
  static inline const ::std::string& TLSProtocol_Name(TLSProtocol value) {
    return Server_TLSOptions_TLSProtocol_Name(value);
  }
  static inline bool TLSProtocol_Parse(const ::std::string& name,
      TLSProtocol* value) {
    return Server_TLSOptions_TLSProtocol_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string subject_alt_names = 6;
  int subject_alt_names_size() const;
  void clear_subject_alt_names();
  static const int kSubjectAltNamesFieldNumber = 6;
  const ::std::string& subject_alt_names(int index) const;
  ::std::string* mutable_subject_alt_names(int index);
  void set_subject_alt_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_subject_alt_names(int index, ::std::string&& value);
  #endif
  void set_subject_alt_names(int index, const char* value);
  void set_subject_alt_names(int index, const char* value, size_t size);
  ::std::string* add_subject_alt_names();
  void add_subject_alt_names(const ::std::string& value);
  #if LANG_CXX11
  void add_subject_alt_names(::std::string&& value);
  #endif
  void add_subject_alt_names(const char* value);
  void add_subject_alt_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& subject_alt_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_subject_alt_names();

  // repeated string cipher_suites = 9;
  int cipher_suites_size() const;
  void clear_cipher_suites();
  static const int kCipherSuitesFieldNumber = 9;
  const ::std::string& cipher_suites(int index) const;
  ::std::string* mutable_cipher_suites(int index);
  void set_cipher_suites(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_cipher_suites(int index, ::std::string&& value);
  #endif
  void set_cipher_suites(int index, const char* value);
  void set_cipher_suites(int index, const char* value, size_t size);
  ::std::string* add_cipher_suites();
  void add_cipher_suites(const ::std::string& value);
  #if LANG_CXX11
  void add_cipher_suites(::std::string&& value);
  #endif
  void add_cipher_suites(const char* value);
  void add_cipher_suites(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& cipher_suites() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cipher_suites();

  // string server_certificate = 3;
  void clear_server_certificate();
  static const int kServerCertificateFieldNumber = 3;
  const ::std::string& server_certificate() const;
  void set_server_certificate(const ::std::string& value);
  #if LANG_CXX11
  void set_server_certificate(::std::string&& value);
  #endif
  void set_server_certificate(const char* value);
  void set_server_certificate(const char* value, size_t size);
  ::std::string* mutable_server_certificate();
  ::std::string* release_server_certificate();
  void set_allocated_server_certificate(::std::string* server_certificate);

  // string private_key = 4;
  void clear_private_key();
  static const int kPrivateKeyFieldNumber = 4;
  const ::std::string& private_key() const;
  void set_private_key(const ::std::string& value);
  #if LANG_CXX11
  void set_private_key(::std::string&& value);
  #endif
  void set_private_key(const char* value);
  void set_private_key(const char* value, size_t size);
  ::std::string* mutable_private_key();
  ::std::string* release_private_key();
  void set_allocated_private_key(::std::string* private_key);

  // string ca_certificates = 5;
  void clear_ca_certificates();
  static const int kCaCertificatesFieldNumber = 5;
  const ::std::string& ca_certificates() const;
  void set_ca_certificates(const ::std::string& value);
  #if LANG_CXX11
  void set_ca_certificates(::std::string&& value);
  #endif
  void set_ca_certificates(const char* value);
  void set_ca_certificates(const char* value, size_t size);
  ::std::string* mutable_ca_certificates();
  ::std::string* release_ca_certificates();
  void set_allocated_ca_certificates(::std::string* ca_certificates);

  // string credential_name = 10;
  void clear_credential_name();
  static const int kCredentialNameFieldNumber = 10;
  const ::std::string& credential_name() const;
  void set_credential_name(const ::std::string& value);
  #if LANG_CXX11
  void set_credential_name(::std::string&& value);
  #endif
  void set_credential_name(const char* value);
  void set_credential_name(const char* value, size_t size);
  ::std::string* mutable_credential_name();
  ::std::string* release_credential_name();
  void set_allocated_credential_name(::std::string* credential_name);

  // bool https_redirect = 1;
  void clear_https_redirect();
  static const int kHttpsRedirectFieldNumber = 1;
  bool https_redirect() const;
  void set_https_redirect(bool value);

  // .istio.networking.v1alpha3.Server.TLSOptions.TLSmode mode = 2;
  void clear_mode();
  static const int kModeFieldNumber = 2;
  ::istio::networking::v1alpha3::Server_TLSOptions_TLSmode mode() const;
  void set_mode(::istio::networking::v1alpha3::Server_TLSOptions_TLSmode value);

  // .istio.networking.v1alpha3.Server.TLSOptions.TLSProtocol min_protocol_version = 7;
  void clear_min_protocol_version();
  static const int kMinProtocolVersionFieldNumber = 7;
  ::istio::networking::v1alpha3::Server_TLSOptions_TLSProtocol min_protocol_version() const;
  void set_min_protocol_version(::istio::networking::v1alpha3::Server_TLSOptions_TLSProtocol value);

  // .istio.networking.v1alpha3.Server.TLSOptions.TLSProtocol max_protocol_version = 8;
  void clear_max_protocol_version();
  static const int kMaxProtocolVersionFieldNumber = 8;
  ::istio::networking::v1alpha3::Server_TLSOptions_TLSProtocol max_protocol_version() const;
  void set_max_protocol_version(::istio::networking::v1alpha3::Server_TLSOptions_TLSProtocol value);

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.Server.TLSOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> subject_alt_names_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cipher_suites_;
  ::google::protobuf::internal::ArenaStringPtr server_certificate_;
  ::google::protobuf::internal::ArenaStringPtr private_key_;
  ::google::protobuf::internal::ArenaStringPtr ca_certificates_;
  ::google::protobuf::internal::ArenaStringPtr credential_name_;
  bool https_redirect_;
  int mode_;
  int min_protocol_version_;
  int max_protocol_version_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::InitDefaultsServer_TLSOptionsImpl();
};
// -------------------------------------------------------------------

class Server : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.Server) */ {
 public:
  Server();
  virtual ~Server();

  Server(const Server& from);

  inline Server& operator=(const Server& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Server(Server&& from) noexcept
    : Server() {
    *this = ::std::move(from);
  }

  inline Server& operator=(Server&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Server& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Server* internal_default_instance() {
    return reinterpret_cast<const Server*>(
               &_Server_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Server* other);
  friend void swap(Server& a, Server& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Server* New() const PROTOBUF_FINAL { return New(NULL); }

  Server* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Server& from);
  void MergeFrom(const Server& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Server* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Server_TLSOptions TLSOptions;

  // accessors -------------------------------------------------------

  // repeated string hosts = 2;
  int hosts_size() const;
  void clear_hosts();
  static const int kHostsFieldNumber = 2;
  const ::std::string& hosts(int index) const;
  ::std::string* mutable_hosts(int index);
  void set_hosts(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_hosts(int index, ::std::string&& value);
  #endif
  void set_hosts(int index, const char* value);
  void set_hosts(int index, const char* value, size_t size);
  ::std::string* add_hosts();
  void add_hosts(const ::std::string& value);
  #if LANG_CXX11
  void add_hosts(::std::string&& value);
  #endif
  void add_hosts(const char* value);
  void add_hosts(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& hosts() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_hosts();

  // string bind = 4;
  void clear_bind();
  static const int kBindFieldNumber = 4;
  const ::std::string& bind() const;
  void set_bind(const ::std::string& value);
  #if LANG_CXX11
  void set_bind(::std::string&& value);
  #endif
  void set_bind(const char* value);
  void set_bind(const char* value, size_t size);
  ::std::string* mutable_bind();
  ::std::string* release_bind();
  void set_allocated_bind(::std::string* bind);

  // string default_endpoint = 5;
  void clear_default_endpoint();
  static const int kDefaultEndpointFieldNumber = 5;
  const ::std::string& default_endpoint() const;
  void set_default_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_default_endpoint(::std::string&& value);
  #endif
  void set_default_endpoint(const char* value);
  void set_default_endpoint(const char* value, size_t size);
  ::std::string* mutable_default_endpoint();
  ::std::string* release_default_endpoint();
  void set_allocated_default_endpoint(::std::string* default_endpoint);

  // .istio.networking.v1alpha3.Port port = 1;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 1;
  const ::istio::networking::v1alpha3::Port& port() const;
  ::istio::networking::v1alpha3::Port* release_port();
  ::istio::networking::v1alpha3::Port* mutable_port();
  void set_allocated_port(::istio::networking::v1alpha3::Port* port);

  // .istio.networking.v1alpha3.Server.TLSOptions tls = 3;
  bool has_tls() const;
  void clear_tls();
  static const int kTlsFieldNumber = 3;
  const ::istio::networking::v1alpha3::Server_TLSOptions& tls() const;
  ::istio::networking::v1alpha3::Server_TLSOptions* release_tls();
  ::istio::networking::v1alpha3::Server_TLSOptions* mutable_tls();
  void set_allocated_tls(::istio::networking::v1alpha3::Server_TLSOptions* tls);

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.Server)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> hosts_;
  ::google::protobuf::internal::ArenaStringPtr bind_;
  ::google::protobuf::internal::ArenaStringPtr default_endpoint_;
  ::istio::networking::v1alpha3::Port* port_;
  ::istio::networking::v1alpha3::Server_TLSOptions* tls_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::InitDefaultsServerImpl();
};
// -------------------------------------------------------------------

class Port : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.networking.v1alpha3.Port) */ {
 public:
  Port();
  virtual ~Port();

  Port(const Port& from);

  inline Port& operator=(const Port& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Port(Port&& from) noexcept
    : Port() {
    *this = ::std::move(from);
  }

  inline Port& operator=(Port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Port* internal_default_instance() {
    return reinterpret_cast<const Port*>(
               &_Port_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Port* other);
  friend void swap(Port& a, Port& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Port* New() const PROTOBUF_FINAL { return New(NULL); }

  Port* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Port& from);
  void MergeFrom(const Port& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Port* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string protocol = 2;
  void clear_protocol();
  static const int kProtocolFieldNumber = 2;
  const ::std::string& protocol() const;
  void set_protocol(const ::std::string& value);
  #if LANG_CXX11
  void set_protocol(::std::string&& value);
  #endif
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  ::std::string* mutable_protocol();
  ::std::string* release_protocol();
  void set_allocated_protocol(::std::string* protocol);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 number = 1;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  ::google::protobuf::uint32 number() const;
  void set_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.Port)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr protocol_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 number_;
  mutable int _cached_size_;
  friend struct ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::TableStruct;
  friend void ::protobuf_networking_2fv1alpha3_2fgateway_2eproto::InitDefaultsPortImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Gateway

// repeated .istio.networking.v1alpha3.Server servers = 1;
inline int Gateway::servers_size() const {
  return servers_.size();
}
inline void Gateway::clear_servers() {
  servers_.Clear();
}
inline const ::istio::networking::v1alpha3::Server& Gateway::servers(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Gateway.servers)
  return servers_.Get(index);
}
inline ::istio::networking::v1alpha3::Server* Gateway::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.Gateway.servers)
  return servers_.Mutable(index);
}
inline ::istio::networking::v1alpha3::Server* Gateway::add_servers() {
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.Gateway.servers)
  return servers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::Server >*
Gateway::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.Gateway.servers)
  return &servers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::networking::v1alpha3::Server >&
Gateway::servers() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.Gateway.servers)
  return servers_;
}

// map<string, string> selector = 2;
inline int Gateway::selector_size() const {
  return selector_.size();
}
inline void Gateway::clear_selector() {
  selector_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Gateway::selector() const {
  // @@protoc_insertion_point(field_map:istio.networking.v1alpha3.Gateway.selector)
  return selector_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Gateway::mutable_selector() {
  // @@protoc_insertion_point(field_mutable_map:istio.networking.v1alpha3.Gateway.selector)
  return selector_.MutableMap();
}

// -------------------------------------------------------------------

// Server_TLSOptions

// bool https_redirect = 1;
inline void Server_TLSOptions::clear_https_redirect() {
  https_redirect_ = false;
}
inline bool Server_TLSOptions::https_redirect() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Server.TLSOptions.https_redirect)
  return https_redirect_;
}
inline void Server_TLSOptions::set_https_redirect(bool value) {
  
  https_redirect_ = value;
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.Server.TLSOptions.https_redirect)
}

// .istio.networking.v1alpha3.Server.TLSOptions.TLSmode mode = 2;
inline void Server_TLSOptions::clear_mode() {
  mode_ = 0;
}
inline ::istio::networking::v1alpha3::Server_TLSOptions_TLSmode Server_TLSOptions::mode() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Server.TLSOptions.mode)
  return static_cast< ::istio::networking::v1alpha3::Server_TLSOptions_TLSmode >(mode_);
}
inline void Server_TLSOptions::set_mode(::istio::networking::v1alpha3::Server_TLSOptions_TLSmode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.Server.TLSOptions.mode)
}

// string server_certificate = 3;
inline void Server_TLSOptions::clear_server_certificate() {
  server_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Server_TLSOptions::server_certificate() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Server.TLSOptions.server_certificate)
  return server_certificate_.GetNoArena();
}
inline void Server_TLSOptions::set_server_certificate(const ::std::string& value) {
  
  server_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.Server.TLSOptions.server_certificate)
}
#if LANG_CXX11
inline void Server_TLSOptions::set_server_certificate(::std::string&& value) {
  
  server_certificate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.Server.TLSOptions.server_certificate)
}
#endif
inline void Server_TLSOptions::set_server_certificate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.Server.TLSOptions.server_certificate)
}
inline void Server_TLSOptions::set_server_certificate(const char* value, size_t size) {
  
  server_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.Server.TLSOptions.server_certificate)
}
inline ::std::string* Server_TLSOptions::mutable_server_certificate() {
  
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.Server.TLSOptions.server_certificate)
  return server_certificate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Server_TLSOptions::release_server_certificate() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.Server.TLSOptions.server_certificate)
  
  return server_certificate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Server_TLSOptions::set_allocated_server_certificate(::std::string* server_certificate) {
  if (server_certificate != NULL) {
    
  } else {
    
  }
  server_certificate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_certificate);
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.Server.TLSOptions.server_certificate)
}

// string private_key = 4;
inline void Server_TLSOptions::clear_private_key() {
  private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Server_TLSOptions::private_key() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Server.TLSOptions.private_key)
  return private_key_.GetNoArena();
}
inline void Server_TLSOptions::set_private_key(const ::std::string& value) {
  
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.Server.TLSOptions.private_key)
}
#if LANG_CXX11
inline void Server_TLSOptions::set_private_key(::std::string&& value) {
  
  private_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.Server.TLSOptions.private_key)
}
#endif
inline void Server_TLSOptions::set_private_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.Server.TLSOptions.private_key)
}
inline void Server_TLSOptions::set_private_key(const char* value, size_t size) {
  
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.Server.TLSOptions.private_key)
}
inline ::std::string* Server_TLSOptions::mutable_private_key() {
  
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.Server.TLSOptions.private_key)
  return private_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Server_TLSOptions::release_private_key() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.Server.TLSOptions.private_key)
  
  return private_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Server_TLSOptions::set_allocated_private_key(::std::string* private_key) {
  if (private_key != NULL) {
    
  } else {
    
  }
  private_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_key);
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.Server.TLSOptions.private_key)
}

// string ca_certificates = 5;
inline void Server_TLSOptions::clear_ca_certificates() {
  ca_certificates_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Server_TLSOptions::ca_certificates() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Server.TLSOptions.ca_certificates)
  return ca_certificates_.GetNoArena();
}
inline void Server_TLSOptions::set_ca_certificates(const ::std::string& value) {
  
  ca_certificates_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.Server.TLSOptions.ca_certificates)
}
#if LANG_CXX11
inline void Server_TLSOptions::set_ca_certificates(::std::string&& value) {
  
  ca_certificates_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.Server.TLSOptions.ca_certificates)
}
#endif
inline void Server_TLSOptions::set_ca_certificates(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ca_certificates_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.Server.TLSOptions.ca_certificates)
}
inline void Server_TLSOptions::set_ca_certificates(const char* value, size_t size) {
  
  ca_certificates_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.Server.TLSOptions.ca_certificates)
}
inline ::std::string* Server_TLSOptions::mutable_ca_certificates() {
  
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.Server.TLSOptions.ca_certificates)
  return ca_certificates_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Server_TLSOptions::release_ca_certificates() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.Server.TLSOptions.ca_certificates)
  
  return ca_certificates_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Server_TLSOptions::set_allocated_ca_certificates(::std::string* ca_certificates) {
  if (ca_certificates != NULL) {
    
  } else {
    
  }
  ca_certificates_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ca_certificates);
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.Server.TLSOptions.ca_certificates)
}

// string credential_name = 10;
inline void Server_TLSOptions::clear_credential_name() {
  credential_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Server_TLSOptions::credential_name() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Server.TLSOptions.credential_name)
  return credential_name_.GetNoArena();
}
inline void Server_TLSOptions::set_credential_name(const ::std::string& value) {
  
  credential_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.Server.TLSOptions.credential_name)
}
#if LANG_CXX11
inline void Server_TLSOptions::set_credential_name(::std::string&& value) {
  
  credential_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.Server.TLSOptions.credential_name)
}
#endif
inline void Server_TLSOptions::set_credential_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  credential_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.Server.TLSOptions.credential_name)
}
inline void Server_TLSOptions::set_credential_name(const char* value, size_t size) {
  
  credential_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.Server.TLSOptions.credential_name)
}
inline ::std::string* Server_TLSOptions::mutable_credential_name() {
  
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.Server.TLSOptions.credential_name)
  return credential_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Server_TLSOptions::release_credential_name() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.Server.TLSOptions.credential_name)
  
  return credential_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Server_TLSOptions::set_allocated_credential_name(::std::string* credential_name) {
  if (credential_name != NULL) {
    
  } else {
    
  }
  credential_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), credential_name);
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.Server.TLSOptions.credential_name)
}

// repeated string subject_alt_names = 6;
inline int Server_TLSOptions::subject_alt_names_size() const {
  return subject_alt_names_.size();
}
inline void Server_TLSOptions::clear_subject_alt_names() {
  subject_alt_names_.Clear();
}
inline const ::std::string& Server_TLSOptions::subject_alt_names(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Server.TLSOptions.subject_alt_names)
  return subject_alt_names_.Get(index);
}
inline ::std::string* Server_TLSOptions::mutable_subject_alt_names(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.Server.TLSOptions.subject_alt_names)
  return subject_alt_names_.Mutable(index);
}
inline void Server_TLSOptions::set_subject_alt_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.Server.TLSOptions.subject_alt_names)
  subject_alt_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Server_TLSOptions::set_subject_alt_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.Server.TLSOptions.subject_alt_names)
  subject_alt_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Server_TLSOptions::set_subject_alt_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  subject_alt_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.Server.TLSOptions.subject_alt_names)
}
inline void Server_TLSOptions::set_subject_alt_names(int index, const char* value, size_t size) {
  subject_alt_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.Server.TLSOptions.subject_alt_names)
}
inline ::std::string* Server_TLSOptions::add_subject_alt_names() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.Server.TLSOptions.subject_alt_names)
  return subject_alt_names_.Add();
}
inline void Server_TLSOptions::add_subject_alt_names(const ::std::string& value) {
  subject_alt_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.Server.TLSOptions.subject_alt_names)
}
#if LANG_CXX11
inline void Server_TLSOptions::add_subject_alt_names(::std::string&& value) {
  subject_alt_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.Server.TLSOptions.subject_alt_names)
}
#endif
inline void Server_TLSOptions::add_subject_alt_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  subject_alt_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.Server.TLSOptions.subject_alt_names)
}
inline void Server_TLSOptions::add_subject_alt_names(const char* value, size_t size) {
  subject_alt_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.Server.TLSOptions.subject_alt_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Server_TLSOptions::subject_alt_names() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.Server.TLSOptions.subject_alt_names)
  return subject_alt_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Server_TLSOptions::mutable_subject_alt_names() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.Server.TLSOptions.subject_alt_names)
  return &subject_alt_names_;
}

// .istio.networking.v1alpha3.Server.TLSOptions.TLSProtocol min_protocol_version = 7;
inline void Server_TLSOptions::clear_min_protocol_version() {
  min_protocol_version_ = 0;
}
inline ::istio::networking::v1alpha3::Server_TLSOptions_TLSProtocol Server_TLSOptions::min_protocol_version() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Server.TLSOptions.min_protocol_version)
  return static_cast< ::istio::networking::v1alpha3::Server_TLSOptions_TLSProtocol >(min_protocol_version_);
}
inline void Server_TLSOptions::set_min_protocol_version(::istio::networking::v1alpha3::Server_TLSOptions_TLSProtocol value) {
  
  min_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.Server.TLSOptions.min_protocol_version)
}

// .istio.networking.v1alpha3.Server.TLSOptions.TLSProtocol max_protocol_version = 8;
inline void Server_TLSOptions::clear_max_protocol_version() {
  max_protocol_version_ = 0;
}
inline ::istio::networking::v1alpha3::Server_TLSOptions_TLSProtocol Server_TLSOptions::max_protocol_version() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Server.TLSOptions.max_protocol_version)
  return static_cast< ::istio::networking::v1alpha3::Server_TLSOptions_TLSProtocol >(max_protocol_version_);
}
inline void Server_TLSOptions::set_max_protocol_version(::istio::networking::v1alpha3::Server_TLSOptions_TLSProtocol value) {
  
  max_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.Server.TLSOptions.max_protocol_version)
}

// repeated string cipher_suites = 9;
inline int Server_TLSOptions::cipher_suites_size() const {
  return cipher_suites_.size();
}
inline void Server_TLSOptions::clear_cipher_suites() {
  cipher_suites_.Clear();
}
inline const ::std::string& Server_TLSOptions::cipher_suites(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Server.TLSOptions.cipher_suites)
  return cipher_suites_.Get(index);
}
inline ::std::string* Server_TLSOptions::mutable_cipher_suites(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.Server.TLSOptions.cipher_suites)
  return cipher_suites_.Mutable(index);
}
inline void Server_TLSOptions::set_cipher_suites(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.Server.TLSOptions.cipher_suites)
  cipher_suites_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Server_TLSOptions::set_cipher_suites(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.Server.TLSOptions.cipher_suites)
  cipher_suites_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Server_TLSOptions::set_cipher_suites(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  cipher_suites_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.Server.TLSOptions.cipher_suites)
}
inline void Server_TLSOptions::set_cipher_suites(int index, const char* value, size_t size) {
  cipher_suites_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.Server.TLSOptions.cipher_suites)
}
inline ::std::string* Server_TLSOptions::add_cipher_suites() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.Server.TLSOptions.cipher_suites)
  return cipher_suites_.Add();
}
inline void Server_TLSOptions::add_cipher_suites(const ::std::string& value) {
  cipher_suites_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.Server.TLSOptions.cipher_suites)
}
#if LANG_CXX11
inline void Server_TLSOptions::add_cipher_suites(::std::string&& value) {
  cipher_suites_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.Server.TLSOptions.cipher_suites)
}
#endif
inline void Server_TLSOptions::add_cipher_suites(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  cipher_suites_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.Server.TLSOptions.cipher_suites)
}
inline void Server_TLSOptions::add_cipher_suites(const char* value, size_t size) {
  cipher_suites_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.Server.TLSOptions.cipher_suites)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Server_TLSOptions::cipher_suites() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.Server.TLSOptions.cipher_suites)
  return cipher_suites_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Server_TLSOptions::mutable_cipher_suites() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.Server.TLSOptions.cipher_suites)
  return &cipher_suites_;
}

// -------------------------------------------------------------------

// Server

// .istio.networking.v1alpha3.Port port = 1;
inline bool Server::has_port() const {
  return this != internal_default_instance() && port_ != NULL;
}
inline void Server::clear_port() {
  if (GetArenaNoVirtual() == NULL && port_ != NULL) {
    delete port_;
  }
  port_ = NULL;
}
inline const ::istio::networking::v1alpha3::Port& Server::port() const {
  const ::istio::networking::v1alpha3::Port* p = port_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Server.port)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::networking::v1alpha3::Port*>(
      &::istio::networking::v1alpha3::_Port_default_instance_);
}
inline ::istio::networking::v1alpha3::Port* Server::release_port() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.Server.port)
  
  ::istio::networking::v1alpha3::Port* temp = port_;
  port_ = NULL;
  return temp;
}
inline ::istio::networking::v1alpha3::Port* Server::mutable_port() {
  
  if (port_ == NULL) {
    port_ = new ::istio::networking::v1alpha3::Port;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.Server.port)
  return port_;
}
inline void Server::set_allocated_port(::istio::networking::v1alpha3::Port* port) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete port_;
  }
  if (port) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      port = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, port, submessage_arena);
    }
    
  } else {
    
  }
  port_ = port;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.Server.port)
}

// string bind = 4;
inline void Server::clear_bind() {
  bind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Server::bind() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Server.bind)
  return bind_.GetNoArena();
}
inline void Server::set_bind(const ::std::string& value) {
  
  bind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.Server.bind)
}
#if LANG_CXX11
inline void Server::set_bind(::std::string&& value) {
  
  bind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.Server.bind)
}
#endif
inline void Server::set_bind(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.Server.bind)
}
inline void Server::set_bind(const char* value, size_t size) {
  
  bind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.Server.bind)
}
inline ::std::string* Server::mutable_bind() {
  
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.Server.bind)
  return bind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Server::release_bind() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.Server.bind)
  
  return bind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Server::set_allocated_bind(::std::string* bind) {
  if (bind != NULL) {
    
  } else {
    
  }
  bind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bind);
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.Server.bind)
}

// repeated string hosts = 2;
inline int Server::hosts_size() const {
  return hosts_.size();
}
inline void Server::clear_hosts() {
  hosts_.Clear();
}
inline const ::std::string& Server::hosts(int index) const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Server.hosts)
  return hosts_.Get(index);
}
inline ::std::string* Server::mutable_hosts(int index) {
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.Server.hosts)
  return hosts_.Mutable(index);
}
inline void Server::set_hosts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.Server.hosts)
  hosts_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Server::set_hosts(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.Server.hosts)
  hosts_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Server::set_hosts(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hosts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.Server.hosts)
}
inline void Server::set_hosts(int index, const char* value, size_t size) {
  hosts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.Server.hosts)
}
inline ::std::string* Server::add_hosts() {
  // @@protoc_insertion_point(field_add_mutable:istio.networking.v1alpha3.Server.hosts)
  return hosts_.Add();
}
inline void Server::add_hosts(const ::std::string& value) {
  hosts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.Server.hosts)
}
#if LANG_CXX11
inline void Server::add_hosts(::std::string&& value) {
  hosts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.networking.v1alpha3.Server.hosts)
}
#endif
inline void Server::add_hosts(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hosts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.networking.v1alpha3.Server.hosts)
}
inline void Server::add_hosts(const char* value, size_t size) {
  hosts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.networking.v1alpha3.Server.hosts)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Server::hosts() const {
  // @@protoc_insertion_point(field_list:istio.networking.v1alpha3.Server.hosts)
  return hosts_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Server::mutable_hosts() {
  // @@protoc_insertion_point(field_mutable_list:istio.networking.v1alpha3.Server.hosts)
  return &hosts_;
}

// .istio.networking.v1alpha3.Server.TLSOptions tls = 3;
inline bool Server::has_tls() const {
  return this != internal_default_instance() && tls_ != NULL;
}
inline void Server::clear_tls() {
  if (GetArenaNoVirtual() == NULL && tls_ != NULL) {
    delete tls_;
  }
  tls_ = NULL;
}
inline const ::istio::networking::v1alpha3::Server_TLSOptions& Server::tls() const {
  const ::istio::networking::v1alpha3::Server_TLSOptions* p = tls_;
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Server.tls)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::networking::v1alpha3::Server_TLSOptions*>(
      &::istio::networking::v1alpha3::_Server_TLSOptions_default_instance_);
}
inline ::istio::networking::v1alpha3::Server_TLSOptions* Server::release_tls() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.Server.tls)
  
  ::istio::networking::v1alpha3::Server_TLSOptions* temp = tls_;
  tls_ = NULL;
  return temp;
}
inline ::istio::networking::v1alpha3::Server_TLSOptions* Server::mutable_tls() {
  
  if (tls_ == NULL) {
    tls_ = new ::istio::networking::v1alpha3::Server_TLSOptions;
  }
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.Server.tls)
  return tls_;
}
inline void Server::set_allocated_tls(::istio::networking::v1alpha3::Server_TLSOptions* tls) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tls_;
  }
  if (tls) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tls = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tls, submessage_arena);
    }
    
  } else {
    
  }
  tls_ = tls;
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.Server.tls)
}

// string default_endpoint = 5;
inline void Server::clear_default_endpoint() {
  default_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Server::default_endpoint() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Server.default_endpoint)
  return default_endpoint_.GetNoArena();
}
inline void Server::set_default_endpoint(const ::std::string& value) {
  
  default_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.Server.default_endpoint)
}
#if LANG_CXX11
inline void Server::set_default_endpoint(::std::string&& value) {
  
  default_endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.Server.default_endpoint)
}
#endif
inline void Server::set_default_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  default_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.Server.default_endpoint)
}
inline void Server::set_default_endpoint(const char* value, size_t size) {
  
  default_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.Server.default_endpoint)
}
inline ::std::string* Server::mutable_default_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.Server.default_endpoint)
  return default_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Server::release_default_endpoint() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.Server.default_endpoint)
  
  return default_endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Server::set_allocated_default_endpoint(::std::string* default_endpoint) {
  if (default_endpoint != NULL) {
    
  } else {
    
  }
  default_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_endpoint);
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.Server.default_endpoint)
}

// -------------------------------------------------------------------

// Port

// uint32 number = 1;
inline void Port::clear_number() {
  number_ = 0u;
}
inline ::google::protobuf::uint32 Port::number() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Port.number)
  return number_;
}
inline void Port::set_number(::google::protobuf::uint32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.Port.number)
}

// string protocol = 2;
inline void Port::clear_protocol() {
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Port::protocol() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Port.protocol)
  return protocol_.GetNoArena();
}
inline void Port::set_protocol(const ::std::string& value) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.Port.protocol)
}
#if LANG_CXX11
inline void Port::set_protocol(::std::string&& value) {
  
  protocol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.Port.protocol)
}
#endif
inline void Port::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.Port.protocol)
}
inline void Port::set_protocol(const char* value, size_t size) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.Port.protocol)
}
inline ::std::string* Port::mutable_protocol() {
  
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.Port.protocol)
  return protocol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Port::release_protocol() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.Port.protocol)
  
  return protocol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Port::set_allocated_protocol(::std::string* protocol) {
  if (protocol != NULL) {
    
  } else {
    
  }
  protocol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol);
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.Port.protocol)
}

// string name = 3;
inline void Port::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Port::name() const {
  // @@protoc_insertion_point(field_get:istio.networking.v1alpha3.Port.name)
  return name_.GetNoArena();
}
inline void Port::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.networking.v1alpha3.Port.name)
}
#if LANG_CXX11
inline void Port::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.networking.v1alpha3.Port.name)
}
#endif
inline void Port::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.networking.v1alpha3.Port.name)
}
inline void Port::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.networking.v1alpha3.Port.name)
}
inline ::std::string* Port::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:istio.networking.v1alpha3.Port.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Port::release_name() {
  // @@protoc_insertion_point(field_release:istio.networking.v1alpha3.Port.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Port::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:istio.networking.v1alpha3.Port.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha3
}  // namespace networking
}  // namespace istio

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::istio::networking::v1alpha3::Server_TLSOptions_TLSmode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::istio::networking::v1alpha3::Server_TLSOptions_TLSmode>() {
  return ::istio::networking::v1alpha3::Server_TLSOptions_TLSmode_descriptor();
}
template <> struct is_proto_enum< ::istio::networking::v1alpha3::Server_TLSOptions_TLSProtocol> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::istio::networking::v1alpha3::Server_TLSOptions_TLSProtocol>() {
  return ::istio::networking::v1alpha3::Server_TLSOptions_TLSProtocol_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_networking_2fv1alpha3_2fgateway_2eproto__INCLUDED
