// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: policy/v1beta1/type.proto

#ifndef PROTOBUF_policy_2fv1beta1_2ftype_2eproto__INCLUDED
#define PROTOBUF_policy_2fv1beta1_2ftype_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_policy_2fv1beta1_2ftype_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsValueImpl();
void InitDefaultsValue();
void InitDefaultsIPAddressImpl();
void InitDefaultsIPAddress();
void InitDefaultsDurationImpl();
void InitDefaultsDuration();
void InitDefaultsTimeStampImpl();
void InitDefaultsTimeStamp();
void InitDefaultsDNSNameImpl();
void InitDefaultsDNSName();
void InitDefaultsEmailAddressImpl();
void InitDefaultsEmailAddress();
void InitDefaultsUriImpl();
void InitDefaultsUri();
inline void InitDefaults() {
  InitDefaultsValue();
  InitDefaultsIPAddress();
  InitDefaultsDuration();
  InitDefaultsTimeStamp();
  InitDefaultsDNSName();
  InitDefaultsEmailAddress();
  InitDefaultsUri();
}
}  // namespace protobuf_policy_2fv1beta1_2ftype_2eproto
namespace istio {
namespace policy {
namespace v1beta1 {
class DNSName;
class DNSNameDefaultTypeInternal;
extern DNSNameDefaultTypeInternal _DNSName_default_instance_;
class Duration;
class DurationDefaultTypeInternal;
extern DurationDefaultTypeInternal _Duration_default_instance_;
class EmailAddress;
class EmailAddressDefaultTypeInternal;
extern EmailAddressDefaultTypeInternal _EmailAddress_default_instance_;
class IPAddress;
class IPAddressDefaultTypeInternal;
extern IPAddressDefaultTypeInternal _IPAddress_default_instance_;
class TimeStamp;
class TimeStampDefaultTypeInternal;
extern TimeStampDefaultTypeInternal _TimeStamp_default_instance_;
class Uri;
class UriDefaultTypeInternal;
extern UriDefaultTypeInternal _Uri_default_instance_;
class Value;
class ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
}  // namespace v1beta1
}  // namespace policy
}  // namespace istio
namespace istio {
namespace policy {
namespace v1beta1 {

// ===================================================================

class Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.policy.v1beta1.Value) */ {
 public:
  Value();
  virtual ~Value();

  Value(const Value& from);

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Value& default_instance();

  enum ValueCase {
    kStringValue = 1,
    kInt64Value = 2,
    kDoubleValue = 3,
    kBoolValue = 4,
    kIpAddressValue = 5,
    kTimestampValue = 6,
    kDurationValue = 7,
    kEmailAddressValue = 8,
    kDnsNameValue = 9,
    kUriValue = 10,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Value* other);
  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Value* New() const PROTOBUF_FINAL { return New(NULL); }

  Value* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string string_value = 1;
  private:
  bool has_string_value() const;
  public:
  void clear_string_value();
  static const int kStringValueFieldNumber = 1;
  const ::std::string& string_value() const;
  void set_string_value(const ::std::string& value);
  #if LANG_CXX11
  void set_string_value(::std::string&& value);
  #endif
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  ::std::string* mutable_string_value();
  ::std::string* release_string_value();
  void set_allocated_string_value(::std::string* string_value);

  // int64 int64_value = 2;
  private:
  bool has_int64_value() const;
  public:
  void clear_int64_value();
  static const int kInt64ValueFieldNumber = 2;
  ::google::protobuf::int64 int64_value() const;
  void set_int64_value(::google::protobuf::int64 value);

  // double double_value = 3;
  private:
  bool has_double_value() const;
  public:
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 3;
  double double_value() const;
  void set_double_value(double value);

  // bool bool_value = 4;
  private:
  bool has_bool_value() const;
  public:
  void clear_bool_value();
  static const int kBoolValueFieldNumber = 4;
  bool bool_value() const;
  void set_bool_value(bool value);

  // .istio.policy.v1beta1.IPAddress ip_address_value = 5;
  bool has_ip_address_value() const;
  void clear_ip_address_value();
  static const int kIpAddressValueFieldNumber = 5;
  const ::istio::policy::v1beta1::IPAddress& ip_address_value() const;
  ::istio::policy::v1beta1::IPAddress* release_ip_address_value();
  ::istio::policy::v1beta1::IPAddress* mutable_ip_address_value();
  void set_allocated_ip_address_value(::istio::policy::v1beta1::IPAddress* ip_address_value);

  // .istio.policy.v1beta1.TimeStamp timestamp_value = 6;
  bool has_timestamp_value() const;
  void clear_timestamp_value();
  static const int kTimestampValueFieldNumber = 6;
  const ::istio::policy::v1beta1::TimeStamp& timestamp_value() const;
  ::istio::policy::v1beta1::TimeStamp* release_timestamp_value();
  ::istio::policy::v1beta1::TimeStamp* mutable_timestamp_value();
  void set_allocated_timestamp_value(::istio::policy::v1beta1::TimeStamp* timestamp_value);

  // .istio.policy.v1beta1.Duration duration_value = 7;
  bool has_duration_value() const;
  void clear_duration_value();
  static const int kDurationValueFieldNumber = 7;
  const ::istio::policy::v1beta1::Duration& duration_value() const;
  ::istio::policy::v1beta1::Duration* release_duration_value();
  ::istio::policy::v1beta1::Duration* mutable_duration_value();
  void set_allocated_duration_value(::istio::policy::v1beta1::Duration* duration_value);

  // .istio.policy.v1beta1.EmailAddress email_address_value = 8;
  bool has_email_address_value() const;
  void clear_email_address_value();
  static const int kEmailAddressValueFieldNumber = 8;
  const ::istio::policy::v1beta1::EmailAddress& email_address_value() const;
  ::istio::policy::v1beta1::EmailAddress* release_email_address_value();
  ::istio::policy::v1beta1::EmailAddress* mutable_email_address_value();
  void set_allocated_email_address_value(::istio::policy::v1beta1::EmailAddress* email_address_value);

  // .istio.policy.v1beta1.DNSName dns_name_value = 9;
  bool has_dns_name_value() const;
  void clear_dns_name_value();
  static const int kDnsNameValueFieldNumber = 9;
  const ::istio::policy::v1beta1::DNSName& dns_name_value() const;
  ::istio::policy::v1beta1::DNSName* release_dns_name_value();
  ::istio::policy::v1beta1::DNSName* mutable_dns_name_value();
  void set_allocated_dns_name_value(::istio::policy::v1beta1::DNSName* dns_name_value);

  // .istio.policy.v1beta1.Uri uri_value = 10;
  bool has_uri_value() const;
  void clear_uri_value();
  static const int kUriValueFieldNumber = 10;
  const ::istio::policy::v1beta1::Uri& uri_value() const;
  ::istio::policy::v1beta1::Uri* release_uri_value();
  ::istio::policy::v1beta1::Uri* mutable_uri_value();
  void set_allocated_uri_value(::istio::policy::v1beta1::Uri* uri_value);

  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:istio.policy.v1beta1.Value)
 private:
  void set_has_string_value();
  void set_has_int64_value();
  void set_has_double_value();
  void set_has_bool_value();
  void set_has_ip_address_value();
  void set_has_timestamp_value();
  void set_has_duration_value();
  void set_has_email_address_value();
  void set_has_dns_name_value();
  void set_has_uri_value();

  inline bool has_value() const;
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::protobuf::internal::ArenaStringPtr string_value_;
    ::google::protobuf::int64 int64_value_;
    double double_value_;
    bool bool_value_;
    ::istio::policy::v1beta1::IPAddress* ip_address_value_;
    ::istio::policy::v1beta1::TimeStamp* timestamp_value_;
    ::istio::policy::v1beta1::Duration* duration_value_;
    ::istio::policy::v1beta1::EmailAddress* email_address_value_;
    ::istio::policy::v1beta1::DNSName* dns_name_value_;
    ::istio::policy::v1beta1::Uri* uri_value_;
  } value_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_policy_2fv1beta1_2ftype_2eproto::TableStruct;
  friend void ::protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsValueImpl();
};
// -------------------------------------------------------------------

class IPAddress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.policy.v1beta1.IPAddress) */ {
 public:
  IPAddress();
  virtual ~IPAddress();

  IPAddress(const IPAddress& from);

  inline IPAddress& operator=(const IPAddress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IPAddress(IPAddress&& from) noexcept
    : IPAddress() {
    *this = ::std::move(from);
  }

  inline IPAddress& operator=(IPAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IPAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IPAddress* internal_default_instance() {
    return reinterpret_cast<const IPAddress*>(
               &_IPAddress_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(IPAddress* other);
  friend void swap(IPAddress& a, IPAddress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IPAddress* New() const PROTOBUF_FINAL { return New(NULL); }

  IPAddress* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IPAddress& from);
  void MergeFrom(const IPAddress& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IPAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:istio.policy.v1beta1.IPAddress)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct ::protobuf_policy_2fv1beta1_2ftype_2eproto::TableStruct;
  friend void ::protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsIPAddressImpl();
};
// -------------------------------------------------------------------

class Duration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.policy.v1beta1.Duration) */ {
 public:
  Duration();
  virtual ~Duration();

  Duration(const Duration& from);

  inline Duration& operator=(const Duration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Duration(Duration&& from) noexcept
    : Duration() {
    *this = ::std::move(from);
  }

  inline Duration& operator=(Duration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Duration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Duration* internal_default_instance() {
    return reinterpret_cast<const Duration*>(
               &_Duration_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Duration* other);
  friend void swap(Duration& a, Duration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Duration* New() const PROTOBUF_FINAL { return New(NULL); }

  Duration* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Duration& from);
  void MergeFrom(const Duration& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Duration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Duration value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::google::protobuf::Duration& value() const;
  ::google::protobuf::Duration* release_value();
  ::google::protobuf::Duration* mutable_value();
  void set_allocated_value(::google::protobuf::Duration* value);

  // @@protoc_insertion_point(class_scope:istio.policy.v1beta1.Duration)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Duration* value_;
  mutable int _cached_size_;
  friend struct ::protobuf_policy_2fv1beta1_2ftype_2eproto::TableStruct;
  friend void ::protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsDurationImpl();
};
// -------------------------------------------------------------------

class TimeStamp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.policy.v1beta1.TimeStamp) */ {
 public:
  TimeStamp();
  virtual ~TimeStamp();

  TimeStamp(const TimeStamp& from);

  inline TimeStamp& operator=(const TimeStamp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimeStamp(TimeStamp&& from) noexcept
    : TimeStamp() {
    *this = ::std::move(from);
  }

  inline TimeStamp& operator=(TimeStamp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeStamp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeStamp* internal_default_instance() {
    return reinterpret_cast<const TimeStamp*>(
               &_TimeStamp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(TimeStamp* other);
  friend void swap(TimeStamp& a, TimeStamp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeStamp* New() const PROTOBUF_FINAL { return New(NULL); }

  TimeStamp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TimeStamp& from);
  void MergeFrom(const TimeStamp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TimeStamp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Timestamp value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::google::protobuf::Timestamp& value() const;
  ::google::protobuf::Timestamp* release_value();
  ::google::protobuf::Timestamp* mutable_value();
  void set_allocated_value(::google::protobuf::Timestamp* value);

  // @@protoc_insertion_point(class_scope:istio.policy.v1beta1.TimeStamp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Timestamp* value_;
  mutable int _cached_size_;
  friend struct ::protobuf_policy_2fv1beta1_2ftype_2eproto::TableStruct;
  friend void ::protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsTimeStampImpl();
};
// -------------------------------------------------------------------

class DNSName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.policy.v1beta1.DNSName) */ {
 public:
  DNSName();
  virtual ~DNSName();

  DNSName(const DNSName& from);

  inline DNSName& operator=(const DNSName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DNSName(DNSName&& from) noexcept
    : DNSName() {
    *this = ::std::move(from);
  }

  inline DNSName& operator=(DNSName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DNSName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DNSName* internal_default_instance() {
    return reinterpret_cast<const DNSName*>(
               &_DNSName_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DNSName* other);
  friend void swap(DNSName& a, DNSName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DNSName* New() const PROTOBUF_FINAL { return New(NULL); }

  DNSName* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DNSName& from);
  void MergeFrom(const DNSName& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DNSName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:istio.policy.v1beta1.DNSName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct ::protobuf_policy_2fv1beta1_2ftype_2eproto::TableStruct;
  friend void ::protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsDNSNameImpl();
};
// -------------------------------------------------------------------

class EmailAddress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.policy.v1beta1.EmailAddress) */ {
 public:
  EmailAddress();
  virtual ~EmailAddress();

  EmailAddress(const EmailAddress& from);

  inline EmailAddress& operator=(const EmailAddress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmailAddress(EmailAddress&& from) noexcept
    : EmailAddress() {
    *this = ::std::move(from);
  }

  inline EmailAddress& operator=(EmailAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmailAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmailAddress* internal_default_instance() {
    return reinterpret_cast<const EmailAddress*>(
               &_EmailAddress_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(EmailAddress* other);
  friend void swap(EmailAddress& a, EmailAddress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmailAddress* New() const PROTOBUF_FINAL { return New(NULL); }

  EmailAddress* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EmailAddress& from);
  void MergeFrom(const EmailAddress& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EmailAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:istio.policy.v1beta1.EmailAddress)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct ::protobuf_policy_2fv1beta1_2ftype_2eproto::TableStruct;
  friend void ::protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsEmailAddressImpl();
};
// -------------------------------------------------------------------

class Uri : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.policy.v1beta1.Uri) */ {
 public:
  Uri();
  virtual ~Uri();

  Uri(const Uri& from);

  inline Uri& operator=(const Uri& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Uri(Uri&& from) noexcept
    : Uri() {
    *this = ::std::move(from);
  }

  inline Uri& operator=(Uri&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Uri& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Uri* internal_default_instance() {
    return reinterpret_cast<const Uri*>(
               &_Uri_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Uri* other);
  friend void swap(Uri& a, Uri& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Uri* New() const PROTOBUF_FINAL { return New(NULL); }

  Uri* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Uri& from);
  void MergeFrom(const Uri& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Uri* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:istio.policy.v1beta1.Uri)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct ::protobuf_policy_2fv1beta1_2ftype_2eproto::TableStruct;
  friend void ::protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsUriImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Value

// string string_value = 1;
inline bool Value::has_string_value() const {
  return value_case() == kStringValue;
}
inline void Value::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void Value::clear_string_value() {
  if (has_string_value()) {
    value_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& Value::string_value() const {
  // @@protoc_insertion_point(field_get:istio.policy.v1beta1.Value.string_value)
  if (has_string_value()) {
    return value_.string_value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Value::set_string_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.policy.v1beta1.Value.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.policy.v1beta1.Value.string_value)
}
#if LANG_CXX11
inline void Value::set_string_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.policy.v1beta1.Value.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.policy.v1beta1.Value.string_value)
}
#endif
inline void Value::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.policy.v1beta1.Value.string_value)
}
inline void Value::set_string_value(const char* value, size_t size) {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.policy.v1beta1.Value.string_value)
}
inline ::std::string* Value::mutable_string_value() {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:istio.policy.v1beta1.Value.string_value)
  return value_.string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Value::release_string_value() {
  // @@protoc_insertion_point(field_release:istio.policy.v1beta1.Value.string_value)
  if (has_string_value()) {
    clear_has_value();
    return value_.string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Value::set_allocated_string_value(::std::string* string_value) {
  if (!has_string_value()) {
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (string_value != NULL) {
    set_has_string_value();
    value_.string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:istio.policy.v1beta1.Value.string_value)
}

// int64 int64_value = 2;
inline bool Value::has_int64_value() const {
  return value_case() == kInt64Value;
}
inline void Value::set_has_int64_value() {
  _oneof_case_[0] = kInt64Value;
}
inline void Value::clear_int64_value() {
  if (has_int64_value()) {
    value_.int64_value_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::int64 Value::int64_value() const {
  // @@protoc_insertion_point(field_get:istio.policy.v1beta1.Value.int64_value)
  if (has_int64_value()) {
    return value_.int64_value_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void Value::set_int64_value(::google::protobuf::int64 value) {
  if (!has_int64_value()) {
    clear_value();
    set_has_int64_value();
  }
  value_.int64_value_ = value;
  // @@protoc_insertion_point(field_set:istio.policy.v1beta1.Value.int64_value)
}

// double double_value = 3;
inline bool Value::has_double_value() const {
  return value_case() == kDoubleValue;
}
inline void Value::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void Value::clear_double_value() {
  if (has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double Value::double_value() const {
  // @@protoc_insertion_point(field_get:istio.policy.v1beta1.Value.double_value)
  if (has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
inline void Value::set_double_value(double value) {
  if (!has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
  // @@protoc_insertion_point(field_set:istio.policy.v1beta1.Value.double_value)
}

// bool bool_value = 4;
inline bool Value::has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void Value::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void Value::clear_bool_value() {
  if (has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool Value::bool_value() const {
  // @@protoc_insertion_point(field_get:istio.policy.v1beta1.Value.bool_value)
  if (has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
inline void Value::set_bool_value(bool value) {
  if (!has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:istio.policy.v1beta1.Value.bool_value)
}

// .istio.policy.v1beta1.IPAddress ip_address_value = 5;
inline bool Value::has_ip_address_value() const {
  return value_case() == kIpAddressValue;
}
inline void Value::set_has_ip_address_value() {
  _oneof_case_[0] = kIpAddressValue;
}
inline void Value::clear_ip_address_value() {
  if (has_ip_address_value()) {
    delete value_.ip_address_value_;
    clear_has_value();
  }
}
inline ::istio::policy::v1beta1::IPAddress* Value::release_ip_address_value() {
  // @@protoc_insertion_point(field_release:istio.policy.v1beta1.Value.ip_address_value)
  if (has_ip_address_value()) {
    clear_has_value();
      ::istio::policy::v1beta1::IPAddress* temp = value_.ip_address_value_;
    value_.ip_address_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::istio::policy::v1beta1::IPAddress& Value::ip_address_value() const {
  // @@protoc_insertion_point(field_get:istio.policy.v1beta1.Value.ip_address_value)
  return has_ip_address_value()
      ? *value_.ip_address_value_
      : *reinterpret_cast< ::istio::policy::v1beta1::IPAddress*>(&::istio::policy::v1beta1::_IPAddress_default_instance_);
}
inline ::istio::policy::v1beta1::IPAddress* Value::mutable_ip_address_value() {
  if (!has_ip_address_value()) {
    clear_value();
    set_has_ip_address_value();
    value_.ip_address_value_ = new ::istio::policy::v1beta1::IPAddress;
  }
  // @@protoc_insertion_point(field_mutable:istio.policy.v1beta1.Value.ip_address_value)
  return value_.ip_address_value_;
}

// .istio.policy.v1beta1.TimeStamp timestamp_value = 6;
inline bool Value::has_timestamp_value() const {
  return value_case() == kTimestampValue;
}
inline void Value::set_has_timestamp_value() {
  _oneof_case_[0] = kTimestampValue;
}
inline void Value::clear_timestamp_value() {
  if (has_timestamp_value()) {
    delete value_.timestamp_value_;
    clear_has_value();
  }
}
inline ::istio::policy::v1beta1::TimeStamp* Value::release_timestamp_value() {
  // @@protoc_insertion_point(field_release:istio.policy.v1beta1.Value.timestamp_value)
  if (has_timestamp_value()) {
    clear_has_value();
      ::istio::policy::v1beta1::TimeStamp* temp = value_.timestamp_value_;
    value_.timestamp_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::istio::policy::v1beta1::TimeStamp& Value::timestamp_value() const {
  // @@protoc_insertion_point(field_get:istio.policy.v1beta1.Value.timestamp_value)
  return has_timestamp_value()
      ? *value_.timestamp_value_
      : *reinterpret_cast< ::istio::policy::v1beta1::TimeStamp*>(&::istio::policy::v1beta1::_TimeStamp_default_instance_);
}
inline ::istio::policy::v1beta1::TimeStamp* Value::mutable_timestamp_value() {
  if (!has_timestamp_value()) {
    clear_value();
    set_has_timestamp_value();
    value_.timestamp_value_ = new ::istio::policy::v1beta1::TimeStamp;
  }
  // @@protoc_insertion_point(field_mutable:istio.policy.v1beta1.Value.timestamp_value)
  return value_.timestamp_value_;
}

// .istio.policy.v1beta1.Duration duration_value = 7;
inline bool Value::has_duration_value() const {
  return value_case() == kDurationValue;
}
inline void Value::set_has_duration_value() {
  _oneof_case_[0] = kDurationValue;
}
inline void Value::clear_duration_value() {
  if (has_duration_value()) {
    delete value_.duration_value_;
    clear_has_value();
  }
}
inline ::istio::policy::v1beta1::Duration* Value::release_duration_value() {
  // @@protoc_insertion_point(field_release:istio.policy.v1beta1.Value.duration_value)
  if (has_duration_value()) {
    clear_has_value();
      ::istio::policy::v1beta1::Duration* temp = value_.duration_value_;
    value_.duration_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::istio::policy::v1beta1::Duration& Value::duration_value() const {
  // @@protoc_insertion_point(field_get:istio.policy.v1beta1.Value.duration_value)
  return has_duration_value()
      ? *value_.duration_value_
      : *reinterpret_cast< ::istio::policy::v1beta1::Duration*>(&::istio::policy::v1beta1::_Duration_default_instance_);
}
inline ::istio::policy::v1beta1::Duration* Value::mutable_duration_value() {
  if (!has_duration_value()) {
    clear_value();
    set_has_duration_value();
    value_.duration_value_ = new ::istio::policy::v1beta1::Duration;
  }
  // @@protoc_insertion_point(field_mutable:istio.policy.v1beta1.Value.duration_value)
  return value_.duration_value_;
}

// .istio.policy.v1beta1.EmailAddress email_address_value = 8;
inline bool Value::has_email_address_value() const {
  return value_case() == kEmailAddressValue;
}
inline void Value::set_has_email_address_value() {
  _oneof_case_[0] = kEmailAddressValue;
}
inline void Value::clear_email_address_value() {
  if (has_email_address_value()) {
    delete value_.email_address_value_;
    clear_has_value();
  }
}
inline ::istio::policy::v1beta1::EmailAddress* Value::release_email_address_value() {
  // @@protoc_insertion_point(field_release:istio.policy.v1beta1.Value.email_address_value)
  if (has_email_address_value()) {
    clear_has_value();
      ::istio::policy::v1beta1::EmailAddress* temp = value_.email_address_value_;
    value_.email_address_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::istio::policy::v1beta1::EmailAddress& Value::email_address_value() const {
  // @@protoc_insertion_point(field_get:istio.policy.v1beta1.Value.email_address_value)
  return has_email_address_value()
      ? *value_.email_address_value_
      : *reinterpret_cast< ::istio::policy::v1beta1::EmailAddress*>(&::istio::policy::v1beta1::_EmailAddress_default_instance_);
}
inline ::istio::policy::v1beta1::EmailAddress* Value::mutable_email_address_value() {
  if (!has_email_address_value()) {
    clear_value();
    set_has_email_address_value();
    value_.email_address_value_ = new ::istio::policy::v1beta1::EmailAddress;
  }
  // @@protoc_insertion_point(field_mutable:istio.policy.v1beta1.Value.email_address_value)
  return value_.email_address_value_;
}

// .istio.policy.v1beta1.DNSName dns_name_value = 9;
inline bool Value::has_dns_name_value() const {
  return value_case() == kDnsNameValue;
}
inline void Value::set_has_dns_name_value() {
  _oneof_case_[0] = kDnsNameValue;
}
inline void Value::clear_dns_name_value() {
  if (has_dns_name_value()) {
    delete value_.dns_name_value_;
    clear_has_value();
  }
}
inline ::istio::policy::v1beta1::DNSName* Value::release_dns_name_value() {
  // @@protoc_insertion_point(field_release:istio.policy.v1beta1.Value.dns_name_value)
  if (has_dns_name_value()) {
    clear_has_value();
      ::istio::policy::v1beta1::DNSName* temp = value_.dns_name_value_;
    value_.dns_name_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::istio::policy::v1beta1::DNSName& Value::dns_name_value() const {
  // @@protoc_insertion_point(field_get:istio.policy.v1beta1.Value.dns_name_value)
  return has_dns_name_value()
      ? *value_.dns_name_value_
      : *reinterpret_cast< ::istio::policy::v1beta1::DNSName*>(&::istio::policy::v1beta1::_DNSName_default_instance_);
}
inline ::istio::policy::v1beta1::DNSName* Value::mutable_dns_name_value() {
  if (!has_dns_name_value()) {
    clear_value();
    set_has_dns_name_value();
    value_.dns_name_value_ = new ::istio::policy::v1beta1::DNSName;
  }
  // @@protoc_insertion_point(field_mutable:istio.policy.v1beta1.Value.dns_name_value)
  return value_.dns_name_value_;
}

// .istio.policy.v1beta1.Uri uri_value = 10;
inline bool Value::has_uri_value() const {
  return value_case() == kUriValue;
}
inline void Value::set_has_uri_value() {
  _oneof_case_[0] = kUriValue;
}
inline void Value::clear_uri_value() {
  if (has_uri_value()) {
    delete value_.uri_value_;
    clear_has_value();
  }
}
inline ::istio::policy::v1beta1::Uri* Value::release_uri_value() {
  // @@protoc_insertion_point(field_release:istio.policy.v1beta1.Value.uri_value)
  if (has_uri_value()) {
    clear_has_value();
      ::istio::policy::v1beta1::Uri* temp = value_.uri_value_;
    value_.uri_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::istio::policy::v1beta1::Uri& Value::uri_value() const {
  // @@protoc_insertion_point(field_get:istio.policy.v1beta1.Value.uri_value)
  return has_uri_value()
      ? *value_.uri_value_
      : *reinterpret_cast< ::istio::policy::v1beta1::Uri*>(&::istio::policy::v1beta1::_Uri_default_instance_);
}
inline ::istio::policy::v1beta1::Uri* Value::mutable_uri_value() {
  if (!has_uri_value()) {
    clear_value();
    set_has_uri_value();
    value_.uri_value_ = new ::istio::policy::v1beta1::Uri;
  }
  // @@protoc_insertion_point(field_mutable:istio.policy.v1beta1.Value.uri_value)
  return value_.uri_value_;
}

inline bool Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Value::ValueCase Value::value_case() const {
  return Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// IPAddress

// bytes value = 1;
inline void IPAddress::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPAddress::value() const {
  // @@protoc_insertion_point(field_get:istio.policy.v1beta1.IPAddress.value)
  return value_.GetNoArena();
}
inline void IPAddress::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.policy.v1beta1.IPAddress.value)
}
#if LANG_CXX11
inline void IPAddress::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.policy.v1beta1.IPAddress.value)
}
#endif
inline void IPAddress::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.policy.v1beta1.IPAddress.value)
}
inline void IPAddress::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.policy.v1beta1.IPAddress.value)
}
inline ::std::string* IPAddress::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:istio.policy.v1beta1.IPAddress.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPAddress::release_value() {
  // @@protoc_insertion_point(field_release:istio.policy.v1beta1.IPAddress.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPAddress::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:istio.policy.v1beta1.IPAddress.value)
}

// -------------------------------------------------------------------

// Duration

// .google.protobuf.Duration value = 1;
inline bool Duration::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline const ::google::protobuf::Duration& Duration::value() const {
  const ::google::protobuf::Duration* p = value_;
  // @@protoc_insertion_point(field_get:istio.policy.v1beta1.Duration.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* Duration::release_value() {
  // @@protoc_insertion_point(field_release:istio.policy.v1beta1.Duration.value)
  
  ::google::protobuf::Duration* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* Duration::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:istio.policy.v1beta1.Duration.value)
  return value_;
}
inline void Duration::set_allocated_value(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:istio.policy.v1beta1.Duration.value)
}

// -------------------------------------------------------------------

// TimeStamp

// .google.protobuf.Timestamp value = 1;
inline bool TimeStamp::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline const ::google::protobuf::Timestamp& TimeStamp::value() const {
  const ::google::protobuf::Timestamp* p = value_;
  // @@protoc_insertion_point(field_get:istio.policy.v1beta1.TimeStamp.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TimeStamp::release_value() {
  // @@protoc_insertion_point(field_release:istio.policy.v1beta1.TimeStamp.value)
  
  ::google::protobuf::Timestamp* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TimeStamp::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:istio.policy.v1beta1.TimeStamp.value)
  return value_;
}
inline void TimeStamp::set_allocated_value(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:istio.policy.v1beta1.TimeStamp.value)
}

// -------------------------------------------------------------------

// DNSName

// string value = 1;
inline void DNSName::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DNSName::value() const {
  // @@protoc_insertion_point(field_get:istio.policy.v1beta1.DNSName.value)
  return value_.GetNoArena();
}
inline void DNSName::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.policy.v1beta1.DNSName.value)
}
#if LANG_CXX11
inline void DNSName::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.policy.v1beta1.DNSName.value)
}
#endif
inline void DNSName::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.policy.v1beta1.DNSName.value)
}
inline void DNSName::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.policy.v1beta1.DNSName.value)
}
inline ::std::string* DNSName::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:istio.policy.v1beta1.DNSName.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DNSName::release_value() {
  // @@protoc_insertion_point(field_release:istio.policy.v1beta1.DNSName.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DNSName::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:istio.policy.v1beta1.DNSName.value)
}

// -------------------------------------------------------------------

// EmailAddress

// string value = 1;
inline void EmailAddress::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmailAddress::value() const {
  // @@protoc_insertion_point(field_get:istio.policy.v1beta1.EmailAddress.value)
  return value_.GetNoArena();
}
inline void EmailAddress::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.policy.v1beta1.EmailAddress.value)
}
#if LANG_CXX11
inline void EmailAddress::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.policy.v1beta1.EmailAddress.value)
}
#endif
inline void EmailAddress::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.policy.v1beta1.EmailAddress.value)
}
inline void EmailAddress::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.policy.v1beta1.EmailAddress.value)
}
inline ::std::string* EmailAddress::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:istio.policy.v1beta1.EmailAddress.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmailAddress::release_value() {
  // @@protoc_insertion_point(field_release:istio.policy.v1beta1.EmailAddress.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmailAddress::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:istio.policy.v1beta1.EmailAddress.value)
}

// -------------------------------------------------------------------

// Uri

// string value = 1;
inline void Uri::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Uri::value() const {
  // @@protoc_insertion_point(field_get:istio.policy.v1beta1.Uri.value)
  return value_.GetNoArena();
}
inline void Uri::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.policy.v1beta1.Uri.value)
}
#if LANG_CXX11
inline void Uri::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.policy.v1beta1.Uri.value)
}
#endif
inline void Uri::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.policy.v1beta1.Uri.value)
}
inline void Uri::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.policy.v1beta1.Uri.value)
}
inline ::std::string* Uri::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:istio.policy.v1beta1.Uri.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Uri::release_value() {
  // @@protoc_insertion_point(field_release:istio.policy.v1beta1.Uri.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Uri::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:istio.policy.v1beta1.Uri.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace policy
}  // namespace istio

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_policy_2fv1beta1_2ftype_2eproto__INCLUDED
