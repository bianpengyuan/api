// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: policy/v1beta1/cfg.proto

#include "policy/v1beta1/cfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace istio {
namespace policy {
namespace v1beta1 {
class AttributeManifest_AttributeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AttributeManifest_AttributeInfo>
      _instance;
} _AttributeManifest_AttributeInfo_default_instance_;
class AttributeManifest_AttributesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AttributeManifest_AttributesEntry_DoNotUse>
      _instance;
} _AttributeManifest_AttributesEntry_DoNotUse_default_instance_;
class AttributeManifestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AttributeManifest>
      _instance;
} _AttributeManifest_default_instance_;
class Rule_HeaderOperationTemplateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rule_HeaderOperationTemplate>
      _instance;
} _Rule_HeaderOperationTemplate_default_instance_;
class RuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rule>
      _instance;
} _Rule_default_instance_;
class ActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Action>
      _instance;
} _Action_default_instance_;
class Instance_AttributeBindingsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Instance_AttributeBindingsEntry_DoNotUse>
      _instance;
} _Instance_AttributeBindingsEntry_DoNotUse_default_instance_;
class InstanceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Instance>
      _instance;
} _Instance_default_instance_;
class HandlerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Handler>
      _instance;
} _Handler_default_instance_;
class ConnectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Connection>
      _instance;
} _Connection_default_instance_;
class SamplingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sampling>
      _instance;
} _Sampling_default_instance_;
class RandomSamplingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RandomSampling>
      _instance;
} _RandomSampling_default_instance_;
class RateLimitSamplingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RateLimitSampling>
      _instance;
} _RateLimitSampling_default_instance_;
class FractionalPercentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FractionalPercent>
      _instance;
} _FractionalPercent_default_instance_;
class AuthenticationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Authentication>
      _instance;
  const ::istio::policy::v1beta1::Tls* tls_;
  const ::istio::policy::v1beta1::Mutual* mutual_;
} _Authentication_default_instance_;
class TlsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tls>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr token_path_;
  const ::istio::policy::v1beta1::OAuth* oauth_;
  int auth_header_;
  ::google::protobuf::internal::ArenaStringPtr custom_header_;
} _Tls_default_instance_;
class OAuth_EndpointParamsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OAuth_EndpointParamsEntry_DoNotUse>
      _instance;
} _OAuth_EndpointParamsEntry_DoNotUse_default_instance_;
class OAuthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OAuth>
      _instance;
} _OAuth_default_instance_;
class MutualDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mutual>
      _instance;
} _Mutual_default_instance_;
}  // namespace v1beta1
}  // namespace policy
}  // namespace istio
namespace protobuf_policy_2fv1beta1_2fcfg_2eproto {
void InitDefaultsAttributeManifest_AttributeInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::policy::v1beta1::_AttributeManifest_AttributeInfo_default_instance_;
    new (ptr) ::istio::policy::v1beta1::AttributeManifest_AttributeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::policy::v1beta1::AttributeManifest_AttributeInfo::InitAsDefaultInstance();
}

void InitDefaultsAttributeManifest_AttributeInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAttributeManifest_AttributeInfoImpl);
}

void InitDefaultsAttributeManifest_AttributesEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsAttributeManifest_AttributeInfo();
  {
    void* ptr = &::istio::policy::v1beta1::_AttributeManifest_AttributesEntry_DoNotUse_default_instance_;
    new (ptr) ::istio::policy::v1beta1::AttributeManifest_AttributesEntry_DoNotUse();
  }
  ::istio::policy::v1beta1::AttributeManifest_AttributesEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsAttributeManifest_AttributesEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAttributeManifest_AttributesEntry_DoNotUseImpl);
}

void InitDefaultsAttributeManifestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsAttributeManifest_AttributesEntry_DoNotUse();
  {
    void* ptr = &::istio::policy::v1beta1::_AttributeManifest_default_instance_;
    new (ptr) ::istio::policy::v1beta1::AttributeManifest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::policy::v1beta1::AttributeManifest::InitAsDefaultInstance();
}

void InitDefaultsAttributeManifest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAttributeManifestImpl);
}

void InitDefaultsRule_HeaderOperationTemplateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::policy::v1beta1::_Rule_HeaderOperationTemplate_default_instance_;
    new (ptr) ::istio::policy::v1beta1::Rule_HeaderOperationTemplate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::policy::v1beta1::Rule_HeaderOperationTemplate::InitAsDefaultInstance();
}

void InitDefaultsRule_HeaderOperationTemplate() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRule_HeaderOperationTemplateImpl);
}

void InitDefaultsRuleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsAction();
  protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsRule_HeaderOperationTemplate();
  protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsSampling();
  {
    void* ptr = &::istio::policy::v1beta1::_Rule_default_instance_;
    new (ptr) ::istio::policy::v1beta1::Rule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::policy::v1beta1::Rule::InitAsDefaultInstance();
}

void InitDefaultsRule() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRuleImpl);
}

void InitDefaultsActionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::policy::v1beta1::_Action_default_instance_;
    new (ptr) ::istio::policy::v1beta1::Action();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::policy::v1beta1::Action::InitAsDefaultInstance();
}

void InitDefaultsAction() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsActionImpl);
}

void InitDefaultsInstance_AttributeBindingsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::policy::v1beta1::_Instance_AttributeBindingsEntry_DoNotUse_default_instance_;
    new (ptr) ::istio::policy::v1beta1::Instance_AttributeBindingsEntry_DoNotUse();
  }
  ::istio::policy::v1beta1::Instance_AttributeBindingsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsInstance_AttributeBindingsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInstance_AttributeBindingsEntry_DoNotUseImpl);
}

void InitDefaultsInstanceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fstruct_2eproto::InitDefaultsListValue();
  protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsInstance_AttributeBindingsEntry_DoNotUse();
  {
    void* ptr = &::istio::policy::v1beta1::_Instance_default_instance_;
    new (ptr) ::istio::policy::v1beta1::Instance();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::policy::v1beta1::Instance::InitAsDefaultInstance();
}

void InitDefaultsInstance() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInstanceImpl);
}

void InitDefaultsHandlerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fstruct_2eproto::InitDefaultsListValue();
  protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsConnection();
  {
    void* ptr = &::istio::policy::v1beta1::_Handler_default_instance_;
    new (ptr) ::istio::policy::v1beta1::Handler();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::policy::v1beta1::Handler::InitAsDefaultInstance();
}

void InitDefaultsHandler() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHandlerImpl);
}

void InitDefaultsConnectionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaultsDuration();
  protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsAuthentication();
  {
    void* ptr = &::istio::policy::v1beta1::_Connection_default_instance_;
    new (ptr) ::istio::policy::v1beta1::Connection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::policy::v1beta1::Connection::InitAsDefaultInstance();
}

void InitDefaultsConnection() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsConnectionImpl);
}

void InitDefaultsSamplingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsRandomSampling();
  protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsRateLimitSampling();
  {
    void* ptr = &::istio::policy::v1beta1::_Sampling_default_instance_;
    new (ptr) ::istio::policy::v1beta1::Sampling();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::policy::v1beta1::Sampling::InitAsDefaultInstance();
}

void InitDefaultsSampling() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSamplingImpl);
}

void InitDefaultsRandomSamplingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsFractionalPercent();
  {
    void* ptr = &::istio::policy::v1beta1::_RandomSampling_default_instance_;
    new (ptr) ::istio::policy::v1beta1::RandomSampling();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::policy::v1beta1::RandomSampling::InitAsDefaultInstance();
}

void InitDefaultsRandomSampling() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRandomSamplingImpl);
}

void InitDefaultsRateLimitSamplingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaultsDuration();
  {
    void* ptr = &::istio::policy::v1beta1::_RateLimitSampling_default_instance_;
    new (ptr) ::istio::policy::v1beta1::RateLimitSampling();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::policy::v1beta1::RateLimitSampling::InitAsDefaultInstance();
}

void InitDefaultsRateLimitSampling() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRateLimitSamplingImpl);
}

void InitDefaultsFractionalPercentImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::policy::v1beta1::_FractionalPercent_default_instance_;
    new (ptr) ::istio::policy::v1beta1::FractionalPercent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::policy::v1beta1::FractionalPercent::InitAsDefaultInstance();
}

void InitDefaultsFractionalPercent() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFractionalPercentImpl);
}

void InitDefaultsAuthenticationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsTls();
  protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsMutual();
  {
    void* ptr = &::istio::policy::v1beta1::_Authentication_default_instance_;
    new (ptr) ::istio::policy::v1beta1::Authentication();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::policy::v1beta1::Authentication::InitAsDefaultInstance();
}

void InitDefaultsAuthentication() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAuthenticationImpl);
}

void InitDefaultsTlsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsOAuth();
  {
    void* ptr = &::istio::policy::v1beta1::_Tls_default_instance_;
    new (ptr) ::istio::policy::v1beta1::Tls();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::policy::v1beta1::Tls::InitAsDefaultInstance();
}

void InitDefaultsTls() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTlsImpl);
}

void InitDefaultsOAuth_EndpointParamsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::policy::v1beta1::_OAuth_EndpointParamsEntry_DoNotUse_default_instance_;
    new (ptr) ::istio::policy::v1beta1::OAuth_EndpointParamsEntry_DoNotUse();
  }
  ::istio::policy::v1beta1::OAuth_EndpointParamsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsOAuth_EndpointParamsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOAuth_EndpointParamsEntry_DoNotUseImpl);
}

void InitDefaultsOAuthImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsOAuth_EndpointParamsEntry_DoNotUse();
  {
    void* ptr = &::istio::policy::v1beta1::_OAuth_default_instance_;
    new (ptr) ::istio::policy::v1beta1::OAuth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::policy::v1beta1::OAuth::InitAsDefaultInstance();
}

void InitDefaultsOAuth() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOAuthImpl);
}

void InitDefaultsMutualImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::policy::v1beta1::_Mutual_default_instance_;
    new (ptr) ::istio::policy::v1beta1::Mutual();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::policy::v1beta1::Mutual::InitAsDefaultInstance();
}

void InitDefaultsMutual() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMutualImpl);
}

::google::protobuf::Metadata file_level_metadata[19];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::AttributeManifest_AttributeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::AttributeManifest_AttributeInfo, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::AttributeManifest_AttributeInfo, value_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::AttributeManifest_AttributesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::AttributeManifest_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::AttributeManifest_AttributesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::AttributeManifest_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::AttributeManifest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::AttributeManifest, revision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::AttributeManifest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::AttributeManifest, attributes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Rule_HeaderOperationTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Rule_HeaderOperationTemplate, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Rule_HeaderOperationTemplate, values_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Rule_HeaderOperationTemplate, operation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Rule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Rule, match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Rule, actions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Rule, request_header_operations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Rule, response_header_operations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Rule, sampling_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Action, handler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Action, instances_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Action, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Instance_AttributeBindingsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Instance_AttributeBindingsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Instance_AttributeBindingsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Instance_AttributeBindingsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Instance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Instance, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Instance, compiled_template_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Instance, template__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Instance, params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Instance, attribute_bindings_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Handler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Handler, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Handler, compiled_adapter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Handler, adapter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Handler, params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Handler, connection_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Connection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Connection, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Connection, timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Connection, authentication_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Sampling, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Sampling, random_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Sampling, rate_limit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::RandomSampling, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::RandomSampling, attribute_expression_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::RandomSampling, percent_sampled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::RandomSampling, use_independent_randomness_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::RateLimitSampling, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::RateLimitSampling, sampling_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::RateLimitSampling, max_unsampled_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::RateLimitSampling, sampling_rate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::FractionalPercent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::FractionalPercent, numerator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::FractionalPercent, denominator_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Authentication, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Authentication, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::istio::policy::v1beta1::AuthenticationDefaultTypeInternal, tls_),
  offsetof(::istio::policy::v1beta1::AuthenticationDefaultTypeInternal, mutual_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Authentication, auth_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Tls, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Tls, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Tls, ca_certificates_),
  offsetof(::istio::policy::v1beta1::TlsDefaultTypeInternal, token_path_),
  offsetof(::istio::policy::v1beta1::TlsDefaultTypeInternal, oauth_),
  offsetof(::istio::policy::v1beta1::TlsDefaultTypeInternal, auth_header_),
  offsetof(::istio::policy::v1beta1::TlsDefaultTypeInternal, custom_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Tls, server_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Tls, token_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Tls, token_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::OAuth_EndpointParamsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::OAuth_EndpointParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::OAuth_EndpointParamsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::OAuth_EndpointParamsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::OAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::OAuth, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::OAuth, client_secret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::OAuth, token_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::OAuth, scopes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::OAuth, endpoint_params_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Mutual, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Mutual, private_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Mutual, client_certificate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Mutual, ca_certificates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Mutual, server_name_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::istio::policy::v1beta1::AttributeManifest_AttributeInfo)},
  { 7, 14, sizeof(::istio::policy::v1beta1::AttributeManifest_AttributesEntry_DoNotUse)},
  { 16, -1, sizeof(::istio::policy::v1beta1::AttributeManifest)},
  { 24, -1, sizeof(::istio::policy::v1beta1::Rule_HeaderOperationTemplate)},
  { 32, -1, sizeof(::istio::policy::v1beta1::Rule)},
  { 42, -1, sizeof(::istio::policy::v1beta1::Action)},
  { 50, 57, sizeof(::istio::policy::v1beta1::Instance_AttributeBindingsEntry_DoNotUse)},
  { 59, -1, sizeof(::istio::policy::v1beta1::Instance)},
  { 69, -1, sizeof(::istio::policy::v1beta1::Handler)},
  { 79, -1, sizeof(::istio::policy::v1beta1::Connection)},
  { 87, -1, sizeof(::istio::policy::v1beta1::Sampling)},
  { 94, -1, sizeof(::istio::policy::v1beta1::RandomSampling)},
  { 102, -1, sizeof(::istio::policy::v1beta1::RateLimitSampling)},
  { 110, -1, sizeof(::istio::policy::v1beta1::FractionalPercent)},
  { 117, -1, sizeof(::istio::policy::v1beta1::Authentication)},
  { 125, -1, sizeof(::istio::policy::v1beta1::Tls)},
  { 138, 145, sizeof(::istio::policy::v1beta1::OAuth_EndpointParamsEntry_DoNotUse)},
  { 147, -1, sizeof(::istio::policy::v1beta1::OAuth)},
  { 157, -1, sizeof(::istio::policy::v1beta1::Mutual)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_AttributeManifest_AttributeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_AttributeManifest_AttributesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_AttributeManifest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_Rule_HeaderOperationTemplate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_Rule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_Action_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_Instance_AttributeBindingsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_Instance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_Handler_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_Connection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_Sampling_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_RandomSampling_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_RateLimitSampling_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_FractionalPercent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_Authentication_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_Tls_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_OAuth_EndpointParamsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_OAuth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_Mutual_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "policy/v1beta1/cfg.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 19);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030policy/v1beta1/cfg.proto\022\024istio.policy"
      ".v1beta1\032\024gogoproto/gogo.proto\032\034google/p"
      "rotobuf/struct.proto\032\036google/protobuf/du"
      "ration.proto\032\037policy/v1beta1/value_type."
      "proto\"\305\002\n\021AttributeManifest\022\020\n\010revision\030"
      "\001 \001(\t\022\014\n\004name\030\002 \001(\t\022K\n\nattributes\030\003 \003(\0132"
      "7.istio.policy.v1beta1.AttributeManifest"
      ".AttributesEntry\032Y\n\rAttributeInfo\022\023\n\013des"
      "cription\030\001 \001(\t\0223\n\nvalue_type\030\002 \001(\0162\037.ist"
      "io.policy.v1beta1.ValueType\032h\n\017Attribute"
      "sEntry\022\013\n\003key\030\001 \001(\t\022D\n\005value\030\002 \001(\01325.ist"
      "io.policy.v1beta1.AttributeManifest.Attr"
      "ibuteInfo:\0028\001\"\342\003\n\004Rule\022\r\n\005match\030\001 \001(\t\022-\n"
      "\007actions\030\002 \003(\0132\034.istio.policy.v1beta1.Ac"
      "tion\022U\n\031request_header_operations\030\003 \003(\0132"
      "2.istio.policy.v1beta1.Rule.HeaderOperat"
      "ionTemplate\022V\n\032response_header_operation"
      "s\030\004 \003(\01322.istio.policy.v1beta1.Rule.Head"
      "erOperationTemplate\0220\n\010sampling\030\005 \001(\0132\036."
      "istio.policy.v1beta1.Sampling\032\272\001\n\027Header"
      "OperationTemplate\022\014\n\004name\030\001 \001(\t\022\016\n\006value"
      "s\030\002 \003(\t\022O\n\toperation\030\003 \001(\0162<.istio.polic"
      "y.v1beta1.Rule.HeaderOperationTemplate.O"
      "peration\"0\n\tOperation\022\013\n\007REPLACE\020\000\022\n\n\006RE"
      "MOVE\020\001\022\n\n\006APPEND\020\002\":\n\006Action\022\017\n\007handler\030"
      "\002 \001(\t\022\021\n\tinstances\030\003 \003(\t\022\014\n\004name\030\004 \001(\t\"\376"
      "\001\n\010Instance\022\014\n\004name\030\001 \001(\t\022\034\n\021compiled_te"
      "mplate\030\364\355\251  \001(\t\022\020\n\010template\030\002 \001(\t\022\'\n\006par"
      "ams\030\003 \001(\0132\027.google.protobuf.Struct\022Q\n\022at"
      "tribute_bindings\030\004 \003(\01325.istio.policy.v1"
      "beta1.Instance.AttributeBindingsEntry\0328\n"
      "\026AttributeBindingsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
      "value\030\002 \001(\t:\0028\001\"\244\001\n\007Handler\022\014\n\004name\030\001 \001("
      "\t\022\033\n\020compiled_adapter\030\364\355\251  \001(\t\022\017\n\007adapte"
      "r\030\002 \001(\t\022\'\n\006params\030\003 \001(\0132\027.google.protobu"
      "f.Struct\0224\n\nconnection\030\004 \001(\0132 .istio.pol"
      "icy.v1beta1.Connection\"\215\001\n\nConnection\022\017\n"
      "\007address\030\002 \001(\t\0220\n\007timeout\030\003 \001(\0132\031.google"
      ".protobuf.DurationB\004\230\337\037\001\022<\n\016authenticati"
      "on\030\004 \001(\0132$.istio.policy.v1beta1.Authenti"
      "cation\"}\n\010Sampling\0224\n\006random\030\001 \001(\0132$.ist"
      "io.policy.v1beta1.RandomSampling\022;\n\nrate"
      "_limit\030\002 \001(\0132\'.istio.policy.v1beta1.Rate"
      "LimitSampling\"\224\001\n\016RandomSampling\022\034\n\024attr"
      "ibute_expression\030\001 \001(\t\022@\n\017percent_sample"
      "d\030\002 \001(\0132\'.istio.policy.v1beta1.Fractiona"
      "lPercent\022\"\n\032use_independent_randomness\030\003"
      " \001(\010\"\211\001\n\021RateLimitSampling\022>\n\021sampling_d"
      "uration\030\001 \001(\0132\031.google.protobuf.Duration"
      "B\010\310\336\037\000\230\337\037\001\022\035\n\025max_unsampled_entries\030\002 \001("
      "\003\022\025\n\rsampling_rate\030\003 \001(\003\"\246\001\n\021FractionalP"
      "ercent\022\021\n\tnumerator\030\001 \001(\r\022L\n\013denominator"
      "\030\002 \001(\01627.istio.policy.v1beta1.Fractional"
      "Percent.DenominatorType\"0\n\017DenominatorTy"
      "pe\022\013\n\007HUNDRED\020\000\022\020\n\014TEN_THOUSAND\020\001\"w\n\016Aut"
      "hentication\022(\n\003tls\030\001 \001(\0132\031.istio.policy."
      "v1beta1.TlsH\000\022.\n\006mutual\030\002 \001(\0132\034.istio.po"
      "licy.v1beta1.MutualH\000B\013\n\tauth_type\"\220\002\n\003T"
      "ls\022\027\n\017ca_certificates\030\001 \001(\t\022\024\n\ntoken_pat"
      "h\030\002 \001(\tH\000\022,\n\005oauth\030\003 \001(\0132\033.istio.policy."
      "v1beta1.OAuthH\000\022;\n\013auth_header\030\004 \001(\0162$.i"
      "stio.policy.v1beta1.Tls.AuthHeaderH\001\022\027\n\r"
      "custom_header\030\005 \001(\tH\001\022\023\n\013server_name\030\006 \001"
      "(\t\"#\n\nAuthHeader\022\t\n\005PLAIN\020\000\022\n\n\006BEARER\020\001B"
      "\016\n\014token_sourceB\014\n\ntoken_type\"\325\001\n\005OAuth\022"
      "\021\n\tclient_id\030\001 \001(\t\022\025\n\rclient_secret\030\002 \001("
      "\t\022\021\n\ttoken_url\030\003 \001(\t\022\016\n\006scopes\030\004 \003(\t\022H\n\017"
      "endpoint_params\030\005 \003(\0132/.istio.policy.v1b"
      "eta1.OAuth.EndpointParamsEntry\0325\n\023Endpoi"
      "ntParamsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
      "\t:\0028\001\"g\n\006Mutual\022\023\n\013private_key\030\001 \001(\t\022\032\n\022"
      "client_certificate\030\002 \001(\t\022\027\n\017ca_certifica"
      "tes\030\003 \001(\t\022\023\n\013server_name\030\004 \001(\tB\035Z\033istio."
      "io/api/policy/v1beta1b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2949);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "policy/v1beta1/cfg.proto", &protobuf_RegisterTypes);
  ::protobuf_gogoproto_2fgogo_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fstruct_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::protobuf_policy_2fv1beta1_2fvalue_5ftype_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_policy_2fv1beta1_2fcfg_2eproto
namespace istio {
namespace policy {
namespace v1beta1 {
const ::google::protobuf::EnumDescriptor* Rule_HeaderOperationTemplate_Operation_descriptor() {
  protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_enum_descriptors[0];
}
bool Rule_HeaderOperationTemplate_Operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Rule_HeaderOperationTemplate_Operation Rule_HeaderOperationTemplate::REPLACE;
const Rule_HeaderOperationTemplate_Operation Rule_HeaderOperationTemplate::REMOVE;
const Rule_HeaderOperationTemplate_Operation Rule_HeaderOperationTemplate::APPEND;
const Rule_HeaderOperationTemplate_Operation Rule_HeaderOperationTemplate::Operation_MIN;
const Rule_HeaderOperationTemplate_Operation Rule_HeaderOperationTemplate::Operation_MAX;
const int Rule_HeaderOperationTemplate::Operation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FractionalPercent_DenominatorType_descriptor() {
  protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_enum_descriptors[1];
}
bool FractionalPercent_DenominatorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FractionalPercent_DenominatorType FractionalPercent::HUNDRED;
const FractionalPercent_DenominatorType FractionalPercent::TEN_THOUSAND;
const FractionalPercent_DenominatorType FractionalPercent::DenominatorType_MIN;
const FractionalPercent_DenominatorType FractionalPercent::DenominatorType_MAX;
const int FractionalPercent::DenominatorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Tls_AuthHeader_descriptor() {
  protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_enum_descriptors[2];
}
bool Tls_AuthHeader_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tls_AuthHeader Tls::PLAIN;
const Tls_AuthHeader Tls::BEARER;
const Tls_AuthHeader Tls::AuthHeader_MIN;
const Tls_AuthHeader Tls::AuthHeader_MAX;
const int Tls::AuthHeader_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void AttributeManifest_AttributeInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AttributeManifest_AttributeInfo::kDescriptionFieldNumber;
const int AttributeManifest_AttributeInfo::kValueTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AttributeManifest_AttributeInfo::AttributeManifest_AttributeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsAttributeManifest_AttributeInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.policy.v1beta1.AttributeManifest.AttributeInfo)
}
AttributeManifest_AttributeInfo::AttributeManifest_AttributeInfo(const AttributeManifest_AttributeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  value_type_ = from.value_type_;
  // @@protoc_insertion_point(copy_constructor:istio.policy.v1beta1.AttributeManifest.AttributeInfo)
}

void AttributeManifest_AttributeInfo::SharedCtor() {
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_type_ = 0;
  _cached_size_ = 0;
}

AttributeManifest_AttributeInfo::~AttributeManifest_AttributeInfo() {
  // @@protoc_insertion_point(destructor:istio.policy.v1beta1.AttributeManifest.AttributeInfo)
  SharedDtor();
}

void AttributeManifest_AttributeInfo::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AttributeManifest_AttributeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttributeManifest_AttributeInfo::descriptor() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AttributeManifest_AttributeInfo& AttributeManifest_AttributeInfo::default_instance() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsAttributeManifest_AttributeInfo();
  return *internal_default_instance();
}

AttributeManifest_AttributeInfo* AttributeManifest_AttributeInfo::New(::google::protobuf::Arena* arena) const {
  AttributeManifest_AttributeInfo* n = new AttributeManifest_AttributeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AttributeManifest_AttributeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.policy.v1beta1.AttributeManifest.AttributeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_type_ = 0;
  _internal_metadata_.Clear();
}

bool AttributeManifest_AttributeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.policy.v1beta1.AttributeManifest.AttributeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string description = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.AttributeManifest.AttributeInfo.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.policy.v1beta1.ValueType value_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_value_type(static_cast< ::istio::policy::v1beta1::ValueType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.policy.v1beta1.AttributeManifest.AttributeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.policy.v1beta1.AttributeManifest.AttributeInfo)
  return false;
#undef DO_
}

void AttributeManifest_AttributeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.policy.v1beta1.AttributeManifest.AttributeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.AttributeManifest.AttributeInfo.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->description(), output);
  }

  // .istio.policy.v1beta1.ValueType value_type = 2;
  if (this->value_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->value_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.policy.v1beta1.AttributeManifest.AttributeInfo)
}

::google::protobuf::uint8* AttributeManifest_AttributeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.policy.v1beta1.AttributeManifest.AttributeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.AttributeManifest.AttributeInfo.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->description(), target);
  }

  // .istio.policy.v1beta1.ValueType value_type = 2;
  if (this->value_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->value_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.policy.v1beta1.AttributeManifest.AttributeInfo)
  return target;
}

size_t AttributeManifest_AttributeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.policy.v1beta1.AttributeManifest.AttributeInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string description = 1;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // .istio.policy.v1beta1.ValueType value_type = 2;
  if (this->value_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->value_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttributeManifest_AttributeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.policy.v1beta1.AttributeManifest.AttributeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AttributeManifest_AttributeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AttributeManifest_AttributeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.policy.v1beta1.AttributeManifest.AttributeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.policy.v1beta1.AttributeManifest.AttributeInfo)
    MergeFrom(*source);
  }
}

void AttributeManifest_AttributeInfo::MergeFrom(const AttributeManifest_AttributeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.policy.v1beta1.AttributeManifest.AttributeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.value_type() != 0) {
    set_value_type(from.value_type());
  }
}

void AttributeManifest_AttributeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.policy.v1beta1.AttributeManifest.AttributeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttributeManifest_AttributeInfo::CopyFrom(const AttributeManifest_AttributeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.policy.v1beta1.AttributeManifest.AttributeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeManifest_AttributeInfo::IsInitialized() const {
  return true;
}

void AttributeManifest_AttributeInfo::Swap(AttributeManifest_AttributeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AttributeManifest_AttributeInfo::InternalSwap(AttributeManifest_AttributeInfo* other) {
  using std::swap;
  description_.Swap(&other->description_);
  swap(value_type_, other->value_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AttributeManifest_AttributeInfo::GetMetadata() const {
  protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

AttributeManifest_AttributesEntry_DoNotUse::AttributeManifest_AttributesEntry_DoNotUse() {}
AttributeManifest_AttributesEntry_DoNotUse::AttributeManifest_AttributesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void AttributeManifest_AttributesEntry_DoNotUse::MergeFrom(const AttributeManifest_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata AttributeManifest_AttributesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[1];
}
void AttributeManifest_AttributesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void AttributeManifest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AttributeManifest::kRevisionFieldNumber;
const int AttributeManifest::kNameFieldNumber;
const int AttributeManifest::kAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AttributeManifest::AttributeManifest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsAttributeManifest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.policy.v1beta1.AttributeManifest)
}
AttributeManifest::AttributeManifest(const AttributeManifest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attributes_.MergeFrom(from.attributes_);
  revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.revision().size() > 0) {
    revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.revision_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:istio.policy.v1beta1.AttributeManifest)
}

void AttributeManifest::SharedCtor() {
  revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AttributeManifest::~AttributeManifest() {
  // @@protoc_insertion_point(destructor:istio.policy.v1beta1.AttributeManifest)
  SharedDtor();
}

void AttributeManifest::SharedDtor() {
  revision_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AttributeManifest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttributeManifest::descriptor() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AttributeManifest& AttributeManifest::default_instance() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsAttributeManifest();
  return *internal_default_instance();
}

AttributeManifest* AttributeManifest::New(::google::protobuf::Arena* arena) const {
  AttributeManifest* n = new AttributeManifest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AttributeManifest::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.policy.v1beta1.AttributeManifest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool AttributeManifest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.policy.v1beta1.AttributeManifest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string revision = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_revision()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->revision().data(), static_cast<int>(this->revision().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.AttributeManifest.revision"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.AttributeManifest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .istio.policy.v1beta1.AttributeManifest.AttributeInfo> attributes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          AttributeManifest_AttributesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              AttributeManifest_AttributesEntry_DoNotUse,
              ::std::string, ::istio::policy::v1beta1::AttributeManifest_AttributeInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::istio::policy::v1beta1::AttributeManifest_AttributeInfo > > parser(&attributes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.AttributeManifest.AttributesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.policy.v1beta1.AttributeManifest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.policy.v1beta1.AttributeManifest)
  return false;
#undef DO_
}

void AttributeManifest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.policy.v1beta1.AttributeManifest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string revision = 1;
  if (this->revision().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->revision().data(), static_cast<int>(this->revision().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.AttributeManifest.revision");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->revision(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.AttributeManifest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // map<string, .istio.policy.v1beta1.AttributeManifest.AttributeInfo> attributes = 3;
  if (!this->attributes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::istio::policy::v1beta1::AttributeManifest_AttributeInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.policy.v1beta1.AttributeManifest.AttributesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->attributes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attributes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::istio::policy::v1beta1::AttributeManifest_AttributeInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::istio::policy::v1beta1::AttributeManifest_AttributeInfo >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AttributeManifest_AttributesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attributes_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<AttributeManifest_AttributesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::istio::policy::v1beta1::AttributeManifest_AttributeInfo >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it) {
        entry.reset(attributes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.policy.v1beta1.AttributeManifest)
}

::google::protobuf::uint8* AttributeManifest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.policy.v1beta1.AttributeManifest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string revision = 1;
  if (this->revision().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->revision().data(), static_cast<int>(this->revision().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.AttributeManifest.revision");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->revision(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.AttributeManifest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // map<string, .istio.policy.v1beta1.AttributeManifest.AttributeInfo> attributes = 3;
  if (!this->attributes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::istio::policy::v1beta1::AttributeManifest_AttributeInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.policy.v1beta1.AttributeManifest.AttributesEntry.key");
      }
    };

    if (deterministic &&
        this->attributes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attributes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::istio::policy::v1beta1::AttributeManifest_AttributeInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::istio::policy::v1beta1::AttributeManifest_AttributeInfo >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<AttributeManifest_AttributesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attributes_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<AttributeManifest_AttributesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::istio::policy::v1beta1::AttributeManifest_AttributeInfo >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it) {
        entry.reset(attributes_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.policy.v1beta1.AttributeManifest)
  return target;
}

size_t AttributeManifest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.policy.v1beta1.AttributeManifest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .istio.policy.v1beta1.AttributeManifest.AttributeInfo> attributes = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attributes_size());
  {
    ::google::protobuf::scoped_ptr<AttributeManifest_AttributesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::istio::policy::v1beta1::AttributeManifest_AttributeInfo >::const_iterator
        it = this->attributes().begin();
        it != this->attributes().end(); ++it) {
      entry.reset(attributes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string revision = 1;
  if (this->revision().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->revision());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttributeManifest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.policy.v1beta1.AttributeManifest)
  GOOGLE_DCHECK_NE(&from, this);
  const AttributeManifest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AttributeManifest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.policy.v1beta1.AttributeManifest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.policy.v1beta1.AttributeManifest)
    MergeFrom(*source);
  }
}

void AttributeManifest::MergeFrom(const AttributeManifest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.policy.v1beta1.AttributeManifest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  if (from.revision().size() > 0) {

    revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.revision_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void AttributeManifest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.policy.v1beta1.AttributeManifest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttributeManifest::CopyFrom(const AttributeManifest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.policy.v1beta1.AttributeManifest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeManifest::IsInitialized() const {
  return true;
}

void AttributeManifest::Swap(AttributeManifest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AttributeManifest::InternalSwap(AttributeManifest* other) {
  using std::swap;
  attributes_.Swap(&other->attributes_);
  revision_.Swap(&other->revision_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AttributeManifest::GetMetadata() const {
  protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Rule_HeaderOperationTemplate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rule_HeaderOperationTemplate::kNameFieldNumber;
const int Rule_HeaderOperationTemplate::kValuesFieldNumber;
const int Rule_HeaderOperationTemplate::kOperationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rule_HeaderOperationTemplate::Rule_HeaderOperationTemplate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsRule_HeaderOperationTemplate();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.policy.v1beta1.Rule.HeaderOperationTemplate)
}
Rule_HeaderOperationTemplate::Rule_HeaderOperationTemplate(const Rule_HeaderOperationTemplate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      values_(from.values_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  operation_ = from.operation_;
  // @@protoc_insertion_point(copy_constructor:istio.policy.v1beta1.Rule.HeaderOperationTemplate)
}

void Rule_HeaderOperationTemplate::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_ = 0;
  _cached_size_ = 0;
}

Rule_HeaderOperationTemplate::~Rule_HeaderOperationTemplate() {
  // @@protoc_insertion_point(destructor:istio.policy.v1beta1.Rule.HeaderOperationTemplate)
  SharedDtor();
}

void Rule_HeaderOperationTemplate::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Rule_HeaderOperationTemplate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rule_HeaderOperationTemplate::descriptor() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rule_HeaderOperationTemplate& Rule_HeaderOperationTemplate::default_instance() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsRule_HeaderOperationTemplate();
  return *internal_default_instance();
}

Rule_HeaderOperationTemplate* Rule_HeaderOperationTemplate::New(::google::protobuf::Arena* arena) const {
  Rule_HeaderOperationTemplate* n = new Rule_HeaderOperationTemplate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rule_HeaderOperationTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.policy.v1beta1.Rule.HeaderOperationTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_ = 0;
  _internal_metadata_.Clear();
}

bool Rule_HeaderOperationTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.policy.v1beta1.Rule.HeaderOperationTemplate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.Rule.HeaderOperationTemplate.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string values = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->values(this->values_size() - 1).data(),
            static_cast<int>(this->values(this->values_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.Rule.HeaderOperationTemplate.values"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.policy.v1beta1.Rule.HeaderOperationTemplate.Operation operation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operation(static_cast< ::istio::policy::v1beta1::Rule_HeaderOperationTemplate_Operation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.policy.v1beta1.Rule.HeaderOperationTemplate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.policy.v1beta1.Rule.HeaderOperationTemplate)
  return false;
#undef DO_
}

void Rule_HeaderOperationTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.policy.v1beta1.Rule.HeaderOperationTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Rule.HeaderOperationTemplate.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated string values = 2;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->values(i).data(), static_cast<int>(this->values(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Rule.HeaderOperationTemplate.values");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->values(i), output);
  }

  // .istio.policy.v1beta1.Rule.HeaderOperationTemplate.Operation operation = 3;
  if (this->operation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->operation(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.policy.v1beta1.Rule.HeaderOperationTemplate)
}

::google::protobuf::uint8* Rule_HeaderOperationTemplate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.policy.v1beta1.Rule.HeaderOperationTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Rule.HeaderOperationTemplate.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string values = 2;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->values(i).data(), static_cast<int>(this->values(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Rule.HeaderOperationTemplate.values");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->values(i), target);
  }

  // .istio.policy.v1beta1.Rule.HeaderOperationTemplate.Operation operation = 3;
  if (this->operation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->operation(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.policy.v1beta1.Rule.HeaderOperationTemplate)
  return target;
}

size_t Rule_HeaderOperationTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.policy.v1beta1.Rule.HeaderOperationTemplate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string values = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->values_size());
  for (int i = 0, n = this->values_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .istio.policy.v1beta1.Rule.HeaderOperationTemplate.Operation operation = 3;
  if (this->operation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rule_HeaderOperationTemplate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.policy.v1beta1.Rule.HeaderOperationTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  const Rule_HeaderOperationTemplate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rule_HeaderOperationTemplate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.policy.v1beta1.Rule.HeaderOperationTemplate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.policy.v1beta1.Rule.HeaderOperationTemplate)
    MergeFrom(*source);
  }
}

void Rule_HeaderOperationTemplate::MergeFrom(const Rule_HeaderOperationTemplate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.policy.v1beta1.Rule.HeaderOperationTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.operation() != 0) {
    set_operation(from.operation());
  }
}

void Rule_HeaderOperationTemplate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.policy.v1beta1.Rule.HeaderOperationTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rule_HeaderOperationTemplate::CopyFrom(const Rule_HeaderOperationTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.policy.v1beta1.Rule.HeaderOperationTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rule_HeaderOperationTemplate::IsInitialized() const {
  return true;
}

void Rule_HeaderOperationTemplate::Swap(Rule_HeaderOperationTemplate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rule_HeaderOperationTemplate::InternalSwap(Rule_HeaderOperationTemplate* other) {
  using std::swap;
  values_.InternalSwap(&other->values_);
  name_.Swap(&other->name_);
  swap(operation_, other->operation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rule_HeaderOperationTemplate::GetMetadata() const {
  protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Rule::InitAsDefaultInstance() {
  ::istio::policy::v1beta1::_Rule_default_instance_._instance.get_mutable()->sampling_ = const_cast< ::istio::policy::v1beta1::Sampling*>(
      ::istio::policy::v1beta1::Sampling::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rule::kMatchFieldNumber;
const int Rule::kActionsFieldNumber;
const int Rule::kRequestHeaderOperationsFieldNumber;
const int Rule::kResponseHeaderOperationsFieldNumber;
const int Rule::kSamplingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rule::Rule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsRule();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.policy.v1beta1.Rule)
}
Rule::Rule(const Rule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      actions_(from.actions_),
      request_header_operations_(from.request_header_operations_),
      response_header_operations_(from.response_header_operations_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  match_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.match().size() > 0) {
    match_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_);
  }
  if (from.has_sampling()) {
    sampling_ = new ::istio::policy::v1beta1::Sampling(*from.sampling_);
  } else {
    sampling_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:istio.policy.v1beta1.Rule)
}

void Rule::SharedCtor() {
  match_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sampling_ = NULL;
  _cached_size_ = 0;
}

Rule::~Rule() {
  // @@protoc_insertion_point(destructor:istio.policy.v1beta1.Rule)
  SharedDtor();
}

void Rule::SharedDtor() {
  match_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sampling_;
}

void Rule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rule::descriptor() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rule& Rule::default_instance() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsRule();
  return *internal_default_instance();
}

Rule* Rule::New(::google::protobuf::Arena* arena) const {
  Rule* n = new Rule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rule::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.policy.v1beta1.Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  request_header_operations_.Clear();
  response_header_operations_.Clear();
  match_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sampling_ != NULL) {
    delete sampling_;
  }
  sampling_ = NULL;
  _internal_metadata_.Clear();
}

bool Rule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.policy.v1beta1.Rule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string match = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->match().data(), static_cast<int>(this->match().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.Rule.match"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.policy.v1beta1.Action actions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.policy.v1beta1.Rule.HeaderOperationTemplate request_header_operations = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_request_header_operations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .istio.policy.v1beta1.Rule.HeaderOperationTemplate response_header_operations = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_response_header_operations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.policy.v1beta1.Sampling sampling = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sampling()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.policy.v1beta1.Rule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.policy.v1beta1.Rule)
  return false;
#undef DO_
}

void Rule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.policy.v1beta1.Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string match = 1;
  if (this->match().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->match().data(), static_cast<int>(this->match().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Rule.match");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->match(), output);
  }

  // repeated .istio.policy.v1beta1.Action actions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->actions(static_cast<int>(i)), output);
  }

  // repeated .istio.policy.v1beta1.Rule.HeaderOperationTemplate request_header_operations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->request_header_operations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->request_header_operations(static_cast<int>(i)), output);
  }

  // repeated .istio.policy.v1beta1.Rule.HeaderOperationTemplate response_header_operations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->response_header_operations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->response_header_operations(static_cast<int>(i)), output);
  }

  // .istio.policy.v1beta1.Sampling sampling = 5;
  if (this->has_sampling()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->sampling_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.policy.v1beta1.Rule)
}

::google::protobuf::uint8* Rule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.policy.v1beta1.Rule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string match = 1;
  if (this->match().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->match().data(), static_cast<int>(this->match().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Rule.match");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->match(), target);
  }

  // repeated .istio.policy.v1beta1.Action actions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->actions(static_cast<int>(i)), deterministic, target);
  }

  // repeated .istio.policy.v1beta1.Rule.HeaderOperationTemplate request_header_operations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->request_header_operations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->request_header_operations(static_cast<int>(i)), deterministic, target);
  }

  // repeated .istio.policy.v1beta1.Rule.HeaderOperationTemplate response_header_operations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->response_header_operations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->response_header_operations(static_cast<int>(i)), deterministic, target);
  }

  // .istio.policy.v1beta1.Sampling sampling = 5;
  if (this->has_sampling()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->sampling_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.policy.v1beta1.Rule)
  return target;
}

size_t Rule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.policy.v1beta1.Rule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .istio.policy.v1beta1.Action actions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->actions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->actions(static_cast<int>(i)));
    }
  }

  // repeated .istio.policy.v1beta1.Rule.HeaderOperationTemplate request_header_operations = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->request_header_operations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->request_header_operations(static_cast<int>(i)));
    }
  }

  // repeated .istio.policy.v1beta1.Rule.HeaderOperationTemplate response_header_operations = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->response_header_operations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->response_header_operations(static_cast<int>(i)));
    }
  }

  // string match = 1;
  if (this->match().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->match());
  }

  // .istio.policy.v1beta1.Sampling sampling = 5;
  if (this->has_sampling()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sampling_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.policy.v1beta1.Rule)
  GOOGLE_DCHECK_NE(&from, this);
  const Rule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.policy.v1beta1.Rule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.policy.v1beta1.Rule)
    MergeFrom(*source);
  }
}

void Rule::MergeFrom(const Rule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.policy.v1beta1.Rule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
  request_header_operations_.MergeFrom(from.request_header_operations_);
  response_header_operations_.MergeFrom(from.response_header_operations_);
  if (from.match().size() > 0) {

    match_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_);
  }
  if (from.has_sampling()) {
    mutable_sampling()->::istio::policy::v1beta1::Sampling::MergeFrom(from.sampling());
  }
}

void Rule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.policy.v1beta1.Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rule::CopyFrom(const Rule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.policy.v1beta1.Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rule::IsInitialized() const {
  return true;
}

void Rule::Swap(Rule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rule::InternalSwap(Rule* other) {
  using std::swap;
  actions_.InternalSwap(&other->actions_);
  request_header_operations_.InternalSwap(&other->request_header_operations_);
  response_header_operations_.InternalSwap(&other->response_header_operations_);
  match_.Swap(&other->match_);
  swap(sampling_, other->sampling_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rule::GetMetadata() const {
  protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Action::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Action::kHandlerFieldNumber;
const int Action::kInstancesFieldNumber;
const int Action::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Action::Action()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsAction();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.policy.v1beta1.Action)
}
Action::Action(const Action& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      instances_(from.instances_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  handler_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.handler().size() > 0) {
    handler_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.handler_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:istio.policy.v1beta1.Action)
}

void Action::SharedCtor() {
  handler_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:istio.policy.v1beta1.Action)
  SharedDtor();
}

void Action::SharedDtor() {
  handler_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Action::descriptor() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Action& Action::default_instance() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsAction();
  return *internal_default_instance();
}

Action* Action::New(::google::protobuf::Arena* arena) const {
  Action* n = new Action;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.policy.v1beta1.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instances_.Clear();
  handler_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.policy.v1beta1.Action)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string handler = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_handler()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->handler().data(), static_cast<int>(this->handler().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.Action.handler"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string instances = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_instances()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instances(this->instances_size() - 1).data(),
            static_cast<int>(this->instances(this->instances_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.Action.instances"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.Action.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.policy.v1beta1.Action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.policy.v1beta1.Action)
  return false;
#undef DO_
}

void Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.policy.v1beta1.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string handler = 2;
  if (this->handler().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handler().data(), static_cast<int>(this->handler().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Action.handler");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->handler(), output);
  }

  // repeated string instances = 3;
  for (int i = 0, n = this->instances_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instances(i).data(), static_cast<int>(this->instances(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Action.instances");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->instances(i), output);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Action.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.policy.v1beta1.Action)
}

::google::protobuf::uint8* Action::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.policy.v1beta1.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string handler = 2;
  if (this->handler().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handler().data(), static_cast<int>(this->handler().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Action.handler");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->handler(), target);
  }

  // repeated string instances = 3;
  for (int i = 0, n = this->instances_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instances(i).data(), static_cast<int>(this->instances(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Action.instances");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->instances(i), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Action.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.policy.v1beta1.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.policy.v1beta1.Action)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string instances = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->instances_size());
  for (int i = 0, n = this->instances_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->instances(i));
  }

  // string handler = 2;
  if (this->handler().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->handler());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Action::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.policy.v1beta1.Action)
  GOOGLE_DCHECK_NE(&from, this);
  const Action* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Action>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.policy.v1beta1.Action)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.policy.v1beta1.Action)
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.policy.v1beta1.Action)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instances_.MergeFrom(from.instances_);
  if (from.handler().size() > 0) {

    handler_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.handler_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Action::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.policy.v1beta1.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.policy.v1beta1.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::Swap(Action* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Action::InternalSwap(Action* other) {
  using std::swap;
  instances_.InternalSwap(&other->instances_);
  handler_.Swap(&other->handler_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Action::GetMetadata() const {
  protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Instance_AttributeBindingsEntry_DoNotUse::Instance_AttributeBindingsEntry_DoNotUse() {}
Instance_AttributeBindingsEntry_DoNotUse::Instance_AttributeBindingsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Instance_AttributeBindingsEntry_DoNotUse::MergeFrom(const Instance_AttributeBindingsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Instance_AttributeBindingsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[6];
}
void Instance_AttributeBindingsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Instance::InitAsDefaultInstance() {
  ::istio::policy::v1beta1::_Instance_default_instance_._instance.get_mutable()->params_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
}
void Instance::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) {
    delete params_;
  }
  params_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Instance::kNameFieldNumber;
const int Instance::kCompiledTemplateFieldNumber;
const int Instance::kTemplateFieldNumber;
const int Instance::kParamsFieldNumber;
const int Instance::kAttributeBindingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Instance::Instance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsInstance();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.policy.v1beta1.Instance)
}
Instance::Instance(const Instance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attribute_bindings_.MergeFrom(from.attribute_bindings_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  template__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.template_().size() > 0) {
    template__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.template__);
  }
  compiled_template_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.compiled_template().size() > 0) {
    compiled_template_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.compiled_template_);
  }
  if (from.has_params()) {
    params_ = new ::google::protobuf::Struct(*from.params_);
  } else {
    params_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:istio.policy.v1beta1.Instance)
}

void Instance::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  template__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compiled_template_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  params_ = NULL;
  _cached_size_ = 0;
}

Instance::~Instance() {
  // @@protoc_insertion_point(destructor:istio.policy.v1beta1.Instance)
  SharedDtor();
}

void Instance::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  template__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compiled_template_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete params_;
}

void Instance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Instance::descriptor() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Instance& Instance::default_instance() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsInstance();
  return *internal_default_instance();
}

Instance* Instance::New(::google::protobuf::Arena* arena) const {
  Instance* n = new Instance;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Instance::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.policy.v1beta1.Instance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_bindings_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  template__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compiled_template_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && params_ != NULL) {
    delete params_;
  }
  params_ = NULL;
  _internal_metadata_.Clear();
}

bool Instance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.policy.v1beta1.Instance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(542357410u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.Instance.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string template = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_template_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->template_().data(), static_cast<int>(this->template_().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.Instance.template"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct params = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> attribute_bindings = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          Instance_AttributeBindingsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Instance_AttributeBindingsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&attribute_bindings_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.Instance.AttributeBindingsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.Instance.AttributeBindingsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string compiled_template = 67794676;
      case 67794676: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 542357410 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compiled_template()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->compiled_template().data(), static_cast<int>(this->compiled_template().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.Instance.compiled_template"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.policy.v1beta1.Instance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.policy.v1beta1.Instance)
  return false;
#undef DO_
}

void Instance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.policy.v1beta1.Instance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Instance.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string template = 2;
  if (this->template_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->template_().data(), static_cast<int>(this->template_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Instance.template");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->template_(), output);
  }

  // .google.protobuf.Struct params = 3;
  if (this->has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->params_, output);
  }

  // map<string, string> attribute_bindings = 4;
  if (!this->attribute_bindings().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.policy.v1beta1.Instance.AttributeBindingsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.policy.v1beta1.Instance.AttributeBindingsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->attribute_bindings().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attribute_bindings().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attribute_bindings().begin();
          it != this->attribute_bindings().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Instance_AttributeBindingsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attribute_bindings_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Instance_AttributeBindingsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attribute_bindings().begin();
          it != this->attribute_bindings().end(); ++it) {
        entry.reset(attribute_bindings_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // string compiled_template = 67794676;
  if (this->compiled_template().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->compiled_template().data(), static_cast<int>(this->compiled_template().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Instance.compiled_template");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      67794676, this->compiled_template(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.policy.v1beta1.Instance)
}

::google::protobuf::uint8* Instance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.policy.v1beta1.Instance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Instance.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string template = 2;
  if (this->template_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->template_().data(), static_cast<int>(this->template_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Instance.template");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->template_(), target);
  }

  // .google.protobuf.Struct params = 3;
  if (this->has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->params_, deterministic, target);
  }

  // map<string, string> attribute_bindings = 4;
  if (!this->attribute_bindings().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.policy.v1beta1.Instance.AttributeBindingsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.policy.v1beta1.Instance.AttributeBindingsEntry.value");
      }
    };

    if (deterministic &&
        this->attribute_bindings().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attribute_bindings().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attribute_bindings().begin();
          it != this->attribute_bindings().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Instance_AttributeBindingsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attribute_bindings_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Instance_AttributeBindingsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attribute_bindings().begin();
          it != this->attribute_bindings().end(); ++it) {
        entry.reset(attribute_bindings_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // string compiled_template = 67794676;
  if (this->compiled_template().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->compiled_template().data(), static_cast<int>(this->compiled_template().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Instance.compiled_template");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        67794676, this->compiled_template(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.policy.v1beta1.Instance)
  return target;
}

size_t Instance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.policy.v1beta1.Instance)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> attribute_bindings = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attribute_bindings_size());
  {
    ::google::protobuf::scoped_ptr<Instance_AttributeBindingsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->attribute_bindings().begin();
        it != this->attribute_bindings().end(); ++it) {
      entry.reset(attribute_bindings_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string template = 2;
  if (this->template_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->template_());
  }

  // string compiled_template = 67794676;
  if (this->compiled_template().size() > 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->compiled_template());
  }

  // .google.protobuf.Struct params = 3;
  if (this->has_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->params_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Instance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.policy.v1beta1.Instance)
  GOOGLE_DCHECK_NE(&from, this);
  const Instance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Instance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.policy.v1beta1.Instance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.policy.v1beta1.Instance)
    MergeFrom(*source);
  }
}

void Instance::MergeFrom(const Instance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.policy.v1beta1.Instance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_bindings_.MergeFrom(from.attribute_bindings_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.template_().size() > 0) {

    template__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.template__);
  }
  if (from.compiled_template().size() > 0) {

    compiled_template_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.compiled_template_);
  }
  if (from.has_params()) {
    mutable_params()->::google::protobuf::Struct::MergeFrom(from.params());
  }
}

void Instance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.policy.v1beta1.Instance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Instance::CopyFrom(const Instance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.policy.v1beta1.Instance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instance::IsInitialized() const {
  return true;
}

void Instance::Swap(Instance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Instance::InternalSwap(Instance* other) {
  using std::swap;
  attribute_bindings_.Swap(&other->attribute_bindings_);
  name_.Swap(&other->name_);
  template__.Swap(&other->template__);
  compiled_template_.Swap(&other->compiled_template_);
  swap(params_, other->params_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Instance::GetMetadata() const {
  protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Handler::InitAsDefaultInstance() {
  ::istio::policy::v1beta1::_Handler_default_instance_._instance.get_mutable()->params_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
  ::istio::policy::v1beta1::_Handler_default_instance_._instance.get_mutable()->connection_ = const_cast< ::istio::policy::v1beta1::Connection*>(
      ::istio::policy::v1beta1::Connection::internal_default_instance());
}
void Handler::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) {
    delete params_;
  }
  params_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Handler::kNameFieldNumber;
const int Handler::kCompiledAdapterFieldNumber;
const int Handler::kAdapterFieldNumber;
const int Handler::kParamsFieldNumber;
const int Handler::kConnectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Handler::Handler()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsHandler();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.policy.v1beta1.Handler)
}
Handler::Handler(const Handler& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  adapter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.adapter().size() > 0) {
    adapter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adapter_);
  }
  compiled_adapter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.compiled_adapter().size() > 0) {
    compiled_adapter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.compiled_adapter_);
  }
  if (from.has_params()) {
    params_ = new ::google::protobuf::Struct(*from.params_);
  } else {
    params_ = NULL;
  }
  if (from.has_connection()) {
    connection_ = new ::istio::policy::v1beta1::Connection(*from.connection_);
  } else {
    connection_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:istio.policy.v1beta1.Handler)
}

void Handler::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adapter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compiled_adapter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connection_) -
      reinterpret_cast<char*>(&params_)) + sizeof(connection_));
  _cached_size_ = 0;
}

Handler::~Handler() {
  // @@protoc_insertion_point(destructor:istio.policy.v1beta1.Handler)
  SharedDtor();
}

void Handler::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adapter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compiled_adapter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete params_;
  if (this != internal_default_instance()) delete connection_;
}

void Handler::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Handler::descriptor() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Handler& Handler::default_instance() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsHandler();
  return *internal_default_instance();
}

Handler* Handler::New(::google::protobuf::Arena* arena) const {
  Handler* n = new Handler;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Handler::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.policy.v1beta1.Handler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adapter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compiled_adapter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && params_ != NULL) {
    delete params_;
  }
  params_ = NULL;
  if (GetArenaNoVirtual() == NULL && connection_ != NULL) {
    delete connection_;
  }
  connection_ = NULL;
  _internal_metadata_.Clear();
}

bool Handler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.policy.v1beta1.Handler)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(542357410u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.Handler.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string adapter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adapter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->adapter().data(), static_cast<int>(this->adapter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.Handler.adapter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct params = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.policy.v1beta1.Connection connection = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string compiled_adapter = 67794676;
      case 67794676: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 542357410 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compiled_adapter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->compiled_adapter().data(), static_cast<int>(this->compiled_adapter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.Handler.compiled_adapter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.policy.v1beta1.Handler)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.policy.v1beta1.Handler)
  return false;
#undef DO_
}

void Handler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.policy.v1beta1.Handler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Handler.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string adapter = 2;
  if (this->adapter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->adapter().data(), static_cast<int>(this->adapter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Handler.adapter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->adapter(), output);
  }

  // .google.protobuf.Struct params = 3;
  if (this->has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->params_, output);
  }

  // .istio.policy.v1beta1.Connection connection = 4;
  if (this->has_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->connection_, output);
  }

  // string compiled_adapter = 67794676;
  if (this->compiled_adapter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->compiled_adapter().data(), static_cast<int>(this->compiled_adapter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Handler.compiled_adapter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      67794676, this->compiled_adapter(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.policy.v1beta1.Handler)
}

::google::protobuf::uint8* Handler::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.policy.v1beta1.Handler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Handler.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string adapter = 2;
  if (this->adapter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->adapter().data(), static_cast<int>(this->adapter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Handler.adapter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->adapter(), target);
  }

  // .google.protobuf.Struct params = 3;
  if (this->has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->params_, deterministic, target);
  }

  // .istio.policy.v1beta1.Connection connection = 4;
  if (this->has_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->connection_, deterministic, target);
  }

  // string compiled_adapter = 67794676;
  if (this->compiled_adapter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->compiled_adapter().data(), static_cast<int>(this->compiled_adapter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Handler.compiled_adapter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        67794676, this->compiled_adapter(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.policy.v1beta1.Handler)
  return target;
}

size_t Handler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.policy.v1beta1.Handler)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string adapter = 2;
  if (this->adapter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->adapter());
  }

  // string compiled_adapter = 67794676;
  if (this->compiled_adapter().size() > 0) {
    total_size += 5 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->compiled_adapter());
  }

  // .google.protobuf.Struct params = 3;
  if (this->has_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->params_);
  }

  // .istio.policy.v1beta1.Connection connection = 4;
  if (this->has_connection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->connection_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Handler::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.policy.v1beta1.Handler)
  GOOGLE_DCHECK_NE(&from, this);
  const Handler* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Handler>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.policy.v1beta1.Handler)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.policy.v1beta1.Handler)
    MergeFrom(*source);
  }
}

void Handler::MergeFrom(const Handler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.policy.v1beta1.Handler)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.adapter().size() > 0) {

    adapter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adapter_);
  }
  if (from.compiled_adapter().size() > 0) {

    compiled_adapter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.compiled_adapter_);
  }
  if (from.has_params()) {
    mutable_params()->::google::protobuf::Struct::MergeFrom(from.params());
  }
  if (from.has_connection()) {
    mutable_connection()->::istio::policy::v1beta1::Connection::MergeFrom(from.connection());
  }
}

void Handler::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.policy.v1beta1.Handler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Handler::CopyFrom(const Handler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.policy.v1beta1.Handler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Handler::IsInitialized() const {
  return true;
}

void Handler::Swap(Handler* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Handler::InternalSwap(Handler* other) {
  using std::swap;
  name_.Swap(&other->name_);
  adapter_.Swap(&other->adapter_);
  compiled_adapter_.Swap(&other->compiled_adapter_);
  swap(params_, other->params_);
  swap(connection_, other->connection_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Handler::GetMetadata() const {
  protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Connection::InitAsDefaultInstance() {
  ::istio::policy::v1beta1::_Connection_default_instance_._instance.get_mutable()->timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::istio::policy::v1beta1::_Connection_default_instance_._instance.get_mutable()->authentication_ = const_cast< ::istio::policy::v1beta1::Authentication*>(
      ::istio::policy::v1beta1::Authentication::internal_default_instance());
}
void Connection::clear_timeout() {
  if (GetArenaNoVirtual() == NULL && timeout_ != NULL) {
    delete timeout_;
  }
  timeout_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Connection::kAddressFieldNumber;
const int Connection::kTimeoutFieldNumber;
const int Connection::kAuthenticationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Connection::Connection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsConnection();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.policy.v1beta1.Connection)
}
Connection::Connection(const Connection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.has_timeout()) {
    timeout_ = new ::google::protobuf::Duration(*from.timeout_);
  } else {
    timeout_ = NULL;
  }
  if (from.has_authentication()) {
    authentication_ = new ::istio::policy::v1beta1::Authentication(*from.authentication_);
  } else {
    authentication_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:istio.policy.v1beta1.Connection)
}

void Connection::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&authentication_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(authentication_));
  _cached_size_ = 0;
}

Connection::~Connection() {
  // @@protoc_insertion_point(destructor:istio.policy.v1beta1.Connection)
  SharedDtor();
}

void Connection::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timeout_;
  if (this != internal_default_instance()) delete authentication_;
}

void Connection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Connection::descriptor() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Connection& Connection::default_instance() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsConnection();
  return *internal_default_instance();
}

Connection* Connection::New(::google::protobuf::Arena* arena) const {
  Connection* n = new Connection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Connection::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.policy.v1beta1.Connection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && timeout_ != NULL) {
    delete timeout_;
  }
  timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && authentication_ != NULL) {
    delete authentication_;
  }
  authentication_ = NULL;
  _internal_metadata_.Clear();
}

bool Connection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.policy.v1beta1.Connection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.Connection.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration timeout = 3 [(.gogoproto.stdduration) = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.policy.v1beta1.Authentication authentication = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_authentication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.policy.v1beta1.Connection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.policy.v1beta1.Connection)
  return false;
#undef DO_
}

void Connection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.policy.v1beta1.Connection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Connection.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  // .google.protobuf.Duration timeout = 3 [(.gogoproto.stdduration) = true];
  if (this->has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->timeout_, output);
  }

  // .istio.policy.v1beta1.Authentication authentication = 4;
  if (this->has_authentication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->authentication_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.policy.v1beta1.Connection)
}

::google::protobuf::uint8* Connection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.policy.v1beta1.Connection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Connection.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  // .google.protobuf.Duration timeout = 3 [(.gogoproto.stdduration) = true];
  if (this->has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->timeout_, deterministic, target);
  }

  // .istio.policy.v1beta1.Authentication authentication = 4;
  if (this->has_authentication()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->authentication_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.policy.v1beta1.Connection)
  return target;
}

size_t Connection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.policy.v1beta1.Connection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // .google.protobuf.Duration timeout = 3 [(.gogoproto.stdduration) = true];
  if (this->has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->timeout_);
  }

  // .istio.policy.v1beta1.Authentication authentication = 4;
  if (this->has_authentication()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->authentication_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Connection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.policy.v1beta1.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  const Connection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Connection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.policy.v1beta1.Connection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.policy.v1beta1.Connection)
    MergeFrom(*source);
  }
}

void Connection::MergeFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.policy.v1beta1.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.has_timeout()) {
    mutable_timeout()->::google::protobuf::Duration::MergeFrom(from.timeout());
  }
  if (from.has_authentication()) {
    mutable_authentication()->::istio::policy::v1beta1::Authentication::MergeFrom(from.authentication());
  }
}

void Connection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.policy.v1beta1.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connection::CopyFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.policy.v1beta1.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connection::IsInitialized() const {
  return true;
}

void Connection::Swap(Connection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Connection::InternalSwap(Connection* other) {
  using std::swap;
  address_.Swap(&other->address_);
  swap(timeout_, other->timeout_);
  swap(authentication_, other->authentication_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Connection::GetMetadata() const {
  protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Sampling::InitAsDefaultInstance() {
  ::istio::policy::v1beta1::_Sampling_default_instance_._instance.get_mutable()->random_ = const_cast< ::istio::policy::v1beta1::RandomSampling*>(
      ::istio::policy::v1beta1::RandomSampling::internal_default_instance());
  ::istio::policy::v1beta1::_Sampling_default_instance_._instance.get_mutable()->rate_limit_ = const_cast< ::istio::policy::v1beta1::RateLimitSampling*>(
      ::istio::policy::v1beta1::RateLimitSampling::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sampling::kRandomFieldNumber;
const int Sampling::kRateLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sampling::Sampling()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsSampling();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.policy.v1beta1.Sampling)
}
Sampling::Sampling(const Sampling& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_random()) {
    random_ = new ::istio::policy::v1beta1::RandomSampling(*from.random_);
  } else {
    random_ = NULL;
  }
  if (from.has_rate_limit()) {
    rate_limit_ = new ::istio::policy::v1beta1::RateLimitSampling(*from.rate_limit_);
  } else {
    rate_limit_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:istio.policy.v1beta1.Sampling)
}

void Sampling::SharedCtor() {
  ::memset(&random_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rate_limit_) -
      reinterpret_cast<char*>(&random_)) + sizeof(rate_limit_));
  _cached_size_ = 0;
}

Sampling::~Sampling() {
  // @@protoc_insertion_point(destructor:istio.policy.v1beta1.Sampling)
  SharedDtor();
}

void Sampling::SharedDtor() {
  if (this != internal_default_instance()) delete random_;
  if (this != internal_default_instance()) delete rate_limit_;
}

void Sampling::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sampling::descriptor() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sampling& Sampling::default_instance() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsSampling();
  return *internal_default_instance();
}

Sampling* Sampling::New(::google::protobuf::Arena* arena) const {
  Sampling* n = new Sampling;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sampling::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.policy.v1beta1.Sampling)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && random_ != NULL) {
    delete random_;
  }
  random_ = NULL;
  if (GetArenaNoVirtual() == NULL && rate_limit_ != NULL) {
    delete rate_limit_;
  }
  rate_limit_ = NULL;
  _internal_metadata_.Clear();
}

bool Sampling::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.policy.v1beta1.Sampling)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.policy.v1beta1.RandomSampling random = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_random()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.policy.v1beta1.RateLimitSampling rate_limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rate_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.policy.v1beta1.Sampling)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.policy.v1beta1.Sampling)
  return false;
#undef DO_
}

void Sampling::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.policy.v1beta1.Sampling)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.policy.v1beta1.RandomSampling random = 1;
  if (this->has_random()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->random_, output);
  }

  // .istio.policy.v1beta1.RateLimitSampling rate_limit = 2;
  if (this->has_rate_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rate_limit_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.policy.v1beta1.Sampling)
}

::google::protobuf::uint8* Sampling::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.policy.v1beta1.Sampling)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.policy.v1beta1.RandomSampling random = 1;
  if (this->has_random()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->random_, deterministic, target);
  }

  // .istio.policy.v1beta1.RateLimitSampling rate_limit = 2;
  if (this->has_rate_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->rate_limit_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.policy.v1beta1.Sampling)
  return target;
}

size_t Sampling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.policy.v1beta1.Sampling)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .istio.policy.v1beta1.RandomSampling random = 1;
  if (this->has_random()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->random_);
  }

  // .istio.policy.v1beta1.RateLimitSampling rate_limit = 2;
  if (this->has_rate_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rate_limit_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sampling::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.policy.v1beta1.Sampling)
  GOOGLE_DCHECK_NE(&from, this);
  const Sampling* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sampling>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.policy.v1beta1.Sampling)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.policy.v1beta1.Sampling)
    MergeFrom(*source);
  }
}

void Sampling::MergeFrom(const Sampling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.policy.v1beta1.Sampling)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_random()) {
    mutable_random()->::istio::policy::v1beta1::RandomSampling::MergeFrom(from.random());
  }
  if (from.has_rate_limit()) {
    mutable_rate_limit()->::istio::policy::v1beta1::RateLimitSampling::MergeFrom(from.rate_limit());
  }
}

void Sampling::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.policy.v1beta1.Sampling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sampling::CopyFrom(const Sampling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.policy.v1beta1.Sampling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sampling::IsInitialized() const {
  return true;
}

void Sampling::Swap(Sampling* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sampling::InternalSwap(Sampling* other) {
  using std::swap;
  swap(random_, other->random_);
  swap(rate_limit_, other->rate_limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sampling::GetMetadata() const {
  protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RandomSampling::InitAsDefaultInstance() {
  ::istio::policy::v1beta1::_RandomSampling_default_instance_._instance.get_mutable()->percent_sampled_ = const_cast< ::istio::policy::v1beta1::FractionalPercent*>(
      ::istio::policy::v1beta1::FractionalPercent::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomSampling::kAttributeExpressionFieldNumber;
const int RandomSampling::kPercentSampledFieldNumber;
const int RandomSampling::kUseIndependentRandomnessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomSampling::RandomSampling()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsRandomSampling();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.policy.v1beta1.RandomSampling)
}
RandomSampling::RandomSampling(const RandomSampling& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attribute_expression_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attribute_expression().size() > 0) {
    attribute_expression_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attribute_expression_);
  }
  if (from.has_percent_sampled()) {
    percent_sampled_ = new ::istio::policy::v1beta1::FractionalPercent(*from.percent_sampled_);
  } else {
    percent_sampled_ = NULL;
  }
  use_independent_randomness_ = from.use_independent_randomness_;
  // @@protoc_insertion_point(copy_constructor:istio.policy.v1beta1.RandomSampling)
}

void RandomSampling::SharedCtor() {
  attribute_expression_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&percent_sampled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_independent_randomness_) -
      reinterpret_cast<char*>(&percent_sampled_)) + sizeof(use_independent_randomness_));
  _cached_size_ = 0;
}

RandomSampling::~RandomSampling() {
  // @@protoc_insertion_point(destructor:istio.policy.v1beta1.RandomSampling)
  SharedDtor();
}

void RandomSampling::SharedDtor() {
  attribute_expression_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete percent_sampled_;
}

void RandomSampling::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomSampling::descriptor() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomSampling& RandomSampling::default_instance() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsRandomSampling();
  return *internal_default_instance();
}

RandomSampling* RandomSampling::New(::google::protobuf::Arena* arena) const {
  RandomSampling* n = new RandomSampling;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomSampling::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.policy.v1beta1.RandomSampling)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_expression_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && percent_sampled_ != NULL) {
    delete percent_sampled_;
  }
  percent_sampled_ = NULL;
  use_independent_randomness_ = false;
  _internal_metadata_.Clear();
}

bool RandomSampling::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.policy.v1beta1.RandomSampling)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string attribute_expression = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attribute_expression()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->attribute_expression().data(), static_cast<int>(this->attribute_expression().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.RandomSampling.attribute_expression"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.policy.v1beta1.FractionalPercent percent_sampled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_percent_sampled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_independent_randomness = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_independent_randomness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.policy.v1beta1.RandomSampling)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.policy.v1beta1.RandomSampling)
  return false;
#undef DO_
}

void RandomSampling::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.policy.v1beta1.RandomSampling)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string attribute_expression = 1;
  if (this->attribute_expression().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->attribute_expression().data(), static_cast<int>(this->attribute_expression().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.RandomSampling.attribute_expression");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->attribute_expression(), output);
  }

  // .istio.policy.v1beta1.FractionalPercent percent_sampled = 2;
  if (this->has_percent_sampled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->percent_sampled_, output);
  }

  // bool use_independent_randomness = 3;
  if (this->use_independent_randomness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_independent_randomness(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.policy.v1beta1.RandomSampling)
}

::google::protobuf::uint8* RandomSampling::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.policy.v1beta1.RandomSampling)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string attribute_expression = 1;
  if (this->attribute_expression().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->attribute_expression().data(), static_cast<int>(this->attribute_expression().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.RandomSampling.attribute_expression");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->attribute_expression(), target);
  }

  // .istio.policy.v1beta1.FractionalPercent percent_sampled = 2;
  if (this->has_percent_sampled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->percent_sampled_, deterministic, target);
  }

  // bool use_independent_randomness = 3;
  if (this->use_independent_randomness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_independent_randomness(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.policy.v1beta1.RandomSampling)
  return target;
}

size_t RandomSampling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.policy.v1beta1.RandomSampling)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string attribute_expression = 1;
  if (this->attribute_expression().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->attribute_expression());
  }

  // .istio.policy.v1beta1.FractionalPercent percent_sampled = 2;
  if (this->has_percent_sampled()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->percent_sampled_);
  }

  // bool use_independent_randomness = 3;
  if (this->use_independent_randomness() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomSampling::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.policy.v1beta1.RandomSampling)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomSampling* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomSampling>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.policy.v1beta1.RandomSampling)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.policy.v1beta1.RandomSampling)
    MergeFrom(*source);
  }
}

void RandomSampling::MergeFrom(const RandomSampling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.policy.v1beta1.RandomSampling)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attribute_expression().size() > 0) {

    attribute_expression_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attribute_expression_);
  }
  if (from.has_percent_sampled()) {
    mutable_percent_sampled()->::istio::policy::v1beta1::FractionalPercent::MergeFrom(from.percent_sampled());
  }
  if (from.use_independent_randomness() != 0) {
    set_use_independent_randomness(from.use_independent_randomness());
  }
}

void RandomSampling::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.policy.v1beta1.RandomSampling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomSampling::CopyFrom(const RandomSampling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.policy.v1beta1.RandomSampling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomSampling::IsInitialized() const {
  return true;
}

void RandomSampling::Swap(RandomSampling* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomSampling::InternalSwap(RandomSampling* other) {
  using std::swap;
  attribute_expression_.Swap(&other->attribute_expression_);
  swap(percent_sampled_, other->percent_sampled_);
  swap(use_independent_randomness_, other->use_independent_randomness_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomSampling::GetMetadata() const {
  protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RateLimitSampling::InitAsDefaultInstance() {
  ::istio::policy::v1beta1::_RateLimitSampling_default_instance_._instance.get_mutable()->sampling_duration_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void RateLimitSampling::clear_sampling_duration() {
  if (GetArenaNoVirtual() == NULL && sampling_duration_ != NULL) {
    delete sampling_duration_;
  }
  sampling_duration_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RateLimitSampling::kSamplingDurationFieldNumber;
const int RateLimitSampling::kMaxUnsampledEntriesFieldNumber;
const int RateLimitSampling::kSamplingRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateLimitSampling::RateLimitSampling()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsRateLimitSampling();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.policy.v1beta1.RateLimitSampling)
}
RateLimitSampling::RateLimitSampling(const RateLimitSampling& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sampling_duration()) {
    sampling_duration_ = new ::google::protobuf::Duration(*from.sampling_duration_);
  } else {
    sampling_duration_ = NULL;
  }
  ::memcpy(&max_unsampled_entries_, &from.max_unsampled_entries_,
    static_cast<size_t>(reinterpret_cast<char*>(&sampling_rate_) -
    reinterpret_cast<char*>(&max_unsampled_entries_)) + sizeof(sampling_rate_));
  // @@protoc_insertion_point(copy_constructor:istio.policy.v1beta1.RateLimitSampling)
}

void RateLimitSampling::SharedCtor() {
  ::memset(&sampling_duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sampling_rate_) -
      reinterpret_cast<char*>(&sampling_duration_)) + sizeof(sampling_rate_));
  _cached_size_ = 0;
}

RateLimitSampling::~RateLimitSampling() {
  // @@protoc_insertion_point(destructor:istio.policy.v1beta1.RateLimitSampling)
  SharedDtor();
}

void RateLimitSampling::SharedDtor() {
  if (this != internal_default_instance()) delete sampling_duration_;
}

void RateLimitSampling::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateLimitSampling::descriptor() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RateLimitSampling& RateLimitSampling::default_instance() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsRateLimitSampling();
  return *internal_default_instance();
}

RateLimitSampling* RateLimitSampling::New(::google::protobuf::Arena* arena) const {
  RateLimitSampling* n = new RateLimitSampling;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RateLimitSampling::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.policy.v1beta1.RateLimitSampling)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sampling_duration_ != NULL) {
    delete sampling_duration_;
  }
  sampling_duration_ = NULL;
  ::memset(&max_unsampled_entries_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sampling_rate_) -
      reinterpret_cast<char*>(&max_unsampled_entries_)) + sizeof(sampling_rate_));
  _internal_metadata_.Clear();
}

bool RateLimitSampling::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.policy.v1beta1.RateLimitSampling)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Duration sampling_duration = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sampling_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 max_unsampled_entries = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_unsampled_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 sampling_rate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sampling_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.policy.v1beta1.RateLimitSampling)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.policy.v1beta1.RateLimitSampling)
  return false;
#undef DO_
}

void RateLimitSampling::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.policy.v1beta1.RateLimitSampling)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration sampling_duration = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  if (this->has_sampling_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sampling_duration_, output);
  }

  // int64 max_unsampled_entries = 2;
  if (this->max_unsampled_entries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->max_unsampled_entries(), output);
  }

  // int64 sampling_rate = 3;
  if (this->sampling_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sampling_rate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.policy.v1beta1.RateLimitSampling)
}

::google::protobuf::uint8* RateLimitSampling::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.policy.v1beta1.RateLimitSampling)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration sampling_duration = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  if (this->has_sampling_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->sampling_duration_, deterministic, target);
  }

  // int64 max_unsampled_entries = 2;
  if (this->max_unsampled_entries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->max_unsampled_entries(), target);
  }

  // int64 sampling_rate = 3;
  if (this->sampling_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->sampling_rate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.policy.v1beta1.RateLimitSampling)
  return target;
}

size_t RateLimitSampling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.policy.v1beta1.RateLimitSampling)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Duration sampling_duration = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  if (this->has_sampling_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sampling_duration_);
  }

  // int64 max_unsampled_entries = 2;
  if (this->max_unsampled_entries() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_unsampled_entries());
  }

  // int64 sampling_rate = 3;
  if (this->sampling_rate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sampling_rate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateLimitSampling::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.policy.v1beta1.RateLimitSampling)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimitSampling* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RateLimitSampling>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.policy.v1beta1.RateLimitSampling)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.policy.v1beta1.RateLimitSampling)
    MergeFrom(*source);
  }
}

void RateLimitSampling::MergeFrom(const RateLimitSampling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.policy.v1beta1.RateLimitSampling)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sampling_duration()) {
    mutable_sampling_duration()->::google::protobuf::Duration::MergeFrom(from.sampling_duration());
  }
  if (from.max_unsampled_entries() != 0) {
    set_max_unsampled_entries(from.max_unsampled_entries());
  }
  if (from.sampling_rate() != 0) {
    set_sampling_rate(from.sampling_rate());
  }
}

void RateLimitSampling::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.policy.v1beta1.RateLimitSampling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimitSampling::CopyFrom(const RateLimitSampling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.policy.v1beta1.RateLimitSampling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimitSampling::IsInitialized() const {
  return true;
}

void RateLimitSampling::Swap(RateLimitSampling* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateLimitSampling::InternalSwap(RateLimitSampling* other) {
  using std::swap;
  swap(sampling_duration_, other->sampling_duration_);
  swap(max_unsampled_entries_, other->max_unsampled_entries_);
  swap(sampling_rate_, other->sampling_rate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RateLimitSampling::GetMetadata() const {
  protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FractionalPercent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FractionalPercent::kNumeratorFieldNumber;
const int FractionalPercent::kDenominatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FractionalPercent::FractionalPercent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsFractionalPercent();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.policy.v1beta1.FractionalPercent)
}
FractionalPercent::FractionalPercent(const FractionalPercent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&numerator_, &from.numerator_,
    static_cast<size_t>(reinterpret_cast<char*>(&denominator_) -
    reinterpret_cast<char*>(&numerator_)) + sizeof(denominator_));
  // @@protoc_insertion_point(copy_constructor:istio.policy.v1beta1.FractionalPercent)
}

void FractionalPercent::SharedCtor() {
  ::memset(&numerator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&denominator_) -
      reinterpret_cast<char*>(&numerator_)) + sizeof(denominator_));
  _cached_size_ = 0;
}

FractionalPercent::~FractionalPercent() {
  // @@protoc_insertion_point(destructor:istio.policy.v1beta1.FractionalPercent)
  SharedDtor();
}

void FractionalPercent::SharedDtor() {
}

void FractionalPercent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FractionalPercent::descriptor() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FractionalPercent& FractionalPercent::default_instance() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsFractionalPercent();
  return *internal_default_instance();
}

FractionalPercent* FractionalPercent::New(::google::protobuf::Arena* arena) const {
  FractionalPercent* n = new FractionalPercent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FractionalPercent::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.policy.v1beta1.FractionalPercent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&numerator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&denominator_) -
      reinterpret_cast<char*>(&numerator_)) + sizeof(denominator_));
  _internal_metadata_.Clear();
}

bool FractionalPercent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.policy.v1beta1.FractionalPercent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 numerator = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numerator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.policy.v1beta1.FractionalPercent.DenominatorType denominator = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_denominator(static_cast< ::istio::policy::v1beta1::FractionalPercent_DenominatorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.policy.v1beta1.FractionalPercent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.policy.v1beta1.FractionalPercent)
  return false;
#undef DO_
}

void FractionalPercent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.policy.v1beta1.FractionalPercent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 numerator = 1;
  if (this->numerator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->numerator(), output);
  }

  // .istio.policy.v1beta1.FractionalPercent.DenominatorType denominator = 2;
  if (this->denominator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->denominator(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.policy.v1beta1.FractionalPercent)
}

::google::protobuf::uint8* FractionalPercent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.policy.v1beta1.FractionalPercent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 numerator = 1;
  if (this->numerator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->numerator(), target);
  }

  // .istio.policy.v1beta1.FractionalPercent.DenominatorType denominator = 2;
  if (this->denominator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->denominator(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.policy.v1beta1.FractionalPercent)
  return target;
}

size_t FractionalPercent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.policy.v1beta1.FractionalPercent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 numerator = 1;
  if (this->numerator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numerator());
  }

  // .istio.policy.v1beta1.FractionalPercent.DenominatorType denominator = 2;
  if (this->denominator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->denominator());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FractionalPercent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.policy.v1beta1.FractionalPercent)
  GOOGLE_DCHECK_NE(&from, this);
  const FractionalPercent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FractionalPercent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.policy.v1beta1.FractionalPercent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.policy.v1beta1.FractionalPercent)
    MergeFrom(*source);
  }
}

void FractionalPercent::MergeFrom(const FractionalPercent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.policy.v1beta1.FractionalPercent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.numerator() != 0) {
    set_numerator(from.numerator());
  }
  if (from.denominator() != 0) {
    set_denominator(from.denominator());
  }
}

void FractionalPercent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.policy.v1beta1.FractionalPercent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FractionalPercent::CopyFrom(const FractionalPercent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.policy.v1beta1.FractionalPercent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FractionalPercent::IsInitialized() const {
  return true;
}

void FractionalPercent::Swap(FractionalPercent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FractionalPercent::InternalSwap(FractionalPercent* other) {
  using std::swap;
  swap(numerator_, other->numerator_);
  swap(denominator_, other->denominator_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FractionalPercent::GetMetadata() const {
  protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Authentication::InitAsDefaultInstance() {
  ::istio::policy::v1beta1::_Authentication_default_instance_.tls_ = const_cast< ::istio::policy::v1beta1::Tls*>(
      ::istio::policy::v1beta1::Tls::internal_default_instance());
  ::istio::policy::v1beta1::_Authentication_default_instance_.mutual_ = const_cast< ::istio::policy::v1beta1::Mutual*>(
      ::istio::policy::v1beta1::Mutual::internal_default_instance());
}
void Authentication::set_allocated_tls(::istio::policy::v1beta1::Tls* tls) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_auth_type();
  if (tls) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tls = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tls, submessage_arena);
    }
    set_has_tls();
    auth_type_.tls_ = tls;
  }
  // @@protoc_insertion_point(field_set_allocated:istio.policy.v1beta1.Authentication.tls)
}
void Authentication::set_allocated_mutual(::istio::policy::v1beta1::Mutual* mutual) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_auth_type();
  if (mutual) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mutual = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mutual, submessage_arena);
    }
    set_has_mutual();
    auth_type_.mutual_ = mutual;
  }
  // @@protoc_insertion_point(field_set_allocated:istio.policy.v1beta1.Authentication.mutual)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Authentication::kTlsFieldNumber;
const int Authentication::kMutualFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Authentication::Authentication()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsAuthentication();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.policy.v1beta1.Authentication)
}
Authentication::Authentication(const Authentication& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_auth_type();
  switch (from.auth_type_case()) {
    case kTls: {
      mutable_tls()->::istio::policy::v1beta1::Tls::MergeFrom(from.tls());
      break;
    }
    case kMutual: {
      mutable_mutual()->::istio::policy::v1beta1::Mutual::MergeFrom(from.mutual());
      break;
    }
    case AUTH_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:istio.policy.v1beta1.Authentication)
}

void Authentication::SharedCtor() {
  clear_has_auth_type();
  _cached_size_ = 0;
}

Authentication::~Authentication() {
  // @@protoc_insertion_point(destructor:istio.policy.v1beta1.Authentication)
  SharedDtor();
}

void Authentication::SharedDtor() {
  if (has_auth_type()) {
    clear_auth_type();
  }
}

void Authentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Authentication::descriptor() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Authentication& Authentication::default_instance() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsAuthentication();
  return *internal_default_instance();
}

Authentication* Authentication::New(::google::protobuf::Arena* arena) const {
  Authentication* n = new Authentication;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Authentication::clear_auth_type() {
// @@protoc_insertion_point(one_of_clear_start:istio.policy.v1beta1.Authentication)
  switch (auth_type_case()) {
    case kTls: {
      delete auth_type_.tls_;
      break;
    }
    case kMutual: {
      delete auth_type_.mutual_;
      break;
    }
    case AUTH_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AUTH_TYPE_NOT_SET;
}


void Authentication::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.policy.v1beta1.Authentication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_auth_type();
  _internal_metadata_.Clear();
}

bool Authentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.policy.v1beta1.Authentication)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.policy.v1beta1.Tls tls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.policy.v1beta1.Mutual mutual = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mutual()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.policy.v1beta1.Authentication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.policy.v1beta1.Authentication)
  return false;
#undef DO_
}

void Authentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.policy.v1beta1.Authentication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.policy.v1beta1.Tls tls = 1;
  if (has_tls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *auth_type_.tls_, output);
  }

  // .istio.policy.v1beta1.Mutual mutual = 2;
  if (has_mutual()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *auth_type_.mutual_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.policy.v1beta1.Authentication)
}

::google::protobuf::uint8* Authentication::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.policy.v1beta1.Authentication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.policy.v1beta1.Tls tls = 1;
  if (has_tls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *auth_type_.tls_, deterministic, target);
  }

  // .istio.policy.v1beta1.Mutual mutual = 2;
  if (has_mutual()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *auth_type_.mutual_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.policy.v1beta1.Authentication)
  return target;
}

size_t Authentication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.policy.v1beta1.Authentication)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (auth_type_case()) {
    // .istio.policy.v1beta1.Tls tls = 1;
    case kTls: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *auth_type_.tls_);
      break;
    }
    // .istio.policy.v1beta1.Mutual mutual = 2;
    case kMutual: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *auth_type_.mutual_);
      break;
    }
    case AUTH_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Authentication::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.policy.v1beta1.Authentication)
  GOOGLE_DCHECK_NE(&from, this);
  const Authentication* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Authentication>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.policy.v1beta1.Authentication)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.policy.v1beta1.Authentication)
    MergeFrom(*source);
  }
}

void Authentication::MergeFrom(const Authentication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.policy.v1beta1.Authentication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.auth_type_case()) {
    case kTls: {
      mutable_tls()->::istio::policy::v1beta1::Tls::MergeFrom(from.tls());
      break;
    }
    case kMutual: {
      mutable_mutual()->::istio::policy::v1beta1::Mutual::MergeFrom(from.mutual());
      break;
    }
    case AUTH_TYPE_NOT_SET: {
      break;
    }
  }
}

void Authentication::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.policy.v1beta1.Authentication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authentication::CopyFrom(const Authentication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.policy.v1beta1.Authentication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authentication::IsInitialized() const {
  return true;
}

void Authentication::Swap(Authentication* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authentication::InternalSwap(Authentication* other) {
  using std::swap;
  swap(auth_type_, other->auth_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Authentication::GetMetadata() const {
  protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Tls::InitAsDefaultInstance() {
  ::istio::policy::v1beta1::_Tls_default_instance_.token_path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::istio::policy::v1beta1::_Tls_default_instance_.oauth_ = const_cast< ::istio::policy::v1beta1::OAuth*>(
      ::istio::policy::v1beta1::OAuth::internal_default_instance());
  ::istio::policy::v1beta1::_Tls_default_instance_.auth_header_ = 0;
  ::istio::policy::v1beta1::_Tls_default_instance_.custom_header_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Tls::set_allocated_oauth(::istio::policy::v1beta1::OAuth* oauth) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_token_source();
  if (oauth) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      oauth = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oauth, submessage_arena);
    }
    set_has_oauth();
    token_source_.oauth_ = oauth;
  }
  // @@protoc_insertion_point(field_set_allocated:istio.policy.v1beta1.Tls.oauth)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tls::kCaCertificatesFieldNumber;
const int Tls::kTokenPathFieldNumber;
const int Tls::kOauthFieldNumber;
const int Tls::kAuthHeaderFieldNumber;
const int Tls::kCustomHeaderFieldNumber;
const int Tls::kServerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tls::Tls()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsTls();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.policy.v1beta1.Tls)
}
Tls::Tls(const Tls& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ca_certificates_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ca_certificates().size() > 0) {
    ca_certificates_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ca_certificates_);
  }
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_name().size() > 0) {
    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  clear_has_token_source();
  switch (from.token_source_case()) {
    case kTokenPath: {
      set_token_path(from.token_path());
      break;
    }
    case kOauth: {
      mutable_oauth()->::istio::policy::v1beta1::OAuth::MergeFrom(from.oauth());
      break;
    }
    case TOKEN_SOURCE_NOT_SET: {
      break;
    }
  }
  clear_has_token_type();
  switch (from.token_type_case()) {
    case kAuthHeader: {
      set_auth_header(from.auth_header());
      break;
    }
    case kCustomHeader: {
      set_custom_header(from.custom_header());
      break;
    }
    case TOKEN_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:istio.policy.v1beta1.Tls)
}

void Tls::SharedCtor() {
  ca_certificates_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token_source();
  clear_has_token_type();
  _cached_size_ = 0;
}

Tls::~Tls() {
  // @@protoc_insertion_point(destructor:istio.policy.v1beta1.Tls)
  SharedDtor();
}

void Tls::SharedDtor() {
  ca_certificates_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_token_source()) {
    clear_token_source();
  }
  if (has_token_type()) {
    clear_token_type();
  }
}

void Tls::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tls::descriptor() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Tls& Tls::default_instance() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsTls();
  return *internal_default_instance();
}

Tls* Tls::New(::google::protobuf::Arena* arena) const {
  Tls* n = new Tls;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Tls::clear_token_source() {
// @@protoc_insertion_point(one_of_clear_start:istio.policy.v1beta1.Tls)
  switch (token_source_case()) {
    case kTokenPath: {
      token_source_.token_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kOauth: {
      delete token_source_.oauth_;
      break;
    }
    case TOKEN_SOURCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TOKEN_SOURCE_NOT_SET;
}

void Tls::clear_token_type() {
// @@protoc_insertion_point(one_of_clear_start:istio.policy.v1beta1.Tls)
  switch (token_type_case()) {
    case kAuthHeader: {
      // No need to clear
      break;
    }
    case kCustomHeader: {
      token_type_.custom_header_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case TOKEN_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = TOKEN_TYPE_NOT_SET;
}


void Tls::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.policy.v1beta1.Tls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ca_certificates_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_token_source();
  clear_token_type();
  _internal_metadata_.Clear();
}

bool Tls::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.policy.v1beta1.Tls)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ca_certificates = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ca_certificates()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ca_certificates().data(), static_cast<int>(this->ca_certificates().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.Tls.ca_certificates"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token_path().data(), static_cast<int>(this->token_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.Tls.token_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.policy.v1beta1.OAuth oauth = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_oauth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.policy.v1beta1.Tls.AuthHeader auth_header = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_auth_header(static_cast< ::istio::policy::v1beta1::Tls_AuthHeader >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string custom_header = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_header()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->custom_header().data(), static_cast<int>(this->custom_header().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.Tls.custom_header"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_name().data(), static_cast<int>(this->server_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.Tls.server_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.policy.v1beta1.Tls)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.policy.v1beta1.Tls)
  return false;
#undef DO_
}

void Tls::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.policy.v1beta1.Tls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ca_certificates = 1;
  if (this->ca_certificates().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ca_certificates().data(), static_cast<int>(this->ca_certificates().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Tls.ca_certificates");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ca_certificates(), output);
  }

  // string token_path = 2;
  if (has_token_path()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token_path().data(), static_cast<int>(this->token_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Tls.token_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token_path(), output);
  }

  // .istio.policy.v1beta1.OAuth oauth = 3;
  if (has_oauth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *token_source_.oauth_, output);
  }

  // .istio.policy.v1beta1.Tls.AuthHeader auth_header = 4;
  if (has_auth_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->auth_header(), output);
  }

  // string custom_header = 5;
  if (has_custom_header()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_header().data(), static_cast<int>(this->custom_header().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Tls.custom_header");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->custom_header(), output);
  }

  // string server_name = 6;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Tls.server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->server_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.policy.v1beta1.Tls)
}

::google::protobuf::uint8* Tls::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.policy.v1beta1.Tls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ca_certificates = 1;
  if (this->ca_certificates().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ca_certificates().data(), static_cast<int>(this->ca_certificates().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Tls.ca_certificates");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ca_certificates(), target);
  }

  // string token_path = 2;
  if (has_token_path()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token_path().data(), static_cast<int>(this->token_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Tls.token_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token_path(), target);
  }

  // .istio.policy.v1beta1.OAuth oauth = 3;
  if (has_oauth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *token_source_.oauth_, deterministic, target);
  }

  // .istio.policy.v1beta1.Tls.AuthHeader auth_header = 4;
  if (has_auth_header()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->auth_header(), target);
  }

  // string custom_header = 5;
  if (has_custom_header()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_header().data(), static_cast<int>(this->custom_header().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Tls.custom_header");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->custom_header(), target);
  }

  // string server_name = 6;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Tls.server_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->server_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.policy.v1beta1.Tls)
  return target;
}

size_t Tls::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.policy.v1beta1.Tls)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ca_certificates = 1;
  if (this->ca_certificates().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ca_certificates());
  }

  // string server_name = 6;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_name());
  }

  switch (token_source_case()) {
    // string token_path = 2;
    case kTokenPath: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token_path());
      break;
    }
    // .istio.policy.v1beta1.OAuth oauth = 3;
    case kOauth: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *token_source_.oauth_);
      break;
    }
    case TOKEN_SOURCE_NOT_SET: {
      break;
    }
  }
  switch (token_type_case()) {
    // .istio.policy.v1beta1.Tls.AuthHeader auth_header = 4;
    case kAuthHeader: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->auth_header());
      break;
    }
    // string custom_header = 5;
    case kCustomHeader: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_header());
      break;
    }
    case TOKEN_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tls::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.policy.v1beta1.Tls)
  GOOGLE_DCHECK_NE(&from, this);
  const Tls* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Tls>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.policy.v1beta1.Tls)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.policy.v1beta1.Tls)
    MergeFrom(*source);
  }
}

void Tls::MergeFrom(const Tls& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.policy.v1beta1.Tls)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ca_certificates().size() > 0) {

    ca_certificates_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ca_certificates_);
  }
  if (from.server_name().size() > 0) {

    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  switch (from.token_source_case()) {
    case kTokenPath: {
      set_token_path(from.token_path());
      break;
    }
    case kOauth: {
      mutable_oauth()->::istio::policy::v1beta1::OAuth::MergeFrom(from.oauth());
      break;
    }
    case TOKEN_SOURCE_NOT_SET: {
      break;
    }
  }
  switch (from.token_type_case()) {
    case kAuthHeader: {
      set_auth_header(from.auth_header());
      break;
    }
    case kCustomHeader: {
      set_custom_header(from.custom_header());
      break;
    }
    case TOKEN_TYPE_NOT_SET: {
      break;
    }
  }
}

void Tls::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.policy.v1beta1.Tls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tls::CopyFrom(const Tls& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.policy.v1beta1.Tls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tls::IsInitialized() const {
  return true;
}

void Tls::Swap(Tls* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tls::InternalSwap(Tls* other) {
  using std::swap;
  ca_certificates_.Swap(&other->ca_certificates_);
  server_name_.Swap(&other->server_name_);
  swap(token_source_, other->token_source_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(token_type_, other->token_type_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Tls::GetMetadata() const {
  protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

OAuth_EndpointParamsEntry_DoNotUse::OAuth_EndpointParamsEntry_DoNotUse() {}
OAuth_EndpointParamsEntry_DoNotUse::OAuth_EndpointParamsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void OAuth_EndpointParamsEntry_DoNotUse::MergeFrom(const OAuth_EndpointParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata OAuth_EndpointParamsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[16];
}
void OAuth_EndpointParamsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void OAuth::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OAuth::kClientIdFieldNumber;
const int OAuth::kClientSecretFieldNumber;
const int OAuth::kTokenUrlFieldNumber;
const int OAuth::kScopesFieldNumber;
const int OAuth::kEndpointParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OAuth::OAuth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsOAuth();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.policy.v1beta1.OAuth)
}
OAuth::OAuth(const OAuth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      scopes_(from.scopes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  endpoint_params_.MergeFrom(from.endpoint_params_);
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  client_secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_secret().size() > 0) {
    client_secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_secret_);
  }
  token_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token_url().size() > 0) {
    token_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_url_);
  }
  // @@protoc_insertion_point(copy_constructor:istio.policy.v1beta1.OAuth)
}

void OAuth::SharedCtor() {
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

OAuth::~OAuth() {
  // @@protoc_insertion_point(destructor:istio.policy.v1beta1.OAuth)
  SharedDtor();
}

void OAuth::SharedDtor() {
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_secret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OAuth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OAuth::descriptor() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OAuth& OAuth::default_instance() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsOAuth();
  return *internal_default_instance();
}

OAuth* OAuth::New(::google::protobuf::Arena* arena) const {
  OAuth* n = new OAuth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.policy.v1beta1.OAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scopes_.Clear();
  endpoint_params_.Clear();
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool OAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.policy.v1beta1.OAuth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string client_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), static_cast<int>(this->client_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.OAuth.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_secret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_secret()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_secret().data(), static_cast<int>(this->client_secret().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.OAuth.client_secret"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token_url().data(), static_cast<int>(this->token_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.OAuth.token_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string scopes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_scopes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scopes(this->scopes_size() - 1).data(),
            static_cast<int>(this->scopes(this->scopes_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.OAuth.scopes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> endpoint_params = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          OAuth_EndpointParamsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              OAuth_EndpointParamsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&endpoint_params_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.OAuth.EndpointParamsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.OAuth.EndpointParamsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.policy.v1beta1.OAuth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.policy.v1beta1.OAuth)
  return false;
#undef DO_
}

void OAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.policy.v1beta1.OAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.OAuth.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_id(), output);
  }

  // string client_secret = 2;
  if (this->client_secret().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_secret().data(), static_cast<int>(this->client_secret().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.OAuth.client_secret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_secret(), output);
  }

  // string token_url = 3;
  if (this->token_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token_url().data(), static_cast<int>(this->token_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.OAuth.token_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token_url(), output);
  }

  // repeated string scopes = 4;
  for (int i = 0, n = this->scopes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scopes(i).data(), static_cast<int>(this->scopes(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.OAuth.scopes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->scopes(i), output);
  }

  // map<string, string> endpoint_params = 5;
  if (!this->endpoint_params().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.policy.v1beta1.OAuth.EndpointParamsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.policy.v1beta1.OAuth.EndpointParamsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->endpoint_params().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->endpoint_params().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->endpoint_params().begin();
          it != this->endpoint_params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<OAuth_EndpointParamsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(endpoint_params_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<OAuth_EndpointParamsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->endpoint_params().begin();
          it != this->endpoint_params().end(); ++it) {
        entry.reset(endpoint_params_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.policy.v1beta1.OAuth)
}

::google::protobuf::uint8* OAuth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.policy.v1beta1.OAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.OAuth.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_id(), target);
  }

  // string client_secret = 2;
  if (this->client_secret().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_secret().data(), static_cast<int>(this->client_secret().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.OAuth.client_secret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_secret(), target);
  }

  // string token_url = 3;
  if (this->token_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token_url().data(), static_cast<int>(this->token_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.OAuth.token_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token_url(), target);
  }

  // repeated string scopes = 4;
  for (int i = 0, n = this->scopes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scopes(i).data(), static_cast<int>(this->scopes(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.OAuth.scopes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->scopes(i), target);
  }

  // map<string, string> endpoint_params = 5;
  if (!this->endpoint_params().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.policy.v1beta1.OAuth.EndpointParamsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.policy.v1beta1.OAuth.EndpointParamsEntry.value");
      }
    };

    if (deterministic &&
        this->endpoint_params().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->endpoint_params().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->endpoint_params().begin();
          it != this->endpoint_params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<OAuth_EndpointParamsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(endpoint_params_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<OAuth_EndpointParamsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->endpoint_params().begin();
          it != this->endpoint_params().end(); ++it) {
        entry.reset(endpoint_params_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.policy.v1beta1.OAuth)
  return target;
}

size_t OAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.policy.v1beta1.OAuth)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string scopes = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->scopes_size());
  for (int i = 0, n = this->scopes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->scopes(i));
  }

  // map<string, string> endpoint_params = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->endpoint_params_size());
  {
    ::google::protobuf::scoped_ptr<OAuth_EndpointParamsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->endpoint_params().begin();
        it != this->endpoint_params().end(); ++it) {
      entry.reset(endpoint_params_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // string client_secret = 2;
  if (this->client_secret().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_secret());
  }

  // string token_url = 3;
  if (this->token_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token_url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OAuth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.policy.v1beta1.OAuth)
  GOOGLE_DCHECK_NE(&from, this);
  const OAuth* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OAuth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.policy.v1beta1.OAuth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.policy.v1beta1.OAuth)
    MergeFrom(*source);
  }
}

void OAuth::MergeFrom(const OAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.policy.v1beta1.OAuth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scopes_.MergeFrom(from.scopes_);
  endpoint_params_.MergeFrom(from.endpoint_params_);
  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.client_secret().size() > 0) {

    client_secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_secret_);
  }
  if (from.token_url().size() > 0) {

    token_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_url_);
  }
}

void OAuth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.policy.v1beta1.OAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OAuth::CopyFrom(const OAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.policy.v1beta1.OAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OAuth::IsInitialized() const {
  return true;
}

void OAuth::Swap(OAuth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OAuth::InternalSwap(OAuth* other) {
  using std::swap;
  scopes_.InternalSwap(&other->scopes_);
  endpoint_params_.Swap(&other->endpoint_params_);
  client_id_.Swap(&other->client_id_);
  client_secret_.Swap(&other->client_secret_);
  token_url_.Swap(&other->token_url_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OAuth::GetMetadata() const {
  protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Mutual::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mutual::kPrivateKeyFieldNumber;
const int Mutual::kClientCertificateFieldNumber;
const int Mutual::kCaCertificatesFieldNumber;
const int Mutual::kServerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mutual::Mutual()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsMutual();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.policy.v1beta1.Mutual)
}
Mutual::Mutual(const Mutual& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  private_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.private_key().size() > 0) {
    private_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_key_);
  }
  client_certificate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_certificate().size() > 0) {
    client_certificate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_certificate_);
  }
  ca_certificates_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ca_certificates().size() > 0) {
    ca_certificates_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ca_certificates_);
  }
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_name().size() > 0) {
    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  // @@protoc_insertion_point(copy_constructor:istio.policy.v1beta1.Mutual)
}

void Mutual::SharedCtor() {
  private_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_certificate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ca_certificates_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Mutual::~Mutual() {
  // @@protoc_insertion_point(destructor:istio.policy.v1beta1.Mutual)
  SharedDtor();
}

void Mutual::SharedDtor() {
  private_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_certificate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ca_certificates_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Mutual::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mutual::descriptor() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mutual& Mutual::default_instance() {
  ::protobuf_policy_2fv1beta1_2fcfg_2eproto::InitDefaultsMutual();
  return *internal_default_instance();
}

Mutual* Mutual::New(::google::protobuf::Arena* arena) const {
  Mutual* n = new Mutual;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mutual::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.policy.v1beta1.Mutual)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ca_certificates_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Mutual::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.policy.v1beta1.Mutual)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string private_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->private_key().data(), static_cast<int>(this->private_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.Mutual.private_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_certificate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_certificate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_certificate().data(), static_cast<int>(this->client_certificate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.Mutual.client_certificate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ca_certificates = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ca_certificates()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ca_certificates().data(), static_cast<int>(this->ca_certificates().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.Mutual.ca_certificates"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_name().data(), static_cast<int>(this->server_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.Mutual.server_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.policy.v1beta1.Mutual)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.policy.v1beta1.Mutual)
  return false;
#undef DO_
}

void Mutual::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.policy.v1beta1.Mutual)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string private_key = 1;
  if (this->private_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->private_key().data(), static_cast<int>(this->private_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Mutual.private_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_key(), output);
  }

  // string client_certificate = 2;
  if (this->client_certificate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_certificate().data(), static_cast<int>(this->client_certificate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Mutual.client_certificate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_certificate(), output);
  }

  // string ca_certificates = 3;
  if (this->ca_certificates().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ca_certificates().data(), static_cast<int>(this->ca_certificates().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Mutual.ca_certificates");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ca_certificates(), output);
  }

  // string server_name = 4;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Mutual.server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->server_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.policy.v1beta1.Mutual)
}

::google::protobuf::uint8* Mutual::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.policy.v1beta1.Mutual)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string private_key = 1;
  if (this->private_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->private_key().data(), static_cast<int>(this->private_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Mutual.private_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_key(), target);
  }

  // string client_certificate = 2;
  if (this->client_certificate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_certificate().data(), static_cast<int>(this->client_certificate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Mutual.client_certificate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_certificate(), target);
  }

  // string ca_certificates = 3;
  if (this->ca_certificates().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ca_certificates().data(), static_cast<int>(this->ca_certificates().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Mutual.ca_certificates");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ca_certificates(), target);
  }

  // string server_name = 4;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Mutual.server_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->server_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.policy.v1beta1.Mutual)
  return target;
}

size_t Mutual::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.policy.v1beta1.Mutual)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string private_key = 1;
  if (this->private_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->private_key());
  }

  // string client_certificate = 2;
  if (this->client_certificate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_certificate());
  }

  // string ca_certificates = 3;
  if (this->ca_certificates().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ca_certificates());
  }

  // string server_name = 4;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mutual::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.policy.v1beta1.Mutual)
  GOOGLE_DCHECK_NE(&from, this);
  const Mutual* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mutual>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.policy.v1beta1.Mutual)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.policy.v1beta1.Mutual)
    MergeFrom(*source);
  }
}

void Mutual::MergeFrom(const Mutual& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.policy.v1beta1.Mutual)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.private_key().size() > 0) {

    private_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_key_);
  }
  if (from.client_certificate().size() > 0) {

    client_certificate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_certificate_);
  }
  if (from.ca_certificates().size() > 0) {

    ca_certificates_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ca_certificates_);
  }
  if (from.server_name().size() > 0) {

    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
}

void Mutual::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.policy.v1beta1.Mutual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mutual::CopyFrom(const Mutual& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.policy.v1beta1.Mutual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mutual::IsInitialized() const {
  return true;
}

void Mutual::Swap(Mutual* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mutual::InternalSwap(Mutual* other) {
  using std::swap;
  private_key_.Swap(&other->private_key_);
  client_certificate_.Swap(&other->client_certificate_);
  ca_certificates_.Swap(&other->ca_certificates_);
  server_name_.Swap(&other->server_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mutual::GetMetadata() const {
  protobuf_policy_2fv1beta1_2fcfg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fcfg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace policy
}  // namespace istio

// @@protoc_insertion_point(global_scope)
