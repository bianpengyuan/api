// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: policy/v1beta1/type.proto

#include "policy/v1beta1/type.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace istio {
namespace policy {
namespace v1beta1 {
class ValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Value>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr string_value_;
  ::google::protobuf::int64 int64_value_;
  double double_value_;
  bool bool_value_;
  const ::istio::policy::v1beta1::IPAddress* ip_address_value_;
  const ::istio::policy::v1beta1::TimeStamp* timestamp_value_;
  const ::istio::policy::v1beta1::Duration* duration_value_;
  const ::istio::policy::v1beta1::EmailAddress* email_address_value_;
  const ::istio::policy::v1beta1::DNSName* dns_name_value_;
  const ::istio::policy::v1beta1::Uri* uri_value_;
} _Value_default_instance_;
class IPAddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IPAddress>
      _instance;
} _IPAddress_default_instance_;
class DurationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Duration>
      _instance;
} _Duration_default_instance_;
class TimeStampDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimeStamp>
      _instance;
} _TimeStamp_default_instance_;
class DNSNameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DNSName>
      _instance;
} _DNSName_default_instance_;
class EmailAddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EmailAddress>
      _instance;
} _EmailAddress_default_instance_;
class UriDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Uri>
      _instance;
} _Uri_default_instance_;
}  // namespace v1beta1
}  // namespace policy
}  // namespace istio
namespace protobuf_policy_2fv1beta1_2ftype_2eproto {
void InitDefaultsValueImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsIPAddress();
  protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsTimeStamp();
  protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsDuration();
  protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsEmailAddress();
  protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsDNSName();
  protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsUri();
  {
    void* ptr = &::istio::policy::v1beta1::_Value_default_instance_;
    new (ptr) ::istio::policy::v1beta1::Value();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::policy::v1beta1::Value::InitAsDefaultInstance();
}

void InitDefaultsValue() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsValueImpl);
}

void InitDefaultsIPAddressImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::policy::v1beta1::_IPAddress_default_instance_;
    new (ptr) ::istio::policy::v1beta1::IPAddress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::policy::v1beta1::IPAddress::InitAsDefaultInstance();
}

void InitDefaultsIPAddress() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIPAddressImpl);
}

void InitDefaultsDurationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaultsDuration();
  {
    void* ptr = &::istio::policy::v1beta1::_Duration_default_instance_;
    new (ptr) ::istio::policy::v1beta1::Duration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::policy::v1beta1::Duration::InitAsDefaultInstance();
}

void InitDefaultsDuration() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDurationImpl);
}

void InitDefaultsTimeStampImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  {
    void* ptr = &::istio::policy::v1beta1::_TimeStamp_default_instance_;
    new (ptr) ::istio::policy::v1beta1::TimeStamp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::policy::v1beta1::TimeStamp::InitAsDefaultInstance();
}

void InitDefaultsTimeStamp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTimeStampImpl);
}

void InitDefaultsDNSNameImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::policy::v1beta1::_DNSName_default_instance_;
    new (ptr) ::istio::policy::v1beta1::DNSName();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::policy::v1beta1::DNSName::InitAsDefaultInstance();
}

void InitDefaultsDNSName() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDNSNameImpl);
}

void InitDefaultsEmailAddressImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::policy::v1beta1::_EmailAddress_default_instance_;
    new (ptr) ::istio::policy::v1beta1::EmailAddress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::policy::v1beta1::EmailAddress::InitAsDefaultInstance();
}

void InitDefaultsEmailAddress() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEmailAddressImpl);
}

void InitDefaultsUriImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::policy::v1beta1::_Uri_default_instance_;
    new (ptr) ::istio::policy::v1beta1::Uri();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::policy::v1beta1::Uri::InitAsDefaultInstance();
}

void InitDefaultsUri() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUriImpl);
}

::google::protobuf::Metadata file_level_metadata[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Value, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Value, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::istio::policy::v1beta1::ValueDefaultTypeInternal, string_value_),
  offsetof(::istio::policy::v1beta1::ValueDefaultTypeInternal, int64_value_),
  offsetof(::istio::policy::v1beta1::ValueDefaultTypeInternal, double_value_),
  offsetof(::istio::policy::v1beta1::ValueDefaultTypeInternal, bool_value_),
  offsetof(::istio::policy::v1beta1::ValueDefaultTypeInternal, ip_address_value_),
  offsetof(::istio::policy::v1beta1::ValueDefaultTypeInternal, timestamp_value_),
  offsetof(::istio::policy::v1beta1::ValueDefaultTypeInternal, duration_value_),
  offsetof(::istio::policy::v1beta1::ValueDefaultTypeInternal, email_address_value_),
  offsetof(::istio::policy::v1beta1::ValueDefaultTypeInternal, dns_name_value_),
  offsetof(::istio::policy::v1beta1::ValueDefaultTypeInternal, uri_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Value, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::IPAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::IPAddress, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Duration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Duration, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::TimeStamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::TimeStamp, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::DNSName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::DNSName, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::EmailAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::EmailAddress, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Uri, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::Uri, value_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::istio::policy::v1beta1::Value)},
  { 16, -1, sizeof(::istio::policy::v1beta1::IPAddress)},
  { 22, -1, sizeof(::istio::policy::v1beta1::Duration)},
  { 28, -1, sizeof(::istio::policy::v1beta1::TimeStamp)},
  { 34, -1, sizeof(::istio::policy::v1beta1::DNSName)},
  { 40, -1, sizeof(::istio::policy::v1beta1::EmailAddress)},
  { 46, -1, sizeof(::istio::policy::v1beta1::Uri)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_Value_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_IPAddress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_Duration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_TimeStamp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_DNSName_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_EmailAddress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_Uri_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "policy/v1beta1/type.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031policy/v1beta1/type.proto\022\024istio.polic"
      "y.v1beta1\032\036google/protobuf/duration.prot"
      "o\032\037google/protobuf/timestamp.proto\"\314\003\n\005V"
      "alue\022\026\n\014string_value\030\001 \001(\tH\000\022\025\n\013int64_va"
      "lue\030\002 \001(\003H\000\022\026\n\014double_value\030\003 \001(\001H\000\022\024\n\nb"
      "ool_value\030\004 \001(\010H\000\022;\n\020ip_address_value\030\005 "
      "\001(\0132\037.istio.policy.v1beta1.IPAddressH\000\022:"
      "\n\017timestamp_value\030\006 \001(\0132\037.istio.policy.v"
      "1beta1.TimeStampH\000\0228\n\016duration_value\030\007 \001"
      "(\0132\036.istio.policy.v1beta1.DurationH\000\022A\n\023"
      "email_address_value\030\010 \001(\0132\".istio.policy"
      ".v1beta1.EmailAddressH\000\0227\n\016dns_name_valu"
      "e\030\t \001(\0132\035.istio.policy.v1beta1.DNSNameH\000"
      "\022.\n\turi_value\030\n \001(\0132\031.istio.policy.v1bet"
      "a1.UriH\000B\007\n\005value\"\032\n\tIPAddress\022\r\n\005value\030"
      "\001 \001(\014\"4\n\010Duration\022(\n\005value\030\001 \001(\0132\031.googl"
      "e.protobuf.Duration\"6\n\tTimeStamp\022)\n\005valu"
      "e\030\001 \001(\0132\032.google.protobuf.Timestamp\"\030\n\007D"
      "NSName\022\r\n\005value\030\001 \001(\t\"\035\n\014EmailAddress\022\r\n"
      "\005value\030\001 \001(\t\"\024\n\003Uri\022\r\n\005value\030\001 \001(\tB\035Z\033is"
      "tio.io/api/policy/v1beta1b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 833);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "policy/v1beta1/type.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_policy_2fv1beta1_2ftype_2eproto
namespace istio {
namespace policy {
namespace v1beta1 {

// ===================================================================

void Value::InitAsDefaultInstance() {
  ::istio::policy::v1beta1::_Value_default_instance_.string_value_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::istio::policy::v1beta1::_Value_default_instance_.int64_value_ = GOOGLE_LONGLONG(0);
  ::istio::policy::v1beta1::_Value_default_instance_.double_value_ = 0;
  ::istio::policy::v1beta1::_Value_default_instance_.bool_value_ = false;
  ::istio::policy::v1beta1::_Value_default_instance_.ip_address_value_ = const_cast< ::istio::policy::v1beta1::IPAddress*>(
      ::istio::policy::v1beta1::IPAddress::internal_default_instance());
  ::istio::policy::v1beta1::_Value_default_instance_.timestamp_value_ = const_cast< ::istio::policy::v1beta1::TimeStamp*>(
      ::istio::policy::v1beta1::TimeStamp::internal_default_instance());
  ::istio::policy::v1beta1::_Value_default_instance_.duration_value_ = const_cast< ::istio::policy::v1beta1::Duration*>(
      ::istio::policy::v1beta1::Duration::internal_default_instance());
  ::istio::policy::v1beta1::_Value_default_instance_.email_address_value_ = const_cast< ::istio::policy::v1beta1::EmailAddress*>(
      ::istio::policy::v1beta1::EmailAddress::internal_default_instance());
  ::istio::policy::v1beta1::_Value_default_instance_.dns_name_value_ = const_cast< ::istio::policy::v1beta1::DNSName*>(
      ::istio::policy::v1beta1::DNSName::internal_default_instance());
  ::istio::policy::v1beta1::_Value_default_instance_.uri_value_ = const_cast< ::istio::policy::v1beta1::Uri*>(
      ::istio::policy::v1beta1::Uri::internal_default_instance());
}
void Value::set_allocated_ip_address_value(::istio::policy::v1beta1::IPAddress* ip_address_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (ip_address_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ip_address_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ip_address_value, submessage_arena);
    }
    set_has_ip_address_value();
    value_.ip_address_value_ = ip_address_value;
  }
  // @@protoc_insertion_point(field_set_allocated:istio.policy.v1beta1.Value.ip_address_value)
}
void Value::set_allocated_timestamp_value(::istio::policy::v1beta1::TimeStamp* timestamp_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (timestamp_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timestamp_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp_value, submessage_arena);
    }
    set_has_timestamp_value();
    value_.timestamp_value_ = timestamp_value;
  }
  // @@protoc_insertion_point(field_set_allocated:istio.policy.v1beta1.Value.timestamp_value)
}
void Value::set_allocated_duration_value(::istio::policy::v1beta1::Duration* duration_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (duration_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      duration_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, duration_value, submessage_arena);
    }
    set_has_duration_value();
    value_.duration_value_ = duration_value;
  }
  // @@protoc_insertion_point(field_set_allocated:istio.policy.v1beta1.Value.duration_value)
}
void Value::set_allocated_email_address_value(::istio::policy::v1beta1::EmailAddress* email_address_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (email_address_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      email_address_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, email_address_value, submessage_arena);
    }
    set_has_email_address_value();
    value_.email_address_value_ = email_address_value;
  }
  // @@protoc_insertion_point(field_set_allocated:istio.policy.v1beta1.Value.email_address_value)
}
void Value::set_allocated_dns_name_value(::istio::policy::v1beta1::DNSName* dns_name_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (dns_name_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dns_name_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dns_name_value, submessage_arena);
    }
    set_has_dns_name_value();
    value_.dns_name_value_ = dns_name_value;
  }
  // @@protoc_insertion_point(field_set_allocated:istio.policy.v1beta1.Value.dns_name_value)
}
void Value::set_allocated_uri_value(::istio::policy::v1beta1::Uri* uri_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (uri_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      uri_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uri_value, submessage_arena);
    }
    set_has_uri_value();
    value_.uri_value_ = uri_value;
  }
  // @@protoc_insertion_point(field_set_allocated:istio.policy.v1beta1.Value.uri_value)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value::kStringValueFieldNumber;
const int Value::kInt64ValueFieldNumber;
const int Value::kDoubleValueFieldNumber;
const int Value::kBoolValueFieldNumber;
const int Value::kIpAddressValueFieldNumber;
const int Value::kTimestampValueFieldNumber;
const int Value::kDurationValueFieldNumber;
const int Value::kEmailAddressValueFieldNumber;
const int Value::kDnsNameValueFieldNumber;
const int Value::kUriValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value::Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsValue();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.policy.v1beta1.Value)
}
Value::Value(const Value& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kInt64Value: {
      set_int64_value(from.int64_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case kBoolValue: {
      set_bool_value(from.bool_value());
      break;
    }
    case kIpAddressValue: {
      mutable_ip_address_value()->::istio::policy::v1beta1::IPAddress::MergeFrom(from.ip_address_value());
      break;
    }
    case kTimestampValue: {
      mutable_timestamp_value()->::istio::policy::v1beta1::TimeStamp::MergeFrom(from.timestamp_value());
      break;
    }
    case kDurationValue: {
      mutable_duration_value()->::istio::policy::v1beta1::Duration::MergeFrom(from.duration_value());
      break;
    }
    case kEmailAddressValue: {
      mutable_email_address_value()->::istio::policy::v1beta1::EmailAddress::MergeFrom(from.email_address_value());
      break;
    }
    case kDnsNameValue: {
      mutable_dns_name_value()->::istio::policy::v1beta1::DNSName::MergeFrom(from.dns_name_value());
      break;
    }
    case kUriValue: {
      mutable_uri_value()->::istio::policy::v1beta1::Uri::MergeFrom(from.uri_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:istio.policy.v1beta1.Value)
}

void Value::SharedCtor() {
  clear_has_value();
  _cached_size_ = 0;
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:istio.policy.v1beta1.Value)
  SharedDtor();
}

void Value::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value::descriptor() {
  ::protobuf_policy_2fv1beta1_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2ftype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Value& Value::default_instance() {
  ::protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsValue();
  return *internal_default_instance();
}

Value* Value::New(::google::protobuf::Arena* arena) const {
  Value* n = new Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Value::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:istio.policy.v1beta1.Value)
  switch (value_case()) {
    case kStringValue: {
      value_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kInt64Value: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kIpAddressValue: {
      delete value_.ip_address_value_;
      break;
    }
    case kTimestampValue: {
      delete value_.timestamp_value_;
      break;
    }
    case kDurationValue: {
      delete value_.duration_value_;
      break;
    }
    case kEmailAddressValue: {
      delete value_.email_address_value_;
      break;
    }
    case kDnsNameValue: {
      delete value_.dns_name_value_;
      break;
    }
    case kUriValue: {
      delete value_.uri_value_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.policy.v1beta1.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear();
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.policy.v1beta1.Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string string_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->string_value().data(), static_cast<int>(this->string_value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.Value.string_value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 int64_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_.int64_value_)));
          set_has_int64_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double double_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_.double_value_)));
          set_has_double_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bool_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_.bool_value_)));
          set_has_bool_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.policy.v1beta1.IPAddress ip_address_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ip_address_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.policy.v1beta1.TimeStamp timestamp_value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.policy.v1beta1.Duration duration_value = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_duration_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.policy.v1beta1.EmailAddress email_address_value = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_email_address_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.policy.v1beta1.DNSName dns_name_value = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dns_name_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .istio.policy.v1beta1.Uri uri_value = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uri_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.policy.v1beta1.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.policy.v1beta1.Value)
  return false;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.policy.v1beta1.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string string_value = 1;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Value.string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->string_value(), output);
  }

  // int64 int64_value = 2;
  if (has_int64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->int64_value(), output);
  }

  // double double_value = 3;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->double_value(), output);
  }

  // bool bool_value = 4;
  if (has_bool_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bool_value(), output);
  }

  // .istio.policy.v1beta1.IPAddress ip_address_value = 5;
  if (has_ip_address_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *value_.ip_address_value_, output);
  }

  // .istio.policy.v1beta1.TimeStamp timestamp_value = 6;
  if (has_timestamp_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *value_.timestamp_value_, output);
  }

  // .istio.policy.v1beta1.Duration duration_value = 7;
  if (has_duration_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *value_.duration_value_, output);
  }

  // .istio.policy.v1beta1.EmailAddress email_address_value = 8;
  if (has_email_address_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *value_.email_address_value_, output);
  }

  // .istio.policy.v1beta1.DNSName dns_name_value = 9;
  if (has_dns_name_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *value_.dns_name_value_, output);
  }

  // .istio.policy.v1beta1.Uri uri_value = 10;
  if (has_uri_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *value_.uri_value_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.policy.v1beta1.Value)
}

::google::protobuf::uint8* Value::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.policy.v1beta1.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string string_value = 1;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Value.string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->string_value(), target);
  }

  // int64 int64_value = 2;
  if (has_int64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->int64_value(), target);
  }

  // double double_value = 3;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->double_value(), target);
  }

  // bool bool_value = 4;
  if (has_bool_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bool_value(), target);
  }

  // .istio.policy.v1beta1.IPAddress ip_address_value = 5;
  if (has_ip_address_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *value_.ip_address_value_, deterministic, target);
  }

  // .istio.policy.v1beta1.TimeStamp timestamp_value = 6;
  if (has_timestamp_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *value_.timestamp_value_, deterministic, target);
  }

  // .istio.policy.v1beta1.Duration duration_value = 7;
  if (has_duration_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *value_.duration_value_, deterministic, target);
  }

  // .istio.policy.v1beta1.EmailAddress email_address_value = 8;
  if (has_email_address_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *value_.email_address_value_, deterministic, target);
  }

  // .istio.policy.v1beta1.DNSName dns_name_value = 9;
  if (has_dns_name_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *value_.dns_name_value_, deterministic, target);
  }

  // .istio.policy.v1beta1.Uri uri_value = 10;
  if (has_uri_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *value_.uri_value_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.policy.v1beta1.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.policy.v1beta1.Value)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (value_case()) {
    // string string_value = 1;
    case kStringValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
      break;
    }
    // int64 int64_value = 2;
    case kInt64Value: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int64_value());
      break;
    }
    // double double_value = 3;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // bool bool_value = 4;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // .istio.policy.v1beta1.IPAddress ip_address_value = 5;
    case kIpAddressValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.ip_address_value_);
      break;
    }
    // .istio.policy.v1beta1.TimeStamp timestamp_value = 6;
    case kTimestampValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.timestamp_value_);
      break;
    }
    // .istio.policy.v1beta1.Duration duration_value = 7;
    case kDurationValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.duration_value_);
      break;
    }
    // .istio.policy.v1beta1.EmailAddress email_address_value = 8;
    case kEmailAddressValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.email_address_value_);
      break;
    }
    // .istio.policy.v1beta1.DNSName dns_name_value = 9;
    case kDnsNameValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.dns_name_value_);
      break;
    }
    // .istio.policy.v1beta1.Uri uri_value = 10;
    case kUriValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.uri_value_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.policy.v1beta1.Value)
  GOOGLE_DCHECK_NE(&from, this);
  const Value* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Value>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.policy.v1beta1.Value)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.policy.v1beta1.Value)
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.policy.v1beta1.Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kInt64Value: {
      set_int64_value(from.int64_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case kBoolValue: {
      set_bool_value(from.bool_value());
      break;
    }
    case kIpAddressValue: {
      mutable_ip_address_value()->::istio::policy::v1beta1::IPAddress::MergeFrom(from.ip_address_value());
      break;
    }
    case kTimestampValue: {
      mutable_timestamp_value()->::istio::policy::v1beta1::TimeStamp::MergeFrom(from.timestamp_value());
      break;
    }
    case kDurationValue: {
      mutable_duration_value()->::istio::policy::v1beta1::Duration::MergeFrom(from.duration_value());
      break;
    }
    case kEmailAddressValue: {
      mutable_email_address_value()->::istio::policy::v1beta1::EmailAddress::MergeFrom(from.email_address_value());
      break;
    }
    case kDnsNameValue: {
      mutable_dns_name_value()->::istio::policy::v1beta1::DNSName::MergeFrom(from.dns_name_value());
      break;
    }
    case kUriValue: {
      mutable_uri_value()->::istio::policy::v1beta1::Uri::MergeFrom(from.uri_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Value::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.policy.v1beta1.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.policy.v1beta1.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::Swap(Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value::InternalSwap(Value* other) {
  using std::swap;
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Value::GetMetadata() const {
  protobuf_policy_2fv1beta1_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2ftype_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IPAddress::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IPAddress::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IPAddress::IPAddress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsIPAddress();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.policy.v1beta1.IPAddress)
}
IPAddress::IPAddress(const IPAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:istio.policy.v1beta1.IPAddress)
}

void IPAddress::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

IPAddress::~IPAddress() {
  // @@protoc_insertion_point(destructor:istio.policy.v1beta1.IPAddress)
  SharedDtor();
}

void IPAddress::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IPAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPAddress::descriptor() {
  ::protobuf_policy_2fv1beta1_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2ftype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IPAddress& IPAddress::default_instance() {
  ::protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsIPAddress();
  return *internal_default_instance();
}

IPAddress* IPAddress::New(::google::protobuf::Arena* arena) const {
  IPAddress* n = new IPAddress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IPAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.policy.v1beta1.IPAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool IPAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.policy.v1beta1.IPAddress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.policy.v1beta1.IPAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.policy.v1beta1.IPAddress)
  return false;
#undef DO_
}

void IPAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.policy.v1beta1.IPAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.policy.v1beta1.IPAddress)
}

::google::protobuf::uint8* IPAddress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.policy.v1beta1.IPAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.policy.v1beta1.IPAddress)
  return target;
}

size_t IPAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.policy.v1beta1.IPAddress)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.policy.v1beta1.IPAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const IPAddress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IPAddress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.policy.v1beta1.IPAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.policy.v1beta1.IPAddress)
    MergeFrom(*source);
  }
}

void IPAddress::MergeFrom(const IPAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.policy.v1beta1.IPAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void IPAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.policy.v1beta1.IPAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPAddress::CopyFrom(const IPAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.policy.v1beta1.IPAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPAddress::IsInitialized() const {
  return true;
}

void IPAddress::Swap(IPAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IPAddress::InternalSwap(IPAddress* other) {
  using std::swap;
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IPAddress::GetMetadata() const {
  protobuf_policy_2fv1beta1_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2ftype_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Duration::InitAsDefaultInstance() {
  ::istio::policy::v1beta1::_Duration_default_instance_._instance.get_mutable()->value_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void Duration::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Duration::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Duration::Duration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsDuration();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.policy.v1beta1.Duration)
}
Duration::Duration(const Duration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_value()) {
    value_ = new ::google::protobuf::Duration(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:istio.policy.v1beta1.Duration)
}

void Duration::SharedCtor() {
  value_ = NULL;
  _cached_size_ = 0;
}

Duration::~Duration() {
  // @@protoc_insertion_point(destructor:istio.policy.v1beta1.Duration)
  SharedDtor();
}

void Duration::SharedDtor() {
  if (this != internal_default_instance()) delete value_;
}

void Duration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duration::descriptor() {
  ::protobuf_policy_2fv1beta1_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2ftype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Duration& Duration::default_instance() {
  ::protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsDuration();
  return *internal_default_instance();
}

Duration* Duration::New(::google::protobuf::Arena* arena) const {
  Duration* n = new Duration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Duration::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.policy.v1beta1.Duration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  _internal_metadata_.Clear();
}

bool Duration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.policy.v1beta1.Duration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Duration value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.policy.v1beta1.Duration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.policy.v1beta1.Duration)
  return false;
#undef DO_
}

void Duration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.policy.v1beta1.Duration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration value = 1;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->value_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.policy.v1beta1.Duration)
}

::google::protobuf::uint8* Duration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.policy.v1beta1.Duration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration value = 1;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->value_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.policy.v1beta1.Duration)
  return target;
}

size_t Duration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.policy.v1beta1.Duration)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Duration value = 1;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.policy.v1beta1.Duration)
  GOOGLE_DCHECK_NE(&from, this);
  const Duration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Duration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.policy.v1beta1.Duration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.policy.v1beta1.Duration)
    MergeFrom(*source);
  }
}

void Duration::MergeFrom(const Duration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.policy.v1beta1.Duration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    mutable_value()->::google::protobuf::Duration::MergeFrom(from.value());
  }
}

void Duration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.policy.v1beta1.Duration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duration::CopyFrom(const Duration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.policy.v1beta1.Duration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duration::IsInitialized() const {
  return true;
}

void Duration::Swap(Duration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Duration::InternalSwap(Duration* other) {
  using std::swap;
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Duration::GetMetadata() const {
  protobuf_policy_2fv1beta1_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2ftype_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TimeStamp::InitAsDefaultInstance() {
  ::istio::policy::v1beta1::_TimeStamp_default_instance_._instance.get_mutable()->value_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void TimeStamp::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeStamp::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeStamp::TimeStamp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsTimeStamp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.policy.v1beta1.TimeStamp)
}
TimeStamp::TimeStamp(const TimeStamp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_value()) {
    value_ = new ::google::protobuf::Timestamp(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:istio.policy.v1beta1.TimeStamp)
}

void TimeStamp::SharedCtor() {
  value_ = NULL;
  _cached_size_ = 0;
}

TimeStamp::~TimeStamp() {
  // @@protoc_insertion_point(destructor:istio.policy.v1beta1.TimeStamp)
  SharedDtor();
}

void TimeStamp::SharedDtor() {
  if (this != internal_default_instance()) delete value_;
}

void TimeStamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeStamp::descriptor() {
  ::protobuf_policy_2fv1beta1_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2ftype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimeStamp& TimeStamp::default_instance() {
  ::protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsTimeStamp();
  return *internal_default_instance();
}

TimeStamp* TimeStamp::New(::google::protobuf::Arena* arena) const {
  TimeStamp* n = new TimeStamp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeStamp::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.policy.v1beta1.TimeStamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  _internal_metadata_.Clear();
}

bool TimeStamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.policy.v1beta1.TimeStamp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Timestamp value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.policy.v1beta1.TimeStamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.policy.v1beta1.TimeStamp)
  return false;
#undef DO_
}

void TimeStamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.policy.v1beta1.TimeStamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp value = 1;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->value_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.policy.v1beta1.TimeStamp)
}

::google::protobuf::uint8* TimeStamp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.policy.v1beta1.TimeStamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp value = 1;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->value_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.policy.v1beta1.TimeStamp)
  return target;
}

size_t TimeStamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.policy.v1beta1.TimeStamp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Timestamp value = 1;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeStamp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.policy.v1beta1.TimeStamp)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeStamp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeStamp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.policy.v1beta1.TimeStamp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.policy.v1beta1.TimeStamp)
    MergeFrom(*source);
  }
}

void TimeStamp::MergeFrom(const TimeStamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.policy.v1beta1.TimeStamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    mutable_value()->::google::protobuf::Timestamp::MergeFrom(from.value());
  }
}

void TimeStamp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.policy.v1beta1.TimeStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeStamp::CopyFrom(const TimeStamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.policy.v1beta1.TimeStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeStamp::IsInitialized() const {
  return true;
}

void TimeStamp::Swap(TimeStamp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeStamp::InternalSwap(TimeStamp* other) {
  using std::swap;
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeStamp::GetMetadata() const {
  protobuf_policy_2fv1beta1_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2ftype_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DNSName::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DNSName::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DNSName::DNSName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsDNSName();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.policy.v1beta1.DNSName)
}
DNSName::DNSName(const DNSName& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:istio.policy.v1beta1.DNSName)
}

void DNSName::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DNSName::~DNSName() {
  // @@protoc_insertion_point(destructor:istio.policy.v1beta1.DNSName)
  SharedDtor();
}

void DNSName::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DNSName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DNSName::descriptor() {
  ::protobuf_policy_2fv1beta1_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2ftype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DNSName& DNSName::default_instance() {
  ::protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsDNSName();
  return *internal_default_instance();
}

DNSName* DNSName::New(::google::protobuf::Arena* arena) const {
  DNSName* n = new DNSName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DNSName::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.policy.v1beta1.DNSName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DNSName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.policy.v1beta1.DNSName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.DNSName.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.policy.v1beta1.DNSName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.policy.v1beta1.DNSName)
  return false;
#undef DO_
}

void DNSName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.policy.v1beta1.DNSName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.DNSName.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.policy.v1beta1.DNSName)
}

::google::protobuf::uint8* DNSName::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.policy.v1beta1.DNSName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.DNSName.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.policy.v1beta1.DNSName)
  return target;
}

size_t DNSName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.policy.v1beta1.DNSName)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DNSName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.policy.v1beta1.DNSName)
  GOOGLE_DCHECK_NE(&from, this);
  const DNSName* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DNSName>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.policy.v1beta1.DNSName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.policy.v1beta1.DNSName)
    MergeFrom(*source);
  }
}

void DNSName::MergeFrom(const DNSName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.policy.v1beta1.DNSName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void DNSName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.policy.v1beta1.DNSName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DNSName::CopyFrom(const DNSName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.policy.v1beta1.DNSName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSName::IsInitialized() const {
  return true;
}

void DNSName::Swap(DNSName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DNSName::InternalSwap(DNSName* other) {
  using std::swap;
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DNSName::GetMetadata() const {
  protobuf_policy_2fv1beta1_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2ftype_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EmailAddress::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmailAddress::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmailAddress::EmailAddress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsEmailAddress();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.policy.v1beta1.EmailAddress)
}
EmailAddress::EmailAddress(const EmailAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:istio.policy.v1beta1.EmailAddress)
}

void EmailAddress::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

EmailAddress::~EmailAddress() {
  // @@protoc_insertion_point(destructor:istio.policy.v1beta1.EmailAddress)
  SharedDtor();
}

void EmailAddress::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EmailAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmailAddress::descriptor() {
  ::protobuf_policy_2fv1beta1_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2ftype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmailAddress& EmailAddress::default_instance() {
  ::protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsEmailAddress();
  return *internal_default_instance();
}

EmailAddress* EmailAddress::New(::google::protobuf::Arena* arena) const {
  EmailAddress* n = new EmailAddress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmailAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.policy.v1beta1.EmailAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool EmailAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.policy.v1beta1.EmailAddress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.EmailAddress.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.policy.v1beta1.EmailAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.policy.v1beta1.EmailAddress)
  return false;
#undef DO_
}

void EmailAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.policy.v1beta1.EmailAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.EmailAddress.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.policy.v1beta1.EmailAddress)
}

::google::protobuf::uint8* EmailAddress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.policy.v1beta1.EmailAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.EmailAddress.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.policy.v1beta1.EmailAddress)
  return target;
}

size_t EmailAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.policy.v1beta1.EmailAddress)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmailAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.policy.v1beta1.EmailAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const EmailAddress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmailAddress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.policy.v1beta1.EmailAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.policy.v1beta1.EmailAddress)
    MergeFrom(*source);
  }
}

void EmailAddress::MergeFrom(const EmailAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.policy.v1beta1.EmailAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void EmailAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.policy.v1beta1.EmailAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmailAddress::CopyFrom(const EmailAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.policy.v1beta1.EmailAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailAddress::IsInitialized() const {
  return true;
}

void EmailAddress::Swap(EmailAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmailAddress::InternalSwap(EmailAddress* other) {
  using std::swap;
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmailAddress::GetMetadata() const {
  protobuf_policy_2fv1beta1_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2ftype_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Uri::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Uri::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Uri::Uri()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsUri();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.policy.v1beta1.Uri)
}
Uri::Uri(const Uri& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:istio.policy.v1beta1.Uri)
}

void Uri::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Uri::~Uri() {
  // @@protoc_insertion_point(destructor:istio.policy.v1beta1.Uri)
  SharedDtor();
}

void Uri::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Uri::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Uri::descriptor() {
  ::protobuf_policy_2fv1beta1_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2ftype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Uri& Uri::default_instance() {
  ::protobuf_policy_2fv1beta1_2ftype_2eproto::InitDefaultsUri();
  return *internal_default_instance();
}

Uri* Uri::New(::google::protobuf::Arena* arena) const {
  Uri* n = new Uri;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Uri::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.policy.v1beta1.Uri)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Uri::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.policy.v1beta1.Uri)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.Uri.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.policy.v1beta1.Uri)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.policy.v1beta1.Uri)
  return false;
#undef DO_
}

void Uri::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.policy.v1beta1.Uri)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Uri.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.policy.v1beta1.Uri)
}

::google::protobuf::uint8* Uri::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.policy.v1beta1.Uri)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.Uri.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.policy.v1beta1.Uri)
  return target;
}

size_t Uri::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.policy.v1beta1.Uri)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Uri::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.policy.v1beta1.Uri)
  GOOGLE_DCHECK_NE(&from, this);
  const Uri* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Uri>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.policy.v1beta1.Uri)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.policy.v1beta1.Uri)
    MergeFrom(*source);
  }
}

void Uri::MergeFrom(const Uri& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.policy.v1beta1.Uri)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void Uri::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.policy.v1beta1.Uri)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uri::CopyFrom(const Uri& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.policy.v1beta1.Uri)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uri::IsInitialized() const {
  return true;
}

void Uri::Swap(Uri* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Uri::InternalSwap(Uri* other) {
  using std::swap;
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Uri::GetMetadata() const {
  protobuf_policy_2fv1beta1_2ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2ftype_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace policy
}  // namespace istio

// @@protoc_insertion_point(global_scope)
