// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: policy/v1beta1/http_response.proto

#include "policy/v1beta1/http_response.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace istio {
namespace policy {
namespace v1beta1 {
class DirectHttpResponse_HeadersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DirectHttpResponse_HeadersEntry_DoNotUse>
      _instance;
} _DirectHttpResponse_HeadersEntry_DoNotUse_default_instance_;
class DirectHttpResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DirectHttpResponse>
      _instance;
} _DirectHttpResponse_default_instance_;
}  // namespace v1beta1
}  // namespace policy
}  // namespace istio
namespace protobuf_policy_2fv1beta1_2fhttp_5fresponse_2eproto {
void InitDefaultsDirectHttpResponse_HeadersEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::policy::v1beta1::_DirectHttpResponse_HeadersEntry_DoNotUse_default_instance_;
    new (ptr) ::istio::policy::v1beta1::DirectHttpResponse_HeadersEntry_DoNotUse();
  }
  ::istio::policy::v1beta1::DirectHttpResponse_HeadersEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsDirectHttpResponse_HeadersEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDirectHttpResponse_HeadersEntry_DoNotUseImpl);
}

void InitDefaultsDirectHttpResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_policy_2fv1beta1_2fhttp_5fresponse_2eproto::InitDefaultsDirectHttpResponse_HeadersEntry_DoNotUse();
  {
    void* ptr = &::istio::policy::v1beta1::_DirectHttpResponse_default_instance_;
    new (ptr) ::istio::policy::v1beta1::DirectHttpResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::policy::v1beta1::DirectHttpResponse::InitAsDefaultInstance();
}

void InitDefaultsDirectHttpResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDirectHttpResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::DirectHttpResponse_HeadersEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::DirectHttpResponse_HeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::DirectHttpResponse_HeadersEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::DirectHttpResponse_HeadersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::DirectHttpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::DirectHttpResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::DirectHttpResponse, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::policy::v1beta1::DirectHttpResponse, headers_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::istio::policy::v1beta1::DirectHttpResponse_HeadersEntry_DoNotUse)},
  { 9, -1, sizeof(::istio::policy::v1beta1::DirectHttpResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_DirectHttpResponse_HeadersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::policy::v1beta1::_DirectHttpResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "policy/v1beta1/http_response.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\"policy/v1beta1/http_response.proto\022\024is"
      "tio.policy.v1beta1\"\316\001\n\022DirectHttpRespons"
      "e\0222\n\004code\030\001 \001(\0162$.istio.policy.v1beta1.H"
      "ttpStatusCode\022\014\n\004body\030\002 \001(\t\022F\n\007headers\030\003"
      " \003(\01325.istio.policy.v1beta1.DirectHttpRe"
      "sponse.HeadersEntry\032.\n\014HeadersEntry\022\013\n\003k"
      "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001*\271\t\n\016HttpStat"
      "usCode\022\t\n\005Empty\020\000\022\014\n\010Continue\020d\022\007\n\002OK\020\310\001"
      "\022\014\n\007Created\020\311\001\022\r\n\010Accepted\020\312\001\022 \n\033NonAuth"
      "oritativeInformation\020\313\001\022\016\n\tNoContent\020\314\001\022"
      "\021\n\014ResetContent\020\315\001\022\023\n\016PartialContent\020\316\001\022"
      "\020\n\013MultiStatus\020\317\001\022\024\n\017AlreadyReported\020\320\001\022"
      "\013\n\006IMUsed\020\342\001\022\024\n\017MultipleChoices\020\254\002\022\025\n\020Mo"
      "vedPermanently\020\255\002\022\n\n\005Found\020\256\002\022\r\n\010SeeOthe"
      "r\020\257\002\022\020\n\013NotModified\020\260\002\022\r\n\010UseProxy\020\261\002\022\026\n"
      "\021TemporaryRedirect\020\263\002\022\026\n\021PermanentRedire"
      "ct\020\264\002\022\017\n\nBadRequest\020\220\003\022\021\n\014Unauthorized\020\221"
      "\003\022\024\n\017PaymentRequired\020\222\003\022\016\n\tForbidden\020\223\003\022"
      "\r\n\010NotFound\020\224\003\022\025\n\020MethodNotAllowed\020\225\003\022\022\n"
      "\rNotAcceptable\020\226\003\022 \n\033ProxyAuthentication"
      "Required\020\227\003\022\023\n\016RequestTimeout\020\230\003\022\r\n\010Conf"
      "lict\020\231\003\022\t\n\004Gone\020\232\003\022\023\n\016LengthRequired\020\233\003\022"
      "\027\n\022PreconditionFailed\020\234\003\022\024\n\017PayloadTooLa"
      "rge\020\235\003\022\017\n\nURITooLong\020\236\003\022\031\n\024UnsupportedMe"
      "diaType\020\237\003\022\030\n\023RangeNotSatisfiable\020\240\003\022\026\n\021"
      "ExpectationFailed\020\241\003\022\027\n\022MisdirectedReque"
      "st\020\245\003\022\030\n\023UnprocessableEntity\020\246\003\022\013\n\006Locke"
      "d\020\247\003\022\025\n\020FailedDependency\020\250\003\022\024\n\017UpgradeRe"
      "quired\020\252\003\022\031\n\024PreconditionRequired\020\254\003\022\024\n\017"
      "TooManyRequests\020\255\003\022 \n\033RequestHeaderField"
      "sTooLarge\020\257\003\022\030\n\023InternalServerError\020\364\003\022\023"
      "\n\016NotImplemented\020\365\003\022\017\n\nBadGateway\020\366\003\022\027\n\022"
      "ServiceUnavailable\020\367\003\022\023\n\016GatewayTimeout\020"
      "\370\003\022\034\n\027HTTPVersionNotSupported\020\371\003\022\032\n\025Vari"
      "antAlsoNegotiates\020\372\003\022\030\n\023InsufficientStor"
      "age\020\373\003\022\021\n\014LoopDetected\020\374\003\022\020\n\013NotExtended"
      "\020\376\003\022\"\n\035NetworkAuthenticationRequired\020\377\003B"
      "\035Z\033istio.io/api/policy/v1beta1b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1518);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "policy/v1beta1/http_response.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_policy_2fv1beta1_2fhttp_5fresponse_2eproto
namespace istio {
namespace policy {
namespace v1beta1 {
const ::google::protobuf::EnumDescriptor* HttpStatusCode_descriptor() {
  protobuf_policy_2fv1beta1_2fhttp_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_policy_2fv1beta1_2fhttp_5fresponse_2eproto::file_level_enum_descriptors[0];
}
bool HttpStatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 226:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 307:
    case 308:
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 409:
    case 410:
    case 411:
    case 412:
    case 413:
    case 414:
    case 415:
    case 416:
    case 417:
    case 421:
    case 422:
    case 423:
    case 424:
    case 426:
    case 428:
    case 429:
    case 431:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 510:
    case 511:
      return true;
    default:
      return false;
  }
}


// ===================================================================

DirectHttpResponse_HeadersEntry_DoNotUse::DirectHttpResponse_HeadersEntry_DoNotUse() {}
DirectHttpResponse_HeadersEntry_DoNotUse::DirectHttpResponse_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void DirectHttpResponse_HeadersEntry_DoNotUse::MergeFrom(const DirectHttpResponse_HeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata DirectHttpResponse_HeadersEntry_DoNotUse::GetMetadata() const {
  ::protobuf_policy_2fv1beta1_2fhttp_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fhttp_5fresponse_2eproto::file_level_metadata[0];
}
void DirectHttpResponse_HeadersEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void DirectHttpResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectHttpResponse::kCodeFieldNumber;
const int DirectHttpResponse::kBodyFieldNumber;
const int DirectHttpResponse::kHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectHttpResponse::DirectHttpResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_policy_2fv1beta1_2fhttp_5fresponse_2eproto::InitDefaultsDirectHttpResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.policy.v1beta1.DirectHttpResponse)
}
DirectHttpResponse::DirectHttpResponse(const DirectHttpResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  headers_.MergeFrom(from.headers_);
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.body().size() > 0) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:istio.policy.v1beta1.DirectHttpResponse)
}

void DirectHttpResponse::SharedCtor() {
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _cached_size_ = 0;
}

DirectHttpResponse::~DirectHttpResponse() {
  // @@protoc_insertion_point(destructor:istio.policy.v1beta1.DirectHttpResponse)
  SharedDtor();
}

void DirectHttpResponse::SharedDtor() {
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DirectHttpResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirectHttpResponse::descriptor() {
  ::protobuf_policy_2fv1beta1_2fhttp_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fhttp_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DirectHttpResponse& DirectHttpResponse::default_instance() {
  ::protobuf_policy_2fv1beta1_2fhttp_5fresponse_2eproto::InitDefaultsDirectHttpResponse();
  return *internal_default_instance();
}

DirectHttpResponse* DirectHttpResponse::New(::google::protobuf::Arena* arena) const {
  DirectHttpResponse* n = new DirectHttpResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectHttpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.policy.v1beta1.DirectHttpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

bool DirectHttpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.policy.v1beta1.DirectHttpResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.policy.v1beta1.HttpStatusCode code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::istio::policy::v1beta1::HttpStatusCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string body = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->body().data(), static_cast<int>(this->body().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.DirectHttpResponse.body"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> headers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DirectHttpResponse_HeadersEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              DirectHttpResponse_HeadersEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&headers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.DirectHttpResponse.HeadersEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.policy.v1beta1.DirectHttpResponse.HeadersEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.policy.v1beta1.DirectHttpResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.policy.v1beta1.DirectHttpResponse)
  return false;
#undef DO_
}

void DirectHttpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.policy.v1beta1.DirectHttpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.policy.v1beta1.HttpStatusCode code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // string body = 2;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->body().data(), static_cast<int>(this->body().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.DirectHttpResponse.body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->body(), output);
  }

  // map<string, string> headers = 3;
  if (!this->headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.policy.v1beta1.DirectHttpResponse.HeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.policy.v1beta1.DirectHttpResponse.HeadersEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->headers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<DirectHttpResponse_HeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<DirectHttpResponse_HeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it) {
        entry.reset(headers_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.policy.v1beta1.DirectHttpResponse)
}

::google::protobuf::uint8* DirectHttpResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.policy.v1beta1.DirectHttpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.policy.v1beta1.HttpStatusCode code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // string body = 2;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->body().data(), static_cast<int>(this->body().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.policy.v1beta1.DirectHttpResponse.body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->body(), target);
  }

  // map<string, string> headers = 3;
  if (!this->headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.policy.v1beta1.DirectHttpResponse.HeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.policy.v1beta1.DirectHttpResponse.HeadersEntry.value");
      }
    };

    if (deterministic &&
        this->headers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<DirectHttpResponse_HeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<DirectHttpResponse_HeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it) {
        entry.reset(headers_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.policy.v1beta1.DirectHttpResponse)
  return target;
}

size_t DirectHttpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.policy.v1beta1.DirectHttpResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> headers = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->headers_size());
  {
    ::google::protobuf::scoped_ptr<DirectHttpResponse_HeadersEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->headers().begin();
        it != this->headers().end(); ++it) {
      entry.reset(headers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string body = 2;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body());
  }

  // .istio.policy.v1beta1.HttpStatusCode code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectHttpResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.policy.v1beta1.DirectHttpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectHttpResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DirectHttpResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.policy.v1beta1.DirectHttpResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.policy.v1beta1.DirectHttpResponse)
    MergeFrom(*source);
  }
}

void DirectHttpResponse::MergeFrom(const DirectHttpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.policy.v1beta1.DirectHttpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void DirectHttpResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.policy.v1beta1.DirectHttpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectHttpResponse::CopyFrom(const DirectHttpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.policy.v1beta1.DirectHttpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectHttpResponse::IsInitialized() const {
  return true;
}

void DirectHttpResponse::Swap(DirectHttpResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectHttpResponse::InternalSwap(DirectHttpResponse* other) {
  using std::swap;
  headers_.Swap(&other->headers_);
  body_.Swap(&other->body_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DirectHttpResponse::GetMetadata() const {
  protobuf_policy_2fv1beta1_2fhttp_5fresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_policy_2fv1beta1_2fhttp_5fresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace policy
}  // namespace istio

// @@protoc_insertion_point(global_scope)
