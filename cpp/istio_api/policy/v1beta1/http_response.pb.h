// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: policy/v1beta1/http_response.proto

#ifndef PROTOBUF_INCLUDED_policy_2fv1beta1_2fhttp_5fresponse_2eproto
#define PROTOBUF_INCLUDED_policy_2fv1beta1_2fhttp_5fresponse_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_policy_2fv1beta1_2fhttp_5fresponse_2eproto 

namespace protobuf_policy_2fv1beta1_2fhttp_5fresponse_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_policy_2fv1beta1_2fhttp_5fresponse_2eproto
namespace istio {
namespace policy {
namespace v1beta1 {
class DirectHttpResponse;
class DirectHttpResponseDefaultTypeInternal;
extern DirectHttpResponseDefaultTypeInternal _DirectHttpResponse_default_instance_;
class DirectHttpResponse_HeadersEntry_DoNotUse;
class DirectHttpResponse_HeadersEntry_DoNotUseDefaultTypeInternal;
extern DirectHttpResponse_HeadersEntry_DoNotUseDefaultTypeInternal _DirectHttpResponse_HeadersEntry_DoNotUse_default_instance_;
}  // namespace v1beta1
}  // namespace policy
}  // namespace istio
namespace google {
namespace protobuf {
template<> ::istio::policy::v1beta1::DirectHttpResponse* Arena::CreateMaybeMessage<::istio::policy::v1beta1::DirectHttpResponse>(Arena*);
template<> ::istio::policy::v1beta1::DirectHttpResponse_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::istio::policy::v1beta1::DirectHttpResponse_HeadersEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace istio {
namespace policy {
namespace v1beta1 {

enum HttpStatusCode {
  Empty = 0,
  Continue = 100,
  OK = 200,
  Created = 201,
  Accepted = 202,
  NonAuthoritativeInformation = 203,
  NoContent = 204,
  ResetContent = 205,
  PartialContent = 206,
  MultiStatus = 207,
  AlreadyReported = 208,
  IMUsed = 226,
  MultipleChoices = 300,
  MovedPermanently = 301,
  Found = 302,
  SeeOther = 303,
  NotModified = 304,
  UseProxy = 305,
  TemporaryRedirect = 307,
  PermanentRedirect = 308,
  BadRequest = 400,
  Unauthorized = 401,
  PaymentRequired = 402,
  Forbidden = 403,
  NotFound = 404,
  MethodNotAllowed = 405,
  NotAcceptable = 406,
  ProxyAuthenticationRequired = 407,
  RequestTimeout = 408,
  Conflict = 409,
  Gone = 410,
  LengthRequired = 411,
  PreconditionFailed = 412,
  PayloadTooLarge = 413,
  URITooLong = 414,
  UnsupportedMediaType = 415,
  RangeNotSatisfiable = 416,
  ExpectationFailed = 417,
  MisdirectedRequest = 421,
  UnprocessableEntity = 422,
  Locked = 423,
  FailedDependency = 424,
  UpgradeRequired = 426,
  PreconditionRequired = 428,
  TooManyRequests = 429,
  RequestHeaderFieldsTooLarge = 431,
  InternalServerError = 500,
  NotImplemented = 501,
  BadGateway = 502,
  ServiceUnavailable = 503,
  GatewayTimeout = 504,
  HTTPVersionNotSupported = 505,
  VariantAlsoNegotiates = 506,
  InsufficientStorage = 507,
  LoopDetected = 508,
  NotExtended = 510,
  NetworkAuthenticationRequired = 511,
  HttpStatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HttpStatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HttpStatusCode_IsValid(int value);
const HttpStatusCode HttpStatusCode_MIN = Empty;
const HttpStatusCode HttpStatusCode_MAX = NetworkAuthenticationRequired;
const int HttpStatusCode_ARRAYSIZE = HttpStatusCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* HttpStatusCode_descriptor();
inline const ::std::string& HttpStatusCode_Name(HttpStatusCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    HttpStatusCode_descriptor(), value);
}
inline bool HttpStatusCode_Parse(
    const ::std::string& name, HttpStatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HttpStatusCode>(
    HttpStatusCode_descriptor(), name, value);
}
// ===================================================================

class DirectHttpResponse_HeadersEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<DirectHttpResponse_HeadersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<DirectHttpResponse_HeadersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  DirectHttpResponse_HeadersEntry_DoNotUse();
  DirectHttpResponse_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const DirectHttpResponse_HeadersEntry_DoNotUse& other);
  static const DirectHttpResponse_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DirectHttpResponse_HeadersEntry_DoNotUse*>(&_DirectHttpResponse_HeadersEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class DirectHttpResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.policy.v1beta1.DirectHttpResponse) */ {
 public:
  DirectHttpResponse();
  virtual ~DirectHttpResponse();

  DirectHttpResponse(const DirectHttpResponse& from);

  inline DirectHttpResponse& operator=(const DirectHttpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectHttpResponse(DirectHttpResponse&& from) noexcept
    : DirectHttpResponse() {
    *this = ::std::move(from);
  }

  inline DirectHttpResponse& operator=(DirectHttpResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectHttpResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DirectHttpResponse* internal_default_instance() {
    return reinterpret_cast<const DirectHttpResponse*>(
               &_DirectHttpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DirectHttpResponse* other);
  friend void swap(DirectHttpResponse& a, DirectHttpResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectHttpResponse* New() const final {
    return CreateMaybeMessage<DirectHttpResponse>(NULL);
  }

  DirectHttpResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DirectHttpResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DirectHttpResponse& from);
  void MergeFrom(const DirectHttpResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectHttpResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> headers = 3;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      headers() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_headers();

  // string body = 2;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // .istio.policy.v1beta1.HttpStatusCode code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::istio::policy::v1beta1::HttpStatusCode code() const;
  void set_code(::istio::policy::v1beta1::HttpStatusCode value);

  // @@protoc_insertion_point(class_scope:istio.policy.v1beta1.DirectHttpResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      DirectHttpResponse_HeadersEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > headers_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  int code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_policy_2fv1beta1_2fhttp_5fresponse_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DirectHttpResponse

// .istio.policy.v1beta1.HttpStatusCode code = 1;
inline void DirectHttpResponse::clear_code() {
  code_ = 0;
}
inline ::istio::policy::v1beta1::HttpStatusCode DirectHttpResponse::code() const {
  // @@protoc_insertion_point(field_get:istio.policy.v1beta1.DirectHttpResponse.code)
  return static_cast< ::istio::policy::v1beta1::HttpStatusCode >(code_);
}
inline void DirectHttpResponse::set_code(::istio::policy::v1beta1::HttpStatusCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:istio.policy.v1beta1.DirectHttpResponse.code)
}

// string body = 2;
inline void DirectHttpResponse::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DirectHttpResponse::body() const {
  // @@protoc_insertion_point(field_get:istio.policy.v1beta1.DirectHttpResponse.body)
  return body_.GetNoArena();
}
inline void DirectHttpResponse::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.policy.v1beta1.DirectHttpResponse.body)
}
#if LANG_CXX11
inline void DirectHttpResponse::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.policy.v1beta1.DirectHttpResponse.body)
}
#endif
inline void DirectHttpResponse::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.policy.v1beta1.DirectHttpResponse.body)
}
inline void DirectHttpResponse::set_body(const char* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.policy.v1beta1.DirectHttpResponse.body)
}
inline ::std::string* DirectHttpResponse::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:istio.policy.v1beta1.DirectHttpResponse.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DirectHttpResponse::release_body() {
  // @@protoc_insertion_point(field_release:istio.policy.v1beta1.DirectHttpResponse.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DirectHttpResponse::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:istio.policy.v1beta1.DirectHttpResponse.body)
}

// map<string, string> headers = 3;
inline int DirectHttpResponse::headers_size() const {
  return headers_.size();
}
inline void DirectHttpResponse::clear_headers() {
  headers_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
DirectHttpResponse::headers() const {
  // @@protoc_insertion_point(field_map:istio.policy.v1beta1.DirectHttpResponse.headers)
  return headers_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
DirectHttpResponse::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:istio.policy.v1beta1.DirectHttpResponse.headers)
  return headers_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace policy
}  // namespace istio

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::istio::policy::v1beta1::HttpStatusCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::istio::policy::v1beta1::HttpStatusCode>() {
  return ::istio::policy::v1beta1::HttpStatusCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_policy_2fv1beta1_2fhttp_5fresponse_2eproto
