// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/filter/http/authn/v2alpha1/config.proto

#include "envoy/config/filter/http/authn/v2alpha1/config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace istio {
namespace envoy {
namespace config {
namespace filter {
namespace http {
namespace authn {
namespace v2alpha1 {
class FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse>
      _instance;
} _FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse_default_instance_;
class FilterConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FilterConfig>
      _instance;
} _FilterConfig_default_instance_;
}  // namespace v2alpha1
}  // namespace authn
}  // namespace http
}  // namespace filter
}  // namespace config
}  // namespace envoy
}  // namespace istio
namespace protobuf_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto {
void InitDefaultsFilterConfig_JwtOutputPayloadLocationsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::envoy::config::filter::http::authn::v2alpha1::_FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse_default_instance_;
    new (ptr) ::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse();
  }
  ::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsFilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFilterConfig_JwtOutputPayloadLocationsEntry_DoNotUseImpl);
}

void InitDefaultsFilterConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_authentication_2fv1alpha1_2fpolicy_2eproto::InitDefaultsPolicy();
  protobuf_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto::InitDefaultsFilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse();
  {
    void* ptr = &::istio::envoy::config::filter::http::authn::v2alpha1::_FilterConfig_default_instance_;
    new (ptr) ::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig::InitAsDefaultInstance();
}

void InitDefaultsFilterConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFilterConfigImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig, policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig, jwt_output_payload_locations_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse)},
  { 9, -1, sizeof(::istio::envoy::config::filter::http::authn::v2alpha1::FilterConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::envoy::config::filter::http::authn::v2alpha1::_FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::envoy::config::filter::http::authn::v2alpha1::_FilterConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "envoy/config/filter/http/authn/v2alpha1/config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n4envoy/config/filter/http/authn/v2alpha"
      "1/config.proto\022-istio.envoy.config.filte"
      "r.http.authn.v2alpha1\032$authentication/v1"
      "alpha1/policy.proto\"\212\002\n\014FilterConfig\0225\n\006"
      "policy\030\001 \001(\0132%.istio.authentication.v1al"
      "pha1.Policy\022\200\001\n\034jwt_output_payload_locat"
      "ions\030\002 \003(\0132Z.istio.envoy.config.filter.h"
      "ttp.authn.v2alpha1.FilterConfig.JwtOutpu"
      "tPayloadLocationsEntry\032@\n\036JwtOutputPaylo"
      "adLocationsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
      " \001(\t:\0028\001B6Z4istio.io/api/envoy/config/fi"
      "lter/http/authn/v2alpha1b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 472);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "envoy/config/filter/http/authn/v2alpha1/config.proto", &protobuf_RegisterTypes);
  ::protobuf_authentication_2fv1alpha1_2fpolicy_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto
namespace istio {
namespace envoy {
namespace config {
namespace filter {
namespace http {
namespace authn {
namespace v2alpha1 {

// ===================================================================

FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse::FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse() {}
FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse::FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse::MergeFrom(const FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto::file_level_metadata[0];
}
void FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void FilterConfig::InitAsDefaultInstance() {
  ::istio::envoy::config::filter::http::authn::v2alpha1::_FilterConfig_default_instance_._instance.get_mutable()->policy_ = const_cast< ::istio::authentication::v1alpha1::Policy*>(
      ::istio::authentication::v1alpha1::Policy::internal_default_instance());
}
void FilterConfig::clear_policy() {
  if (GetArenaNoVirtual() == NULL && policy_ != NULL) {
    delete policy_;
  }
  policy_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilterConfig::kPolicyFieldNumber;
const int FilterConfig::kJwtOutputPayloadLocationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilterConfig::FilterConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto::InitDefaultsFilterConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
}
FilterConfig::FilterConfig(const FilterConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  jwt_output_payload_locations_.MergeFrom(from.jwt_output_payload_locations_);
  if (from.has_policy()) {
    policy_ = new ::istio::authentication::v1alpha1::Policy(*from.policy_);
  } else {
    policy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
}

void FilterConfig::SharedCtor() {
  policy_ = NULL;
  _cached_size_ = 0;
}

FilterConfig::~FilterConfig() {
  // @@protoc_insertion_point(destructor:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  SharedDtor();
}

void FilterConfig::SharedDtor() {
  if (this != internal_default_instance()) delete policy_;
}

void FilterConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilterConfig::descriptor() {
  ::protobuf_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FilterConfig& FilterConfig::default_instance() {
  ::protobuf_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto::InitDefaultsFilterConfig();
  return *internal_default_instance();
}

FilterConfig* FilterConfig::New(::google::protobuf::Arena* arena) const {
  FilterConfig* n = new FilterConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FilterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jwt_output_payload_locations_.Clear();
  if (GetArenaNoVirtual() == NULL && policy_ != NULL) {
    delete policy_;
  }
  policy_ = NULL;
  _internal_metadata_.Clear();
}

bool FilterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.authentication.v1alpha1.Policy policy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> jwt_output_payload_locations = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&jwt_output_payload_locations_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.JwtOutputPayloadLocationsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.JwtOutputPayloadLocationsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  return false;
#undef DO_
}

void FilterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.authentication.v1alpha1.Policy policy = 1;
  if (this->has_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->policy_, output);
  }

  // map<string, string> jwt_output_payload_locations = 2;
  if (!this->jwt_output_payload_locations().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.JwtOutputPayloadLocationsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.JwtOutputPayloadLocationsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->jwt_output_payload_locations().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->jwt_output_payload_locations().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->jwt_output_payload_locations().begin();
          it != this->jwt_output_payload_locations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(jwt_output_payload_locations_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->jwt_output_payload_locations().begin();
          it != this->jwt_output_payload_locations().end(); ++it) {
        entry.reset(jwt_output_payload_locations_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
}

::google::protobuf::uint8* FilterConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .istio.authentication.v1alpha1.Policy policy = 1;
  if (this->has_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->policy_, deterministic, target);
  }

  // map<string, string> jwt_output_payload_locations = 2;
  if (!this->jwt_output_payload_locations().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.JwtOutputPayloadLocationsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.JwtOutputPayloadLocationsEntry.value");
      }
    };

    if (deterministic &&
        this->jwt_output_payload_locations().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->jwt_output_payload_locations().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->jwt_output_payload_locations().begin();
          it != this->jwt_output_payload_locations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(jwt_output_payload_locations_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->jwt_output_payload_locations().begin();
          it != this->jwt_output_payload_locations().end(); ++it) {
        entry.reset(jwt_output_payload_locations_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  return target;
}

size_t FilterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> jwt_output_payload_locations = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->jwt_output_payload_locations_size());
  {
    ::google::protobuf::scoped_ptr<FilterConfig_JwtOutputPayloadLocationsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->jwt_output_payload_locations().begin();
        it != this->jwt_output_payload_locations().end(); ++it) {
      entry.reset(jwt_output_payload_locations_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .istio.authentication.v1alpha1.Policy policy = 1;
  if (this->has_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->policy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilterConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FilterConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
    MergeFrom(*source);
  }
}

void FilterConfig::MergeFrom(const FilterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jwt_output_payload_locations_.MergeFrom(from.jwt_output_payload_locations_);
  if (from.has_policy()) {
    mutable_policy()->::istio::authentication::v1alpha1::Policy::MergeFrom(from.policy());
  }
}

void FilterConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterConfig::CopyFrom(const FilterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterConfig::IsInitialized() const {
  return true;
}

void FilterConfig::Swap(FilterConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilterConfig::InternalSwap(FilterConfig* other) {
  using std::swap;
  jwt_output_payload_locations_.Swap(&other->jwt_output_payload_locations_);
  swap(policy_, other->policy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FilterConfig::GetMetadata() const {
  protobuf_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_envoy_2fconfig_2ffilter_2fhttp_2fauthn_2fv2alpha1_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2alpha1
}  // namespace authn
}  // namespace http
}  // namespace filter
}  // namespace config
}  // namespace envoy
}  // namespace istio

// @@protoc_insertion_point(global_scope)
