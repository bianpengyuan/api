// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/filter/http/jwt_auth/v2alpha1/config.proto

#ifndef PROTOBUF_envoy_2fconfig_2ffilter_2fhttp_2fjwt_5fauth_2fv2alpha1_2fconfig_2eproto__INCLUDED
#define PROTOBUF_envoy_2fconfig_2ffilter_2fhttp_2fjwt_5fauth_2fv2alpha1_2fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_envoy_2fconfig_2ffilter_2fhttp_2fjwt_5fauth_2fv2alpha1_2fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsHttpUriImpl();
void InitDefaultsHttpUri();
void InitDefaultsDataSourceImpl();
void InitDefaultsDataSource();
void InitDefaultsJwtRuleImpl();
void InitDefaultsJwtRule();
void InitDefaultsRemoteJwksImpl();
void InitDefaultsRemoteJwks();
void InitDefaultsJwtHeaderImpl();
void InitDefaultsJwtHeader();
void InitDefaultsJwtAuthenticationImpl();
void InitDefaultsJwtAuthentication();
inline void InitDefaults() {
  InitDefaultsHttpUri();
  InitDefaultsDataSource();
  InitDefaultsJwtRule();
  InitDefaultsRemoteJwks();
  InitDefaultsJwtHeader();
  InitDefaultsJwtAuthentication();
}
}  // namespace protobuf_envoy_2fconfig_2ffilter_2fhttp_2fjwt_5fauth_2fv2alpha1_2fconfig_2eproto
namespace istio {
namespace envoy {
namespace config {
namespace filter {
namespace http {
namespace jwt_auth {
namespace v2alpha1 {
class DataSource;
class DataSourceDefaultTypeInternal;
extern DataSourceDefaultTypeInternal _DataSource_default_instance_;
class HttpUri;
class HttpUriDefaultTypeInternal;
extern HttpUriDefaultTypeInternal _HttpUri_default_instance_;
class JwtAuthentication;
class JwtAuthenticationDefaultTypeInternal;
extern JwtAuthenticationDefaultTypeInternal _JwtAuthentication_default_instance_;
class JwtHeader;
class JwtHeaderDefaultTypeInternal;
extern JwtHeaderDefaultTypeInternal _JwtHeader_default_instance_;
class JwtRule;
class JwtRuleDefaultTypeInternal;
extern JwtRuleDefaultTypeInternal _JwtRule_default_instance_;
class RemoteJwks;
class RemoteJwksDefaultTypeInternal;
extern RemoteJwksDefaultTypeInternal _RemoteJwks_default_instance_;
}  // namespace v2alpha1
}  // namespace jwt_auth
}  // namespace http
}  // namespace filter
}  // namespace config
}  // namespace envoy
}  // namespace istio
namespace istio {
namespace envoy {
namespace config {
namespace filter {
namespace http {
namespace jwt_auth {
namespace v2alpha1 {

// ===================================================================

class HttpUri : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri) */ {
 public:
  HttpUri();
  virtual ~HttpUri();

  HttpUri(const HttpUri& from);

  inline HttpUri& operator=(const HttpUri& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HttpUri(HttpUri&& from) noexcept
    : HttpUri() {
    *this = ::std::move(from);
  }

  inline HttpUri& operator=(HttpUri&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpUri& default_instance();

  enum HttpUpstreamTypeCase {
    kCluster = 2,
    HTTP_UPSTREAM_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HttpUri* internal_default_instance() {
    return reinterpret_cast<const HttpUri*>(
               &_HttpUri_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(HttpUri* other);
  friend void swap(HttpUri& a, HttpUri& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HttpUri* New() const PROTOBUF_FINAL { return New(NULL); }

  HttpUri* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HttpUri& from);
  void MergeFrom(const HttpUri& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HttpUri* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uri = 1;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // .google.protobuf.Duration timeout = 3;
  bool has_timeout() const;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 3;
  const ::google::protobuf::Duration& timeout() const;
  ::google::protobuf::Duration* release_timeout();
  ::google::protobuf::Duration* mutable_timeout();
  void set_allocated_timeout(::google::protobuf::Duration* timeout);

  // string cluster = 2;
  private:
  bool has_cluster() const;
  public:
  void clear_cluster();
  static const int kClusterFieldNumber = 2;
  const ::std::string& cluster() const;
  void set_cluster(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster(::std::string&& value);
  #endif
  void set_cluster(const char* value);
  void set_cluster(const char* value, size_t size);
  ::std::string* mutable_cluster();
  ::std::string* release_cluster();
  void set_allocated_cluster(::std::string* cluster);

  HttpUpstreamTypeCase http_upstream_type_case() const;
  // @@protoc_insertion_point(class_scope:istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri)
 private:
  void set_has_cluster();

  inline bool has_http_upstream_type() const;
  void clear_http_upstream_type();
  inline void clear_has_http_upstream_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::Duration* timeout_;
  union HttpUpstreamTypeUnion {
    HttpUpstreamTypeUnion() {}
    ::google::protobuf::internal::ArenaStringPtr cluster_;
  } http_upstream_type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_envoy_2fconfig_2ffilter_2fhttp_2fjwt_5fauth_2fv2alpha1_2fconfig_2eproto::TableStruct;
  friend void ::protobuf_envoy_2fconfig_2ffilter_2fhttp_2fjwt_5fauth_2fv2alpha1_2fconfig_2eproto::InitDefaultsHttpUriImpl();
};
// -------------------------------------------------------------------

class DataSource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource) */ {
 public:
  DataSource();
  virtual ~DataSource();

  DataSource(const DataSource& from);

  inline DataSource& operator=(const DataSource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataSource(DataSource&& from) noexcept
    : DataSource() {
    *this = ::std::move(from);
  }

  inline DataSource& operator=(DataSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataSource& default_instance();

  enum SpecifierCase {
    kFilename = 1,
    kInlineBytes = 2,
    kInlineString = 3,
    SPECIFIER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataSource* internal_default_instance() {
    return reinterpret_cast<const DataSource*>(
               &_DataSource_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DataSource* other);
  friend void swap(DataSource& a, DataSource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataSource* New() const PROTOBUF_FINAL { return New(NULL); }

  DataSource* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataSource& from);
  void MergeFrom(const DataSource& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataSource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filename = 1;
  private:
  bool has_filename() const;
  public:
  void clear_filename();
  static const int kFilenameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // bytes inline_bytes = 2;
  private:
  bool has_inline_bytes() const;
  public:
  void clear_inline_bytes();
  static const int kInlineBytesFieldNumber = 2;
  const ::std::string& inline_bytes() const;
  void set_inline_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_inline_bytes(::std::string&& value);
  #endif
  void set_inline_bytes(const char* value);
  void set_inline_bytes(const void* value, size_t size);
  ::std::string* mutable_inline_bytes();
  ::std::string* release_inline_bytes();
  void set_allocated_inline_bytes(::std::string* inline_bytes);

  // string inline_string = 3;
  private:
  bool has_inline_string() const;
  public:
  void clear_inline_string();
  static const int kInlineStringFieldNumber = 3;
  const ::std::string& inline_string() const;
  void set_inline_string(const ::std::string& value);
  #if LANG_CXX11
  void set_inline_string(::std::string&& value);
  #endif
  void set_inline_string(const char* value);
  void set_inline_string(const char* value, size_t size);
  ::std::string* mutable_inline_string();
  ::std::string* release_inline_string();
  void set_allocated_inline_string(::std::string* inline_string);

  SpecifierCase specifier_case() const;
  // @@protoc_insertion_point(class_scope:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource)
 private:
  void set_has_filename();
  void set_has_inline_bytes();
  void set_has_inline_string();

  inline bool has_specifier() const;
  void clear_specifier();
  inline void clear_has_specifier();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union SpecifierUnion {
    SpecifierUnion() {}
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::google::protobuf::internal::ArenaStringPtr inline_bytes_;
    ::google::protobuf::internal::ArenaStringPtr inline_string_;
  } specifier_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_envoy_2fconfig_2ffilter_2fhttp_2fjwt_5fauth_2fv2alpha1_2fconfig_2eproto::TableStruct;
  friend void ::protobuf_envoy_2fconfig_2ffilter_2fhttp_2fjwt_5fauth_2fv2alpha1_2fconfig_2eproto::InitDefaultsDataSourceImpl();
};
// -------------------------------------------------------------------

class JwtRule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule) */ {
 public:
  JwtRule();
  virtual ~JwtRule();

  JwtRule(const JwtRule& from);

  inline JwtRule& operator=(const JwtRule& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JwtRule(JwtRule&& from) noexcept
    : JwtRule() {
    *this = ::std::move(from);
  }

  inline JwtRule& operator=(JwtRule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JwtRule& default_instance();

  enum JwksSourceSpecifierCase {
    kRemoteJwks = 3,
    kLocalJwks = 4,
    JWKS_SOURCE_SPECIFIER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JwtRule* internal_default_instance() {
    return reinterpret_cast<const JwtRule*>(
               &_JwtRule_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(JwtRule* other);
  friend void swap(JwtRule& a, JwtRule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JwtRule* New() const PROTOBUF_FINAL { return New(NULL); }

  JwtRule* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JwtRule& from);
  void MergeFrom(const JwtRule& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JwtRule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string audiences = 2;
  int audiences_size() const;
  void clear_audiences();
  static const int kAudiencesFieldNumber = 2;
  const ::std::string& audiences(int index) const;
  ::std::string* mutable_audiences(int index);
  void set_audiences(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_audiences(int index, ::std::string&& value);
  #endif
  void set_audiences(int index, const char* value);
  void set_audiences(int index, const char* value, size_t size);
  ::std::string* add_audiences();
  void add_audiences(const ::std::string& value);
  #if LANG_CXX11
  void add_audiences(::std::string&& value);
  #endif
  void add_audiences(const char* value);
  void add_audiences(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& audiences() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_audiences();

  // repeated .istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtHeader from_headers = 6;
  int from_headers_size() const;
  void clear_from_headers();
  static const int kFromHeadersFieldNumber = 6;
  const ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::JwtHeader& from_headers(int index) const;
  ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::JwtHeader* mutable_from_headers(int index);
  ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::JwtHeader* add_from_headers();
  ::google::protobuf::RepeatedPtrField< ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::JwtHeader >*
      mutable_from_headers();
  const ::google::protobuf::RepeatedPtrField< ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::JwtHeader >&
      from_headers() const;

  // repeated string from_params = 7;
  int from_params_size() const;
  void clear_from_params();
  static const int kFromParamsFieldNumber = 7;
  const ::std::string& from_params(int index) const;
  ::std::string* mutable_from_params(int index);
  void set_from_params(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_from_params(int index, ::std::string&& value);
  #endif
  void set_from_params(int index, const char* value);
  void set_from_params(int index, const char* value, size_t size);
  ::std::string* add_from_params();
  void add_from_params(const ::std::string& value);
  #if LANG_CXX11
  void add_from_params(::std::string&& value);
  #endif
  void add_from_params(const char* value);
  void add_from_params(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& from_params() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_from_params();

  // string issuer = 1;
  void clear_issuer();
  static const int kIssuerFieldNumber = 1;
  const ::std::string& issuer() const;
  void set_issuer(const ::std::string& value);
  #if LANG_CXX11
  void set_issuer(::std::string&& value);
  #endif
  void set_issuer(const char* value);
  void set_issuer(const char* value, size_t size);
  ::std::string* mutable_issuer();
  ::std::string* release_issuer();
  void set_allocated_issuer(::std::string* issuer);

  // string forward_payload_header = 8;
  void clear_forward_payload_header();
  static const int kForwardPayloadHeaderFieldNumber = 8;
  const ::std::string& forward_payload_header() const;
  void set_forward_payload_header(const ::std::string& value);
  #if LANG_CXX11
  void set_forward_payload_header(::std::string&& value);
  #endif
  void set_forward_payload_header(const char* value);
  void set_forward_payload_header(const char* value, size_t size);
  ::std::string* mutable_forward_payload_header();
  ::std::string* release_forward_payload_header();
  void set_allocated_forward_payload_header(::std::string* forward_payload_header);

  // bool forward = 5;
  void clear_forward();
  static const int kForwardFieldNumber = 5;
  bool forward() const;
  void set_forward(bool value);

  // .istio.envoy.config.filter.http.jwt_auth.v2alpha1.RemoteJwks remote_jwks = 3;
  bool has_remote_jwks() const;
  void clear_remote_jwks();
  static const int kRemoteJwksFieldNumber = 3;
  const ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::RemoteJwks& remote_jwks() const;
  ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::RemoteJwks* release_remote_jwks();
  ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::RemoteJwks* mutable_remote_jwks();
  void set_allocated_remote_jwks(::istio::envoy::config::filter::http::jwt_auth::v2alpha1::RemoteJwks* remote_jwks);

  // .istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource local_jwks = 4;
  bool has_local_jwks() const;
  void clear_local_jwks();
  static const int kLocalJwksFieldNumber = 4;
  const ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::DataSource& local_jwks() const;
  ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::DataSource* release_local_jwks();
  ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::DataSource* mutable_local_jwks();
  void set_allocated_local_jwks(::istio::envoy::config::filter::http::jwt_auth::v2alpha1::DataSource* local_jwks);

  JwksSourceSpecifierCase jwks_source_specifier_case() const;
  // @@protoc_insertion_point(class_scope:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule)
 private:
  void set_has_remote_jwks();
  void set_has_local_jwks();

  inline bool has_jwks_source_specifier() const;
  void clear_jwks_source_specifier();
  inline void clear_has_jwks_source_specifier();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> audiences_;
  ::google::protobuf::RepeatedPtrField< ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::JwtHeader > from_headers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> from_params_;
  ::google::protobuf::internal::ArenaStringPtr issuer_;
  ::google::protobuf::internal::ArenaStringPtr forward_payload_header_;
  bool forward_;
  union JwksSourceSpecifierUnion {
    JwksSourceSpecifierUnion() {}
    ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::RemoteJwks* remote_jwks_;
    ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::DataSource* local_jwks_;
  } jwks_source_specifier_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_envoy_2fconfig_2ffilter_2fhttp_2fjwt_5fauth_2fv2alpha1_2fconfig_2eproto::TableStruct;
  friend void ::protobuf_envoy_2fconfig_2ffilter_2fhttp_2fjwt_5fauth_2fv2alpha1_2fconfig_2eproto::InitDefaultsJwtRuleImpl();
};
// -------------------------------------------------------------------

class RemoteJwks : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.envoy.config.filter.http.jwt_auth.v2alpha1.RemoteJwks) */ {
 public:
  RemoteJwks();
  virtual ~RemoteJwks();

  RemoteJwks(const RemoteJwks& from);

  inline RemoteJwks& operator=(const RemoteJwks& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoteJwks(RemoteJwks&& from) noexcept
    : RemoteJwks() {
    *this = ::std::move(from);
  }

  inline RemoteJwks& operator=(RemoteJwks&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoteJwks& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteJwks* internal_default_instance() {
    return reinterpret_cast<const RemoteJwks*>(
               &_RemoteJwks_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(RemoteJwks* other);
  friend void swap(RemoteJwks& a, RemoteJwks& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoteJwks* New() const PROTOBUF_FINAL { return New(NULL); }

  RemoteJwks* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RemoteJwks& from);
  void MergeFrom(const RemoteJwks& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RemoteJwks* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri http_uri = 1;
  bool has_http_uri() const;
  void clear_http_uri();
  static const int kHttpUriFieldNumber = 1;
  const ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::HttpUri& http_uri() const;
  ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::HttpUri* release_http_uri();
  ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::HttpUri* mutable_http_uri();
  void set_allocated_http_uri(::istio::envoy::config::filter::http::jwt_auth::v2alpha1::HttpUri* http_uri);

  // .google.protobuf.Duration cache_duration = 2;
  bool has_cache_duration() const;
  void clear_cache_duration();
  static const int kCacheDurationFieldNumber = 2;
  const ::google::protobuf::Duration& cache_duration() const;
  ::google::protobuf::Duration* release_cache_duration();
  ::google::protobuf::Duration* mutable_cache_duration();
  void set_allocated_cache_duration(::google::protobuf::Duration* cache_duration);

  // @@protoc_insertion_point(class_scope:istio.envoy.config.filter.http.jwt_auth.v2alpha1.RemoteJwks)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::HttpUri* http_uri_;
  ::google::protobuf::Duration* cache_duration_;
  mutable int _cached_size_;
  friend struct ::protobuf_envoy_2fconfig_2ffilter_2fhttp_2fjwt_5fauth_2fv2alpha1_2fconfig_2eproto::TableStruct;
  friend void ::protobuf_envoy_2fconfig_2ffilter_2fhttp_2fjwt_5fauth_2fv2alpha1_2fconfig_2eproto::InitDefaultsRemoteJwksImpl();
};
// -------------------------------------------------------------------

class JwtHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtHeader) */ {
 public:
  JwtHeader();
  virtual ~JwtHeader();

  JwtHeader(const JwtHeader& from);

  inline JwtHeader& operator=(const JwtHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JwtHeader(JwtHeader&& from) noexcept
    : JwtHeader() {
    *this = ::std::move(from);
  }

  inline JwtHeader& operator=(JwtHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JwtHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JwtHeader* internal_default_instance() {
    return reinterpret_cast<const JwtHeader*>(
               &_JwtHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(JwtHeader* other);
  friend void swap(JwtHeader& a, JwtHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JwtHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  JwtHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JwtHeader& from);
  void MergeFrom(const JwtHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JwtHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string value_prefix = 2;
  void clear_value_prefix();
  static const int kValuePrefixFieldNumber = 2;
  const ::std::string& value_prefix() const;
  void set_value_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_value_prefix(::std::string&& value);
  #endif
  void set_value_prefix(const char* value);
  void set_value_prefix(const char* value, size_t size);
  ::std::string* mutable_value_prefix();
  ::std::string* release_value_prefix();
  void set_allocated_value_prefix(::std::string* value_prefix);

  // @@protoc_insertion_point(class_scope:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_prefix_;
  mutable int _cached_size_;
  friend struct ::protobuf_envoy_2fconfig_2ffilter_2fhttp_2fjwt_5fauth_2fv2alpha1_2fconfig_2eproto::TableStruct;
  friend void ::protobuf_envoy_2fconfig_2ffilter_2fhttp_2fjwt_5fauth_2fv2alpha1_2fconfig_2eproto::InitDefaultsJwtHeaderImpl();
};
// -------------------------------------------------------------------

class JwtAuthentication : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtAuthentication) */ {
 public:
  JwtAuthentication();
  virtual ~JwtAuthentication();

  JwtAuthentication(const JwtAuthentication& from);

  inline JwtAuthentication& operator=(const JwtAuthentication& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JwtAuthentication(JwtAuthentication&& from) noexcept
    : JwtAuthentication() {
    *this = ::std::move(from);
  }

  inline JwtAuthentication& operator=(JwtAuthentication&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JwtAuthentication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JwtAuthentication* internal_default_instance() {
    return reinterpret_cast<const JwtAuthentication*>(
               &_JwtAuthentication_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(JwtAuthentication* other);
  friend void swap(JwtAuthentication& a, JwtAuthentication& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JwtAuthentication* New() const PROTOBUF_FINAL { return New(NULL); }

  JwtAuthentication* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JwtAuthentication& from);
  void MergeFrom(const JwtAuthentication& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JwtAuthentication* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule rules = 1;
  int rules_size() const;
  void clear_rules();
  static const int kRulesFieldNumber = 1;
  const ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::JwtRule& rules(int index) const;
  ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::JwtRule* mutable_rules(int index);
  ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::JwtRule* add_rules();
  ::google::protobuf::RepeatedPtrField< ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::JwtRule >*
      mutable_rules();
  const ::google::protobuf::RepeatedPtrField< ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::JwtRule >&
      rules() const;

  // bool allow_missing_or_failed = 2;
  void clear_allow_missing_or_failed();
  static const int kAllowMissingOrFailedFieldNumber = 2;
  bool allow_missing_or_failed() const;
  void set_allow_missing_or_failed(bool value);

  // @@protoc_insertion_point(class_scope:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtAuthentication)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::JwtRule > rules_;
  bool allow_missing_or_failed_;
  mutable int _cached_size_;
  friend struct ::protobuf_envoy_2fconfig_2ffilter_2fhttp_2fjwt_5fauth_2fv2alpha1_2fconfig_2eproto::TableStruct;
  friend void ::protobuf_envoy_2fconfig_2ffilter_2fhttp_2fjwt_5fauth_2fv2alpha1_2fconfig_2eproto::InitDefaultsJwtAuthenticationImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HttpUri

// string uri = 1;
inline void HttpUri::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HttpUri::uri() const {
  // @@protoc_insertion_point(field_get:istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri.uri)
  return uri_.GetNoArena();
}
inline void HttpUri::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri.uri)
}
#if LANG_CXX11
inline void HttpUri::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri.uri)
}
#endif
inline void HttpUri::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri.uri)
}
inline void HttpUri::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri.uri)
}
inline ::std::string* HttpUri::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpUri::release_uri() {
  // @@protoc_insertion_point(field_release:istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpUri::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri.uri)
}

// string cluster = 2;
inline bool HttpUri::has_cluster() const {
  return http_upstream_type_case() == kCluster;
}
inline void HttpUri::set_has_cluster() {
  _oneof_case_[0] = kCluster;
}
inline void HttpUri::clear_cluster() {
  if (has_cluster()) {
    http_upstream_type_.cluster_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_http_upstream_type();
  }
}
inline const ::std::string& HttpUri::cluster() const {
  // @@protoc_insertion_point(field_get:istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri.cluster)
  if (has_cluster()) {
    return http_upstream_type_.cluster_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void HttpUri::set_cluster(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri.cluster)
  if (!has_cluster()) {
    clear_http_upstream_type();
    set_has_cluster();
    http_upstream_type_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  http_upstream_type_.cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri.cluster)
}
#if LANG_CXX11
inline void HttpUri::set_cluster(::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri.cluster)
  if (!has_cluster()) {
    clear_http_upstream_type();
    set_has_cluster();
    http_upstream_type_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  http_upstream_type_.cluster_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri.cluster)
}
#endif
inline void HttpUri::set_cluster(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_cluster()) {
    clear_http_upstream_type();
    set_has_cluster();
    http_upstream_type_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  http_upstream_type_.cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri.cluster)
}
inline void HttpUri::set_cluster(const char* value, size_t size) {
  if (!has_cluster()) {
    clear_http_upstream_type();
    set_has_cluster();
    http_upstream_type_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  http_upstream_type_.cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri.cluster)
}
inline ::std::string* HttpUri::mutable_cluster() {
  if (!has_cluster()) {
    clear_http_upstream_type();
    set_has_cluster();
    http_upstream_type_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri.cluster)
  return http_upstream_type_.cluster_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpUri::release_cluster() {
  // @@protoc_insertion_point(field_release:istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri.cluster)
  if (has_cluster()) {
    clear_has_http_upstream_type();
    return http_upstream_type_.cluster_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void HttpUri::set_allocated_cluster(::std::string* cluster) {
  if (!has_cluster()) {
    http_upstream_type_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_http_upstream_type();
  if (cluster != NULL) {
    set_has_cluster();
    http_upstream_type_.cluster_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        cluster);
  }
  // @@protoc_insertion_point(field_set_allocated:istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri.cluster)
}

// .google.protobuf.Duration timeout = 3;
inline bool HttpUri::has_timeout() const {
  return this != internal_default_instance() && timeout_ != NULL;
}
inline const ::google::protobuf::Duration& HttpUri::timeout() const {
  const ::google::protobuf::Duration* p = timeout_;
  // @@protoc_insertion_point(field_get:istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri.timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* HttpUri::release_timeout() {
  // @@protoc_insertion_point(field_release:istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri.timeout)
  
  ::google::protobuf::Duration* temp = timeout_;
  timeout_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* HttpUri::mutable_timeout() {
  
  if (timeout_ == NULL) {
    timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri.timeout)
  return timeout_;
}
inline void HttpUri::set_allocated_timeout(::google::protobuf::Duration* timeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timeout_);
  }
  if (timeout) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(timeout)->GetArena();
    if (message_arena != submessage_arena) {
      timeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timeout, submessage_arena);
    }
    
  } else {
    
  }
  timeout_ = timeout;
  // @@protoc_insertion_point(field_set_allocated:istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri.timeout)
}

inline bool HttpUri::has_http_upstream_type() const {
  return http_upstream_type_case() != HTTP_UPSTREAM_TYPE_NOT_SET;
}
inline void HttpUri::clear_has_http_upstream_type() {
  _oneof_case_[0] = HTTP_UPSTREAM_TYPE_NOT_SET;
}
inline HttpUri::HttpUpstreamTypeCase HttpUri::http_upstream_type_case() const {
  return HttpUri::HttpUpstreamTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DataSource

// string filename = 1;
inline bool DataSource::has_filename() const {
  return specifier_case() == kFilename;
}
inline void DataSource::set_has_filename() {
  _oneof_case_[0] = kFilename;
}
inline void DataSource::clear_filename() {
  if (has_filename()) {
    specifier_.filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_specifier();
  }
}
inline const ::std::string& DataSource::filename() const {
  // @@protoc_insertion_point(field_get:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.filename)
  if (has_filename()) {
    return specifier_.filename_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void DataSource::set_filename(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.filename)
  if (!has_filename()) {
    clear_specifier();
    set_has_filename();
    specifier_.filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.filename)
}
#if LANG_CXX11
inline void DataSource::set_filename(::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.filename)
  if (!has_filename()) {
    clear_specifier();
    set_has_filename();
    specifier_.filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.filename)
}
#endif
inline void DataSource::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_filename()) {
    clear_specifier();
    set_has_filename();
    specifier_.filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.filename)
}
inline void DataSource::set_filename(const char* value, size_t size) {
  if (!has_filename()) {
    clear_specifier();
    set_has_filename();
    specifier_.filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.filename)
}
inline ::std::string* DataSource::mutable_filename() {
  if (!has_filename()) {
    clear_specifier();
    set_has_filename();
    specifier_.filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.filename)
  return specifier_.filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSource::release_filename() {
  // @@protoc_insertion_point(field_release:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.filename)
  if (has_filename()) {
    clear_has_specifier();
    return specifier_.filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void DataSource::set_allocated_filename(::std::string* filename) {
  if (!has_filename()) {
    specifier_.filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_specifier();
  if (filename != NULL) {
    set_has_filename();
    specifier_.filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        filename);
  }
  // @@protoc_insertion_point(field_set_allocated:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.filename)
}

// bytes inline_bytes = 2;
inline bool DataSource::has_inline_bytes() const {
  return specifier_case() == kInlineBytes;
}
inline void DataSource::set_has_inline_bytes() {
  _oneof_case_[0] = kInlineBytes;
}
inline void DataSource::clear_inline_bytes() {
  if (has_inline_bytes()) {
    specifier_.inline_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_specifier();
  }
}
inline const ::std::string& DataSource::inline_bytes() const {
  // @@protoc_insertion_point(field_get:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.inline_bytes)
  if (has_inline_bytes()) {
    return specifier_.inline_bytes_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void DataSource::set_inline_bytes(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.inline_bytes)
  if (!has_inline_bytes()) {
    clear_specifier();
    set_has_inline_bytes();
    specifier_.inline_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.inline_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.inline_bytes)
}
#if LANG_CXX11
inline void DataSource::set_inline_bytes(::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.inline_bytes)
  if (!has_inline_bytes()) {
    clear_specifier();
    set_has_inline_bytes();
    specifier_.inline_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.inline_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.inline_bytes)
}
#endif
inline void DataSource::set_inline_bytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_inline_bytes()) {
    clear_specifier();
    set_has_inline_bytes();
    specifier_.inline_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.inline_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.inline_bytes)
}
inline void DataSource::set_inline_bytes(const void* value, size_t size) {
  if (!has_inline_bytes()) {
    clear_specifier();
    set_has_inline_bytes();
    specifier_.inline_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.inline_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.inline_bytes)
}
inline ::std::string* DataSource::mutable_inline_bytes() {
  if (!has_inline_bytes()) {
    clear_specifier();
    set_has_inline_bytes();
    specifier_.inline_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.inline_bytes)
  return specifier_.inline_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSource::release_inline_bytes() {
  // @@protoc_insertion_point(field_release:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.inline_bytes)
  if (has_inline_bytes()) {
    clear_has_specifier();
    return specifier_.inline_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void DataSource::set_allocated_inline_bytes(::std::string* inline_bytes) {
  if (!has_inline_bytes()) {
    specifier_.inline_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_specifier();
  if (inline_bytes != NULL) {
    set_has_inline_bytes();
    specifier_.inline_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        inline_bytes);
  }
  // @@protoc_insertion_point(field_set_allocated:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.inline_bytes)
}

// string inline_string = 3;
inline bool DataSource::has_inline_string() const {
  return specifier_case() == kInlineString;
}
inline void DataSource::set_has_inline_string() {
  _oneof_case_[0] = kInlineString;
}
inline void DataSource::clear_inline_string() {
  if (has_inline_string()) {
    specifier_.inline_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_specifier();
  }
}
inline const ::std::string& DataSource::inline_string() const {
  // @@protoc_insertion_point(field_get:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.inline_string)
  if (has_inline_string()) {
    return specifier_.inline_string_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void DataSource::set_inline_string(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.inline_string)
  if (!has_inline_string()) {
    clear_specifier();
    set_has_inline_string();
    specifier_.inline_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.inline_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.inline_string)
}
#if LANG_CXX11
inline void DataSource::set_inline_string(::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.inline_string)
  if (!has_inline_string()) {
    clear_specifier();
    set_has_inline_string();
    specifier_.inline_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.inline_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.inline_string)
}
#endif
inline void DataSource::set_inline_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_inline_string()) {
    clear_specifier();
    set_has_inline_string();
    specifier_.inline_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.inline_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.inline_string)
}
inline void DataSource::set_inline_string(const char* value, size_t size) {
  if (!has_inline_string()) {
    clear_specifier();
    set_has_inline_string();
    specifier_.inline_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.inline_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.inline_string)
}
inline ::std::string* DataSource::mutable_inline_string() {
  if (!has_inline_string()) {
    clear_specifier();
    set_has_inline_string();
    specifier_.inline_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.inline_string)
  return specifier_.inline_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSource::release_inline_string() {
  // @@protoc_insertion_point(field_release:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.inline_string)
  if (has_inline_string()) {
    clear_has_specifier();
    return specifier_.inline_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void DataSource::set_allocated_inline_string(::std::string* inline_string) {
  if (!has_inline_string()) {
    specifier_.inline_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_specifier();
  if (inline_string != NULL) {
    set_has_inline_string();
    specifier_.inline_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        inline_string);
  }
  // @@protoc_insertion_point(field_set_allocated:istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource.inline_string)
}

inline bool DataSource::has_specifier() const {
  return specifier_case() != SPECIFIER_NOT_SET;
}
inline void DataSource::clear_has_specifier() {
  _oneof_case_[0] = SPECIFIER_NOT_SET;
}
inline DataSource::SpecifierCase DataSource::specifier_case() const {
  return DataSource::SpecifierCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// JwtRule

// string issuer = 1;
inline void JwtRule::clear_issuer() {
  issuer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JwtRule::issuer() const {
  // @@protoc_insertion_point(field_get:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.issuer)
  return issuer_.GetNoArena();
}
inline void JwtRule::set_issuer(const ::std::string& value) {
  
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.issuer)
}
#if LANG_CXX11
inline void JwtRule::set_issuer(::std::string&& value) {
  
  issuer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.issuer)
}
#endif
inline void JwtRule::set_issuer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.issuer)
}
inline void JwtRule::set_issuer(const char* value, size_t size) {
  
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.issuer)
}
inline ::std::string* JwtRule::mutable_issuer() {
  
  // @@protoc_insertion_point(field_mutable:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.issuer)
  return issuer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JwtRule::release_issuer() {
  // @@protoc_insertion_point(field_release:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.issuer)
  
  return issuer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JwtRule::set_allocated_issuer(::std::string* issuer) {
  if (issuer != NULL) {
    
  } else {
    
  }
  issuer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuer);
  // @@protoc_insertion_point(field_set_allocated:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.issuer)
}

// repeated string audiences = 2;
inline int JwtRule::audiences_size() const {
  return audiences_.size();
}
inline void JwtRule::clear_audiences() {
  audiences_.Clear();
}
inline const ::std::string& JwtRule::audiences(int index) const {
  // @@protoc_insertion_point(field_get:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.audiences)
  return audiences_.Get(index);
}
inline ::std::string* JwtRule::mutable_audiences(int index) {
  // @@protoc_insertion_point(field_mutable:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.audiences)
  return audiences_.Mutable(index);
}
inline void JwtRule::set_audiences(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.audiences)
  audiences_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void JwtRule::set_audiences(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.audiences)
  audiences_.Mutable(index)->assign(std::move(value));
}
#endif
inline void JwtRule::set_audiences(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  audiences_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.audiences)
}
inline void JwtRule::set_audiences(int index, const char* value, size_t size) {
  audiences_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.audiences)
}
inline ::std::string* JwtRule::add_audiences() {
  // @@protoc_insertion_point(field_add_mutable:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.audiences)
  return audiences_.Add();
}
inline void JwtRule::add_audiences(const ::std::string& value) {
  audiences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.audiences)
}
#if LANG_CXX11
inline void JwtRule::add_audiences(::std::string&& value) {
  audiences_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.audiences)
}
#endif
inline void JwtRule::add_audiences(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  audiences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.audiences)
}
inline void JwtRule::add_audiences(const char* value, size_t size) {
  audiences_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.audiences)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
JwtRule::audiences() const {
  // @@protoc_insertion_point(field_list:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.audiences)
  return audiences_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
JwtRule::mutable_audiences() {
  // @@protoc_insertion_point(field_mutable_list:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.audiences)
  return &audiences_;
}

// .istio.envoy.config.filter.http.jwt_auth.v2alpha1.RemoteJwks remote_jwks = 3;
inline bool JwtRule::has_remote_jwks() const {
  return jwks_source_specifier_case() == kRemoteJwks;
}
inline void JwtRule::set_has_remote_jwks() {
  _oneof_case_[0] = kRemoteJwks;
}
inline void JwtRule::clear_remote_jwks() {
  if (has_remote_jwks()) {
    delete jwks_source_specifier_.remote_jwks_;
    clear_has_jwks_source_specifier();
  }
}
inline ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::RemoteJwks* JwtRule::release_remote_jwks() {
  // @@protoc_insertion_point(field_release:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.remote_jwks)
  if (has_remote_jwks()) {
    clear_has_jwks_source_specifier();
      ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::RemoteJwks* temp = jwks_source_specifier_.remote_jwks_;
    jwks_source_specifier_.remote_jwks_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::RemoteJwks& JwtRule::remote_jwks() const {
  // @@protoc_insertion_point(field_get:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.remote_jwks)
  return has_remote_jwks()
      ? *jwks_source_specifier_.remote_jwks_
      : *reinterpret_cast< ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::RemoteJwks*>(&::istio::envoy::config::filter::http::jwt_auth::v2alpha1::_RemoteJwks_default_instance_);
}
inline ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::RemoteJwks* JwtRule::mutable_remote_jwks() {
  if (!has_remote_jwks()) {
    clear_jwks_source_specifier();
    set_has_remote_jwks();
    jwks_source_specifier_.remote_jwks_ = new ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::RemoteJwks;
  }
  // @@protoc_insertion_point(field_mutable:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.remote_jwks)
  return jwks_source_specifier_.remote_jwks_;
}

// .istio.envoy.config.filter.http.jwt_auth.v2alpha1.DataSource local_jwks = 4;
inline bool JwtRule::has_local_jwks() const {
  return jwks_source_specifier_case() == kLocalJwks;
}
inline void JwtRule::set_has_local_jwks() {
  _oneof_case_[0] = kLocalJwks;
}
inline void JwtRule::clear_local_jwks() {
  if (has_local_jwks()) {
    delete jwks_source_specifier_.local_jwks_;
    clear_has_jwks_source_specifier();
  }
}
inline ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::DataSource* JwtRule::release_local_jwks() {
  // @@protoc_insertion_point(field_release:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.local_jwks)
  if (has_local_jwks()) {
    clear_has_jwks_source_specifier();
      ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::DataSource* temp = jwks_source_specifier_.local_jwks_;
    jwks_source_specifier_.local_jwks_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::DataSource& JwtRule::local_jwks() const {
  // @@protoc_insertion_point(field_get:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.local_jwks)
  return has_local_jwks()
      ? *jwks_source_specifier_.local_jwks_
      : *reinterpret_cast< ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::DataSource*>(&::istio::envoy::config::filter::http::jwt_auth::v2alpha1::_DataSource_default_instance_);
}
inline ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::DataSource* JwtRule::mutable_local_jwks() {
  if (!has_local_jwks()) {
    clear_jwks_source_specifier();
    set_has_local_jwks();
    jwks_source_specifier_.local_jwks_ = new ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::DataSource;
  }
  // @@protoc_insertion_point(field_mutable:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.local_jwks)
  return jwks_source_specifier_.local_jwks_;
}

// bool forward = 5;
inline void JwtRule::clear_forward() {
  forward_ = false;
}
inline bool JwtRule::forward() const {
  // @@protoc_insertion_point(field_get:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.forward)
  return forward_;
}
inline void JwtRule::set_forward(bool value) {
  
  forward_ = value;
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.forward)
}

// repeated .istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtHeader from_headers = 6;
inline int JwtRule::from_headers_size() const {
  return from_headers_.size();
}
inline void JwtRule::clear_from_headers() {
  from_headers_.Clear();
}
inline const ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::JwtHeader& JwtRule::from_headers(int index) const {
  // @@protoc_insertion_point(field_get:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.from_headers)
  return from_headers_.Get(index);
}
inline ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::JwtHeader* JwtRule::mutable_from_headers(int index) {
  // @@protoc_insertion_point(field_mutable:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.from_headers)
  return from_headers_.Mutable(index);
}
inline ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::JwtHeader* JwtRule::add_from_headers() {
  // @@protoc_insertion_point(field_add:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.from_headers)
  return from_headers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::JwtHeader >*
JwtRule::mutable_from_headers() {
  // @@protoc_insertion_point(field_mutable_list:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.from_headers)
  return &from_headers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::JwtHeader >&
JwtRule::from_headers() const {
  // @@protoc_insertion_point(field_list:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.from_headers)
  return from_headers_;
}

// repeated string from_params = 7;
inline int JwtRule::from_params_size() const {
  return from_params_.size();
}
inline void JwtRule::clear_from_params() {
  from_params_.Clear();
}
inline const ::std::string& JwtRule::from_params(int index) const {
  // @@protoc_insertion_point(field_get:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.from_params)
  return from_params_.Get(index);
}
inline ::std::string* JwtRule::mutable_from_params(int index) {
  // @@protoc_insertion_point(field_mutable:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.from_params)
  return from_params_.Mutable(index);
}
inline void JwtRule::set_from_params(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.from_params)
  from_params_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void JwtRule::set_from_params(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.from_params)
  from_params_.Mutable(index)->assign(std::move(value));
}
#endif
inline void JwtRule::set_from_params(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  from_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.from_params)
}
inline void JwtRule::set_from_params(int index, const char* value, size_t size) {
  from_params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.from_params)
}
inline ::std::string* JwtRule::add_from_params() {
  // @@protoc_insertion_point(field_add_mutable:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.from_params)
  return from_params_.Add();
}
inline void JwtRule::add_from_params(const ::std::string& value) {
  from_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.from_params)
}
#if LANG_CXX11
inline void JwtRule::add_from_params(::std::string&& value) {
  from_params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.from_params)
}
#endif
inline void JwtRule::add_from_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  from_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.from_params)
}
inline void JwtRule::add_from_params(const char* value, size_t size) {
  from_params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.from_params)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
JwtRule::from_params() const {
  // @@protoc_insertion_point(field_list:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.from_params)
  return from_params_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
JwtRule::mutable_from_params() {
  // @@protoc_insertion_point(field_mutable_list:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.from_params)
  return &from_params_;
}

// string forward_payload_header = 8;
inline void JwtRule::clear_forward_payload_header() {
  forward_payload_header_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JwtRule::forward_payload_header() const {
  // @@protoc_insertion_point(field_get:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.forward_payload_header)
  return forward_payload_header_.GetNoArena();
}
inline void JwtRule::set_forward_payload_header(const ::std::string& value) {
  
  forward_payload_header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.forward_payload_header)
}
#if LANG_CXX11
inline void JwtRule::set_forward_payload_header(::std::string&& value) {
  
  forward_payload_header_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.forward_payload_header)
}
#endif
inline void JwtRule::set_forward_payload_header(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  forward_payload_header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.forward_payload_header)
}
inline void JwtRule::set_forward_payload_header(const char* value, size_t size) {
  
  forward_payload_header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.forward_payload_header)
}
inline ::std::string* JwtRule::mutable_forward_payload_header() {
  
  // @@protoc_insertion_point(field_mutable:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.forward_payload_header)
  return forward_payload_header_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JwtRule::release_forward_payload_header() {
  // @@protoc_insertion_point(field_release:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.forward_payload_header)
  
  return forward_payload_header_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JwtRule::set_allocated_forward_payload_header(::std::string* forward_payload_header) {
  if (forward_payload_header != NULL) {
    
  } else {
    
  }
  forward_payload_header_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), forward_payload_header);
  // @@protoc_insertion_point(field_set_allocated:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule.forward_payload_header)
}

inline bool JwtRule::has_jwks_source_specifier() const {
  return jwks_source_specifier_case() != JWKS_SOURCE_SPECIFIER_NOT_SET;
}
inline void JwtRule::clear_has_jwks_source_specifier() {
  _oneof_case_[0] = JWKS_SOURCE_SPECIFIER_NOT_SET;
}
inline JwtRule::JwksSourceSpecifierCase JwtRule::jwks_source_specifier_case() const {
  return JwtRule::JwksSourceSpecifierCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RemoteJwks

// .istio.envoy.config.filter.http.jwt_auth.v2alpha1.HttpUri http_uri = 1;
inline bool RemoteJwks::has_http_uri() const {
  return this != internal_default_instance() && http_uri_ != NULL;
}
inline void RemoteJwks::clear_http_uri() {
  if (GetArenaNoVirtual() == NULL && http_uri_ != NULL) {
    delete http_uri_;
  }
  http_uri_ = NULL;
}
inline const ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::HttpUri& RemoteJwks::http_uri() const {
  const ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::HttpUri* p = http_uri_;
  // @@protoc_insertion_point(field_get:istio.envoy.config.filter.http.jwt_auth.v2alpha1.RemoteJwks.http_uri)
  return p != NULL ? *p : *reinterpret_cast<const ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::HttpUri*>(
      &::istio::envoy::config::filter::http::jwt_auth::v2alpha1::_HttpUri_default_instance_);
}
inline ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::HttpUri* RemoteJwks::release_http_uri() {
  // @@protoc_insertion_point(field_release:istio.envoy.config.filter.http.jwt_auth.v2alpha1.RemoteJwks.http_uri)
  
  ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::HttpUri* temp = http_uri_;
  http_uri_ = NULL;
  return temp;
}
inline ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::HttpUri* RemoteJwks::mutable_http_uri() {
  
  if (http_uri_ == NULL) {
    http_uri_ = new ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::HttpUri;
  }
  // @@protoc_insertion_point(field_mutable:istio.envoy.config.filter.http.jwt_auth.v2alpha1.RemoteJwks.http_uri)
  return http_uri_;
}
inline void RemoteJwks::set_allocated_http_uri(::istio::envoy::config::filter::http::jwt_auth::v2alpha1::HttpUri* http_uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete http_uri_;
  }
  if (http_uri) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      http_uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, http_uri, submessage_arena);
    }
    
  } else {
    
  }
  http_uri_ = http_uri;
  // @@protoc_insertion_point(field_set_allocated:istio.envoy.config.filter.http.jwt_auth.v2alpha1.RemoteJwks.http_uri)
}

// .google.protobuf.Duration cache_duration = 2;
inline bool RemoteJwks::has_cache_duration() const {
  return this != internal_default_instance() && cache_duration_ != NULL;
}
inline const ::google::protobuf::Duration& RemoteJwks::cache_duration() const {
  const ::google::protobuf::Duration* p = cache_duration_;
  // @@protoc_insertion_point(field_get:istio.envoy.config.filter.http.jwt_auth.v2alpha1.RemoteJwks.cache_duration)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* RemoteJwks::release_cache_duration() {
  // @@protoc_insertion_point(field_release:istio.envoy.config.filter.http.jwt_auth.v2alpha1.RemoteJwks.cache_duration)
  
  ::google::protobuf::Duration* temp = cache_duration_;
  cache_duration_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* RemoteJwks::mutable_cache_duration() {
  
  if (cache_duration_ == NULL) {
    cache_duration_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:istio.envoy.config.filter.http.jwt_auth.v2alpha1.RemoteJwks.cache_duration)
  return cache_duration_;
}
inline void RemoteJwks::set_allocated_cache_duration(::google::protobuf::Duration* cache_duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cache_duration_);
  }
  if (cache_duration) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(cache_duration)->GetArena();
    if (message_arena != submessage_arena) {
      cache_duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cache_duration, submessage_arena);
    }
    
  } else {
    
  }
  cache_duration_ = cache_duration;
  // @@protoc_insertion_point(field_set_allocated:istio.envoy.config.filter.http.jwt_auth.v2alpha1.RemoteJwks.cache_duration)
}

// -------------------------------------------------------------------

// JwtHeader

// string name = 1;
inline void JwtHeader::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JwtHeader::name() const {
  // @@protoc_insertion_point(field_get:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtHeader.name)
  return name_.GetNoArena();
}
inline void JwtHeader::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtHeader.name)
}
#if LANG_CXX11
inline void JwtHeader::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtHeader.name)
}
#endif
inline void JwtHeader::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtHeader.name)
}
inline void JwtHeader::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtHeader.name)
}
inline ::std::string* JwtHeader::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtHeader.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JwtHeader::release_name() {
  // @@protoc_insertion_point(field_release:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtHeader.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JwtHeader::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtHeader.name)
}

// string value_prefix = 2;
inline void JwtHeader::clear_value_prefix() {
  value_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JwtHeader::value_prefix() const {
  // @@protoc_insertion_point(field_get:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtHeader.value_prefix)
  return value_prefix_.GetNoArena();
}
inline void JwtHeader::set_value_prefix(const ::std::string& value) {
  
  value_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtHeader.value_prefix)
}
#if LANG_CXX11
inline void JwtHeader::set_value_prefix(::std::string&& value) {
  
  value_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtHeader.value_prefix)
}
#endif
inline void JwtHeader::set_value_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtHeader.value_prefix)
}
inline void JwtHeader::set_value_prefix(const char* value, size_t size) {
  
  value_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtHeader.value_prefix)
}
inline ::std::string* JwtHeader::mutable_value_prefix() {
  
  // @@protoc_insertion_point(field_mutable:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtHeader.value_prefix)
  return value_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JwtHeader::release_value_prefix() {
  // @@protoc_insertion_point(field_release:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtHeader.value_prefix)
  
  return value_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JwtHeader::set_allocated_value_prefix(::std::string* value_prefix) {
  if (value_prefix != NULL) {
    
  } else {
    
  }
  value_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value_prefix);
  // @@protoc_insertion_point(field_set_allocated:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtHeader.value_prefix)
}

// -------------------------------------------------------------------

// JwtAuthentication

// repeated .istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtRule rules = 1;
inline int JwtAuthentication::rules_size() const {
  return rules_.size();
}
inline void JwtAuthentication::clear_rules() {
  rules_.Clear();
}
inline const ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::JwtRule& JwtAuthentication::rules(int index) const {
  // @@protoc_insertion_point(field_get:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtAuthentication.rules)
  return rules_.Get(index);
}
inline ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::JwtRule* JwtAuthentication::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtAuthentication.rules)
  return rules_.Mutable(index);
}
inline ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::JwtRule* JwtAuthentication::add_rules() {
  // @@protoc_insertion_point(field_add:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtAuthentication.rules)
  return rules_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::JwtRule >*
JwtAuthentication::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtAuthentication.rules)
  return &rules_;
}
inline const ::google::protobuf::RepeatedPtrField< ::istio::envoy::config::filter::http::jwt_auth::v2alpha1::JwtRule >&
JwtAuthentication::rules() const {
  // @@protoc_insertion_point(field_list:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtAuthentication.rules)
  return rules_;
}

// bool allow_missing_or_failed = 2;
inline void JwtAuthentication::clear_allow_missing_or_failed() {
  allow_missing_or_failed_ = false;
}
inline bool JwtAuthentication::allow_missing_or_failed() const {
  // @@protoc_insertion_point(field_get:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtAuthentication.allow_missing_or_failed)
  return allow_missing_or_failed_;
}
inline void JwtAuthentication::set_allow_missing_or_failed(bool value) {
  
  allow_missing_or_failed_ = value;
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.http.jwt_auth.v2alpha1.JwtAuthentication.allow_missing_or_failed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2alpha1
}  // namespace jwt_auth
}  // namespace http
}  // namespace filter
}  // namespace config
}  // namespace envoy
}  // namespace istio

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_envoy_2fconfig_2ffilter_2fhttp_2fjwt_5fauth_2fv2alpha1_2fconfig_2eproto__INCLUDED
