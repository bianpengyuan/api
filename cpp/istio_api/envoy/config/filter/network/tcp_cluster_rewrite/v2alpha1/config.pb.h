// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/filter/network/tcp_cluster_rewrite/v2alpha1/config.proto

#ifndef PROTOBUF_envoy_2fconfig_2ffilter_2fnetwork_2ftcp_5fcluster_5frewrite_2fv2alpha1_2fconfig_2eproto__INCLUDED
#define PROTOBUF_envoy_2fconfig_2ffilter_2fnetwork_2ftcp_5fcluster_5frewrite_2fv2alpha1_2fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_envoy_2fconfig_2ffilter_2fnetwork_2ftcp_5fcluster_5frewrite_2fv2alpha1_2fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTcpClusterRewriteImpl();
void InitDefaultsTcpClusterRewrite();
inline void InitDefaults() {
  InitDefaultsTcpClusterRewrite();
}
}  // namespace protobuf_envoy_2fconfig_2ffilter_2fnetwork_2ftcp_5fcluster_5frewrite_2fv2alpha1_2fconfig_2eproto
namespace istio {
namespace envoy {
namespace config {
namespace filter {
namespace network {
namespace tcp_cluster_rewrite {
namespace v2alpha1 {
class TcpClusterRewrite;
class TcpClusterRewriteDefaultTypeInternal;
extern TcpClusterRewriteDefaultTypeInternal _TcpClusterRewrite_default_instance_;
}  // namespace v2alpha1
}  // namespace tcp_cluster_rewrite
}  // namespace network
}  // namespace filter
}  // namespace config
}  // namespace envoy
}  // namespace istio
namespace istio {
namespace envoy {
namespace config {
namespace filter {
namespace network {
namespace tcp_cluster_rewrite {
namespace v2alpha1 {

// ===================================================================

class TcpClusterRewrite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite) */ {
 public:
  TcpClusterRewrite();
  virtual ~TcpClusterRewrite();

  TcpClusterRewrite(const TcpClusterRewrite& from);

  inline TcpClusterRewrite& operator=(const TcpClusterRewrite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TcpClusterRewrite(TcpClusterRewrite&& from) noexcept
    : TcpClusterRewrite() {
    *this = ::std::move(from);
  }

  inline TcpClusterRewrite& operator=(TcpClusterRewrite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TcpClusterRewrite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TcpClusterRewrite* internal_default_instance() {
    return reinterpret_cast<const TcpClusterRewrite*>(
               &_TcpClusterRewrite_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TcpClusterRewrite* other);
  friend void swap(TcpClusterRewrite& a, TcpClusterRewrite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TcpClusterRewrite* New() const PROTOBUF_FINAL { return New(NULL); }

  TcpClusterRewrite* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TcpClusterRewrite& from);
  void MergeFrom(const TcpClusterRewrite& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TcpClusterRewrite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cluster_pattern = 1;
  void clear_cluster_pattern();
  static const int kClusterPatternFieldNumber = 1;
  const ::std::string& cluster_pattern() const;
  void set_cluster_pattern(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_pattern(::std::string&& value);
  #endif
  void set_cluster_pattern(const char* value);
  void set_cluster_pattern(const char* value, size_t size);
  ::std::string* mutable_cluster_pattern();
  ::std::string* release_cluster_pattern();
  void set_allocated_cluster_pattern(::std::string* cluster_pattern);

  // string cluster_replacement = 2;
  void clear_cluster_replacement();
  static const int kClusterReplacementFieldNumber = 2;
  const ::std::string& cluster_replacement() const;
  void set_cluster_replacement(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_replacement(::std::string&& value);
  #endif
  void set_cluster_replacement(const char* value);
  void set_cluster_replacement(const char* value, size_t size);
  ::std::string* mutable_cluster_replacement();
  ::std::string* release_cluster_replacement();
  void set_allocated_cluster_replacement(::std::string* cluster_replacement);

  // @@protoc_insertion_point(class_scope:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cluster_pattern_;
  ::google::protobuf::internal::ArenaStringPtr cluster_replacement_;
  mutable int _cached_size_;
  friend struct ::protobuf_envoy_2fconfig_2ffilter_2fnetwork_2ftcp_5fcluster_5frewrite_2fv2alpha1_2fconfig_2eproto::TableStruct;
  friend void ::protobuf_envoy_2fconfig_2ffilter_2fnetwork_2ftcp_5fcluster_5frewrite_2fv2alpha1_2fconfig_2eproto::InitDefaultsTcpClusterRewriteImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TcpClusterRewrite

// string cluster_pattern = 1;
inline void TcpClusterRewrite::clear_cluster_pattern() {
  cluster_pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TcpClusterRewrite::cluster_pattern() const {
  // @@protoc_insertion_point(field_get:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite.cluster_pattern)
  return cluster_pattern_.GetNoArena();
}
inline void TcpClusterRewrite::set_cluster_pattern(const ::std::string& value) {
  
  cluster_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite.cluster_pattern)
}
#if LANG_CXX11
inline void TcpClusterRewrite::set_cluster_pattern(::std::string&& value) {
  
  cluster_pattern_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite.cluster_pattern)
}
#endif
inline void TcpClusterRewrite::set_cluster_pattern(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite.cluster_pattern)
}
inline void TcpClusterRewrite::set_cluster_pattern(const char* value, size_t size) {
  
  cluster_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite.cluster_pattern)
}
inline ::std::string* TcpClusterRewrite::mutable_cluster_pattern() {
  
  // @@protoc_insertion_point(field_mutable:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite.cluster_pattern)
  return cluster_pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TcpClusterRewrite::release_cluster_pattern() {
  // @@protoc_insertion_point(field_release:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite.cluster_pattern)
  
  return cluster_pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TcpClusterRewrite::set_allocated_cluster_pattern(::std::string* cluster_pattern) {
  if (cluster_pattern != NULL) {
    
  } else {
    
  }
  cluster_pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_pattern);
  // @@protoc_insertion_point(field_set_allocated:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite.cluster_pattern)
}

// string cluster_replacement = 2;
inline void TcpClusterRewrite::clear_cluster_replacement() {
  cluster_replacement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TcpClusterRewrite::cluster_replacement() const {
  // @@protoc_insertion_point(field_get:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite.cluster_replacement)
  return cluster_replacement_.GetNoArena();
}
inline void TcpClusterRewrite::set_cluster_replacement(const ::std::string& value) {
  
  cluster_replacement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite.cluster_replacement)
}
#if LANG_CXX11
inline void TcpClusterRewrite::set_cluster_replacement(::std::string&& value) {
  
  cluster_replacement_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite.cluster_replacement)
}
#endif
inline void TcpClusterRewrite::set_cluster_replacement(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_replacement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite.cluster_replacement)
}
inline void TcpClusterRewrite::set_cluster_replacement(const char* value, size_t size) {
  
  cluster_replacement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite.cluster_replacement)
}
inline ::std::string* TcpClusterRewrite::mutable_cluster_replacement() {
  
  // @@protoc_insertion_point(field_mutable:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite.cluster_replacement)
  return cluster_replacement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TcpClusterRewrite::release_cluster_replacement() {
  // @@protoc_insertion_point(field_release:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite.cluster_replacement)
  
  return cluster_replacement_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TcpClusterRewrite::set_allocated_cluster_replacement(::std::string* cluster_replacement) {
  if (cluster_replacement != NULL) {
    
  } else {
    
  }
  cluster_replacement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_replacement);
  // @@protoc_insertion_point(field_set_allocated:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite.cluster_replacement)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2alpha1
}  // namespace tcp_cluster_rewrite
}  // namespace network
}  // namespace filter
}  // namespace config
}  // namespace envoy
}  // namespace istio

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_envoy_2fconfig_2ffilter_2fnetwork_2ftcp_5fcluster_5frewrite_2fv2alpha1_2fconfig_2eproto__INCLUDED
