// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/filter/network/tcp_cluster_rewrite/v2alpha1/config.proto

#include "envoy/config/filter/network/tcp_cluster_rewrite/v2alpha1/config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace istio {
namespace envoy {
namespace config {
namespace filter {
namespace network {
namespace tcp_cluster_rewrite {
namespace v2alpha1 {
class TcpClusterRewriteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TcpClusterRewrite>
      _instance;
} _TcpClusterRewrite_default_instance_;
}  // namespace v2alpha1
}  // namespace tcp_cluster_rewrite
}  // namespace network
}  // namespace filter
}  // namespace config
}  // namespace envoy
}  // namespace istio
namespace protobuf_envoy_2fconfig_2ffilter_2fnetwork_2ftcp_5fcluster_5frewrite_2fv2alpha1_2fconfig_2eproto {
void InitDefaultsTcpClusterRewriteImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::istio::envoy::config::filter::network::tcp_cluster_rewrite::v2alpha1::_TcpClusterRewrite_default_instance_;
    new (ptr) ::istio::envoy::config::filter::network::tcp_cluster_rewrite::v2alpha1::TcpClusterRewrite();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::istio::envoy::config::filter::network::tcp_cluster_rewrite::v2alpha1::TcpClusterRewrite::InitAsDefaultInstance();
}

void InitDefaultsTcpClusterRewrite() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTcpClusterRewriteImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::envoy::config::filter::network::tcp_cluster_rewrite::v2alpha1::TcpClusterRewrite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::envoy::config::filter::network::tcp_cluster_rewrite::v2alpha1::TcpClusterRewrite, cluster_pattern_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::istio::envoy::config::filter::network::tcp_cluster_rewrite::v2alpha1::TcpClusterRewrite, cluster_replacement_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::istio::envoy::config::filter::network::tcp_cluster_rewrite::v2alpha1::TcpClusterRewrite)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::istio::envoy::config::filter::network::tcp_cluster_rewrite::v2alpha1::_TcpClusterRewrite_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "envoy/config/filter/network/tcp_cluster_rewrite/v2alpha1/config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\nEenvoy/config/filter/network/tcp_cluste"
      "r_rewrite/v2alpha1/config.proto\022>istio.e"
      "nvoy.config.filter.network.tcp_cluster_r"
      "ewrite.v2alpha1\"I\n\021TcpClusterRewrite\022\027\n\017"
      "cluster_pattern\030\001 \001(\t\022\033\n\023cluster_replace"
      "ment\030\002 \001(\tBGZEistio.io/api/envoy/config/"
      "filter/network/tcp_cluster_rewrite/v2alp"
      "ha1b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 291);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "envoy/config/filter/network/tcp_cluster_rewrite/v2alpha1/config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_envoy_2fconfig_2ffilter_2fnetwork_2ftcp_5fcluster_5frewrite_2fv2alpha1_2fconfig_2eproto
namespace istio {
namespace envoy {
namespace config {
namespace filter {
namespace network {
namespace tcp_cluster_rewrite {
namespace v2alpha1 {

// ===================================================================

void TcpClusterRewrite::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TcpClusterRewrite::kClusterPatternFieldNumber;
const int TcpClusterRewrite::kClusterReplacementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TcpClusterRewrite::TcpClusterRewrite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_envoy_2fconfig_2ffilter_2fnetwork_2ftcp_5fcluster_5frewrite_2fv2alpha1_2fconfig_2eproto::InitDefaultsTcpClusterRewrite();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite)
}
TcpClusterRewrite::TcpClusterRewrite(const TcpClusterRewrite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_pattern().size() > 0) {
    cluster_pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_pattern_);
  }
  cluster_replacement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_replacement().size() > 0) {
    cluster_replacement_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_replacement_);
  }
  // @@protoc_insertion_point(copy_constructor:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite)
}

void TcpClusterRewrite::SharedCtor() {
  cluster_pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_replacement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TcpClusterRewrite::~TcpClusterRewrite() {
  // @@protoc_insertion_point(destructor:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite)
  SharedDtor();
}

void TcpClusterRewrite::SharedDtor() {
  cluster_pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_replacement_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TcpClusterRewrite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TcpClusterRewrite::descriptor() {
  ::protobuf_envoy_2fconfig_2ffilter_2fnetwork_2ftcp_5fcluster_5frewrite_2fv2alpha1_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_envoy_2fconfig_2ffilter_2fnetwork_2ftcp_5fcluster_5frewrite_2fv2alpha1_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TcpClusterRewrite& TcpClusterRewrite::default_instance() {
  ::protobuf_envoy_2fconfig_2ffilter_2fnetwork_2ftcp_5fcluster_5frewrite_2fv2alpha1_2fconfig_2eproto::InitDefaultsTcpClusterRewrite();
  return *internal_default_instance();
}

TcpClusterRewrite* TcpClusterRewrite::New(::google::protobuf::Arena* arena) const {
  TcpClusterRewrite* n = new TcpClusterRewrite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TcpClusterRewrite::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cluster_pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_replacement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool TcpClusterRewrite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cluster_pattern = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_pattern()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_pattern().data(), static_cast<int>(this->cluster_pattern().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite.cluster_pattern"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_replacement = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_replacement()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_replacement().data(), static_cast<int>(this->cluster_replacement().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite.cluster_replacement"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite)
  return false;
#undef DO_
}

void TcpClusterRewrite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cluster_pattern = 1;
  if (this->cluster_pattern().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_pattern().data(), static_cast<int>(this->cluster_pattern().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite.cluster_pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster_pattern(), output);
  }

  // string cluster_replacement = 2;
  if (this->cluster_replacement().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_replacement().data(), static_cast<int>(this->cluster_replacement().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite.cluster_replacement");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_replacement(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite)
}

::google::protobuf::uint8* TcpClusterRewrite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cluster_pattern = 1;
  if (this->cluster_pattern().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_pattern().data(), static_cast<int>(this->cluster_pattern().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite.cluster_pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster_pattern(), target);
  }

  // string cluster_replacement = 2;
  if (this->cluster_replacement().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_replacement().data(), static_cast<int>(this->cluster_replacement().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite.cluster_replacement");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_replacement(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite)
  return target;
}

size_t TcpClusterRewrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string cluster_pattern = 1;
  if (this->cluster_pattern().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_pattern());
  }

  // string cluster_replacement = 2;
  if (this->cluster_replacement().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_replacement());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TcpClusterRewrite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite)
  GOOGLE_DCHECK_NE(&from, this);
  const TcpClusterRewrite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TcpClusterRewrite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite)
    MergeFrom(*source);
  }
}

void TcpClusterRewrite::MergeFrom(const TcpClusterRewrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cluster_pattern().size() > 0) {

    cluster_pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_pattern_);
  }
  if (from.cluster_replacement().size() > 0) {

    cluster_replacement_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_replacement_);
  }
}

void TcpClusterRewrite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TcpClusterRewrite::CopyFrom(const TcpClusterRewrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.envoy.config.filter.network.tcp_cluster_rewrite.v2alpha1.TcpClusterRewrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TcpClusterRewrite::IsInitialized() const {
  return true;
}

void TcpClusterRewrite::Swap(TcpClusterRewrite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TcpClusterRewrite::InternalSwap(TcpClusterRewrite* other) {
  using std::swap;
  cluster_pattern_.Swap(&other->cluster_pattern_);
  cluster_replacement_.Swap(&other->cluster_replacement_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TcpClusterRewrite::GetMetadata() const {
  protobuf_envoy_2fconfig_2ffilter_2fnetwork_2ftcp_5fcluster_5frewrite_2fv2alpha1_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_envoy_2fconfig_2ffilter_2fnetwork_2ftcp_5fcluster_5frewrite_2fv2alpha1_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2alpha1
}  // namespace tcp_cluster_rewrite
}  // namespace network
}  // namespace filter
}  // namespace config
}  // namespace envoy
}  // namespace istio

// @@protoc_insertion_point(global_scope)
